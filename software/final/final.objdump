
final.elf:     file format elf32-littlenios2
final.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00012b38 memsz 0x00012b38 flags r-x
    LOAD off    0x00013b58 vaddr 0x00012b58 paddr 0x00014644 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00016130 vaddr 0x00016130 paddr 0x00016130 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011f10  000001bc  000001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a8c  000120cc  000120cc  000130cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  00012b58  00014644  00013b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00016130  00016130  00016130  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00016290  00016290  00015644  2**0
                  CONTENTS
  7 .sram         00000000  08200000  08200000  00015644  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00015644  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000d08  00000000  00000000  00015668  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023682  00000000  00000000  00016370  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008fac  00000000  00000000  000399f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b2b6  00000000  00000000  0004299e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000020b4  00000000  00000000  0004dc54  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000031c2  00000000  00000000  0004fd08  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016d3e  00000000  00000000  00052eca  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00069c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001368  00000000  00000000  00069c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006e1f1  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0006e1f4  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006e1f7  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006e1f8  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006e1f9  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006e1fd  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006e201  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0006e205  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0006e20e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0006e217  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  0006e220  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000030  00000000  00000000  0006e22c  2**0
                  CONTENTS, READONLY
 30 .jdi          00003ce9  00000000  00000000  0006e25c  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000668ef  00000000  00000000  00071f45  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001bc l    d  .text	00000000 .text
000120cc l    d  .rodata	00000000 .rodata
00012b58 l    d  .rwdata	00000000 .rwdata
00016130 l    d  .bss	00000000 .bss
00016290 l    d  .sdram	00000000 .sdram
08200000 l    d  .sram	00000000 .sram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_bsp//obj/HAL/src/crt0.o
00000204 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00016130 l     O .bss	00000002 ctl_reg.3304
00016132 l     O .bss	00000002 no_device.3305
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000128a6 l     O .rodata	00000010 zeroes.4181
000128b6 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00005728 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000072a8 l     F .text	00000008 __fp_lock
000072b0 l     F .text	00000008 __fp_unlock
000072c4 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00012b58 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00012f9c l     O .rwdata	00000020 lc_ctype_charset
00012f7c l     O .rwdata	00000020 lc_message_charset
00012fbc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000128e8 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000a724 l     F .text	000000fc __sprint_r.part.0
00012a1c l     O .rodata	00000010 blanks.4125
00012a0c l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000d040 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000f76c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000f88c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000f8b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000f9b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000faac l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000fb90 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000fd6c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00014634 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000fff8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010140 l     F .text	00000038 alt_dev_reg
000135a4 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00010434 l     F .text	00000204 altera_avalon_jtag_uart_irq
00010638 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00010c58 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00011030 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000114dc l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00011614 l     F .text	00000050 alt_get_errno
00011664 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00009d64 g     F .text	00000074 _mprec_log10
00009e50 g     F .text	0000008c __any_on
0000c074 g     F .text	00000054 _isatty_r
000128f4 g     O .rodata	00000028 __mprec_tinytens
0000fcb4 g     F .text	00000078 alt_main
00003474 g     F .text	000000b8 _puts_r
00016190 g     O .bss	00000100 alt_irq
0000c0c8 g     F .text	0000005c _lseek_r
00014644 g       *ABS*	00000000 __flash_rwdata_start
0000e2d4 g     F .text	00000084 .hidden __eqdf2
00016290 g       *ABS*	00000000 __alt_heap_start
00003438 g     F .text	0000003c printf
0000c2f0 g     F .text	0000009c _wcrtomb_r
08200000 g       *ABS*	00000000 __alt_mem_sram
0000a61c g     F .text	0000005c __sseek
000075f8 g     F .text	00000010 __sinit
0000c180 g     F .text	00000154 __swbuf_r
00008070 g     F .text	0000007c _setlocale_r
00007464 g     F .text	00000064 __sfmoreglue
0000fd4c g     F .text	00000020 __malloc_unlock
00008cd0 g     F .text	0000015c memmove
000075e0 g     F .text	00000018 _cleanup
00008f50 g     F .text	000000a8 _Balloc
0000e358 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000c01c g     F .text	00000058 _fstat_r
0001614c g     O .bss	00000004 errno
0000a598 g     F .text	00000008 __seofread
00016154 g     O .bss	00000004 alt_argv
0001c604 g       *ABS*	00000000 _gp
0000ffc8 g     F .text	00000030 usleep
00013424 g     O .rwdata	00000180 alt_fd_list
00011a44 g     F .text	00000090 alt_find_dev
00008b98 g     F .text	00000138 memcpy
000072b8 g     F .text	0000000c _cleanup_r
0000f594 g     F .text	000000d0 .hidden __floatsidf
0001159c g     F .text	00000078 alt_io_redirect
0000e438 g     F .text	000000e0 .hidden __ltdf2
000120cc g       *ABS*	00000000 __DTOR_END__
0000352c g     F .text	00000014 puts
0000a47c g     F .text	00000074 __fpclassifyd
00009cc0 g     F .text	000000a4 __ratio
0000bb94 g     F .text	00000024 __vfiprintf_internal
00010834 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0000340c g     F .text	0000002c _printf_r
0000d15c g     F .text	00000008 .hidden __udivsi3
0000fa08 g     F .text	000000a4 isatty
00012944 g     O .rodata	000000c8 __mprec_tens
000080ec g     F .text	0000000c __locale_charset
00011c9c g     F .text	0000008c alt_icache_flush
00016148 g     O .bss	00000004 __malloc_top_pad
0001460c g     O .rwdata	00000004 __mb_cur_max
0000811c g     F .text	0000000c _localeconv_r
00009350 g     F .text	0000003c __i2b
00007a5c g     F .text	000004a4 __sfvwrite_r
0000a4f0 g     F .text	00000054 _sbrk_r
0000c124 g     F .text	0000005c _read_r
0001462c g     O .rwdata	00000004 alt_max_fd
0000bd2c g     F .text	00000100 _fclose_r
00007278 g     F .text	00000030 fflush
00016144 g     O .bss	00000004 __malloc_max_sbrked_mem
0000d16c g     F .text	0000089c .hidden __adddf3
00009a68 g     F .text	0000011c __b2d
0000cab0 g     F .text	00000590 .hidden __umoddi3
0000fbe0 g     F .text	000000d4 lseek
00014604 g     O .rwdata	00000004 _global_impure_ptr
00009edc g     F .text	000005a0 _realloc_r
00016290 g       *ABS*	00000000 __bss_end
000113ec g     F .text	000000f0 alt_iic_isr_register
00011920 g     F .text	00000104 alt_tick
0000c4f0 g     F .text	000005c0 .hidden __udivdi3
0000be40 g     F .text	00000184 _fputwc_r
0001291c g     O .rodata	00000028 __mprec_bigtens
00009134 g     F .text	00000104 __s2b
0000f664 g     F .text	000000a4 .hidden __floatunsidf
00009810 g     F .text	00000060 __mcmp
00007618 g     F .text	00000018 __fp_lock_all
000113a0 g     F .text	0000004c alt_ic_irq_enabled
00011888 g     F .text	00000098 alt_alarm_stop
0001615c g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000d0 alt_irq_handler
000133fc g     O .rwdata	00000028 alt_dev_null
00010fec g     F .text	00000044 alt_dcache_flush_all
00009238 g     F .text	00000068 __hi0bits
0000f50c g     F .text	00000088 .hidden __fixdfsi
00014644 g       *ABS*	00000000 __ram_rwdata_end
00014624 g     O .rwdata	00000008 alt_dev_list
00010048 g     F .text	000000f8 write
00012b58 g       *ABS*	00000000 __ram_rodata_end
0000f908 g     F .text	000000b0 fstat
0000e438 g     F .text	000000e0 .hidden __ledf2
00009588 g     F .text	00000140 __pow5mult
0000a838 g     F .text	0000135c ___vfiprintf_internal_r
0001613c g     O .bss	00000004 __nlocale_changed
0000d164 g     F .text	00000008 .hidden __umodsi3
00016290 g       *ABS*	00000000 end
00010370 g     F .text	000000c4 altera_avalon_jtag_uart_init
000120cc g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
00010ccc g     F .text	00000088 alt_avalon_timer_sc_init
0000f708 g     F .text	00000064 .hidden __clzsi2
00010a40 g     F .text	00000218 altera_avalon_jtag_uart_write
00007608 g     F .text	00000004 __sfp_lock_acquire
00008ab0 g     F .text	000000e8 memchr
000035d8 g     F .text	00001ffc ___vfprintf_internal_r
0000776c g     F .text	000002f0 _free_r
000080f8 g     F .text	00000010 __locale_mb_cur_max
00011f04 g     F .text	00000194 __call_exitprocs
00016138 g     O .bss	00000004 __mlocale_changed
00014610 g     O .rwdata	00000004 __malloc_sbrk_base
000001bc g     F .text	0000004c _start
00016160 g     O .bss	00000004 _alt_tick_rate
000096c8 g     F .text	00000148 __lshift
00016164 g     O .bss	00000004 _alt_nticks
0000fdbc g     F .text	000000fc read
000101ac g     F .text	00000060 alt_sys_init
00011df0 g     F .text	00000114 __register_exitproc
0000938c g     F .text	000001fc __multiply
000106e0 g     F .text	00000068 altera_avalon_jtag_uart_close
00012b58 g       *ABS*	00000000 __ram_rwdata_start
000120cc g       *ABS*	00000000 __ram_rodata_start
00016168 g     O .bss	00000028 __malloc_current_mallinfo
00009b84 g     F .text	0000013c __d2b
0001020c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00011be8 g     F .text	000000b4 alt_get_fd
00010e94 g     F .text	00000158 alt_busy_sleep
0000bc14 g     F .text	00000054 _close_r
00011d74 g     F .text	0000007c memcmp
000102cc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00016290 g       *ABS*	00000000 __alt_stack_base
0001031c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000055f8 g     F .text	00000130 __swsetup_r
0000da08 g     F .text	000008cc .hidden __divdf3
000074c8 g     F .text	00000118 __sfp
00009dd8 g     F .text	00000078 __copybits
00012ff4 g     O .rwdata	00000408 __malloc_av_
00007614 g     F .text	00000004 __sinit_lock_release
0000e518 g     F .text	00000724 .hidden __muldf3
0000a544 g     F .text	00000054 __sread
00011ad4 g     F .text	00000114 alt_find_file
00011080 g     F .text	000000a4 alt_dev_llist_insert
0000fd2c g     F .text	00000020 __malloc_lock
0000ff18 g     F .text	000000b0 sbrk
00007050 g     F .text	00000228 _fflush_r
0000bc68 g     F .text	000000c4 _calloc_r
00016130 g       *ABS*	00000000 __bss_start
00008e2c g     F .text	00000124 memset
0000025c g     F .text	00003070 main
00016158 g     O .bss	00000004 alt_envp
00016140 g     O .bss	00000004 __malloc_max_total_mem
0001026c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000c2d4 g     F .text	0000001c __swbuf
0000a678 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0000be2c g     F .text	00000014 fclose
00005928 g     F .text	00001728 _dtoa_r
00008308 g     F .text	000007a8 _malloc_r
0000c464 g     F .text	00000030 __ascii_wctomb
00014630 g     O .rwdata	00000004 alt_errno
00007f00 g     F .text	000000b8 _fwalk
0000d0ac g     F .text	00000054 .hidden __divsi3
00007648 g     F .text	00000124 _malloc_trim_r
000120cc g       *ABS*	00000000 __CTOR_END__
0000a680 g     F .text	000000a4 strcmp
000120cc g       *ABS*	00000000 __flash_rodata_start
000120cc g       *ABS*	00000000 __DTOR_LIST__
0000e2d4 g     F .text	00000084 .hidden __nedf2
00003314 g     F .text	0000003c UsbRead
00010178 g     F .text	00000034 alt_irq_init
0000feb8 g     F .text	00000060 alt_release_fd
00000208 g     F .text	00000054 maxmin
00012a2c g     O .rodata	00000100 .hidden __clz_tab
00016134 g     O .bss	00000004 _PathLocale
00011d28 g     F .text	00000014 atexit
0000bbb8 g     F .text	0000005c _write_r
00008128 g     F .text	0000001c setlocale
00014608 g     O .rwdata	00000004 _impure_ptr
00016150 g     O .bss	00000004 alt_argc
00011180 g     F .text	0000005c _do_dtors
00008114 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00009a08 g     F .text	00000060 __ulp
00007630 g     F .text	00000018 __fp_unlock_all
0001461c g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00008144 g     F .text	0000000c localeconv
0001120c g     F .text	00000050 alt_ic_isr_register
00014644 g       *ABS*	00000000 _edata
00016290 g       *ABS*	00000000 _end
000032cc g     F .text	00000048 UsbWrite
000001bc g       *ABS*	00000000 __ram_exceptions_end
00010748 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
000112fc g     F .text	000000a4 alt_ic_irq_disable
0000a5a0 g     F .text	0000007c __swrite
00014614 g     O .rwdata	00000004 __malloc_trim_threshold
00011a24 g     F .text	00000020 altera_nios2_qsys_irq_init
00008108 g     F .text	0000000c __locale_msgcharset
00011d3c g     F .text	00000038 exit
00007fb8 g     F .text	000000b8 _fwalk_reent
00009870 g     F .text	00000198 __mdiff
0000d100 g     F .text	0000005c .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000760c g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
00012098 g     F .text	00000034 _exit
00010d54 g     F .text	00000140 alt_alarm_start
00008150 g     F .text	000001b8 __smakebuf_r
00003540 g     F .text	00000098 strlen
00011730 g     F .text	00000158 open
0000e358 g     F .text	000000e0 .hidden __gedf2
00014618 g     O .rwdata	00000004 __wctomb
0000a820 g     F .text	00000018 __sprint_r
000111dc g     F .text	00000030 alt_icache_flush_all
00014638 g     O .rwdata	00000004 alt_priority_mask
0001125c g     F .text	000000a0 alt_ic_irq_enable
000055d4 g     F .text	00000024 __vfprintf_internal
0000c494 g     F .text	0000005c _wctomb_r
0000ec3c g     F .text	000008d0 .hidden __subdf3
000092a0 g     F .text	000000b0 __lo0bits
0001463c g     O .rwdata	00000008 alt_alarm_list
00011124 g     F .text	0000005c _do_ctors
00003350 g     F .text	000000bc UsbSoftReset
0000c38c g     F .text	000000d8 wcrtomb
0000f7bc g     F .text	000000d0 close
0000fb10 g     F .text	00000080 alt_load
0000bfc4 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
00007610 g     F .text	00000004 __sinit_lock_acquire
00009020 g     F .text	00000114 __multadd
00008ff8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_sram+0xf7e00004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406f14 	ori	at,at,444
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001426 	beq	r2,zero,17c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00800074 	movhi	r2,1
 130:	10986404 	addi	r2,r2,24976
 134:	e0fffd17 	ldw	r3,-12(fp)
 138:	180690fa 	slli	r3,r3,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	10c00017 	ldw	r3,0(r2)
 144:	00800074 	movhi	r2,1
 148:	10986404 	addi	r2,r2,24976
 14c:	e13ffd17 	ldw	r4,-12(fp)
 150:	200890fa 	slli	r4,r4,3
 154:	1105883a 	add	r2,r2,r4
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	00000706 	br	198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 17c:	e0bffc17 	ldw	r2,-16(fp)
 180:	1085883a 	add	r2,r2,r2
 184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 188:	e0bffd17 	ldw	r2,-12(fp)
 18c:	10800044 	addi	r2,r2,1
 190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 194:	003fe106 	br	11c <__alt_mem_sram+0xf7e0011c>

    active = alt_irq_pending ();
 198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 19c:	e0bffb17 	ldw	r2,-20(fp)
 1a0:	103fdb1e 	bne	r2,zero,110 <__alt_mem_sram+0xf7e00110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	0001883a 	nop
}
 1a8:	e037883a 	mov	sp,fp
 1ac:	dfc00117 	ldw	ra,4(sp)
 1b0:	df000017 	ldw	fp,0(sp)
 1b4:	dec00204 	addi	sp,sp,8
 1b8:	f800283a 	ret

Disassembly of section .text:

000001bc <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1bc:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     1c0:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1c4:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     1c8:	00bffd16 	blt	zero,r2,1c0 <__alt_mem_sram+0xf7e001c0>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1cc:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     1d0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1d4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1d8:	d6b18114 	ori	gp,gp,50692
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1dc:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1e0:	10984c14 	ori	r2,r2,24880

    movhi r3, %hi(__bss_end)
     1e4:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1e8:	18d8a414 	ori	r3,r3,25232

    beq r2, r3, 1f
     1ec:	10c00326 	beq	r2,r3,1fc <_start+0x40>

0:
    stw zero, (r2)
     1f0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1f4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1f8:	10fffd36 	bltu	r2,r3,1f0 <__alt_mem_sram+0xf7e001f0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1fc:	000fb100 	call	fb10 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     200:	000fcb40 	call	fcb4 <alt_main>

00000204 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     204:	003fff06 	br	204 <__alt_mem_sram+0xf7e00204>

00000208 <maxmin>:
*
******************************************************************************/
void UsbSoftReset();
//--------------------------------------
int maxmin(int no, int max, int min)
{
     208:	defffc04 	addi	sp,sp,-16
     20c:	df000315 	stw	fp,12(sp)
     210:	df000304 	addi	fp,sp,12
     214:	e13ffd15 	stw	r4,-12(fp)
     218:	e17ffe15 	stw	r5,-8(fp)
     21c:	e1bfff15 	stw	r6,-4(fp)
 if(no>max) {no=max;}
     220:	e0bffd17 	ldw	r2,-12(fp)
     224:	e0fffe17 	ldw	r3,-8(fp)
     228:	1880020e 	bge	r3,r2,234 <maxmin+0x2c>
     22c:	e0bffe17 	ldw	r2,-8(fp)
     230:	e0bffd15 	stw	r2,-12(fp)
 if(no<min) {no=min;}
     234:	e0fffd17 	ldw	r3,-12(fp)
     238:	e0bfff17 	ldw	r2,-4(fp)
     23c:	1880020e 	bge	r3,r2,248 <maxmin+0x40>
     240:	e0bfff17 	ldw	r2,-4(fp)
     244:	e0bffd15 	stw	r2,-12(fp)

 return(no);
     248:	e0bffd17 	ldw	r2,-12(fp)
}
     24c:	e037883a 	mov	sp,fp
     250:	df000017 	ldw	fp,0(sp)
     254:	dec00104 	addi	sp,sp,4
     258:	f800283a 	ret

0000025c <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
     25c:	defff604 	addi	sp,sp,-40
     260:	dfc00915 	stw	ra,36(sp)
     264:	df000815 	stw	fp,32(sp)
     268:	df000804 	addi	fp,sp,32
    alt_u16 intStat;
    alt_u16 usb_ctl_val;
    static alt_u16 ctl_reg = 0;
    static alt_u16 no_device = 0;
    alt_u16 fs_device = 0;
     26c:	e03ffc0d 	sth	zero,-16(fp)
    int button_value;
    alt_u16 px = 320;
     270:	00805004 	movi	r2,320
     274:	e0bff88d 	sth	r2,-30(fp)
    alt_u16 py = 240; 
     278:	00803c04 	movi	r2,240
     27c:	e0bff90d 	sth	r2,-28(fp)
    signed char  dx = 0;
     280:	e03ff985 	stb	zero,-26(fp)
    signed char  dy = 0; 
     284:	e03ff9c5 	stb	zero,-25(fp)
    alt_u8  pbutton = 0;
     288:	e03ffc85 	stb	zero,-14(fp)
    alt_u8 toggle=0;
     28c:	e03ffa05 	stb	zero,-24(fp)
    alt_u8 data_size;
    volatile unsigned int *MOUSE_PIO = (unsigned int*)0x08001000; //make a pointer to access the PIO block
     290:	00820034 	movhi	r2,2048
     294:	10840004 	addi	r2,r2,4096
     298:	e0bffd15 	stw	r2,-12(fp)
    //VGA display initial
    

    //----------------------------------------SIE1 initial---------------------------------------------------//
USB_HOT_PLUG:
    UsbSoftReset();
     29c:	00033500 	call	3350 <UsbSoftReset>
    UsbWrite (HPI_SIE1_MSG_ADR, 0);
     2a0:	01005104 	movi	r4,324
     2a4:	000b883a 	mov	r5,zero
     2a8:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite (HOST1_STAT_REG, 0xFFFF);
     2ac:	01302414 	movui	r4,49296
     2b0:	017fffd4 	movui	r5,65535
     2b4:	00032cc0 	call	32cc <UsbWrite>
              
    /* Set HUSB_pEOT time */
    UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     2b8:	01006d04 	movi	r4,436
     2bc:	01409604 	movi	r5,600
     2c0:	00032cc0 	call	32cc <UsbWrite>
     
    usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     2c4:	00811004 	movi	r2,1088
     2c8:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     2cc:	e0bff80b 	ldhu	r2,-32(fp)
     2d0:	01005084 	movi	r4,322
     2d4:	100b883a 	mov	r5,r2
     2d8:	00032cc0 	call	32cc <UsbWrite>
    
    intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     2dc:	00808404 	movi	r2,528
     2e0:	e0bffe0d 	sth	r2,-8(fp)
    UsbWrite(HOST1_IRQ_EN_REG, intStat); 
     2e4:	e0bffe0b 	ldhu	r2,-8(fp)
     2e8:	01302314 	movui	r4,49292
     2ec:	100b883a 	mov	r5,r2
     2f0:	00032cc0 	call	32cc <UsbWrite>

    UsbWrite(COMM_R0,0x0000);//reset time 
     2f4:	01007104 	movi	r4,452
     2f8:	000b883a 	mov	r5,zero
     2fc:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R1,0x0000);  //port number
     300:	01007184 	movi	r4,454
     304:	000b883a 	mov	r5,zero
     308:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R2,0x0000);  //r1
     30c:	01007204 	movi	r4,456
     310:	000b883a 	mov	r5,zero
     314:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R3,0x0000);  //r1
     318:	01007284 	movi	r4,458
     31c:	000b883a 	mov	r5,zero
     320:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R4,0x0000);  //r1
     324:	01007304 	movi	r4,460
     328:	000b883a 	mov	r5,zero
     32c:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R5,0x0000);  //r1
     330:	01007384 	movi	r4,462
     334:	000b883a 	mov	r5,zero
     338:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R6,0x0000);  //r1
     33c:	01007404 	movi	r4,464
     340:	000b883a 	mov	r5,zero
     344:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R7,0x0000);  //r1
     348:	01007484 	movi	r4,466
     34c:	000b883a 	mov	r5,zero
     350:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R8,0x0000);  //r1
     354:	01007504 	movi	r4,468
     358:	000b883a 	mov	r5,zero
     35c:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R9,0x0000);  //r1
     360:	01007584 	movi	r4,470
     364:	000b883a 	mov	r5,zero
     368:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R10,0x0000);  //r1
     36c:	01007604 	movi	r4,472
     370:	000b883a 	mov	r5,zero
     374:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R11,0x0000);  //r1
     378:	01007684 	movi	r4,474
     37c:	000b883a 	mov	r5,zero
     380:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R12,0x0000);  //r1
     384:	01007704 	movi	r4,476
     388:	000b883a 	mov	r5,zero
     38c:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R13,0x0000);  //r1    
     390:	01007784 	movi	r4,478
     394:	000b883a 	mov	r5,zero
     398:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     39c:	01007084 	movi	r4,450
     3a0:	01401c84 	movi	r5,114
     3a4:	00032cc0 	call	32cc <UsbWrite>
    IOWR(CY7C67200_BASE,HPI_MAILBOX,0xCE01);
     3a8:	00f38054 	movui	r3,52737
     3ac:	00824034 	movhi	r2,2304
     3b0:	10800104 	addi	r2,r2,4
     3b4:	10c00035 	stwio	r3,0(r2)
     
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     3b8:	0001883a 	nop
     3bc:	00824034 	movhi	r2,2304
     3c0:	10800304 	addi	r2,r2,12
     3c4:	10800037 	ldwio	r2,0(r2)
     3c8:	10bfffcc 	andi	r2,r2,65535
     3cc:	103ffb26 	beq	r2,zero,3bc <__alt_mem_sram+0xf7e003bc>
    {
    }
    while (IORD(CY7C67200_BASE,HPI_MAILBOX) != COMM_ACK) 
     3d0:	0001883a 	nop
     3d4:	00824034 	movhi	r2,2304
     3d8:	10800104 	addi	r2,r2,4
     3dc:	10800037 	ldwio	r2,0(r2)
     3e0:	1083fb58 	cmpnei	r2,r2,4077
     3e4:	10000826 	beq	r2,zero,408 <main+0x1ac>
    {
        printf("[ERROR]:routine mailbox data is %x\n",IORD(CY7C67200_BASE,HPI_MAILBOX));
     3e8:	00824034 	movhi	r2,2304
     3ec:	10800104 	addi	r2,r2,4
     3f0:	10800037 	ldwio	r2,0(r2)
     3f4:	01000074 	movhi	r4,1
     3f8:	21083304 	addi	r4,r4,8396
     3fc:	100b883a 	mov	r5,r2
     400:	00034380 	call	3438 <printf>
        goto USB_HOT_PLUG;
     404:	003fa506 	br	29c <__alt_mem_sram+0xf7e0029c>
    }
    
  
    //usleep(30*1000);    
    UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     408:	01007084 	movi	r4,450
     40c:	01401d04 	movi	r5,116
     410:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R0,0x003c);//reset time 
     414:	01007104 	movi	r4,452
     418:	01400f04 	movi	r5,60
     41c:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R1,0x0000);  //port number
     420:	01007184 	movi	r4,454
     424:	000b883a 	mov	r5,zero
     428:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R2,0x0000);  //r1
     42c:	01007204 	movi	r4,456
     430:	000b883a 	mov	r5,zero
     434:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R3,0x0000);  //r1
     438:	01007284 	movi	r4,458
     43c:	000b883a 	mov	r5,zero
     440:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R4,0x0000);  //r1
     444:	01007304 	movi	r4,460
     448:	000b883a 	mov	r5,zero
     44c:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R5,0x0000);  //r1
     450:	01007384 	movi	r4,462
     454:	000b883a 	mov	r5,zero
     458:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R6,0x0000);  //r1
     45c:	01007404 	movi	r4,464
     460:	000b883a 	mov	r5,zero
     464:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R7,0x0000);  //r1
     468:	01007484 	movi	r4,466
     46c:	000b883a 	mov	r5,zero
     470:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R8,0x0000);  //r1
     474:	01007504 	movi	r4,468
     478:	000b883a 	mov	r5,zero
     47c:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R9,0x0000);  //r1
     480:	01007584 	movi	r4,470
     484:	000b883a 	mov	r5,zero
     488:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R10,0x0000);  //r1
     48c:	01007604 	movi	r4,472
     490:	000b883a 	mov	r5,zero
     494:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R11,0x0000);  //r1
     498:	01007684 	movi	r4,474
     49c:	000b883a 	mov	r5,zero
     4a0:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R12,0x0000);  //r1
     4a4:	01007704 	movi	r4,476
     4a8:	000b883a 	mov	r5,zero
     4ac:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite(COMM_R13,0x0000);  //r1    
     4b0:	01007784 	movi	r4,478
     4b4:	000b883a 	mov	r5,zero
     4b8:	00032cc0 	call	32cc <UsbWrite>

    IOWR(CY7C67200_BASE,HPI_MAILBOX,0xCE01);
     4bc:	00f38054 	movui	r3,52737
     4c0:	00824034 	movhi	r2,2304
     4c4:	10800104 	addi	r2,r2,4
     4c8:	10c00035 	stwio	r3,0(r2)
  
    while (IORD(CY7C67200_BASE,HPI_MAILBOX) != COMM_ACK) 
     4cc:	0001883a 	nop
     4d0:	00824034 	movhi	r2,2304
     4d4:	10800104 	addi	r2,r2,4
     4d8:	10800037 	ldwio	r2,0(r2)
     4dc:	1083fb58 	cmpnei	r2,r2,4077
     4e0:	10000826 	beq	r2,zero,504 <main+0x2a8>
    {
        printf("[ERROR]:routine mailbox data is %x\n",IORD(CY7C67200_BASE,HPI_MAILBOX));
     4e4:	00824034 	movhi	r2,2304
     4e8:	10800104 	addi	r2,r2,4
     4ec:	10800037 	ldwio	r2,0(r2)
     4f0:	01000074 	movhi	r4,1
     4f4:	21083304 	addi	r4,r4,8396
     4f8:	100b883a 	mov	r5,r2
     4fc:	00034380 	call	3438 <printf>
        goto USB_HOT_PLUG;
     500:	003f6606 	br	29c <__alt_mem_sram+0xf7e0029c>
    }

    //usleep(30*1000);    
    ctl_reg = USB1_CTL_REG;
     504:	00b02284 	movi	r2,-16246
     508:	d0a6cb0d 	sth	r2,-25812(gp)
    no_device = (A_DP_STAT | A_DM_STAT);
     50c:	008c0004 	movi	r2,12288
     510:	d0a6cb8d 	sth	r2,-25810(gp)
    fs_device = A_DP_STAT;
     514:	00880004 	movi	r2,8192
     518:	e0bffc0d 	sth	r2,-16(fp)
    
    usb_ctl_val = UsbRead(ctl_reg);
     51c:	d0a6cb0b 	ldhu	r2,-25812(gp)
     520:	10bfffcc 	andi	r2,r2,65535
     524:	1009883a 	mov	r4,r2
     528:	00033140 	call	3314 <UsbRead>
     52c:	e0bff80d 	sth	r2,-32(fp)
   
    if (!(usb_ctl_val & no_device))
     530:	d0a6cb8b 	ldhu	r2,-25810(gp)
     534:	e0fff80b 	ldhu	r3,-32(fp)
     538:	1884703a 	and	r2,r3,r2
     53c:	10bfffcc 	andi	r2,r2,65535
     540:	10001a1e 	bne	r2,zero,5ac <main+0x350>
    {
      printf("\n[INFO]: no device is present in SIE1!\n");
     544:	01000074 	movhi	r4,1
     548:	21083c04 	addi	r4,r4,8432
     54c:	000352c0 	call	352c <puts>
      printf("[INFO]: please insert a USB mouse in SIE1!\n");
     550:	01000074 	movhi	r4,1
     554:	21084604 	addi	r4,r4,8472
     558:	000352c0 	call	352c <puts>
      while (!(usb_ctl_val & no_device))
     55c:	00000d06 	br	594 <main+0x338>
      {
       
         usb_ctl_val = UsbRead(ctl_reg);
     560:	d0a6cb0b 	ldhu	r2,-25812(gp)
     564:	10bfffcc 	andi	r2,r2,65535
     568:	1009883a 	mov	r4,r2
     56c:	00033140 	call	3314 <UsbRead>
     570:	e0bff80d 	sth	r2,-32(fp)
         if(usb_ctl_val & no_device)
     574:	d0a6cb8b 	ldhu	r2,-25810(gp)
     578:	e0fff80b 	ldhu	r3,-32(fp)
     57c:	1884703a 	and	r2,r3,r2
     580:	10bfffcc 	andi	r2,r2,65535
     584:	10000126 	beq	r2,zero,58c <main+0x330>
           goto USB_HOT_PLUG;
     588:	003f4406 	br	29c <__alt_mem_sram+0xf7e0029c>
       
         usleep(2000);
     58c:	0101f404 	movi	r4,2000
     590:	000ffc80 	call	ffc8 <usleep>
   
    if (!(usb_ctl_val & no_device))
    {
      printf("\n[INFO]: no device is present in SIE1!\n");
      printf("[INFO]: please insert a USB mouse in SIE1!\n");
      while (!(usb_ctl_val & no_device))
     594:	d0a6cb8b 	ldhu	r2,-25810(gp)
     598:	e0fff80b 	ldhu	r3,-32(fp)
     59c:	1884703a 	and	r2,r3,r2
     5a0:	10bfffcc 	andi	r2,r2,65535
     5a4:	103fee26 	beq	r2,zero,560 <__alt_mem_sram+0xf7e00560>
     5a8:	00000c06 	br	5dc <main+0x380>
      }
    }
    else
    {
        /* check for low speed or full speed by reading D+ and D- lines */    
        if (usb_ctl_val & fs_device)
     5ac:	e0fff80b 	ldhu	r3,-32(fp)
     5b0:	e0bffc0b 	ldhu	r2,-16(fp)
     5b4:	1884703a 	and	r2,r3,r2
     5b8:	10bfffcc 	andi	r2,r2,65535
     5bc:	10000426 	beq	r2,zero,5d0 <main+0x374>
        {
            printf("[INFO]: full speed device\n");
     5c0:	01000074 	movhi	r4,1
     5c4:	21085104 	addi	r4,r4,8516
     5c8:	000352c0 	call	352c <puts>
     5cc:	00000306 	br	5dc <main+0x380>
            
        }
        else
        {
            printf("[INFO]: low speed device\n");            
     5d0:	01000074 	movhi	r4,1
     5d4:	21085804 	addi	r4,r4,8544
     5d8:	000352c0 	call	352c <puts>

    //printf("[SIE1 INIT]:USB 1 Control Register reg is %x\n",UsbRead(0xC08A));
    
    //------------------------------------------------------set address -----------------------------------------------------------------
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
     5dc:	00c14004 	movi	r3,1280
     5e0:	00824034 	movhi	r2,2304
     5e4:	10800204 	addi	r2,r2,8
     5e8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
     5ec:	00c14304 	movi	r3,1292
     5f0:	00824034 	movhi	r2,2304
     5f4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
     5f8:	00c00204 	movi	r3,8
     5fc:	00824034 	movhi	r2,2304
     600:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x00D0);
     604:	00c03404 	movi	r3,208
     608:	00824034 	movhi	r2,2304
     60c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
     610:	00c00044 	movi	r3,1
     614:	00824034 	movhi	r2,2304
     618:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     61c:	00c004c4 	movi	r3,19
     620:	00824034 	movhi	r2,2304
     624:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
     628:	00c14504 	movi	r3,1300
     62c:	00824034 	movhi	r2,2304
     630:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0500);
     634:	00c14004 	movi	r3,1280
     638:	00824034 	movhi	r2,2304
     63c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//device address   
     640:	00c00084 	movi	r3,2
     644:	00824034 	movhi	r2,2304
     648:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     64c:	0007883a 	mov	r3,zero
     650:	00824034 	movhi	r2,2304
     654:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     658:	0007883a 	mov	r3,zero
     65c:	00824034 	movhi	r2,2304
     660:	10c00035 	stwio	r3,0(r2)
    
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
     664:	0007883a 	mov	r3,zero
     668:	00824034 	movhi	r2,2304
     66c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
     670:	0007883a 	mov	r3,zero
     674:	00824034 	movhi	r2,2304
     678:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0090);//device address
     67c:	00c02404 	movi	r3,144
     680:	00824034 	movhi	r2,2304
     684:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
     688:	00c01044 	movi	r3,65
     68c:	00824034 	movhi	r2,2304
     690:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     694:	00c004c4 	movi	r3,19
     698:	00824034 	movhi	r2,2304
     69c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     6a0:	0007883a 	mov	r3,zero
     6a4:	00824034 	movhi	r2,2304
     6a8:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     6ac:	01006c04 	movi	r4,432
     6b0:	01414004 	movi	r5,1280
     6b4:	00032cc0 	call	32cc <UsbWrite>
    
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     6b8:	00003906 	br	7a0 <main+0x544>
    {
        //the starting address
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
     6bc:	00c14004 	movi	r3,1280
     6c0:	00824034 	movhi	r2,2304
     6c4:	10800204 	addi	r2,r2,8
     6c8:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
     6cc:	00c14304 	movi	r3,1292
     6d0:	00824034 	movhi	r2,2304
     6d4:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
     6d8:	00c00204 	movi	r3,8
     6dc:	00824034 	movhi	r2,2304
     6e0:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x00D0);
     6e4:	00c03404 	movi	r3,208
     6e8:	00824034 	movhi	r2,2304
     6ec:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
     6f0:	00c00044 	movi	r3,1
     6f4:	00824034 	movhi	r2,2304
     6f8:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     6fc:	00c004c4 	movi	r3,19
     700:	00824034 	movhi	r2,2304
     704:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0514); 
     708:	00c14504 	movi	r3,1300
     70c:	00824034 	movhi	r2,2304
     710:	10c00035 	stwio	r3,0(r2)
    
           //td content 4 bytes
           IOWR(CY7C67200_BASE,HPI_DATA,0x0500);
     714:	00c14004 	movi	r3,1280
     718:	00824034 	movhi	r2,2304
     71c:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//device address   
     720:	00c00084 	movi	r3,2
     724:	00824034 	movhi	r2,2304
     728:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     72c:	0007883a 	mov	r3,zero
     730:	00824034 	movhi	r2,2304
     734:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     738:	0007883a 	mov	r3,zero
     73c:	00824034 	movhi	r2,2304
     740:	10c00035 	stwio	r3,0(r2)
           //IN 
           IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
     744:	0007883a 	mov	r3,zero
     748:	00824034 	movhi	r2,2304
     74c:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
     750:	0007883a 	mov	r3,zero
     754:	00824034 	movhi	r2,2304
     758:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0090);//device address
     75c:	00c02404 	movi	r3,144
     760:	00824034 	movhi	r2,2304
     764:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
     768:	00c01044 	movi	r3,65
     76c:	00824034 	movhi	r2,2304
     770:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     774:	00c004c4 	movi	r3,19
     778:	00824034 	movhi	r2,2304
     77c:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     780:	0007883a 	mov	r3,zero
     784:	00824034 	movhi	r2,2304
     788:	10c00035 	stwio	r3,0(r2)
        
           UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr 
     78c:	01006c04 	movi	r4,432
     790:	01414004 	movi	r5,1280
     794:	00032cc0 	call	32cc <UsbWrite>
           usleep(10*1000);
     798:	0109c404 	movi	r4,10000
     79c:	000ffc80 	call	ffc8 <usleep>
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     7a0:	00824034 	movhi	r2,2304
     7a4:	10800304 	addi	r2,r2,12
     7a8:	10800037 	ldwio	r2,0(r2)
     7ac:	1080040c 	andi	r2,r2,16
     7b0:	103fc226 	beq	r2,zero,6bc <__alt_mem_sram+0xf7e006bc>
           UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr 
           usleep(10*1000);
    }
    
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
     7b4:	01005104 	movi	r4,324
     7b8:	00033140 	call	3314 <UsbRead>
     7bc:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
     7c0:	01005104 	movi	r4,324
     7c4:	000b883a 	mov	r5,zero
     7c8:	00032cc0 	call	32cc <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
     7cc:	00000d06 	br	804 <main+0x5a8>
    {
       if(usb_ctl_val == 0x000)
     7d0:	e0bff80b 	ldhu	r2,-32(fp)
     7d4:	10000526 	beq	r2,zero,7ec <main+0x590>
       {
       }
       else
       {
        printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
     7d8:	e0bff80b 	ldhu	r2,-32(fp)
     7dc:	01000074 	movhi	r4,1
     7e0:	21085f04 	addi	r4,r4,8572
     7e4:	100b883a 	mov	r5,r2
     7e8:	00034380 	call	3438 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
     7ec:	01005104 	movi	r4,324
     7f0:	00033140 	call	3314 <UsbRead>
     7f4:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
     7f8:	01005104 	movi	r4,324
     7fc:	000b883a 	mov	r5,zero
     800:	00032cc0 	call	32cc <UsbWrite>
    }
    
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
     804:	e0bff80b 	ldhu	r2,-32(fp)
     808:	10840018 	cmpnei	r2,r2,4096
     80c:	103ff01e 	bne	r2,zero,7d0 <__alt_mem_sram+0xf7e007d0>
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
       //goto USB_HOT_PLUG;
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
     810:	00c14184 	movi	r3,1286
     814:	00824034 	movhi	r2,2304
     818:	10800204 	addi	r2,r2,8
     81c:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
     820:	00824034 	movhi	r2,2304
     824:	10800037 	ldwio	r2,0(r2)
     828:	01000074 	movhi	r4,1
     82c:	21086704 	addi	r4,r4,8604
     830:	100b883a 	mov	r5,r2
     834:	00034380 	call	3438 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
     838:	00c14204 	movi	r3,1288
     83c:	00824034 	movhi	r2,2304
     840:	10800204 	addi	r2,r2,8
     844:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
     848:	00824034 	movhi	r2,2304
     84c:	10800037 	ldwio	r2,0(r2)
     850:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
     854:	e0bff80b 	ldhu	r2,-32(fp)
     858:	01000074 	movhi	r4,1
     85c:	21087204 	addi	r4,r4,8648
     860:	100b883a 	mov	r5,r2
     864:	00034380 	call	3438 <printf>
    while (usb_ctl_val != 0x03) 
     868:	e0bff80b 	ldhu	r2,-32(fp)
     86c:	108000e0 	cmpeqi	r2,r2,3
     870:	1000191e 	bne	r2,zero,8d8 <main+0x67c>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
     874:	00824034 	movhi	r2,2304
     878:	10800304 	addi	r2,r2,12
     87c:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
     880:	01005104 	movi	r4,324
     884:	00033140 	call	3314 <UsbRead>
     888:	10bfffcc 	andi	r2,r2,65535
     88c:	10840018 	cmpnei	r2,r2,4096
     890:	1000091e 	bne	r2,zero,8b8 <main+0x65c>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
     894:	01005104 	movi	r4,324
     898:	000b883a 	mov	r5,zero
     89c:	00032cc0 	call	32cc <UsbWrite>
           
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     8a0:	0001883a 	nop
     8a4:	00824034 	movhi	r2,2304
     8a8:	10800304 	addi	r2,r2,12
     8ac:	10800037 	ldwio	r2,0(r2)
     8b0:	1080040c 	andi	r2,r2,16
     8b4:	103ffb26 	beq	r2,zero,8a4 <__alt_mem_sram+0xf7e008a4>
           {
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
     8b8:	00c14204 	movi	r3,1288
     8bc:	00824034 	movhi	r2,2304
     8c0:	10800204 	addi	r2,r2,8
     8c4:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
     8c8:	00824034 	movhi	r2,2304
     8cc:	10800037 	ldwio	r2,0(r2)
     8d0:	e0bff80d 	sth	r2,-32(fp)
           
           goto USB_HOT_PLUG;
     8d4:	003e7106 	br	29c <__alt_mem_sram+0xf7e0029c>
    }    
       
    printf("------------[ENUM PROCESS]:set address pass!---------------\n");
     8d8:	01000074 	movhi	r4,1
     8dc:	21087e04 	addi	r4,r4,8696
     8e0:	000352c0 	call	352c <puts>
    
    
    //-------------------------------get device descriptor-1 -----------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
     8e4:	00c14004 	movi	r3,1280
     8e8:	00824034 	movhi	r2,2304
     8ec:	10800204 	addi	r2,r2,8
     8f0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
     8f4:	00c14304 	movi	r3,1292
     8f8:	00824034 	movhi	r2,2304
     8fc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
     900:	00c00204 	movi	r3,8
     904:	00824034 	movhi	r2,2304
     908:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
     90c:	00c0b404 	movi	r3,720
     910:	00824034 	movhi	r2,2304
     914:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
     918:	00c00044 	movi	r3,1
     91c:	00824034 	movhi	r2,2304
     920:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     924:	00c004c4 	movi	r3,19
     928:	00824034 	movhi	r2,2304
     92c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
     930:	00c14504 	movi	r3,1300
     934:	00824034 	movhi	r2,2304
     938:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
     93c:	00c1a004 	movi	r3,1664
     940:	00824034 	movhi	r2,2304
     944:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0100);
     948:	00c04004 	movi	r3,256
     94c:	00824034 	movhi	r2,2304
     950:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     954:	0007883a 	mov	r3,zero
     958:	00824034 	movhi	r2,2304
     95c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);
     960:	00c00204 	movi	r3,8
     964:	00824034 	movhi	r2,2304
     968:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN
    IOWR(CY7C67200_BASE,HPI_DATA,0x052C); //
     96c:	00c14b04 	movi	r3,1324
     970:	00824034 	movhi	r2,2304
     974:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//
     978:	00c00204 	movi	r3,8
     97c:	00824034 	movhi	r2,2304
     980:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//
     984:	00c0a404 	movi	r3,656
     988:	00824034 	movhi	r2,2304
     98c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
     990:	00c01044 	movi	r3,65
     994:	00824034 	movhi	r2,2304
     998:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     99c:	00c004c4 	movi	r3,19
     9a0:	00824034 	movhi	r2,2304
     9a4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);
     9a8:	00c14804 	movi	r3,1312
     9ac:	00824034 	movhi	r2,2304
     9b0:	10c00035 	stwio	r3,0(r2)
    
//    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
     9b4:	0007883a 	mov	r3,zero
     9b8:	00824034 	movhi	r2,2304
     9bc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
     9c0:	0007883a 	mov	r3,zero
     9c4:	00824034 	movhi	r2,2304
     9c8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//device address
     9cc:	00c08404 	movi	r3,528
     9d0:	00824034 	movhi	r2,2304
     9d4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
     9d8:	00c01044 	movi	r3,65
     9dc:	00824034 	movhi	r2,2304
     9e0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     9e4:	00c004c4 	movi	r3,19
     9e8:	00824034 	movhi	r2,2304
     9ec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     9f0:	0007883a 	mov	r3,zero
     9f4:	00824034 	movhi	r2,2304
     9f8:	10c00035 	stwio	r3,0(r2)
    
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     9fc:	01006c04 	movi	r4,432
     a00:	01414004 	movi	r5,1280
     a04:	00032cc0 	call	32cc <UsbWrite>
    
   //usleep(10*1000);
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     a08:	00004b06 	br	b38 <main+0x8dc>
    {
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
     a0c:	00c14004 	movi	r3,1280
     a10:	00824034 	movhi	r2,2304
     a14:	10800204 	addi	r2,r2,8
     a18:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
     a1c:	00c14304 	movi	r3,1292
     a20:	00824034 	movhi	r2,2304
     a24:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
     a28:	00c00204 	movi	r3,8
     a2c:	00824034 	movhi	r2,2304
     a30:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
     a34:	00c0b404 	movi	r3,720
     a38:	00824034 	movhi	r2,2304
     a3c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
     a40:	00c00044 	movi	r3,1
     a44:	00824034 	movhi	r2,2304
     a48:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     a4c:	00c004c4 	movi	r3,19
     a50:	00824034 	movhi	r2,2304
     a54:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
     a58:	00c14504 	movi	r3,1300
     a5c:	00824034 	movhi	r2,2304
     a60:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);
     a64:	00c1a004 	movi	r3,1664
     a68:	00824034 	movhi	r2,2304
     a6c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0100);
     a70:	00c04004 	movi	r3,256
     a74:	00824034 	movhi	r2,2304
     a78:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     a7c:	0007883a 	mov	r3,zero
     a80:	00824034 	movhi	r2,2304
     a84:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);
     a88:	00c00204 	movi	r3,8
     a8c:	00824034 	movhi	r2,2304
     a90:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN
    IOWR(CY7C67200_BASE,HPI_DATA,0x052C); //
     a94:	00c14b04 	movi	r3,1324
     a98:	00824034 	movhi	r2,2304
     a9c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//
     aa0:	00c00204 	movi	r3,8
     aa4:	00824034 	movhi	r2,2304
     aa8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//
     aac:	00c0a404 	movi	r3,656
     ab0:	00824034 	movhi	r2,2304
     ab4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
     ab8:	00c01044 	movi	r3,65
     abc:	00824034 	movhi	r2,2304
     ac0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     ac4:	00c004c4 	movi	r3,19
     ac8:	00824034 	movhi	r2,2304
     acc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);
     ad0:	00c14804 	movi	r3,1312
     ad4:	00824034 	movhi	r2,2304
     ad8:	10c00035 	stwio	r3,0(r2)
    
//    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
     adc:	0007883a 	mov	r3,zero
     ae0:	00824034 	movhi	r2,2304
     ae4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
     ae8:	0007883a 	mov	r3,zero
     aec:	00824034 	movhi	r2,2304
     af0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//device address
     af4:	00c08404 	movi	r3,528
     af8:	00824034 	movhi	r2,2304
     afc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
     b00:	00c01044 	movi	r3,65
     b04:	00824034 	movhi	r2,2304
     b08:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     b0c:	00c004c4 	movi	r3,19
     b10:	00824034 	movhi	r2,2304
     b14:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     b18:	0007883a 	mov	r3,zero
     b1c:	00824034 	movhi	r2,2304
     b20:	10c00035 	stwio	r3,0(r2)
    
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     b24:	01006c04 	movi	r4,432
     b28:	01414004 	movi	r5,1280
     b2c:	00032cc0 	call	32cc <UsbWrite>
    usleep(10*1000);
     b30:	0109c404 	movi	r4,10000
     b34:	000ffc80 	call	ffc8 <usleep>
    
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    
   //usleep(10*1000);
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     b38:	00824034 	movhi	r2,2304
     b3c:	10800304 	addi	r2,r2,12
     b40:	10800037 	ldwio	r2,0(r2)
     b44:	1080040c 	andi	r2,r2,16
     b48:	103fb026 	beq	r2,zero,a0c <__alt_mem_sram+0xf7e00a0c>
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    usleep(10*1000);
    }
    
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
     b4c:	01005104 	movi	r4,324
     b50:	00033140 	call	3314 <UsbRead>
     b54:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
     b58:	01005104 	movi	r4,324
     b5c:	000b883a 	mov	r5,zero
     b60:	00032cc0 	call	32cc <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
     b64:	00000d06 	br	b9c <main+0x940>
    {
       if(usb_ctl_val == 0x000)
     b68:	e0bff80b 	ldhu	r2,-32(fp)
     b6c:	10000526 	beq	r2,zero,b84 <main+0x928>
       {
       }
       else
       {
        printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
     b70:	e0bff80b 	ldhu	r2,-32(fp)
     b74:	01000074 	movhi	r4,1
     b78:	21085f04 	addi	r4,r4,8572
     b7c:	100b883a 	mov	r5,r2
     b80:	00034380 	call	3438 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
     b84:	01005104 	movi	r4,324
     b88:	00033140 	call	3314 <UsbRead>
     b8c:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
     b90:	01005104 	movi	r4,324
     b94:	000b883a 	mov	r5,zero
     b98:	00032cc0 	call	32cc <UsbWrite>
    }
    
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
     b9c:	e0bff80b 	ldhu	r2,-32(fp)
     ba0:	10840018 	cmpnei	r2,r2,4096
     ba4:	103ff01e 	bne	r2,zero,b68 <__alt_mem_sram+0xf7e00b68>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
     ba8:	00c14184 	movi	r3,1286
     bac:	00824034 	movhi	r2,2304
     bb0:	10800204 	addi	r2,r2,8
     bb4:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
     bb8:	00824034 	movhi	r2,2304
     bbc:	10800037 	ldwio	r2,0(r2)
     bc0:	01000074 	movhi	r4,1
     bc4:	21088d04 	addi	r4,r4,8756
     bc8:	100b883a 	mov	r5,r2
     bcc:	00034380 	call	3438 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
     bd0:	00c14204 	movi	r3,1288
     bd4:	00824034 	movhi	r2,2304
     bd8:	10800204 	addi	r2,r2,8
     bdc:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
     be0:	00824034 	movhi	r2,2304
     be4:	10800037 	ldwio	r2,0(r2)
     be8:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     bec:	e0bff80b 	ldhu	r2,-32(fp)
     bf0:	01000074 	movhi	r4,1
     bf4:	21089804 	addi	r4,r4,8800
     bf8:	100b883a 	mov	r5,r2
     bfc:	00034380 	call	3438 <printf>
    while (usb_ctl_val != 0x03) 
     c00:	00001806 	br	c64 <main+0xa08>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
     c04:	00824034 	movhi	r2,2304
     c08:	10800304 	addi	r2,r2,12
     c0c:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
     c10:	01005104 	movi	r4,324
     c14:	00033140 	call	3314 <UsbRead>
     c18:	10bfffcc 	andi	r2,r2,65535
     c1c:	10840018 	cmpnei	r2,r2,4096
     c20:	1000091e 	bne	r2,zero,c48 <main+0x9ec>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
     c24:	01005104 	movi	r4,324
     c28:	000b883a 	mov	r5,zero
     c2c:	00032cc0 	call	32cc <UsbWrite>
           
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c30:	0001883a 	nop
     c34:	00824034 	movhi	r2,2304
     c38:	10800304 	addi	r2,r2,12
     c3c:	10800037 	ldwio	r2,0(r2)
     c40:	1080040c 	andi	r2,r2,16
     c44:	103ffb26 	beq	r2,zero,c34 <__alt_mem_sram+0xf7e00c34>
           {
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
     c48:	00c14204 	movi	r3,1288
     c4c:	00824034 	movhi	r2,2304
     c50:	10800204 	addi	r2,r2,8
     c54:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
     c58:	00824034 	movhi	r2,2304
     c5c:	10800037 	ldwio	r2,0(r2)
     c60:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
     c64:	e0bff80b 	ldhu	r2,-32(fp)
     c68:	108000d8 	cmpnei	r2,r2,3
     c6c:	103fe51e 	bne	r2,zero,c04 <__alt_mem_sram+0xf7e00c04>
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
       
    printf("---------------[ENUM PROCESS]:get device descriptor-1 pass!-----------------\n");
     c70:	01000074 	movhi	r4,1
     c74:	2108a404 	addi	r4,r4,8848
     c78:	000352c0 	call	352c <puts>
    
    
    //--------------------------------get device descriptor-1---------------------------------------------//
    //get device descriptor
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
     c7c:	00c14004 	movi	r3,1280
     c80:	00824034 	movhi	r2,2304
     c84:	10800204 	addi	r2,r2,8
     c88:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
     c8c:	00c14304 	movi	r3,1292
     c90:	00824034 	movhi	r2,2304
     c94:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
     c98:	00c00204 	movi	r3,8
     c9c:	00824034 	movhi	r2,2304
     ca0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
     ca4:	00c0b404 	movi	r3,720
     ca8:	00824034 	movhi	r2,2304
     cac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
     cb0:	00c00044 	movi	r3,1
     cb4:	00824034 	movhi	r2,2304
     cb8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     cbc:	00c004c4 	movi	r3,19
     cc0:	00824034 	movhi	r2,2304
     cc4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
     cc8:	00c14504 	movi	r3,1300
     ccc:	00824034 	movhi	r2,2304
     cd0:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
     cd4:	00c1a004 	movi	r3,1664
     cd8:	00824034 	movhi	r2,2304
     cdc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0100);//e
     ce0:	00c04004 	movi	r3,256
     ce4:	00824034 	movhi	r2,2304
     ce8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
     cec:	0007883a 	mov	r3,zero
     cf0:	00824034 	movhi	r2,2304
     cf4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0012);//2
     cf8:	00c00484 	movi	r3,18
     cfc:	00824034 	movhi	r2,2304
     d00:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
     d04:	00c15104 	movi	r3,1348
     d08:	00824034 	movhi	r2,2304
     d0c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
     d10:	00c00204 	movi	r3,8
     d14:	00824034 	movhi	r2,2304
     d18:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
     d1c:	00c0a404 	movi	r3,656
     d20:	00824034 	movhi	r2,2304
     d24:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
     d28:	00c01044 	movi	r3,65
     d2c:	00824034 	movhi	r2,2304
     d30:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
     d34:	00c004c4 	movi	r3,19
     d38:	00824034 	movhi	r2,2304
     d3c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
     d40:	00c14804 	movi	r3,1312
     d44:	00824034 	movhi	r2,2304
     d48:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x054c); //520
     d4c:	00c15304 	movi	r3,1356
     d50:	00824034 	movhi	r2,2304
     d54:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
     d58:	00c00204 	movi	r3,8
     d5c:	00824034 	movhi	r2,2304
     d60:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
     d64:	00c0a404 	movi	r3,656
     d68:	00824034 	movhi	r2,2304
     d6c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
     d70:	00c00044 	movi	r3,1
     d74:	00824034 	movhi	r2,2304
     d78:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
     d7c:	00c004c4 	movi	r3,19
     d80:	00824034 	movhi	r2,2304
     d84:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
     d88:	00c14b04 	movi	r3,1324
     d8c:	00824034 	movhi	r2,2304
     d90:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-3
    IOWR(CY7C67200_BASE,HPI_DATA,0x0554); //c
     d94:	00c15504 	movi	r3,1364
     d98:	00824034 	movhi	r2,2304
     d9c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//e
     da0:	00c00084 	movi	r3,2
     da4:	00824034 	movhi	r2,2304
     da8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
     dac:	00c0a404 	movi	r3,656
     db0:	00824034 	movhi	r2,2304
     db4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
     db8:	00c01044 	movi	r3,65
     dbc:	00824034 	movhi	r2,2304
     dc0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
     dc4:	00c004c4 	movi	r3,19
     dc8:	00824034 	movhi	r2,2304
     dcc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
     dd0:	00c14e04 	movi	r3,1336
     dd4:	00824034 	movhi	r2,2304
     dd8:	10c00035 	stwio	r3,0(r2)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //538
     ddc:	0007883a 	mov	r3,zero
     de0:	00824034 	movhi	r2,2304
     de4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
     de8:	0007883a 	mov	r3,zero
     dec:	00824034 	movhi	r2,2304
     df0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//c
     df4:	00c08404 	movi	r3,528
     df8:	00824034 	movhi	r2,2304
     dfc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//e
     e00:	00c01044 	movi	r3,65
     e04:	00824034 	movhi	r2,2304
     e08:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
     e0c:	00c004c4 	movi	r3,19
     e10:	00824034 	movhi	r2,2304
     e14:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//2
     e18:	0007883a 	mov	r3,zero
     e1c:	00824034 	movhi	r2,2304
     e20:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     e24:	01006c04 	movi	r4,432
     e28:	01414004 	movi	r5,1280
     e2c:	00032cc0 	call	32cc <UsbWrite>
    
    //usleep(100*1000);
    //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     e30:	00006f06 	br	ff0 <main+0xd94>
    {
        //resend the get device descriptor
        //get device descriptor

    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
     e34:	00c14004 	movi	r3,1280
     e38:	00824034 	movhi	r2,2304
     e3c:	10800204 	addi	r2,r2,8
     e40:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
     e44:	00c14304 	movi	r3,1292
     e48:	00824034 	movhi	r2,2304
     e4c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
     e50:	00c00204 	movi	r3,8
     e54:	00824034 	movhi	r2,2304
     e58:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
     e5c:	00c0b404 	movi	r3,720
     e60:	00824034 	movhi	r2,2304
     e64:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
     e68:	00c00044 	movi	r3,1
     e6c:	00824034 	movhi	r2,2304
     e70:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     e74:	00c004c4 	movi	r3,19
     e78:	00824034 	movhi	r2,2304
     e7c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
     e80:	00c14504 	movi	r3,1300
     e84:	00824034 	movhi	r2,2304
     e88:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
     e8c:	00c1a004 	movi	r3,1664
     e90:	00824034 	movhi	r2,2304
     e94:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0100);//e
     e98:	00c04004 	movi	r3,256
     e9c:	00824034 	movhi	r2,2304
     ea0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
     ea4:	0007883a 	mov	r3,zero
     ea8:	00824034 	movhi	r2,2304
     eac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0012);//2
     eb0:	00c00484 	movi	r3,18
     eb4:	00824034 	movhi	r2,2304
     eb8:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
     ebc:	00c15104 	movi	r3,1348
     ec0:	00824034 	movhi	r2,2304
     ec4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
     ec8:	00c00204 	movi	r3,8
     ecc:	00824034 	movhi	r2,2304
     ed0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
     ed4:	00c0a404 	movi	r3,656
     ed8:	00824034 	movhi	r2,2304
     edc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
     ee0:	00c01044 	movi	r3,65
     ee4:	00824034 	movhi	r2,2304
     ee8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
     eec:	00c004c4 	movi	r3,19
     ef0:	00824034 	movhi	r2,2304
     ef4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
     ef8:	00c14804 	movi	r3,1312
     efc:	00824034 	movhi	r2,2304
     f00:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x054c); //520
     f04:	00c15304 	movi	r3,1356
     f08:	00824034 	movhi	r2,2304
     f0c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
     f10:	00c00204 	movi	r3,8
     f14:	00824034 	movhi	r2,2304
     f18:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
     f1c:	00c0a404 	movi	r3,656
     f20:	00824034 	movhi	r2,2304
     f24:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6
     f28:	00c00044 	movi	r3,1
     f2c:	00824034 	movhi	r2,2304
     f30:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
     f34:	00c004c4 	movi	r3,19
     f38:	00824034 	movhi	r2,2304
     f3c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
     f40:	00c14b04 	movi	r3,1324
     f44:	00824034 	movhi	r2,2304
     f48:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-3
    IOWR(CY7C67200_BASE,HPI_DATA,0x0554); //c
     f4c:	00c15504 	movi	r3,1364
     f50:	00824034 	movhi	r2,2304
     f54:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//e
     f58:	00c00084 	movi	r3,2
     f5c:	00824034 	movhi	r2,2304
     f60:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
     f64:	00c0a404 	movi	r3,656
     f68:	00824034 	movhi	r2,2304
     f6c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
     f70:	00c01044 	movi	r3,65
     f74:	00824034 	movhi	r2,2304
     f78:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
     f7c:	00c004c4 	movi	r3,19
     f80:	00824034 	movhi	r2,2304
     f84:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
     f88:	00c14e04 	movi	r3,1336
     f8c:	00824034 	movhi	r2,2304
     f90:	10c00035 	stwio	r3,0(r2)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //538
     f94:	0007883a 	mov	r3,zero
     f98:	00824034 	movhi	r2,2304
     f9c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
     fa0:	0007883a 	mov	r3,zero
     fa4:	00824034 	movhi	r2,2304
     fa8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//c
     fac:	00c08404 	movi	r3,528
     fb0:	00824034 	movhi	r2,2304
     fb4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//e
     fb8:	00c01044 	movi	r3,65
     fbc:	00824034 	movhi	r2,2304
     fc0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
     fc4:	00c004c4 	movi	r3,19
     fc8:	00824034 	movhi	r2,2304
     fcc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//2
     fd0:	0007883a 	mov	r3,zero
     fd4:	00824034 	movhi	r2,2304
     fd8:	10c00035 	stwio	r3,0(r2)
    
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     fdc:	01006c04 	movi	r4,432
     fe0:	01414004 	movi	r5,1280
     fe4:	00032cc0 	call	32cc <UsbWrite>
    usleep(10*1000);
     fe8:	0109c404 	movi	r4,10000
     fec:	000ffc80 	call	ffc8 <usleep>
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    
    //usleep(100*1000);
    //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     ff0:	00824034 	movhi	r2,2304
     ff4:	10800304 	addi	r2,r2,12
     ff8:	10800037 	ldwio	r2,0(r2)
     ffc:	1080040c 	andi	r2,r2,16
    1000:	103f8c26 	beq	r2,zero,e34 <__alt_mem_sram+0xf7e00e34>
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    usleep(10*1000);
    }
    
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    1004:	01005104 	movi	r4,324
    1008:	00033140 	call	3314 <UsbRead>
    100c:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1010:	01005104 	movi	r4,324
    1014:	000b883a 	mov	r5,zero
    1018:	00032cc0 	call	32cc <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    101c:	00000d06 	br	1054 <main+0xdf8>
    {
       if(usb_ctl_val == 0x000)
    1020:	e0bff80b 	ldhu	r2,-32(fp)
    1024:	10000526 	beq	r2,zero,103c <main+0xde0>
       {
       }
       else
       {
        printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    1028:	e0bff80b 	ldhu	r2,-32(fp)
    102c:	01000074 	movhi	r4,1
    1030:	21085f04 	addi	r4,r4,8572
    1034:	100b883a 	mov	r5,r2
    1038:	00034380 	call	3438 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    103c:	01005104 	movi	r4,324
    1040:	00033140 	call	3314 <UsbRead>
    1044:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1048:	01005104 	movi	r4,324
    104c:	000b883a 	mov	r5,zero
    1050:	00032cc0 	call	32cc <UsbWrite>
    }
    
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    1054:	e0bff80b 	ldhu	r2,-32(fp)
    1058:	10840018 	cmpnei	r2,r2,4096
    105c:	103ff01e 	bne	r2,zero,1020 <__alt_mem_sram+0xf7e01020>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    1060:	00c14184 	movi	r3,1286
    1064:	00824034 	movhi	r2,2304
    1068:	10800204 	addi	r2,r2,8
    106c:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    1070:	00824034 	movhi	r2,2304
    1074:	10800037 	ldwio	r2,0(r2)
    1078:	01000074 	movhi	r4,1
    107c:	21088d04 	addi	r4,r4,8756
    1080:	100b883a 	mov	r5,r2
    1084:	00034380 	call	3438 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    1088:	00c14204 	movi	r3,1288
    108c:	00824034 	movhi	r2,2304
    1090:	10800204 	addi	r2,r2,8
    1094:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    1098:	00824034 	movhi	r2,2304
    109c:	10800037 	ldwio	r2,0(r2)
    10a0:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
    10a4:	e0bff80b 	ldhu	r2,-32(fp)
    10a8:	01000074 	movhi	r4,1
    10ac:	21089804 	addi	r4,r4,8800
    10b0:	100b883a 	mov	r5,r2
    10b4:	00034380 	call	3438 <printf>
    while (usb_ctl_val != 0x03) 
    10b8:	00001806 	br	111c <main+0xec0>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    10bc:	00824034 	movhi	r2,2304
    10c0:	10800304 	addi	r2,r2,12
    10c4:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    10c8:	01005104 	movi	r4,324
    10cc:	00033140 	call	3314 <UsbRead>
    10d0:	10bfffcc 	andi	r2,r2,65535
    10d4:	10840018 	cmpnei	r2,r2,4096
    10d8:	1000091e 	bne	r2,zero,1100 <main+0xea4>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    10dc:	01005104 	movi	r4,324
    10e0:	000b883a 	mov	r5,zero
    10e4:	00032cc0 	call	32cc <UsbWrite>
                   
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    10e8:	0001883a 	nop
    10ec:	00824034 	movhi	r2,2304
    10f0:	10800304 	addi	r2,r2,12
    10f4:	10800037 	ldwio	r2,0(r2)
    10f8:	1080040c 	andi	r2,r2,16
    10fc:	103ffb26 	beq	r2,zero,10ec <__alt_mem_sram+0xf7e010ec>
           {
            
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    1100:	00c14204 	movi	r3,1288
    1104:	00824034 	movhi	r2,2304
    1108:	10800204 	addi	r2,r2,8
    110c:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    1110:	00824034 	movhi	r2,2304
    1114:	10800037 	ldwio	r2,0(r2)
    1118:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    111c:	e0bff80b 	ldhu	r2,-32(fp)
    1120:	108000d8 	cmpnei	r2,r2,3
    1124:	103fe51e 	bne	r2,zero,10bc <__alt_mem_sram+0xf7e010bc>
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
       
    printf("------------[ENUM PROCESS]:get device descriptor-2 pass!--------------\n");
    1128:	01000074 	movhi	r4,1
    112c:	2108b804 	addi	r4,r4,8928
    1130:	000352c0 	call	352c <puts>
//    printf("\n[ENUM PROCESS]:TD rec data8 is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    //-----------------------------------get configuration descriptor -1 ----------------------------------//
    //usleep(1000);
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    1134:	00c14004 	movi	r3,1280
    1138:	00824034 	movhi	r2,2304
    113c:	10800204 	addi	r2,r2,8
    1140:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    1144:	00c14304 	movi	r3,1292
    1148:	00824034 	movhi	r2,2304
    114c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    1150:	00c00204 	movi	r3,8
    1154:	00824034 	movhi	r2,2304
    1158:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    115c:	00c0b404 	movi	r3,720
    1160:	00824034 	movhi	r2,2304
    1164:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    1168:	00c00044 	movi	r3,1
    116c:	00824034 	movhi	r2,2304
    1170:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    1174:	00c004c4 	movi	r3,19
    1178:	00824034 	movhi	r2,2304
    117c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    1180:	00c14504 	movi	r3,1300
    1184:	00824034 	movhi	r2,2304
    1188:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
    118c:	00c1a004 	movi	r3,1664
    1190:	00824034 	movhi	r2,2304
    1194:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0200);//e
    1198:	00c08004 	movi	r3,512
    119c:	00824034 	movhi	r2,2304
    11a0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    11a4:	0007883a 	mov	r3,zero
    11a8:	00824034 	movhi	r2,2304
    11ac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0009);//2
    11b0:	00c00244 	movi	r3,9
    11b4:	00824034 	movhi	r2,2304
    11b8:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
    11bc:	00c15104 	movi	r3,1348
    11c0:	00824034 	movhi	r2,2304
    11c4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    11c8:	00c00204 	movi	r3,8
    11cc:	00824034 	movhi	r2,2304
    11d0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    11d4:	00c0a404 	movi	r3,656
    11d8:	00824034 	movhi	r2,2304
    11dc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    11e0:	00c01044 	movi	r3,65
    11e4:	00824034 	movhi	r2,2304
    11e8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    11ec:	00c004c4 	movi	r3,19
    11f0:	00824034 	movhi	r2,2304
    11f4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    11f8:	00c14804 	movi	r3,1312
    11fc:	00824034 	movhi	r2,2304
    1200:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x054c); //520
    1204:	00c15304 	movi	r3,1356
    1208:	00824034 	movhi	r2,2304
    120c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//2
    1210:	00c00044 	movi	r3,1
    1214:	00824034 	movhi	r2,2304
    1218:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    121c:	00c0a404 	movi	r3,656
    1220:	00824034 	movhi	r2,2304
    1224:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    1228:	00c00044 	movi	r3,1
    122c:	00824034 	movhi	r2,2304
    1230:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    1234:	00c004c4 	movi	r3,19
    1238:	00824034 	movhi	r2,2304
    123c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    1240:	00c14b04 	movi	r3,1324
    1244:	00824034 	movhi	r2,2304
    1248:	10c00035 	stwio	r3,0(r2)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //52c
    124c:	0007883a 	mov	r3,zero
    1250:	00824034 	movhi	r2,2304
    1254:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
    1258:	0007883a 	mov	r3,zero
    125c:	00824034 	movhi	r2,2304
    1260:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//530
    1264:	00c08404 	movi	r3,528
    1268:	00824034 	movhi	r2,2304
    126c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    1270:	00c01044 	movi	r3,65
    1274:	00824034 	movhi	r2,2304
    1278:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    127c:	00c004c4 	movi	r3,19
    1280:	00824034 	movhi	r2,2304
    1284:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
    1288:	0007883a 	mov	r3,zero
    128c:	00824034 	movhi	r2,2304
    1290:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1294:	01006c04 	movi	r4,432
    1298:	01414004 	movi	r5,1280
    129c:	00032cc0 	call	32cc <UsbWrite>
    
   //usleep(10*1000);
   //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    12a0:	00005d06 	br	1418 <main+0x11bc>
    {
        //resend the get device descriptor
        //get device descriptor

    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    12a4:	00c14004 	movi	r3,1280
    12a8:	00824034 	movhi	r2,2304
    12ac:	10800204 	addi	r2,r2,8
    12b0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    12b4:	00c14304 	movi	r3,1292
    12b8:	00824034 	movhi	r2,2304
    12bc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    12c0:	00c00204 	movi	r3,8
    12c4:	00824034 	movhi	r2,2304
    12c8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    12cc:	00c0b404 	movi	r3,720
    12d0:	00824034 	movhi	r2,2304
    12d4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    12d8:	00c00044 	movi	r3,1
    12dc:	00824034 	movhi	r2,2304
    12e0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    12e4:	00c004c4 	movi	r3,19
    12e8:	00824034 	movhi	r2,2304
    12ec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    12f0:	00c14504 	movi	r3,1300
    12f4:	00824034 	movhi	r2,2304
    12f8:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
    12fc:	00c1a004 	movi	r3,1664
    1300:	00824034 	movhi	r2,2304
    1304:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0200);//e
    1308:	00c08004 	movi	r3,512
    130c:	00824034 	movhi	r2,2304
    1310:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    1314:	0007883a 	mov	r3,zero
    1318:	00824034 	movhi	r2,2304
    131c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0009);//2
    1320:	00c00244 	movi	r3,9
    1324:	00824034 	movhi	r2,2304
    1328:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
    132c:	00c15104 	movi	r3,1348
    1330:	00824034 	movhi	r2,2304
    1334:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    1338:	00c00204 	movi	r3,8
    133c:	00824034 	movhi	r2,2304
    1340:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    1344:	00c0a404 	movi	r3,656
    1348:	00824034 	movhi	r2,2304
    134c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    1350:	00c01044 	movi	r3,65
    1354:	00824034 	movhi	r2,2304
    1358:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    135c:	00c004c4 	movi	r3,19
    1360:	00824034 	movhi	r2,2304
    1364:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    1368:	00c14804 	movi	r3,1312
    136c:	00824034 	movhi	r2,2304
    1370:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x054c); //520
    1374:	00c15304 	movi	r3,1356
    1378:	00824034 	movhi	r2,2304
    137c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//2
    1380:	00c00044 	movi	r3,1
    1384:	00824034 	movhi	r2,2304
    1388:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    138c:	00c0a404 	movi	r3,656
    1390:	00824034 	movhi	r2,2304
    1394:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    1398:	00c00044 	movi	r3,1
    139c:	00824034 	movhi	r2,2304
    13a0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    13a4:	00c004c4 	movi	r3,19
    13a8:	00824034 	movhi	r2,2304
    13ac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    13b0:	00c14b04 	movi	r3,1324
    13b4:	00824034 	movhi	r2,2304
    13b8:	10c00035 	stwio	r3,0(r2)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //52c
    13bc:	0007883a 	mov	r3,zero
    13c0:	00824034 	movhi	r2,2304
    13c4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
    13c8:	0007883a 	mov	r3,zero
    13cc:	00824034 	movhi	r2,2304
    13d0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//530
    13d4:	00c08404 	movi	r3,528
    13d8:	00824034 	movhi	r2,2304
    13dc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    13e0:	00c01044 	movi	r3,65
    13e4:	00824034 	movhi	r2,2304
    13e8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    13ec:	00c004c4 	movi	r3,19
    13f0:	00824034 	movhi	r2,2304
    13f4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
    13f8:	0007883a 	mov	r3,zero
    13fc:	00824034 	movhi	r2,2304
    1400:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1404:	01006c04 	movi	r4,432
    1408:	01414004 	movi	r5,1280
    140c:	00032cc0 	call	32cc <UsbWrite>
    usleep(10*1000);
    1410:	0109c404 	movi	r4,10000
    1414:	000ffc80 	call	ffc8 <usleep>
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    
   //usleep(10*1000);
   //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1418:	00824034 	movhi	r2,2304
    141c:	10800304 	addi	r2,r2,12
    1420:	10800037 	ldwio	r2,0(r2)
    1424:	1080040c 	andi	r2,r2,16
    1428:	103f9e26 	beq	r2,zero,12a4 <__alt_mem_sram+0xf7e012a4>
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    142c:	01005104 	movi	r4,324
    1430:	00033140 	call	3314 <UsbRead>
    1434:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1438:	01005104 	movi	r4,324
    143c:	000b883a 	mov	r5,zero
    1440:	00032cc0 	call	32cc <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    1444:	00000d06 	br	147c <main+0x1220>
    {
       if(usb_ctl_val == 0x000)
    1448:	e0bff80b 	ldhu	r2,-32(fp)
    144c:	10000526 	beq	r2,zero,1464 <main+0x1208>
       {
       }
       else
       {
        printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    1450:	e0bff80b 	ldhu	r2,-32(fp)
    1454:	01000074 	movhi	r4,1
    1458:	21085f04 	addi	r4,r4,8572
    145c:	100b883a 	mov	r5,r2
    1460:	00034380 	call	3438 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    1464:	01005104 	movi	r4,324
    1468:	00033140 	call	3314 <UsbRead>
    146c:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1470:	01005104 	movi	r4,324
    1474:	000b883a 	mov	r5,zero
    1478:	00032cc0 	call	32cc <UsbWrite>
    usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    147c:	e0bff80b 	ldhu	r2,-32(fp)
    1480:	10840018 	cmpnei	r2,r2,4096
    1484:	103ff01e 	bne	r2,zero,1448 <__alt_mem_sram+0xf7e01448>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    1488:	00c14184 	movi	r3,1286
    148c:	00824034 	movhi	r2,2304
    1490:	10800204 	addi	r2,r2,8
    1494:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    1498:	00824034 	movhi	r2,2304
    149c:	10800037 	ldwio	r2,0(r2)
    14a0:	01000074 	movhi	r4,1
    14a4:	2108ca04 	addi	r4,r4,9000
    14a8:	100b883a 	mov	r5,r2
    14ac:	00034380 	call	3438 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    14b0:	00c14204 	movi	r3,1288
    14b4:	00824034 	movhi	r2,2304
    14b8:	10800204 	addi	r2,r2,8
    14bc:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    14c0:	00824034 	movhi	r2,2304
    14c4:	10800037 	ldwio	r2,0(r2)
    14c8:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
    14cc:	e0bff80b 	ldhu	r2,-32(fp)
    14d0:	01000074 	movhi	r4,1
    14d4:	2108d504 	addi	r4,r4,9044
    14d8:	100b883a 	mov	r5,r2
    14dc:	00034380 	call	3438 <printf>
    while (usb_ctl_val != 0x03) 
    14e0:	00001806 	br	1544 <main+0x12e8>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    14e4:	00824034 	movhi	r2,2304
    14e8:	10800304 	addi	r2,r2,12
    14ec:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    14f0:	01005104 	movi	r4,324
    14f4:	00033140 	call	3314 <UsbRead>
    14f8:	10bfffcc 	andi	r2,r2,65535
    14fc:	10840018 	cmpnei	r2,r2,4096
    1500:	1000091e 	bne	r2,zero,1528 <main+0x12cc>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1504:	01005104 	movi	r4,324
    1508:	000b883a 	mov	r5,zero
    150c:	00032cc0 	call	32cc <UsbWrite>
                   
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1510:	0001883a 	nop
    1514:	00824034 	movhi	r2,2304
    1518:	10800304 	addi	r2,r2,12
    151c:	10800037 	ldwio	r2,0(r2)
    1520:	1080040c 	andi	r2,r2,16
    1524:	103ffb26 	beq	r2,zero,1514 <__alt_mem_sram+0xf7e01514>
           {
            
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    1528:	00c14204 	movi	r3,1288
    152c:	00824034 	movhi	r2,2304
    1530:	10800204 	addi	r2,r2,8
    1534:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    1538:	00824034 	movhi	r2,2304
    153c:	10800037 	ldwio	r2,0(r2)
    1540:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    1544:	e0bff80b 	ldhu	r2,-32(fp)
    1548:	108000d8 	cmpnei	r2,r2,3
    154c:	103fe51e 	bne	r2,zero,14e4 <__alt_mem_sram+0xf7e014e4>
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
    printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
    1550:	01000074 	movhi	r4,1
    1554:	2108e104 	addi	r4,r4,9092
    1558:	000352c0 	call	352c <puts>
    
    //-----------------------------------get configuration descriptor-2------------------------------------//
    //get device descriptor
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    155c:	00c14004 	movi	r3,1280
    1560:	00824034 	movhi	r2,2304
    1564:	10800204 	addi	r2,r2,8
    1568:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    156c:	00c14304 	movi	r3,1292
    1570:	00824034 	movhi	r2,2304
    1574:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    1578:	00c00204 	movi	r3,8
    157c:	00824034 	movhi	r2,2304
    1580:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    1584:	00c0b404 	movi	r3,720
    1588:	00824034 	movhi	r2,2304
    158c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    1590:	00c00044 	movi	r3,1
    1594:	00824034 	movhi	r2,2304
    1598:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    159c:	00c004c4 	movi	r3,19
    15a0:	00824034 	movhi	r2,2304
    15a4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    15a8:	00c14504 	movi	r3,1300
    15ac:	00824034 	movhi	r2,2304
    15b0:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
    15b4:	00c1a004 	movi	r3,1664
    15b8:	00824034 	movhi	r2,2304
    15bc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0200);//e //config 
    15c0:	00c08004 	movi	r3,512
    15c4:	00824034 	movhi	r2,2304
    15c8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    15cc:	0007883a 	mov	r3,zero
    15d0:	00824034 	movhi	r2,2304
    15d4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x00FF);//2
    15d8:	00c03fc4 	movi	r3,255
    15dc:	00824034 	movhi	r2,2304
    15e0:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x055c); //514
    15e4:	00c15704 	movi	r3,1372
    15e8:	00824034 	movhi	r2,2304
    15ec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    15f0:	00c00204 	movi	r3,8
    15f4:	00824034 	movhi	r2,2304
    15f8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    15fc:	00c0a404 	movi	r3,656
    1600:	00824034 	movhi	r2,2304
    1604:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    1608:	00c01044 	movi	r3,65
    160c:	00824034 	movhi	r2,2304
    1610:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    1614:	00c004c4 	movi	r3,19
    1618:	00824034 	movhi	r2,2304
    161c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    1620:	00c14804 	movi	r3,1312
    1624:	00824034 	movhi	r2,2304
    1628:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x0564); //520
    162c:	00c15904 	movi	r3,1380
    1630:	00824034 	movhi	r2,2304
    1634:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    1638:	00c00204 	movi	r3,8
    163c:	00824034 	movhi	r2,2304
    1640:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    1644:	00c0a404 	movi	r3,656
    1648:	00824034 	movhi	r2,2304
    164c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    1650:	00c00044 	movi	r3,1
    1654:	00824034 	movhi	r2,2304
    1658:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    165c:	00c004c4 	movi	r3,19
    1660:	00824034 	movhi	r2,2304
    1664:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    1668:	00c14b04 	movi	r3,1324
    166c:	00824034 	movhi	r2,2304
    1670:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-3
    IOWR(CY7C67200_BASE,HPI_DATA,0x056c); //52c
    1674:	00c15b04 	movi	r3,1388
    1678:	00824034 	movhi	r2,2304
    167c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
    1680:	00c00204 	movi	r3,8
    1684:	00824034 	movhi	r2,2304
    1688:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
    168c:	00c0a404 	movi	r3,656
    1690:	00824034 	movhi	r2,2304
    1694:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    1698:	00c01044 	movi	r3,65
    169c:	00824034 	movhi	r2,2304
    16a0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    16a4:	00c004c4 	movi	r3,19
    16a8:	00824034 	movhi	r2,2304
    16ac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
    16b0:	00c14e04 	movi	r3,1336
    16b4:	00824034 	movhi	r2,2304
    16b8:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-4
    IOWR(CY7C67200_BASE,HPI_DATA,0x0574); //538
    16bc:	00c15d04 	movi	r3,1396
    16c0:	00824034 	movhi	r2,2304
    16c4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//a
    16c8:	00c00204 	movi	r3,8
    16cc:	00824034 	movhi	r2,2304
    16d0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
    16d4:	00c0a404 	movi	r3,656
    16d8:	00824034 	movhi	r2,2304
    16dc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
    16e0:	00c00044 	movi	r3,1
    16e4:	00824034 	movhi	r2,2304
    16e8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
    16ec:	00c004c4 	movi	r3,19
    16f0:	00824034 	movhi	r2,2304
    16f4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544);//2
    16f8:	00c15104 	movi	r3,1348
    16fc:	00824034 	movhi	r2,2304
    1700:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-5
    IOWR(CY7C67200_BASE,HPI_DATA,0x057c); //544
    1704:	00c15f04 	movi	r3,1404
    1708:	00824034 	movhi	r2,2304
    170c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//6
    1710:	00c00084 	movi	r3,2
    1714:	00824034 	movhi	r2,2304
    1718:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    171c:	00c0a404 	movi	r3,656
    1720:	00824034 	movhi	r2,2304
    1724:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a //data1
    1728:	00c01044 	movi	r3,65
    172c:	00824034 	movhi	r2,2304
    1730:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    1734:	00c004c4 	movi	r3,19
    1738:	00824034 	movhi	r2,2304
    173c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0550);//e
    1740:	00c15404 	movi	r3,1360
    1744:	00824034 	movhi	r2,2304
    1748:	10c00035 	stwio	r3,0(r2)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //550
    174c:	0007883a 	mov	r3,zero
    1750:	00824034 	movhi	r2,2304
    1754:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//2
    1758:	0007883a 	mov	r3,zero
    175c:	00824034 	movhi	r2,2304
    1760:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//4
    1764:	00c08404 	movi	r3,528
    1768:	00824034 	movhi	r2,2304
    176c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6
    1770:	00c01044 	movi	r3,65
    1774:	00824034 	movhi	r2,2304
    1778:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    177c:	00c004c4 	movi	r3,19
    1780:	00824034 	movhi	r2,2304
    1784:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
    1788:	0007883a 	mov	r3,zero
    178c:	00824034 	movhi	r2,2304
    1790:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1794:	01006c04 	movi	r4,432
    1798:	01414004 	movi	r5,1280
    179c:	00032cc0 	call	32cc <UsbWrite>
    
   usleep(100*1000);
    17a0:	010000b4 	movhi	r4,2
    17a4:	2121a804 	addi	r4,r4,-31072
    17a8:	000ffc80 	call	ffc8 <usleep>
   //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    17ac:	00009306 	br	19fc <main+0x17a0>
    {
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    17b0:	00c14004 	movi	r3,1280
    17b4:	00824034 	movhi	r2,2304
    17b8:	10800204 	addi	r2,r2,8
    17bc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    17c0:	00c14304 	movi	r3,1292
    17c4:	00824034 	movhi	r2,2304
    17c8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    17cc:	00c00204 	movi	r3,8
    17d0:	00824034 	movhi	r2,2304
    17d4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    17d8:	00c0b404 	movi	r3,720
    17dc:	00824034 	movhi	r2,2304
    17e0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    17e4:	00c00044 	movi	r3,1
    17e8:	00824034 	movhi	r2,2304
    17ec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    17f0:	00c004c4 	movi	r3,19
    17f4:	00824034 	movhi	r2,2304
    17f8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    17fc:	00c14504 	movi	r3,1300
    1800:	00824034 	movhi	r2,2304
    1804:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
    1808:	00c1a004 	movi	r3,1664
    180c:	00824034 	movhi	r2,2304
    1810:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0200);//e //config 
    1814:	00c08004 	movi	r3,512
    1818:	00824034 	movhi	r2,2304
    181c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    1820:	0007883a 	mov	r3,zero
    1824:	00824034 	movhi	r2,2304
    1828:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x00FF);//2
    182c:	00c03fc4 	movi	r3,255
    1830:	00824034 	movhi	r2,2304
    1834:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x055c); //514
    1838:	00c15704 	movi	r3,1372
    183c:	00824034 	movhi	r2,2304
    1840:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    1844:	00c00204 	movi	r3,8
    1848:	00824034 	movhi	r2,2304
    184c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    1850:	00c0a404 	movi	r3,656
    1854:	00824034 	movhi	r2,2304
    1858:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    185c:	00c01044 	movi	r3,65
    1860:	00824034 	movhi	r2,2304
    1864:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    1868:	00c004c4 	movi	r3,19
    186c:	00824034 	movhi	r2,2304
    1870:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    1874:	00c14804 	movi	r3,1312
    1878:	00824034 	movhi	r2,2304
    187c:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x0564); //520
    1880:	00c15904 	movi	r3,1380
    1884:	00824034 	movhi	r2,2304
    1888:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    188c:	00c00204 	movi	r3,8
    1890:	00824034 	movhi	r2,2304
    1894:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    1898:	00c0a404 	movi	r3,656
    189c:	00824034 	movhi	r2,2304
    18a0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    18a4:	00c00044 	movi	r3,1
    18a8:	00824034 	movhi	r2,2304
    18ac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    18b0:	00c004c4 	movi	r3,19
    18b4:	00824034 	movhi	r2,2304
    18b8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    18bc:	00c14b04 	movi	r3,1324
    18c0:	00824034 	movhi	r2,2304
    18c4:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-3
    IOWR(CY7C67200_BASE,HPI_DATA,0x056c); //52c
    18c8:	00c15b04 	movi	r3,1388
    18cc:	00824034 	movhi	r2,2304
    18d0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
    18d4:	00c00204 	movi	r3,8
    18d8:	00824034 	movhi	r2,2304
    18dc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
    18e0:	00c0a404 	movi	r3,656
    18e4:	00824034 	movhi	r2,2304
    18e8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    18ec:	00c01044 	movi	r3,65
    18f0:	00824034 	movhi	r2,2304
    18f4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    18f8:	00c004c4 	movi	r3,19
    18fc:	00824034 	movhi	r2,2304
    1900:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
    1904:	00c14e04 	movi	r3,1336
    1908:	00824034 	movhi	r2,2304
    190c:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-4
    IOWR(CY7C67200_BASE,HPI_DATA,0x0574); //538
    1910:	00c15d04 	movi	r3,1396
    1914:	00824034 	movhi	r2,2304
    1918:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//a
    191c:	00c00204 	movi	r3,8
    1920:	00824034 	movhi	r2,2304
    1924:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
    1928:	00c0a404 	movi	r3,656
    192c:	00824034 	movhi	r2,2304
    1930:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
    1934:	00c00044 	movi	r3,1
    1938:	00824034 	movhi	r2,2304
    193c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
    1940:	00c004c4 	movi	r3,19
    1944:	00824034 	movhi	r2,2304
    1948:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544);//2
    194c:	00c15104 	movi	r3,1348
    1950:	00824034 	movhi	r2,2304
    1954:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-5
    IOWR(CY7C67200_BASE,HPI_DATA,0x057c); //544
    1958:	00c15f04 	movi	r3,1404
    195c:	00824034 	movhi	r2,2304
    1960:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//6
    1964:	00c00084 	movi	r3,2
    1968:	00824034 	movhi	r2,2304
    196c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    1970:	00c0a404 	movi	r3,656
    1974:	00824034 	movhi	r2,2304
    1978:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a //data1
    197c:	00c01044 	movi	r3,65
    1980:	00824034 	movhi	r2,2304
    1984:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    1988:	00c004c4 	movi	r3,19
    198c:	00824034 	movhi	r2,2304
    1990:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0550);//e
    1994:	00c15404 	movi	r3,1360
    1998:	00824034 	movhi	r2,2304
    199c:	10c00035 	stwio	r3,0(r2)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //550
    19a0:	0007883a 	mov	r3,zero
    19a4:	00824034 	movhi	r2,2304
    19a8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//2
    19ac:	0007883a 	mov	r3,zero
    19b0:	00824034 	movhi	r2,2304
    19b4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//4
    19b8:	00c08404 	movi	r3,528
    19bc:	00824034 	movhi	r2,2304
    19c0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6
    19c4:	00c01044 	movi	r3,65
    19c8:	00824034 	movhi	r2,2304
    19cc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    19d0:	00c004c4 	movi	r3,19
    19d4:	00824034 	movhi	r2,2304
    19d8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
    19dc:	0007883a 	mov	r3,zero
    19e0:	00824034 	movhi	r2,2304
    19e4:	10c00035 	stwio	r3,0(r2)
          
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    19e8:	01006c04 	movi	r4,432
    19ec:	01414004 	movi	r5,1280
    19f0:	00032cc0 	call	32cc <UsbWrite>
    usleep(10*1000);
    19f4:	0109c404 	movi	r4,10000
    19f8:	000ffc80 	call	ffc8 <usleep>
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    
   usleep(100*1000);
   //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    19fc:	00824034 	movhi	r2,2304
    1a00:	10800304 	addi	r2,r2,12
    1a04:	10800037 	ldwio	r2,0(r2)
    1a08:	1080040c 	andi	r2,r2,16
    1a0c:	103f6826 	beq	r2,zero,17b0 <__alt_mem_sram+0xf7e017b0>
          
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    usleep(10*1000);
    }
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    1a10:	01005104 	movi	r4,324
    1a14:	00033140 	call	3314 <UsbRead>
    1a18:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1a1c:	01005104 	movi	r4,324
    1a20:	000b883a 	mov	r5,zero
    1a24:	00032cc0 	call	32cc <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    1a28:	00000d06 	br	1a60 <main+0x1804>
    {
       if(usb_ctl_val == 0x000)
    1a2c:	e0bff80b 	ldhu	r2,-32(fp)
    1a30:	10000526 	beq	r2,zero,1a48 <main+0x17ec>
       {
       }
       else
       {
        printf("[SIE MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    1a34:	e0bff80b 	ldhu	r2,-32(fp)
    1a38:	01000074 	movhi	r4,1
    1a3c:	2108f404 	addi	r4,r4,9168
    1a40:	100b883a 	mov	r5,r2
    1a44:	00034380 	call	3438 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    1a48:	01005104 	movi	r4,324
    1a4c:	00033140 	call	3314 <UsbRead>
    1a50:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1a54:	01005104 	movi	r4,324
    1a58:	000b883a 	mov	r5,zero
    1a5c:	00032cc0 	call	32cc <UsbWrite>
    usleep(10*1000);
    }
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    1a60:	e0bff80b 	ldhu	r2,-32(fp)
    1a64:	10840018 	cmpnei	r2,r2,4096
    1a68:	103ff01e 	bne	r2,zero,1a2c <__alt_mem_sram+0xf7e01a2c>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    1a6c:	00c14184 	movi	r3,1286
    1a70:	00824034 	movhi	r2,2304
    1a74:	10800204 	addi	r2,r2,8
    1a78:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    1a7c:	00824034 	movhi	r2,2304
    1a80:	10800037 	ldwio	r2,0(r2)
    1a84:	01000074 	movhi	r4,1
    1a88:	2108fc04 	addi	r4,r4,9200
    1a8c:	100b883a 	mov	r5,r2
    1a90:	00034380 	call	3438 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    1a94:	00c14204 	movi	r3,1288
    1a98:	00824034 	movhi	r2,2304
    1a9c:	10800204 	addi	r2,r2,8
    1aa0:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    1aa4:	00824034 	movhi	r2,2304
    1aa8:	10800037 	ldwio	r2,0(r2)
    1aac:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
    1ab0:	e0bff80b 	ldhu	r2,-32(fp)
    1ab4:	01000074 	movhi	r4,1
    1ab8:	21090704 	addi	r4,r4,9244
    1abc:	100b883a 	mov	r5,r2
    1ac0:	00034380 	call	3438 <printf>
    while (usb_ctl_val != 0x03) 
    1ac4:	00001806 	br	1b28 <main+0x18cc>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    1ac8:	00824034 	movhi	r2,2304
    1acc:	10800304 	addi	r2,r2,12
    1ad0:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    1ad4:	01005104 	movi	r4,324
    1ad8:	00033140 	call	3314 <UsbRead>
    1adc:	10bfffcc 	andi	r2,r2,65535
    1ae0:	10840018 	cmpnei	r2,r2,4096
    1ae4:	1000091e 	bne	r2,zero,1b0c <main+0x18b0>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1ae8:	01005104 	movi	r4,324
    1aec:	000b883a 	mov	r5,zero
    1af0:	00032cc0 	call	32cc <UsbWrite>
                   
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1af4:	0001883a 	nop
    1af8:	00824034 	movhi	r2,2304
    1afc:	10800304 	addi	r2,r2,12
    1b00:	10800037 	ldwio	r2,0(r2)
    1b04:	1080040c 	andi	r2,r2,16
    1b08:	103ffb26 	beq	r2,zero,1af8 <__alt_mem_sram+0xf7e01af8>
           {
            
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    1b0c:	00c14204 	movi	r3,1288
    1b10:	00824034 	movhi	r2,2304
    1b14:	10800204 	addi	r2,r2,8
    1b18:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    1b1c:	00824034 	movhi	r2,2304
    1b20:	10800037 	ldwio	r2,0(r2)
    1b24:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    1b28:	e0bff80b 	ldhu	r2,-32(fp)
    1b2c:	108000d8 	cmpnei	r2,r2,3
    1b30:	103fe51e 	bne	r2,zero,1ac8 <__alt_mem_sram+0xf7e01ac8>
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
       
       
    printf("-----------[ENUM PROCESS]:get configuration descriptor-2 pass!------------\n");
    1b34:	01000074 	movhi	r4,1
    1b38:	21091304 	addi	r4,r4,9292
    1b3c:	000352c0 	call	352c <puts>
    

    IOWR(CY7C67200_BASE,HPI_ADDR,0x056c); //the start address
    1b40:	00c15b04 	movi	r3,1388
    1b44:	00824034 	movhi	r2,2304
    1b48:	10800204 	addi	r2,r2,8
    1b4c:	10c00035 	stwio	r3,0(r2)

    if(  ( IORD(CY7C67200_BASE,HPI_DATA) & 0x0ff)  ==0x02)
    1b50:	00824034 	movhi	r2,2304
    1b54:	10800037 	ldwio	r2,0(r2)
    1b58:	10803fcc 	andi	r2,r2,255
    1b5c:	10800098 	cmpnei	r2,r2,2
    1b60:	1000041e 	bne	r2,zero,1b74 <main+0x1918>
    {
         printf("\n[INFO]:check TD rec data7 \n[INFO]:Mouse Detected!!!\n\n");
    1b64:	01000074 	movhi	r4,1
    1b68:	21092604 	addi	r4,r4,9368
    1b6c:	000352c0 	call	352c <puts>
    1b70:	00000306 	br	1b80 <main+0x1924>
    }
    else
    {
        printf("\n[INFO]:Mouse Not Detected!!! \n\n");
    1b74:	01000074 	movhi	r4,1
    1b78:	21093404 	addi	r4,r4,9424
    1b7c:	000352c0 	call	352c <puts>
    }
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x057a); //the start address   
    1b80:	00c15e84 	movi	r3,1402
    1b84:	00824034 	movhi	r2,2304
    1b88:	10800204 	addi	r2,r2,8
    1b8c:	10c00035 	stwio	r3,0(r2)
      
    data_size = (IORD(CY7C67200_BASE,HPI_DATA)>>8)&0x0ff; 
    1b90:	00824034 	movhi	r2,2304
    1b94:	10800037 	ldwio	r2,0(r2)
    1b98:	1005d23a 	srai	r2,r2,8
    1b9c:	e0bffe85 	stb	r2,-6(fp)
    printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
    1ba0:	e0bffe83 	ldbu	r2,-6(fp)
    1ba4:	01000074 	movhi	r4,1
    1ba8:	21093c04 	addi	r4,r4,9456
    1bac:	100b883a 	mov	r5,r2
    1bb0:	00034380 	call	3438 <printf>
    
    //------------------------------------set configuration -----------------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    1bb4:	00c14004 	movi	r3,1280
    1bb8:	00824034 	movhi	r2,2304
    1bbc:	10800204 	addi	r2,r2,8
    1bc0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    1bc4:	00c14304 	movi	r3,1292
    1bc8:	00824034 	movhi	r2,2304
    1bcc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    1bd0:	00c00204 	movi	r3,8
    1bd4:	00824034 	movhi	r2,2304
    1bd8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
    1bdc:	00c0b404 	movi	r3,720
    1be0:	00824034 	movhi	r2,2304
    1be4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    1be8:	00c00044 	movi	r3,1
    1bec:	00824034 	movhi	r2,2304
    1bf0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    1bf4:	00c004c4 	movi	r3,19
    1bf8:	00824034 	movhi	r2,2304
    1bfc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    1c00:	00c14504 	movi	r3,1300
    1c04:	00824034 	movhi	r2,2304
    1c08:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0900);
    1c0c:	00c24004 	movi	r3,2304
    1c10:	00824034 	movhi	r2,2304
    1c14:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//device address   
    1c18:	00c00044 	movi	r3,1
    1c1c:	00824034 	movhi	r2,2304
    1c20:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    1c24:	0007883a 	mov	r3,zero
    1c28:	00824034 	movhi	r2,2304
    1c2c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    1c30:	0007883a 	mov	r3,zero
    1c34:	00824034 	movhi	r2,2304
    1c38:	10c00035 	stwio	r3,0(r2)
    //in packet
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
    1c3c:	0007883a 	mov	r3,zero
    1c40:	00824034 	movhi	r2,2304
    1c44:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
    1c48:	0007883a 	mov	r3,zero
    1c4c:	00824034 	movhi	r2,2304
    1c50:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//device address
    1c54:	00c0a404 	movi	r3,656
    1c58:	00824034 	movhi	r2,2304
    1c5c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041); //data 1
    1c60:	00c01044 	movi	r3,65
    1c64:	00824034 	movhi	r2,2304
    1c68:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    1c6c:	00c004c4 	movi	r3,19
    1c70:	00824034 	movhi	r2,2304
    1c74:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    1c78:	0007883a 	mov	r3,zero
    1c7c:	00824034 	movhi	r2,2304
    1c80:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1c84:	01006c04 	movi	r4,432
    1c88:	01414004 	movi	r5,1280
    1c8c:	00032cc0 	call	32cc <UsbWrite>
    //usleep(10*1000);
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1c90:	00003906 	br	1d78 <main+0x1b1c>
    {
        IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    1c94:	00c14004 	movi	r3,1280
    1c98:	00824034 	movhi	r2,2304
    1c9c:	10800204 	addi	r2,r2,8
    1ca0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    1ca4:	00c14304 	movi	r3,1292
    1ca8:	00824034 	movhi	r2,2304
    1cac:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    1cb0:	00c00204 	movi	r3,8
    1cb4:	00824034 	movhi	r2,2304
    1cb8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x02D0);
    1cbc:	00c0b404 	movi	r3,720
    1cc0:	00824034 	movhi	r2,2304
    1cc4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    1cc8:	00c00044 	movi	r3,1
    1ccc:	00824034 	movhi	r2,2304
    1cd0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    1cd4:	00c004c4 	movi	r3,19
    1cd8:	00824034 	movhi	r2,2304
    1cdc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    1ce0:	00c14504 	movi	r3,1300
    1ce4:	00824034 	movhi	r2,2304
    1ce8:	10c00035 	stwio	r3,0(r2)
    
        //td content 4 bytes
        IOWR(CY7C67200_BASE,HPI_DATA,0x0900);
    1cec:	00c24004 	movi	r3,2304
    1cf0:	00824034 	movhi	r2,2304
    1cf4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//device address   
    1cf8:	00c00044 	movi	r3,1
    1cfc:	00824034 	movhi	r2,2304
    1d00:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    1d04:	0007883a 	mov	r3,zero
    1d08:	00824034 	movhi	r2,2304
    1d0c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    1d10:	0007883a 	mov	r3,zero
    1d14:	00824034 	movhi	r2,2304
    1d18:	10c00035 	stwio	r3,0(r2)
        //in packet
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
    1d1c:	0007883a 	mov	r3,zero
    1d20:	00824034 	movhi	r2,2304
    1d24:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
    1d28:	0007883a 	mov	r3,zero
    1d2c:	00824034 	movhi	r2,2304
    1d30:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//device address
    1d34:	00c0a404 	movi	r3,656
    1d38:	00824034 	movhi	r2,2304
    1d3c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0041); //data 1
    1d40:	00c01044 	movi	r3,65
    1d44:	00824034 	movhi	r2,2304
    1d48:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    1d4c:	00c004c4 	movi	r3,19
    1d50:	00824034 	movhi	r2,2304
    1d54:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    1d58:	0007883a 	mov	r3,zero
    1d5c:	00824034 	movhi	r2,2304
    1d60:	10c00035 	stwio	r3,0(r2)
        
        UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1d64:	01006c04 	movi	r4,432
    1d68:	01414004 	movi	r5,1280
    1d6c:	00032cc0 	call	32cc <UsbWrite>
        usleep(10*1000);
    1d70:	0109c404 	movi	r4,10000
    1d74:	000ffc80 	call	ffc8 <usleep>
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    //usleep(10*1000);
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1d78:	00824034 	movhi	r2,2304
    1d7c:	10800304 	addi	r2,r2,12
    1d80:	10800037 	ldwio	r2,0(r2)
    1d84:	1080040c 	andi	r2,r2,16
    1d88:	103fc226 	beq	r2,zero,1c94 <__alt_mem_sram+0xf7e01c94>
        
        UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    1d8c:	01005104 	movi	r4,324
    1d90:	00033140 	call	3314 <UsbRead>
    1d94:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1d98:	01005104 	movi	r4,324
    1d9c:	000b883a 	mov	r5,zero
    1da0:	00032cc0 	call	32cc <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    1da4:	00000d06 	br	1ddc <main+0x1b80>
    {
       if(usb_ctl_val == 0x000)
    1da8:	e0bff80b 	ldhu	r2,-32(fp)
    1dac:	10000526 	beq	r2,zero,1dc4 <main+0x1b68>
       {
       }
       else
       {
        printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    1db0:	e0bff80b 	ldhu	r2,-32(fp)
    1db4:	01000074 	movhi	r4,1
    1db8:	21085f04 	addi	r4,r4,8572
    1dbc:	100b883a 	mov	r5,r2
    1dc0:	00034380 	call	3438 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    1dc4:	01005104 	movi	r4,324
    1dc8:	00033140 	call	3314 <UsbRead>
    1dcc:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1dd0:	01005104 	movi	r4,324
    1dd4:	000b883a 	mov	r5,zero
    1dd8:	00032cc0 	call	32cc <UsbWrite>
        usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    1ddc:	e0bff80b 	ldhu	r2,-32(fp)
    1de0:	10840018 	cmpnei	r2,r2,4096
    1de4:	103ff01e 	bne	r2,zero,1da8 <__alt_mem_sram+0xf7e01da8>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    1de8:	00c14184 	movi	r3,1286
    1dec:	00824034 	movhi	r2,2304
    1df0:	10800204 	addi	r2,r2,8
    1df4:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    1df8:	00824034 	movhi	r2,2304
    1dfc:	10800037 	ldwio	r2,0(r2)
    1e00:	01000074 	movhi	r4,1
    1e04:	21094604 	addi	r4,r4,9496
    1e08:	100b883a 	mov	r5,r2
    1e0c:	00034380 	call	3438 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    1e10:	00c14204 	movi	r3,1288
    1e14:	00824034 	movhi	r2,2304
    1e18:	10800204 	addi	r2,r2,8
    1e1c:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    1e20:	00824034 	movhi	r2,2304
    1e24:	10800037 	ldwio	r2,0(r2)
    1e28:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
    1e2c:	e0bff80b 	ldhu	r2,-32(fp)
    1e30:	01000074 	movhi	r4,1
    1e34:	21095104 	addi	r4,r4,9540
    1e38:	100b883a 	mov	r5,r2
    1e3c:	00034380 	call	3438 <printf>
    while (usb_ctl_val != 0x03) 
    1e40:	00001806 	br	1ea4 <main+0x1c48>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    1e44:	00824034 	movhi	r2,2304
    1e48:	10800304 	addi	r2,r2,12
    1e4c:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    1e50:	01005104 	movi	r4,324
    1e54:	00033140 	call	3314 <UsbRead>
    1e58:	10bfffcc 	andi	r2,r2,65535
    1e5c:	10840018 	cmpnei	r2,r2,4096
    1e60:	1000091e 	bne	r2,zero,1e88 <main+0x1c2c>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1e64:	01005104 	movi	r4,324
    1e68:	000b883a 	mov	r5,zero
    1e6c:	00032cc0 	call	32cc <UsbWrite>
           
        
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1e70:	0001883a 	nop
    1e74:	00824034 	movhi	r2,2304
    1e78:	10800304 	addi	r2,r2,12
    1e7c:	10800037 	ldwio	r2,0(r2)
    1e80:	1080040c 	andi	r2,r2,16
    1e84:	103ffb26 	beq	r2,zero,1e74 <__alt_mem_sram+0xf7e01e74>
           {
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    1e88:	00c14204 	movi	r3,1288
    1e8c:	00824034 	movhi	r2,2304
    1e90:	10800204 	addi	r2,r2,8
    1e94:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    1e98:	00824034 	movhi	r2,2304
    1e9c:	10800037 	ldwio	r2,0(r2)
    1ea0:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    1ea4:	e0bff80b 	ldhu	r2,-32(fp)
    1ea8:	108000d8 	cmpnei	r2,r2,3
    1eac:	103fe51e 	bne	r2,zero,1e44 <__alt_mem_sram+0xf7e01e44>
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
    
    printf("------------[ENUM PROCESS]:set configuration pass!-------------------\n");
    1eb0:	01000074 	movhi	r4,1
    1eb4:	21095d04 	addi	r4,r4,9588
    1eb8:	000352c0 	call	352c <puts>
    
    //----------------------------------------------classe request out ------------------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    1ebc:	00c14004 	movi	r3,1280
    1ec0:	00824034 	movhi	r2,2304
    1ec4:	10800204 	addi	r2,r2,8
    1ec8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    1ecc:	00c14304 	movi	r3,1292
    1ed0:	00824034 	movhi	r2,2304
    1ed4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    1ed8:	00c00204 	movi	r3,8
    1edc:	00824034 	movhi	r2,2304
    1ee0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
    1ee4:	00c0b404 	movi	r3,720
    1ee8:	00824034 	movhi	r2,2304
    1eec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    1ef0:	00c00044 	movi	r3,1
    1ef4:	00824034 	movhi	r2,2304
    1ef8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    1efc:	00c004c4 	movi	r3,19
    1f00:	00824034 	movhi	r2,2304
    1f04:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    1f08:	00c14504 	movi	r3,1300
    1f0c:	00824034 	movhi	r2,2304
    1f10:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0A21);
    1f14:	00c28844 	movi	r3,2593
    1f18:	00824034 	movhi	r2,2304
    1f1c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//device address   
    1f20:	0007883a 	mov	r3,zero
    1f24:	00824034 	movhi	r2,2304
    1f28:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    1f2c:	0007883a 	mov	r3,zero
    1f30:	00824034 	movhi	r2,2304
    1f34:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    1f38:	0007883a 	mov	r3,zero
    1f3c:	00824034 	movhi	r2,2304
    1f40:	10c00035 	stwio	r3,0(r2)
    //in packet
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
    1f44:	0007883a 	mov	r3,zero
    1f48:	00824034 	movhi	r2,2304
    1f4c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number /data length
    1f50:	0007883a 	mov	r3,zero
    1f54:	00824034 	movhi	r2,2304
    1f58:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//device address
    1f5c:	00c0a404 	movi	r3,656
    1f60:	00824034 	movhi	r2,2304
    1f64:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041); //data 1
    1f68:	00c01044 	movi	r3,65
    1f6c:	00824034 	movhi	r2,2304
    1f70:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    1f74:	00c004c4 	movi	r3,19
    1f78:	00824034 	movhi	r2,2304
    1f7c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    1f80:	0007883a 	mov	r3,zero
    1f84:	00824034 	movhi	r2,2304
    1f88:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1f8c:	01006c04 	movi	r4,432
    1f90:	01414004 	movi	r5,1280
    1f94:	00032cc0 	call	32cc <UsbWrite>
    //usleep(10*1000);
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1f98:	00003906 	br	2080 <main+0x1e24>
    {
        IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    1f9c:	00c14004 	movi	r3,1280
    1fa0:	00824034 	movhi	r2,2304
    1fa4:	10800204 	addi	r2,r2,8
    1fa8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    1fac:	00c14304 	movi	r3,1292
    1fb0:	00824034 	movhi	r2,2304
    1fb4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    1fb8:	00c00204 	movi	r3,8
    1fbc:	00824034 	movhi	r2,2304
    1fc0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x02D0);
    1fc4:	00c0b404 	movi	r3,720
    1fc8:	00824034 	movhi	r2,2304
    1fcc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    1fd0:	00c00044 	movi	r3,1
    1fd4:	00824034 	movhi	r2,2304
    1fd8:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    1fdc:	00c004c4 	movi	r3,19
    1fe0:	00824034 	movhi	r2,2304
    1fe4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    1fe8:	00c14504 	movi	r3,1300
    1fec:	00824034 	movhi	r2,2304
    1ff0:	10c00035 	stwio	r3,0(r2)
    
        //td content 4 bytes
        IOWR(CY7C67200_BASE,HPI_DATA,0x0A21);
    1ff4:	00c28844 	movi	r3,2593
    1ff8:	00824034 	movhi	r2,2304
    1ffc:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//device address   
    2000:	0007883a 	mov	r3,zero
    2004:	00824034 	movhi	r2,2304
    2008:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    200c:	0007883a 	mov	r3,zero
    2010:	00824034 	movhi	r2,2304
    2014:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    2018:	0007883a 	mov	r3,zero
    201c:	00824034 	movhi	r2,2304
    2020:	10c00035 	stwio	r3,0(r2)
        //in packet
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
    2024:	0007883a 	mov	r3,zero
    2028:	00824034 	movhi	r2,2304
    202c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
    2030:	0007883a 	mov	r3,zero
    2034:	00824034 	movhi	r2,2304
    2038:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//device address
    203c:	00c0a404 	movi	r3,656
    2040:	00824034 	movhi	r2,2304
    2044:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0041); //data 1
    2048:	00c01044 	movi	r3,65
    204c:	00824034 	movhi	r2,2304
    2050:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    2054:	00c004c4 	movi	r3,19
    2058:	00824034 	movhi	r2,2304
    205c:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    2060:	0007883a 	mov	r3,zero
    2064:	00824034 	movhi	r2,2304
    2068:	10c00035 	stwio	r3,0(r2)
        
        UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    206c:	01006c04 	movi	r4,432
    2070:	01414004 	movi	r5,1280
    2074:	00032cc0 	call	32cc <UsbWrite>
        usleep(10*1000);
    2078:	0109c404 	movi	r4,10000
    207c:	000ffc80 	call	ffc8 <usleep>
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    //usleep(10*1000);
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2080:	00824034 	movhi	r2,2304
    2084:	10800304 	addi	r2,r2,12
    2088:	10800037 	ldwio	r2,0(r2)
    208c:	1080040c 	andi	r2,r2,16
    2090:	103fc226 	beq	r2,zero,1f9c <__alt_mem_sram+0xf7e01f9c>
        
        UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2094:	01005104 	movi	r4,324
    2098:	00033140 	call	3314 <UsbRead>
    209c:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    20a0:	01005104 	movi	r4,324
    20a4:	000b883a 	mov	r5,zero
    20a8:	00032cc0 	call	32cc <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    20ac:	00000d06 	br	20e4 <main+0x1e88>
    {
       if(usb_ctl_val == 0x000)
    20b0:	e0bff80b 	ldhu	r2,-32(fp)
    20b4:	10000526 	beq	r2,zero,20cc <main+0x1e70>
       {
       }
       else
       {
        printf("[SIE1 MSG]:SIE 1 msg reg is %x\n",usb_ctl_val);
    20b8:	e0bff80b 	ldhu	r2,-32(fp)
    20bc:	01000074 	movhi	r4,1
    20c0:	21096f04 	addi	r4,r4,9660
    20c4:	100b883a 	mov	r5,r2
    20c8:	00034380 	call	3438 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    20cc:	01005104 	movi	r4,324
    20d0:	00033140 	call	3314 <UsbRead>
    20d4:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    20d8:	01005104 	movi	r4,324
    20dc:	000b883a 	mov	r5,zero
    20e0:	00032cc0 	call	32cc <UsbWrite>
        usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    20e4:	e0bff80b 	ldhu	r2,-32(fp)
    20e8:	10840018 	cmpnei	r2,r2,4096
    20ec:	103ff01e 	bne	r2,zero,20b0 <__alt_mem_sram+0xf7e020b0>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    20f0:	00c14184 	movi	r3,1286
    20f4:	00824034 	movhi	r2,2304
    20f8:	10800204 	addi	r2,r2,8
    20fc:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    2100:	00824034 	movhi	r2,2304
    2104:	10800037 	ldwio	r2,0(r2)
    2108:	01000074 	movhi	r4,1
    210c:	21097704 	addi	r4,r4,9692
    2110:	100b883a 	mov	r5,r2
    2114:	00034380 	call	3438 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    2118:	00c14204 	movi	r3,1288
    211c:	00824034 	movhi	r2,2304
    2120:	10800204 	addi	r2,r2,8
    2124:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    2128:	00824034 	movhi	r2,2304
    212c:	10800037 	ldwio	r2,0(r2)
    2130:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    2134:	e0bff80b 	ldhu	r2,-32(fp)
    2138:	01000074 	movhi	r4,1
    213c:	21098204 	addi	r4,r4,9736
    2140:	100b883a 	mov	r5,r2
    2144:	00034380 	call	3438 <printf>
    while (usb_ctl_val != 0x03) 
    2148:	00001806 	br	21ac <main+0x1f50>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    214c:	00824034 	movhi	r2,2304
    2150:	10800304 	addi	r2,r2,12
    2154:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    2158:	01005104 	movi	r4,324
    215c:	00033140 	call	3314 <UsbRead>
    2160:	10bfffcc 	andi	r2,r2,65535
    2164:	10840018 	cmpnei	r2,r2,4096
    2168:	1000091e 	bne	r2,zero,2190 <main+0x1f34>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    216c:	01005104 	movi	r4,324
    2170:	000b883a 	mov	r5,zero
    2174:	00032cc0 	call	32cc <UsbWrite>
           
        
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2178:	0001883a 	nop
    217c:	00824034 	movhi	r2,2304
    2180:	10800304 	addi	r2,r2,12
    2184:	10800037 	ldwio	r2,0(r2)
    2188:	1080040c 	andi	r2,r2,16
    218c:	103ffb26 	beq	r2,zero,217c <__alt_mem_sram+0xf7e0217c>
           {
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    2190:	00c14204 	movi	r3,1288
    2194:	00824034 	movhi	r2,2304
    2198:	10800204 	addi	r2,r2,8
    219c:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    21a0:	00824034 	movhi	r2,2304
    21a4:	10800037 	ldwio	r2,0(r2)
    21a8:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    21ac:	e0bff80b 	ldhu	r2,-32(fp)
    21b0:	108000d8 	cmpnei	r2,r2,3
    21b4:	103fe51e 	bne	r2,zero,214c <__alt_mem_sram+0xf7e0214c>
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
    
    
    printf("------------[ENUM PROCESS]:classe request out pass!-------------------\n");
    21b8:	01000074 	movhi	r4,1
    21bc:	21098e04 	addi	r4,r4,9784
    21c0:	000352c0 	call	352c <puts>
    
    //----------------------------------get descriptor(class 0x21) request out --------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    21c4:	00c14004 	movi	r3,1280
    21c8:	00824034 	movhi	r2,2304
    21cc:	10800204 	addi	r2,r2,8
    21d0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    21d4:	00c14304 	movi	r3,1292
    21d8:	00824034 	movhi	r2,2304
    21dc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    21e0:	00c00204 	movi	r3,8
    21e4:	00824034 	movhi	r2,2304
    21e8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
    21ec:	00c0b404 	movi	r3,720
    21f0:	00824034 	movhi	r2,2304
    21f4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    21f8:	00c00044 	movi	r3,1
    21fc:	00824034 	movhi	r2,2304
    2200:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    2204:	00c004c4 	movi	r3,19
    2208:	00824034 	movhi	r2,2304
    220c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    2210:	00c14504 	movi	r3,1300
    2214:	00824034 	movhi	r2,2304
    2218:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0681);//c
    221c:	00c1a044 	movi	r3,1665
    2220:	00824034 	movhi	r2,2304
    2224:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x2100);//e //config 
    2228:	00c84004 	movi	r3,8448
    222c:	00824034 	movhi	r2,2304
    2230:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    2234:	0007883a 	mov	r3,zero
    2238:	00824034 	movhi	r2,2304
    223c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x007B);//2
    2240:	00c01ec4 	movi	r3,123
    2244:	00824034 	movhi	r2,2304
    2248:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
    224c:	00c15104 	movi	r3,1348
    2250:	00824034 	movhi	r2,2304
    2254:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    2258:	00c00204 	movi	r3,8
    225c:	00824034 	movhi	r2,2304
    2260:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    2264:	00c0a404 	movi	r3,656
    2268:	00824034 	movhi	r2,2304
    226c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    2270:	00c01044 	movi	r3,65
    2274:	00824034 	movhi	r2,2304
    2278:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    227c:	00c004c4 	movi	r3,19
    2280:	00824034 	movhi	r2,2304
    2284:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    2288:	00c14804 	movi	r3,1312
    228c:	00824034 	movhi	r2,2304
    2290:	10c00035 	stwio	r3,0(r2)
        
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //52c
    2294:	0007883a 	mov	r3,zero
    2298:	00824034 	movhi	r2,2304
    229c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
    22a0:	0007883a 	mov	r3,zero
    22a4:	00824034 	movhi	r2,2304
    22a8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//530
    22ac:	00c08404 	movi	r3,528
    22b0:	00824034 	movhi	r2,2304
    22b4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    22b8:	00c01044 	movi	r3,65
    22bc:	00824034 	movhi	r2,2304
    22c0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    22c4:	00c004c4 	movi	r3,19
    22c8:	00824034 	movhi	r2,2304
    22cc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
    22d0:	0007883a 	mov	r3,zero
    22d4:	00824034 	movhi	r2,2304
    22d8:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    22dc:	01006c04 	movi	r4,432
    22e0:	01414004 	movi	r5,1280
    22e4:	00032cc0 	call	32cc <UsbWrite>
    //usleep(10*1000);
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    22e8:	00004b06 	br	2418 <main+0x21bc>
    {
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    22ec:	00c14004 	movi	r3,1280
    22f0:	00824034 	movhi	r2,2304
    22f4:	10800204 	addi	r2,r2,8
    22f8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    22fc:	00c14304 	movi	r3,1292
    2300:	00824034 	movhi	r2,2304
    2304:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    2308:	00c00204 	movi	r3,8
    230c:	00824034 	movhi	r2,2304
    2310:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
    2314:	00c0b404 	movi	r3,720
    2318:	00824034 	movhi	r2,2304
    231c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    2320:	00c00044 	movi	r3,1
    2324:	00824034 	movhi	r2,2304
    2328:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    232c:	00c004c4 	movi	r3,19
    2330:	00824034 	movhi	r2,2304
    2334:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    2338:	00c14504 	movi	r3,1300
    233c:	00824034 	movhi	r2,2304
    2340:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0681);//c
    2344:	00c1a044 	movi	r3,1665
    2348:	00824034 	movhi	r2,2304
    234c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x2100);//e //config 
    2350:	00c84004 	movi	r3,8448
    2354:	00824034 	movhi	r2,2304
    2358:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    235c:	0007883a 	mov	r3,zero
    2360:	00824034 	movhi	r2,2304
    2364:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x007B);//2
    2368:	00c01ec4 	movi	r3,123
    236c:	00824034 	movhi	r2,2304
    2370:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
    2374:	00c15104 	movi	r3,1348
    2378:	00824034 	movhi	r2,2304
    237c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    2380:	00c00204 	movi	r3,8
    2384:	00824034 	movhi	r2,2304
    2388:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    238c:	00c0a404 	movi	r3,656
    2390:	00824034 	movhi	r2,2304
    2394:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    2398:	00c01044 	movi	r3,65
    239c:	00824034 	movhi	r2,2304
    23a0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    23a4:	00c004c4 	movi	r3,19
    23a8:	00824034 	movhi	r2,2304
    23ac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    23b0:	00c14804 	movi	r3,1312
    23b4:	00824034 	movhi	r2,2304
    23b8:	10c00035 	stwio	r3,0(r2)
        
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //52c
    23bc:	0007883a 	mov	r3,zero
    23c0:	00824034 	movhi	r2,2304
    23c4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
    23c8:	0007883a 	mov	r3,zero
    23cc:	00824034 	movhi	r2,2304
    23d0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//530
    23d4:	00c08404 	movi	r3,528
    23d8:	00824034 	movhi	r2,2304
    23dc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    23e0:	00c01044 	movi	r3,65
    23e4:	00824034 	movhi	r2,2304
    23e8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    23ec:	00c004c4 	movi	r3,19
    23f0:	00824034 	movhi	r2,2304
    23f4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
    23f8:	0007883a 	mov	r3,zero
    23fc:	00824034 	movhi	r2,2304
    2400:	10c00035 	stwio	r3,0(r2)
        
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2404:	01006c04 	movi	r4,432
    2408:	01414004 	movi	r5,1280
    240c:	00032cc0 	call	32cc <UsbWrite>
    usleep(10*1000);
    2410:	0109c404 	movi	r4,10000
    2414:	000ffc80 	call	ffc8 <usleep>
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    //usleep(10*1000);
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2418:	00824034 	movhi	r2,2304
    241c:	10800304 	addi	r2,r2,12
    2420:	10800037 	ldwio	r2,0(r2)
    2424:	1080040c 	andi	r2,r2,16
    2428:	103fb026 	beq	r2,zero,22ec <__alt_mem_sram+0xf7e022ec>
        
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    242c:	01005104 	movi	r4,324
    2430:	00033140 	call	3314 <UsbRead>
    2434:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2438:	01005104 	movi	r4,324
    243c:	000b883a 	mov	r5,zero
    2440:	00032cc0 	call	32cc <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    2444:	00000d06 	br	247c <main+0x2220>
    {
       if(usb_ctl_val == 0x000)
    2448:	e0bff80b 	ldhu	r2,-32(fp)
    244c:	10000526 	beq	r2,zero,2464 <main+0x2208>
       {
       }
       else
       {
        printf("[SIE MSG]:SIE 1 msg reg is %x\n",usb_ctl_val);
    2450:	e0bff80b 	ldhu	r2,-32(fp)
    2454:	01000074 	movhi	r4,1
    2458:	2109a004 	addi	r4,r4,9856
    245c:	100b883a 	mov	r5,r2
    2460:	00034380 	call	3438 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2464:	01005104 	movi	r4,324
    2468:	00033140 	call	3314 <UsbRead>
    246c:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2470:	01005104 	movi	r4,324
    2474:	000b883a 	mov	r5,zero
    2478:	00032cc0 	call	32cc <UsbWrite>
    usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    247c:	e0bff80b 	ldhu	r2,-32(fp)
    2480:	10840018 	cmpnei	r2,r2,4096
    2484:	103ff01e 	bne	r2,zero,2448 <__alt_mem_sram+0xf7e02448>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    2488:	00c14184 	movi	r3,1286
    248c:	00824034 	movhi	r2,2304
    2490:	10800204 	addi	r2,r2,8
    2494:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    2498:	00824034 	movhi	r2,2304
    249c:	10800037 	ldwio	r2,0(r2)
    24a0:	01000074 	movhi	r4,1
    24a4:	21097704 	addi	r4,r4,9692
    24a8:	100b883a 	mov	r5,r2
    24ac:	00034380 	call	3438 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    24b0:	00c14204 	movi	r3,1288
    24b4:	00824034 	movhi	r2,2304
    24b8:	10800204 	addi	r2,r2,8
    24bc:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    24c0:	00824034 	movhi	r2,2304
    24c4:	10800037 	ldwio	r2,0(r2)
    24c8:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    24cc:	e0bff80b 	ldhu	r2,-32(fp)
    24d0:	01000074 	movhi	r4,1
    24d4:	21098204 	addi	r4,r4,9736
    24d8:	100b883a 	mov	r5,r2
    24dc:	00034380 	call	3438 <printf>
    while (usb_ctl_val != 0x03) 
    24e0:	00001806 	br	2544 <main+0x22e8>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    24e4:	00824034 	movhi	r2,2304
    24e8:	10800304 	addi	r2,r2,12
    24ec:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    24f0:	01005104 	movi	r4,324
    24f4:	00033140 	call	3314 <UsbRead>
    24f8:	10bfffcc 	andi	r2,r2,65535
    24fc:	10840018 	cmpnei	r2,r2,4096
    2500:	1000091e 	bne	r2,zero,2528 <main+0x22cc>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2504:	01005104 	movi	r4,324
    2508:	000b883a 	mov	r5,zero
    250c:	00032cc0 	call	32cc <UsbWrite>
           
        
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2510:	0001883a 	nop
    2514:	00824034 	movhi	r2,2304
    2518:	10800304 	addi	r2,r2,12
    251c:	10800037 	ldwio	r2,0(r2)
    2520:	1080040c 	andi	r2,r2,16
    2524:	103ffb26 	beq	r2,zero,2514 <__alt_mem_sram+0xf7e02514>
           {
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    2528:	00c14204 	movi	r3,1288
    252c:	00824034 	movhi	r2,2304
    2530:	10800204 	addi	r2,r2,8
    2534:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    2538:	00824034 	movhi	r2,2304
    253c:	10800037 	ldwio	r2,0(r2)
    2540:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    2544:	e0bff80b 	ldhu	r2,-32(fp)
    2548:	108000d8 	cmpnei	r2,r2,3
    254c:	103fe51e 	bne	r2,zero,24e4 <__alt_mem_sram+0xf7e024e4>
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
    
    
    
    printf("------------[ENUM PROCESS]:get descriptor (class 0x21) pass!-------------------\n");
    2550:	01000074 	movhi	r4,1
    2554:	2109a804 	addi	r4,r4,9888
    2558:	000352c0 	call	352c <puts>
    
    //-------------------------------get descriptor (class 0x22)-------------------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    255c:	00c14004 	movi	r3,1280
    2560:	00824034 	movhi	r2,2304
    2564:	10800204 	addi	r2,r2,8
    2568:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    256c:	00c14304 	movi	r3,1292
    2570:	00824034 	movhi	r2,2304
    2574:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    2578:	00c00204 	movi	r3,8
    257c:	00824034 	movhi	r2,2304
    2580:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    2584:	00c0b404 	movi	r3,720
    2588:	00824034 	movhi	r2,2304
    258c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    2590:	00c00044 	movi	r3,1
    2594:	00824034 	movhi	r2,2304
    2598:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    259c:	00c004c4 	movi	r3,19
    25a0:	00824034 	movhi	r2,2304
    25a4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    25a8:	00c14504 	movi	r3,1300
    25ac:	00824034 	movhi	r2,2304
    25b0:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0681);//c
    25b4:	00c1a044 	movi	r3,1665
    25b8:	00824034 	movhi	r2,2304
    25bc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x2200);//e //config 
    25c0:	00c88004 	movi	r3,8704
    25c4:	00824034 	movhi	r2,2304
    25c8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    25cc:	0007883a 	mov	r3,zero
    25d0:	00824034 	movhi	r2,2304
    25d4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x007B);//2
    25d8:	00c01ec4 	movi	r3,123
    25dc:	00824034 	movhi	r2,2304
    25e0:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0580); //514
    25e4:	00c16004 	movi	r3,1408
    25e8:	00824034 	movhi	r2,2304
    25ec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    25f0:	00c00204 	movi	r3,8
    25f4:	00824034 	movhi	r2,2304
    25f8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    25fc:	00c0a404 	movi	r3,656
    2600:	00824034 	movhi	r2,2304
    2604:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    2608:	00c01044 	movi	r3,65
    260c:	00824034 	movhi	r2,2304
    2610:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    2614:	00c004c4 	movi	r3,19
    2618:	00824034 	movhi	r2,2304
    261c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    2620:	00c14804 	movi	r3,1312
    2624:	00824034 	movhi	r2,2304
    2628:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x0588); //520
    262c:	00c16204 	movi	r3,1416
    2630:	00824034 	movhi	r2,2304
    2634:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    2638:	00c00204 	movi	r3,8
    263c:	00824034 	movhi	r2,2304
    2640:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    2644:	00c0a404 	movi	r3,656
    2648:	00824034 	movhi	r2,2304
    264c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    2650:	00c00044 	movi	r3,1
    2654:	00824034 	movhi	r2,2304
    2658:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    265c:	00c004c4 	movi	r3,19
    2660:	00824034 	movhi	r2,2304
    2664:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    2668:	00c14b04 	movi	r3,1324
    266c:	00824034 	movhi	r2,2304
    2670:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-3
    IOWR(CY7C67200_BASE,HPI_DATA,0x0590); //52c
    2674:	00c16404 	movi	r3,1424
    2678:	00824034 	movhi	r2,2304
    267c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
    2680:	00c00204 	movi	r3,8
    2684:	00824034 	movhi	r2,2304
    2688:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
    268c:	00c0a404 	movi	r3,656
    2690:	00824034 	movhi	r2,2304
    2694:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    2698:	00c01044 	movi	r3,65
    269c:	00824034 	movhi	r2,2304
    26a0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    26a4:	00c004c4 	movi	r3,19
    26a8:	00824034 	movhi	r2,2304
    26ac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
    26b0:	00c14e04 	movi	r3,1336
    26b4:	00824034 	movhi	r2,2304
    26b8:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-4
    IOWR(CY7C67200_BASE,HPI_DATA,0x0598); //538
    26bc:	00c16604 	movi	r3,1432
    26c0:	00824034 	movhi	r2,2304
    26c4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//a
    26c8:	00c00204 	movi	r3,8
    26cc:	00824034 	movhi	r2,2304
    26d0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
    26d4:	00c0a404 	movi	r3,656
    26d8:	00824034 	movhi	r2,2304
    26dc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
    26e0:	00c00044 	movi	r3,1
    26e4:	00824034 	movhi	r2,2304
    26e8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
    26ec:	00c004c4 	movi	r3,19
    26f0:	00824034 	movhi	r2,2304
    26f4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544);//2
    26f8:	00c15104 	movi	r3,1348
    26fc:	00824034 	movhi	r2,2304
    2700:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-5
    IOWR(CY7C67200_BASE,HPI_DATA,0x05a0); //544
    2704:	00c16804 	movi	r3,1440
    2708:	00824034 	movhi	r2,2304
    270c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    2710:	00c00204 	movi	r3,8
    2714:	00824034 	movhi	r2,2304
    2718:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    271c:	00c0a404 	movi	r3,656
    2720:	00824034 	movhi	r2,2304
    2724:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a //data1
    2728:	00c01044 	movi	r3,65
    272c:	00824034 	movhi	r2,2304
    2730:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    2734:	00c004c4 	movi	r3,19
    2738:	00824034 	movhi	r2,2304
    273c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0550);//e
    2740:	00c15404 	movi	r3,1360
    2744:	00824034 	movhi	r2,2304
    2748:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-6
    IOWR(CY7C67200_BASE,HPI_DATA,0x05a8); //550
    274c:	00c16a04 	movi	r3,1448
    2750:	00824034 	movhi	r2,2304
    2754:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    2758:	00c00204 	movi	r3,8
    275c:	00824034 	movhi	r2,2304
    2760:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    2764:	00c0a404 	movi	r3,656
    2768:	00824034 	movhi	r2,2304
    276c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    2770:	00c00044 	movi	r3,1
    2774:	00824034 	movhi	r2,2304
    2778:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    277c:	00c004c4 	movi	r3,19
    2780:	00824034 	movhi	r2,2304
    2784:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x055c);//a
    2788:	00c15704 	movi	r3,1372
    278c:	00824034 	movhi	r2,2304
    2790:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-7
    IOWR(CY7C67200_BASE,HPI_DATA,0x05b0); //c
    2794:	00c16c04 	movi	r3,1456
    2798:	00824034 	movhi	r2,2304
    279c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
    27a0:	00c00204 	movi	r3,8
    27a4:	00824034 	movhi	r2,2304
    27a8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//560
    27ac:	00c0a404 	movi	r3,656
    27b0:	00824034 	movhi	r2,2304
    27b4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2 //data1
    27b8:	00c01044 	movi	r3,65
    27bc:	00824034 	movhi	r2,2304
    27c0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    27c4:	00c004c4 	movi	r3,19
    27c8:	00824034 	movhi	r2,2304
    27cc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0568);//6
    27d0:	00c15a04 	movi	r3,1384
    27d4:	00824034 	movhi	r2,2304
    27d8:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-8
    IOWR(CY7C67200_BASE,HPI_DATA,0x05b8); //8
    27dc:	00c16e04 	movi	r3,1464
    27e0:	00824034 	movhi	r2,2304
    27e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0003);//a
    27e8:	00c000c4 	movi	r3,3
    27ec:	00824034 	movhi	r2,2304
    27f0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
    27f4:	00c0a404 	movi	r3,656
    27f8:	00824034 	movhi	r2,2304
    27fc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
    2800:	00c00044 	movi	r3,1
    2804:	00824034 	movhi	r2,2304
    2808:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//570
    280c:	00c004c4 	movi	r3,19
    2810:	00824034 	movhi	r2,2304
    2814:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0574);//2
    2818:	00c15d04 	movi	r3,1396
    281c:	00824034 	movhi	r2,2304
    2820:	10c00035 	stwio	r3,0(r2)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //574
    2824:	0007883a 	mov	r3,zero
    2828:	00824034 	movhi	r2,2304
    282c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
    2830:	0007883a 	mov	r3,zero
    2834:	00824034 	movhi	r2,2304
    2838:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//8
    283c:	00c08404 	movi	r3,528
    2840:	00824034 	movhi	r2,2304
    2844:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    2848:	00c01044 	movi	r3,65
    284c:	00824034 	movhi	r2,2304
    2850:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    2854:	00c004c4 	movi	r3,19
    2858:	00824034 	movhi	r2,2304
    285c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
    2860:	0007883a 	mov	r3,zero
    2864:	00824034 	movhi	r2,2304
    2868:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    286c:	01006c04 	movi	r4,432
    2870:	01414004 	movi	r5,1280
    2874:	00032cc0 	call	32cc <UsbWrite>
    
   //usleep(100*1000);
   //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2878:	0000c906 	br	2ba0 <main+0x2944>
    {
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    287c:	00c14004 	movi	r3,1280
    2880:	00824034 	movhi	r2,2304
    2884:	10800204 	addi	r2,r2,8
    2888:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    288c:	00c14304 	movi	r3,1292
    2890:	00824034 	movhi	r2,2304
    2894:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    2898:	00c00204 	movi	r3,8
    289c:	00824034 	movhi	r2,2304
    28a0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    28a4:	00c0b404 	movi	r3,720
    28a8:	00824034 	movhi	r2,2304
    28ac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    28b0:	00c00044 	movi	r3,1
    28b4:	00824034 	movhi	r2,2304
    28b8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    28bc:	00c004c4 	movi	r3,19
    28c0:	00824034 	movhi	r2,2304
    28c4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    28c8:	00c14504 	movi	r3,1300
    28cc:	00824034 	movhi	r2,2304
    28d0:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0681);//c
    28d4:	00c1a044 	movi	r3,1665
    28d8:	00824034 	movhi	r2,2304
    28dc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x2200);//e //config 
    28e0:	00c88004 	movi	r3,8704
    28e4:	00824034 	movhi	r2,2304
    28e8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    28ec:	0007883a 	mov	r3,zero
    28f0:	00824034 	movhi	r2,2304
    28f4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x007B);//2
    28f8:	00c01ec4 	movi	r3,123
    28fc:	00824034 	movhi	r2,2304
    2900:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0580); //514
    2904:	00c16004 	movi	r3,1408
    2908:	00824034 	movhi	r2,2304
    290c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    2910:	00c00204 	movi	r3,8
    2914:	00824034 	movhi	r2,2304
    2918:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    291c:	00c0a404 	movi	r3,656
    2920:	00824034 	movhi	r2,2304
    2924:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    2928:	00c01044 	movi	r3,65
    292c:	00824034 	movhi	r2,2304
    2930:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    2934:	00c004c4 	movi	r3,19
    2938:	00824034 	movhi	r2,2304
    293c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    2940:	00c14804 	movi	r3,1312
    2944:	00824034 	movhi	r2,2304
    2948:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x0588); //520
    294c:	00c16204 	movi	r3,1416
    2950:	00824034 	movhi	r2,2304
    2954:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    2958:	00c00204 	movi	r3,8
    295c:	00824034 	movhi	r2,2304
    2960:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    2964:	00c0a404 	movi	r3,656
    2968:	00824034 	movhi	r2,2304
    296c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    2970:	00c00044 	movi	r3,1
    2974:	00824034 	movhi	r2,2304
    2978:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    297c:	00c004c4 	movi	r3,19
    2980:	00824034 	movhi	r2,2304
    2984:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    2988:	00c14b04 	movi	r3,1324
    298c:	00824034 	movhi	r2,2304
    2990:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-3
    IOWR(CY7C67200_BASE,HPI_DATA,0x0590); //52c
    2994:	00c16404 	movi	r3,1424
    2998:	00824034 	movhi	r2,2304
    299c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
    29a0:	00c00204 	movi	r3,8
    29a4:	00824034 	movhi	r2,2304
    29a8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
    29ac:	00c0a404 	movi	r3,656
    29b0:	00824034 	movhi	r2,2304
    29b4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    29b8:	00c01044 	movi	r3,65
    29bc:	00824034 	movhi	r2,2304
    29c0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    29c4:	00c004c4 	movi	r3,19
    29c8:	00824034 	movhi	r2,2304
    29cc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
    29d0:	00c14e04 	movi	r3,1336
    29d4:	00824034 	movhi	r2,2304
    29d8:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-4
    IOWR(CY7C67200_BASE,HPI_DATA,0x0598); //538
    29dc:	00c16604 	movi	r3,1432
    29e0:	00824034 	movhi	r2,2304
    29e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//a
    29e8:	00c00204 	movi	r3,8
    29ec:	00824034 	movhi	r2,2304
    29f0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
    29f4:	00c0a404 	movi	r3,656
    29f8:	00824034 	movhi	r2,2304
    29fc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
    2a00:	00c00044 	movi	r3,1
    2a04:	00824034 	movhi	r2,2304
    2a08:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
    2a0c:	00c004c4 	movi	r3,19
    2a10:	00824034 	movhi	r2,2304
    2a14:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544);//2
    2a18:	00c15104 	movi	r3,1348
    2a1c:	00824034 	movhi	r2,2304
    2a20:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-5
    IOWR(CY7C67200_BASE,HPI_DATA,0x05a0); //544
    2a24:	00c16804 	movi	r3,1440
    2a28:	00824034 	movhi	r2,2304
    2a2c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    2a30:	00c00204 	movi	r3,8
    2a34:	00824034 	movhi	r2,2304
    2a38:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    2a3c:	00c0a404 	movi	r3,656
    2a40:	00824034 	movhi	r2,2304
    2a44:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a //data1
    2a48:	00c01044 	movi	r3,65
    2a4c:	00824034 	movhi	r2,2304
    2a50:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    2a54:	00c004c4 	movi	r3,19
    2a58:	00824034 	movhi	r2,2304
    2a5c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0550);//e
    2a60:	00c15404 	movi	r3,1360
    2a64:	00824034 	movhi	r2,2304
    2a68:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-6
    IOWR(CY7C67200_BASE,HPI_DATA,0x05a8); //550
    2a6c:	00c16a04 	movi	r3,1448
    2a70:	00824034 	movhi	r2,2304
    2a74:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    2a78:	00c00204 	movi	r3,8
    2a7c:	00824034 	movhi	r2,2304
    2a80:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    2a84:	00c0a404 	movi	r3,656
    2a88:	00824034 	movhi	r2,2304
    2a8c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    2a90:	00c00044 	movi	r3,1
    2a94:	00824034 	movhi	r2,2304
    2a98:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    2a9c:	00c004c4 	movi	r3,19
    2aa0:	00824034 	movhi	r2,2304
    2aa4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x055c);//a
    2aa8:	00c15704 	movi	r3,1372
    2aac:	00824034 	movhi	r2,2304
    2ab0:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-7
    IOWR(CY7C67200_BASE,HPI_DATA,0x05b0); //c
    2ab4:	00c16c04 	movi	r3,1456
    2ab8:	00824034 	movhi	r2,2304
    2abc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
    2ac0:	00c00204 	movi	r3,8
    2ac4:	00824034 	movhi	r2,2304
    2ac8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//560
    2acc:	00c0a404 	movi	r3,656
    2ad0:	00824034 	movhi	r2,2304
    2ad4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2 //data1
    2ad8:	00c01044 	movi	r3,65
    2adc:	00824034 	movhi	r2,2304
    2ae0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    2ae4:	00c004c4 	movi	r3,19
    2ae8:	00824034 	movhi	r2,2304
    2aec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0568);//6
    2af0:	00c15a04 	movi	r3,1384
    2af4:	00824034 	movhi	r2,2304
    2af8:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-8
    IOWR(CY7C67200_BASE,HPI_DATA,0x05b8); //8
    2afc:	00c16e04 	movi	r3,1464
    2b00:	00824034 	movhi	r2,2304
    2b04:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0003);//a
    2b08:	00c000c4 	movi	r3,3
    2b0c:	00824034 	movhi	r2,2304
    2b10:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
    2b14:	00c0a404 	movi	r3,656
    2b18:	00824034 	movhi	r2,2304
    2b1c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data1
    2b20:	00c00044 	movi	r3,1
    2b24:	00824034 	movhi	r2,2304
    2b28:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//570
    2b2c:	00c004c4 	movi	r3,19
    2b30:	00824034 	movhi	r2,2304
    2b34:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0574);//2
    2b38:	00c15d04 	movi	r3,1396
    2b3c:	00824034 	movhi	r2,2304
    2b40:	10c00035 	stwio	r3,0(r2)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //574
    2b44:	0007883a 	mov	r3,zero
    2b48:	00824034 	movhi	r2,2304
    2b4c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
    2b50:	0007883a 	mov	r3,zero
    2b54:	00824034 	movhi	r2,2304
    2b58:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//8
    2b5c:	00c08404 	movi	r3,528
    2b60:	00824034 	movhi	r2,2304
    2b64:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    2b68:	00c01044 	movi	r3,65
    2b6c:	00824034 	movhi	r2,2304
    2b70:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    2b74:	00c004c4 	movi	r3,19
    2b78:	00824034 	movhi	r2,2304
    2b7c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
    2b80:	0007883a 	mov	r3,zero
    2b84:	00824034 	movhi	r2,2304
    2b88:	10c00035 	stwio	r3,0(r2)
          
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2b8c:	01006c04 	movi	r4,432
    2b90:	01414004 	movi	r5,1280
    2b94:	00032cc0 	call	32cc <UsbWrite>
    usleep(10*1000);
    2b98:	0109c404 	movi	r4,10000
    2b9c:	000ffc80 	call	ffc8 <usleep>
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    
   //usleep(100*1000);
   //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2ba0:	00824034 	movhi	r2,2304
    2ba4:	10800304 	addi	r2,r2,12
    2ba8:	10800037 	ldwio	r2,0(r2)
    2bac:	1080040c 	andi	r2,r2,16
    2bb0:	103f3226 	beq	r2,zero,287c <__alt_mem_sram+0xf7e0287c>
          
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2bb4:	01005104 	movi	r4,324
    2bb8:	00033140 	call	3314 <UsbRead>
    2bbc:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2bc0:	01005104 	movi	r4,324
    2bc4:	000b883a 	mov	r5,zero
    2bc8:	00032cc0 	call	32cc <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    2bcc:	00000d06 	br	2c04 <main+0x29a8>
    {
       if(usb_ctl_val == 0x000)
    2bd0:	e0bff80b 	ldhu	r2,-32(fp)
    2bd4:	10000526 	beq	r2,zero,2bec <main+0x2990>
       {
       }
       else
       {
        printf("[SIE1 MSG]: SIE 1 msg reg is %x\n",usb_ctl_val);
    2bd8:	e0bff80b 	ldhu	r2,-32(fp)
    2bdc:	01000074 	movhi	r4,1
    2be0:	2109bc04 	addi	r4,r4,9968
    2be4:	100b883a 	mov	r5,r2
    2be8:	00034380 	call	3438 <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2bec:	01005104 	movi	r4,324
    2bf0:	00033140 	call	3314 <UsbRead>
    2bf4:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2bf8:	01005104 	movi	r4,324
    2bfc:	000b883a 	mov	r5,zero
    2c00:	00032cc0 	call	32cc <UsbWrite>
    usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    2c04:	e0bff80b 	ldhu	r2,-32(fp)
    2c08:	10840018 	cmpnei	r2,r2,4096
    2c0c:	103ff01e 	bne	r2,zero,2bd0 <__alt_mem_sram+0xf7e02bd0>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    2c10:	00c14184 	movi	r3,1286
    2c14:	00824034 	movhi	r2,2304
    2c18:	10800204 	addi	r2,r2,8
    2c1c:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    2c20:	00824034 	movhi	r2,2304
    2c24:	10800037 	ldwio	r2,0(r2)
    2c28:	01000074 	movhi	r4,1
    2c2c:	2109c504 	addi	r4,r4,10004
    2c30:	100b883a 	mov	r5,r2
    2c34:	00034380 	call	3438 <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    2c38:	00c14204 	movi	r3,1288
    2c3c:	00824034 	movhi	r2,2304
    2c40:	10800204 	addi	r2,r2,8
    2c44:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    2c48:	00824034 	movhi	r2,2304
    2c4c:	10800037 	ldwio	r2,0(r2)
    2c50:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    2c54:	e0bff80b 	ldhu	r2,-32(fp)
    2c58:	01000074 	movhi	r4,1
    2c5c:	2109d104 	addi	r4,r4,10052
    2c60:	100b883a 	mov	r5,r2
    2c64:	00034380 	call	3438 <printf>
    while (usb_ctl_val != 0x03) 
    2c68:	00001806 	br	2ccc <main+0x2a70>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    2c6c:	00824034 	movhi	r2,2304
    2c70:	10800304 	addi	r2,r2,12
    2c74:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    2c78:	01005104 	movi	r4,324
    2c7c:	00033140 	call	3314 <UsbRead>
    2c80:	10bfffcc 	andi	r2,r2,65535
    2c84:	10840018 	cmpnei	r2,r2,4096
    2c88:	1000091e 	bne	r2,zero,2cb0 <main+0x2a54>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2c8c:	01005104 	movi	r4,324
    2c90:	000b883a 	mov	r5,zero
    2c94:	00032cc0 	call	32cc <UsbWrite>
                   
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2c98:	0001883a 	nop
    2c9c:	00824034 	movhi	r2,2304
    2ca0:	10800304 	addi	r2,r2,12
    2ca4:	10800037 	ldwio	r2,0(r2)
    2ca8:	1080040c 	andi	r2,r2,16
    2cac:	103ffb26 	beq	r2,zero,2c9c <__alt_mem_sram+0xf7e02c9c>
           {
            
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    2cb0:	00c14204 	movi	r3,1288
    2cb4:	00824034 	movhi	r2,2304
    2cb8:	10800204 	addi	r2,r2,8
    2cbc:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    2cc0:	00824034 	movhi	r2,2304
    2cc4:	10800037 	ldwio	r2,0(r2)
    2cc8:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    2ccc:	e0bff80b 	ldhu	r2,-32(fp)
    2cd0:	108000d8 	cmpnei	r2,r2,3
    2cd4:	103fe51e 	bne	r2,zero,2c6c <__alt_mem_sram+0xf7e02c6c>
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
       
    printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) pass!----------------\n");
    2cd8:	01000074 	movhi	r4,1
    2cdc:	2109dd04 	addi	r4,r4,10100
    2ce0:	000352c0 	call	352c <puts>
    

    
    //-----------------------------------get mouse x y button value------------------------------------------------//
    usleep(10000);
    2ce4:	0109c404 	movi	r4,10000
    2ce8:	000ffc80 	call	ffc8 <usleep>
    while(1)
    {
      toggle++;
    2cec:	e0bffa03 	ldbu	r2,-24(fp)
    2cf0:	10800044 	addi	r2,r2,1
    2cf4:	e0bffa05 	stb	r2,-24(fp)
      IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    2cf8:	00c14004 	movi	r3,1280
    2cfc:	00824034 	movhi	r2,2304
    2d00:	10800204 	addi	r2,r2,8
    2d04:	10c00035 	stwio	r3,0(r2)
      //data phase IN-1
      IOWR(CY7C67200_BASE,HPI_DATA,0x051c); //500
    2d08:	00c14704 	movi	r3,1308
    2d0c:	00824034 	movhi	r2,2304
    2d10:	10c00035 	stwio	r3,0(r2)
      if(data_size ==8)
    2d14:	e0bffe83 	ldbu	r2,-6(fp)
    2d18:	10800218 	cmpnei	r2,r2,8
    2d1c:	1000041e 	bne	r2,zero,2d30 <main+0x2ad4>
      {
          IOWR(CY7C67200_BASE,HPI_DATA,0x0006);//2 data length
    2d20:	00c00184 	movi	r3,6
    2d24:	00824034 	movhi	r2,2304
    2d28:	10c00035 	stwio	r3,0(r2)
    2d2c:	00000406 	br	2d40 <main+0x2ae4>
      }
      else
      {
          IOWR(CY7C67200_BASE,HPI_DATA,0x000f & data_size);//2 data length
    2d30:	e0bffe83 	ldbu	r2,-6(fp)
    2d34:	10c003cc 	andi	r3,r2,15
    2d38:	00824034 	movhi	r2,2304
    2d3c:	10c00035 	stwio	r3,0(r2)
      }
      IOWR(CY7C67200_BASE,HPI_DATA,0x0291);//4 //endpoint 1
    2d40:	00c0a444 	movi	r3,657
    2d44:	00824034 	movhi	r2,2304
    2d48:	10c00035 	stwio	r3,0(r2)
      if(toggle%2)
    2d4c:	e0bffa03 	ldbu	r2,-24(fp)
    2d50:	1080004c 	andi	r2,r2,1
    2d54:	10803fcc 	andi	r2,r2,255
    2d58:	10000426 	beq	r2,zero,2d6c <main+0x2b10>
      {
          IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data 1
    2d5c:	00c00044 	movi	r3,1
    2d60:	00824034 	movhi	r2,2304
    2d64:	10c00035 	stwio	r3,0(r2)
    2d68:	00000306 	br	2d78 <main+0x2b1c>
      }
      else
      {
          IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6 //data 1
    2d6c:	00c01044 	movi	r3,65
    2d70:	00824034 	movhi	r2,2304
    2d74:	10c00035 	stwio	r3,0(r2)
      }
      IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    2d78:	00c004c4 	movi	r3,19
    2d7c:	00824034 	movhi	r2,2304
    2d80:	10c00035 	stwio	r3,0(r2)
      IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
    2d84:	0007883a 	mov	r3,zero
    2d88:	00824034 	movhi	r2,2304
    2d8c:	10c00035 	stwio	r3,0(r2)
      UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2d90:	01006c04 	movi	r4,432
    2d94:	01414004 	movi	r5,1280
    2d98:	00032cc0 	call	32cc <UsbWrite>
      //usleep(10*1000);    
      while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2d9c:	00002b06 	br	2e4c <main+0x2bf0>
      {
          IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    2da0:	00c14004 	movi	r3,1280
    2da4:	00824034 	movhi	r2,2304
    2da8:	10800204 	addi	r2,r2,8
    2dac:	10c00035 	stwio	r3,0(r2)
          //data phase IN-1
          IOWR(CY7C67200_BASE,HPI_DATA,0x051c); //500
    2db0:	00c14704 	movi	r3,1308
    2db4:	00824034 	movhi	r2,2304
    2db8:	10c00035 	stwio	r3,0(r2)
          if(data_size ==8)
    2dbc:	e0bffe83 	ldbu	r2,-6(fp)
    2dc0:	10800218 	cmpnei	r2,r2,8
    2dc4:	1000041e 	bne	r2,zero,2dd8 <main+0x2b7c>
          {
             IOWR(CY7C67200_BASE,HPI_DATA,0x0006);//2 data length
    2dc8:	00c00184 	movi	r3,6
    2dcc:	00824034 	movhi	r2,2304
    2dd0:	10c00035 	stwio	r3,0(r2)
    2dd4:	00000406 	br	2de8 <main+0x2b8c>
          }
          else
          {
             IOWR(CY7C67200_BASE,HPI_DATA,0x000f & data_size);//2 data length
    2dd8:	e0bffe83 	ldbu	r2,-6(fp)
    2ddc:	10c003cc 	andi	r3,r2,15
    2de0:	00824034 	movhi	r2,2304
    2de4:	10c00035 	stwio	r3,0(r2)
          }
          IOWR(CY7C67200_BASE,HPI_DATA,0x0291);//4 //endpoint 1
    2de8:	00c0a444 	movi	r3,657
    2dec:	00824034 	movhi	r2,2304
    2df0:	10c00035 	stwio	r3,0(r2)
          if(toggle%2)
    2df4:	e0bffa03 	ldbu	r2,-24(fp)
    2df8:	1080004c 	andi	r2,r2,1
    2dfc:	10803fcc 	andi	r2,r2,255
    2e00:	10000426 	beq	r2,zero,2e14 <main+0x2bb8>
          {
            IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data 1
    2e04:	00c00044 	movi	r3,1
    2e08:	00824034 	movhi	r2,2304
    2e0c:	10c00035 	stwio	r3,0(r2)
    2e10:	00000306 	br	2e20 <main+0x2bc4>
          }
          else
          {
            IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6 //data 1
    2e14:	00c01044 	movi	r3,65
    2e18:	00824034 	movhi	r2,2304
    2e1c:	10c00035 	stwio	r3,0(r2)
          }
          IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    2e20:	00c004c4 	movi	r3,19
    2e24:	00824034 	movhi	r2,2304
    2e28:	10c00035 	stwio	r3,0(r2)
          IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
    2e2c:	0007883a 	mov	r3,zero
    2e30:	00824034 	movhi	r2,2304
    2e34:	10c00035 	stwio	r3,0(r2)
          UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2e38:	01006c04 	movi	r4,432
    2e3c:	01414004 	movi	r5,1280
    2e40:	00032cc0 	call	32cc <UsbWrite>
          usleep(10*1000);
    2e44:	0109c404 	movi	r4,10000
    2e48:	000ffc80 	call	ffc8 <usleep>
      }
      IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
      IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
      UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
      //usleep(10*1000);    
      while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2e4c:	00824034 	movhi	r2,2304
    2e50:	10800304 	addi	r2,r2,12
    2e54:	10800037 	ldwio	r2,0(r2)
    2e58:	1080040c 	andi	r2,r2,16
    2e5c:	103fd026 	beq	r2,zero,2da0 <__alt_mem_sram+0xf7e02da0>
          IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
          IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
          UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
          usleep(10*1000);
      }//end while
      usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2e60:	01005104 	movi	r4,324
    2e64:	00033140 	call	3314 <UsbRead>
    2e68:	e0bff80d 	sth	r2,-32(fp)
      UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2e6c:	01005104 	movi	r4,324
    2e70:	000b883a 	mov	r5,zero
    2e74:	00032cc0 	call	32cc <UsbWrite>
      while (usb_ctl_val != 0x1000)  //read sie1 msg register
    2e78:	00000d06 	br	2eb0 <main+0x2c54>
      {
         if(usb_ctl_val == 0x000)
    2e7c:	e0bff80b 	ldhu	r2,-32(fp)
    2e80:	10000526 	beq	r2,zero,2e98 <main+0x2c3c>
         {}
         else
         {
            printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    2e84:	e0bff80b 	ldhu	r2,-32(fp)
    2e88:	01000074 	movhi	r4,1
    2e8c:	21085f04 	addi	r4,r4,8572
    2e90:	100b883a 	mov	r5,r2
    2e94:	00034380 	call	3438 <printf>
         }
         usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2e98:	01005104 	movi	r4,324
    2e9c:	00033140 	call	3314 <UsbRead>
    2ea0:	e0bff80d 	sth	r2,-32(fp)
         UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2ea4:	01005104 	movi	r4,324
    2ea8:	000b883a 	mov	r5,zero
    2eac:	00032cc0 	call	32cc <UsbWrite>
          UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
          usleep(10*1000);
      }//end while
      usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
      UsbWrite(HPI_SIE1_MSG_ADR, 0);
      while (usb_ctl_val != 0x1000)  //read sie1 msg register
    2eb0:	e0bff80b 	ldhu	r2,-32(fp)
    2eb4:	10840018 	cmpnei	r2,r2,4096
    2eb8:	103ff01e 	bne	r2,zero,2e7c <__alt_mem_sram+0xf7e02e7c>
            printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
         }
         usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
         UsbWrite(HPI_SIE1_MSG_ADR, 0);
      }
      IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    2ebc:	00c14204 	movi	r3,1288
    2ec0:	00824034 	movhi	r2,2304
    2ec4:	10800204 	addi	r2,r2,8
    2ec8:	10c00035 	stwio	r3,0(r2)
      usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    2ecc:	00824034 	movhi	r2,2304
    2ed0:	10800037 	ldwio	r2,0(r2)
    2ed4:	e0bff80d 	sth	r2,-32(fp)

      if (usb_ctl_val != 0x03) 
    2ed8:	e0bff80b 	ldhu	r2,-32(fp)
    2edc:	108000e0 	cmpeqi	r2,r2,3
    2ee0:	1000051e 	bne	r2,zero,2ef8 <main+0x2c9c>
      {
         pbutton = 0;
    2ee4:	e03ffc85 	stb	zero,-14(fp)
         dx = 0;
    2ee8:	e03ff985 	stb	zero,-26(fp)
         dy = 0;
    2eec:	e03ff9c5 	stb	zero,-25(fp)
         button_value = 0;
    2ef0:	e03fff15 	stw	zero,-4(fp)
    2ef4:	00007606 	br	30d0 <main+0x2e74>
      }
    
      else
     {
        if(data_size != 8 )  
    2ef8:	e0bffe83 	ldbu	r2,-6(fp)
    2efc:	10800220 	cmpeqi	r2,r2,8
    2f00:	1000391e 	bne	r2,zero,2fe8 <main+0x2d8c>
        {
          IOWR(CY7C67200_BASE,HPI_ADDR,0x051c); //the start address  
    2f04:	00c14704 	movi	r3,1308
    2f08:	00824034 	movhi	r2,2304
    2f0c:	10800204 	addi	r2,r2,8
    2f10:	10c00035 	stwio	r3,0(r2)
          button_value = IORD(CY7C67200_BASE,HPI_DATA);
    2f14:	00824034 	movhi	r2,2304
    2f18:	10800037 	ldwio	r2,0(r2)
    2f1c:	e0bfff15 	stw	r2,-4(fp)
          if((button_value & 0x00ff) ==0x0001)
    2f20:	e0bfff17 	ldw	r2,-4(fp)
    2f24:	10803fcc 	andi	r2,r2,255
    2f28:	10800058 	cmpnei	r2,r2,1
    2f2c:	1000031e 	bne	r2,zero,2f3c <main+0x2ce0>
          {
           //printf("left button\n");
            pbutton = 1;
    2f30:	00800044 	movi	r2,1
    2f34:	e0bffc85 	stb	r2,-14(fp)
    2f38:	00000806 	br	2f5c <main+0x2d00>
          }
          else
          if((button_value& 0x00ff) ==0x0002)
    2f3c:	e0bfff17 	ldw	r2,-4(fp)
    2f40:	10803fcc 	andi	r2,r2,255
    2f44:	10800098 	cmpnei	r2,r2,2
    2f48:	1000031e 	bne	r2,zero,2f58 <main+0x2cfc>
          {
           //printf("right button\n");
           pbutton = 2;    
    2f4c:	00800084 	movi	r2,2
    2f50:	e0bffc85 	stb	r2,-14(fp)
    2f54:	00000106 	br	2f5c <main+0x2d00>
          }
          else
          {
           pbutton = 0;
    2f58:	e03ffc85 	stb	zero,-14(fp)
          }
          if((signed char)((button_value>>8)&0x00ff) != 0)
    2f5c:	e0bfff17 	ldw	r2,-4(fp)
    2f60:	1005d23a 	srai	r2,r2,8
    2f64:	10803fcc 	andi	r2,r2,255
    2f68:	1080201c 	xori	r2,r2,128
    2f6c:	10bfe004 	addi	r2,r2,-128
    2f70:	10000c26 	beq	r2,zero,2fa4 <main+0x2d48>
          {
       
             if((signed char)((button_value>>8)&0x00ff )==dx)
    2f74:	e0bfff17 	ldw	r2,-4(fp)
    2f78:	1005d23a 	srai	r2,r2,8
    2f7c:	10c03fcc 	andi	r3,r2,255
    2f80:	18c0201c 	xori	r3,r3,128
    2f84:	18ffe004 	addi	r3,r3,-128
    2f88:	e0bff987 	ldb	r2,-26(fp)
    2f8c:	1880021e 	bne	r3,r2,2f98 <main+0x2d3c>
             {
                dx = 0;
    2f90:	e03ff985 	stb	zero,-26(fp)
    2f94:	00000306 	br	2fa4 <main+0x2d48>
             }
              else
             {
                dx = (signed char)((button_value>>8)&0x00ff);
    2f98:	e0bfff17 	ldw	r2,-4(fp)
    2f9c:	1005d23a 	srai	r2,r2,8
    2fa0:	e0bff985 	stb	r2,-26(fp)
             }
       
          }
       
       button_value = IORD(CY7C67200_BASE,HPI_DATA);
    2fa4:	00824034 	movhi	r2,2304
    2fa8:	10800037 	ldwio	r2,0(r2)
    2fac:	e0bfff15 	stw	r2,-4(fp)
    
       if(button_value&0xff)
    2fb0:	e0bfff17 	ldw	r2,-4(fp)
    2fb4:	10803fcc 	andi	r2,r2,255
    2fb8:	10004526 	beq	r2,zero,30d0 <main+0x2e74>
       {
          //printf("dy value is %d\n",button_value&0xff);
          if((signed char)(button_value&0x00ff) == dy)
    2fbc:	e0bfff17 	ldw	r2,-4(fp)
    2fc0:	10c03fcc 	andi	r3,r2,255
    2fc4:	18c0201c 	xori	r3,r3,128
    2fc8:	18ffe004 	addi	r3,r3,-128
    2fcc:	e0bff9c7 	ldb	r2,-25(fp)
    2fd0:	1880021e 	bne	r3,r2,2fdc <main+0x2d80>
          {
             dy = 0;
    2fd4:	e03ff9c5 	stb	zero,-25(fp)
    2fd8:	00003d06 	br	30d0 <main+0x2e74>
          }
          else
          {
             dy = (signed char)(button_value&0xff);
    2fdc:	e0bfff17 	ldw	r2,-4(fp)
    2fe0:	e0bff9c5 	stb	r2,-25(fp)
    2fe4:	00003a06 	br	30d0 <main+0x2e74>
        
        }
      }
      else //>8
      {
        IOWR(CY7C67200_BASE,HPI_ADDR,0x051c); //the start address  
    2fe8:	00c14704 	movi	r3,1308
    2fec:	00824034 	movhi	r2,2304
    2ff0:	10800204 	addi	r2,r2,8
    2ff4:	10c00035 	stwio	r3,0(r2)
        button_value = IORD(CY7C67200_BASE,HPI_DATA);
    2ff8:	00824034 	movhi	r2,2304
    2ffc:	10800037 	ldwio	r2,0(r2)
    3000:	e0bfff15 	stw	r2,-4(fp)
         if(((button_value>>8) & 0x00ff) ==0x0001)
    3004:	e0bfff17 	ldw	r2,-4(fp)
    3008:	1005d23a 	srai	r2,r2,8
    300c:	10803fcc 	andi	r2,r2,255
    3010:	10800058 	cmpnei	r2,r2,1
    3014:	1000031e 	bne	r2,zero,3024 <main+0x2dc8>
        {
           //printf("left button\n");
           pbutton = 1;
    3018:	00800044 	movi	r2,1
    301c:	e0bffc85 	stb	r2,-14(fp)
    3020:	00000906 	br	3048 <main+0x2dec>
        }
        else
        if(((button_value>>8) & 0x00ff) ==0x0002)
    3024:	e0bfff17 	ldw	r2,-4(fp)
    3028:	1005d23a 	srai	r2,r2,8
    302c:	10803fcc 	andi	r2,r2,255
    3030:	10800098 	cmpnei	r2,r2,2
    3034:	1000031e 	bne	r2,zero,3044 <main+0x2de8>
        {
           //printf("right button\n");
           pbutton = 2;    
    3038:	00800084 	movi	r2,2
    303c:	e0bffc85 	stb	r2,-14(fp)
    3040:	00000106 	br	3048 <main+0x2dec>
        }
        else
        {
           pbutton = 0;
    3044:	e03ffc85 	stb	zero,-14(fp)
        }
        button_value = IORD(CY7C67200_BASE,HPI_DATA);
    3048:	00824034 	movhi	r2,2304
    304c:	10800037 	ldwio	r2,0(r2)
    3050:	e0bfff15 	stw	r2,-4(fp)
        if((signed char)((button_value>>8)&0x00ff) != 0)
    3054:	e0bfff17 	ldw	r2,-4(fp)
    3058:	1005d23a 	srai	r2,r2,8
    305c:	10803fcc 	andi	r2,r2,255
    3060:	1080201c 	xori	r2,r2,128
    3064:	10bfe004 	addi	r2,r2,-128
    3068:	10000c26 	beq	r2,zero,309c <main+0x2e40>
        {
           if((signed char)((button_value>>8)&0x00ff )==dy)
    306c:	e0bfff17 	ldw	r2,-4(fp)
    3070:	1005d23a 	srai	r2,r2,8
    3074:	10c03fcc 	andi	r3,r2,255
    3078:	18c0201c 	xori	r3,r3,128
    307c:	18ffe004 	addi	r3,r3,-128
    3080:	e0bff9c7 	ldb	r2,-25(fp)
    3084:	1880021e 	bne	r3,r2,3090 <main+0x2e34>
           {
              dy = 0;
    3088:	e03ff9c5 	stb	zero,-25(fp)
    308c:	00000306 	br	309c <main+0x2e40>
           }
           else
           {
              dy = (signed char)((button_value>>8)&0x00ff);
    3090:	e0bfff17 	ldw	r2,-4(fp)
    3094:	1005d23a 	srai	r2,r2,8
    3098:	e0bff9c5 	stb	r2,-25(fp)
           }
       
        }
       
       if(button_value&0x0ff)
    309c:	e0bfff17 	ldw	r2,-4(fp)
    30a0:	10803fcc 	andi	r2,r2,255
    30a4:	10000a26 	beq	r2,zero,30d0 <main+0x2e74>
       {
          //printf("dy value is %d\n",button_value&0xff);
          if((signed char)(button_value&0x00ff) == dx)
    30a8:	e0bfff17 	ldw	r2,-4(fp)
    30ac:	10c03fcc 	andi	r3,r2,255
    30b0:	18c0201c 	xori	r3,r3,128
    30b4:	18ffe004 	addi	r3,r3,-128
    30b8:	e0bff987 	ldb	r2,-26(fp)
    30bc:	1880021e 	bne	r3,r2,30c8 <main+0x2e6c>
          {
             dx = 0;
    30c0:	e03ff985 	stb	zero,-26(fp)
    30c4:	00000206 	br	30d0 <main+0x2e74>
          }
          else
          {
             dx = (signed char)(button_value&0xff);
    30c8:	e0bfff17 	ldw	r2,-4(fp)
    30cc:	e0bff985 	stb	r2,-26(fp)
        }
      }
        
    }    
     
    px = px + dx;
    30d0:	e0fff987 	ldb	r3,-26(fp)
    30d4:	e0bff88b 	ldhu	r2,-30(fp)
    30d8:	1885883a 	add	r2,r3,r2
    30dc:	e0bff88d 	sth	r2,-30(fp)
    py = py + dy;
    30e0:	e0fff9c7 	ldb	r3,-25(fp)
    30e4:	e0bff90b 	ldhu	r2,-28(fp)
    30e8:	1885883a 	add	r2,r3,r2
    30ec:	e0bff90d 	sth	r2,-28(fp)
    
    px=maxmin(px,639,0);
    30f0:	e0bff88b 	ldhu	r2,-30(fp)
    30f4:	1009883a 	mov	r4,r2
    30f8:	01409fc4 	movi	r5,639
    30fc:	000d883a 	mov	r6,zero
    3100:	00002080 	call	208 <maxmin>
    3104:	e0bff88d 	sth	r2,-30(fp)
    py=maxmin(py,479,0);
    3108:	e0bff90b 	ldhu	r2,-28(fp)
    310c:	1009883a 	mov	r4,r2
    3110:	014077c4 	movi	r5,479
    3114:	000d883a 	mov	r6,zero
    3118:	00002080 	call	208 <maxmin>
    311c:	e0bff90d 	sth	r2,-28(fp)
    int now = MOUSE_PIO[0];
    3120:	e0bffd17 	ldw	r2,-12(fp)
    3124:	10800017 	ldw	r2,0(r2)
    3128:	e0bffb15 	stw	r2,-20(fp)
    if(now>1) now = 1;
    312c:	e0bffb17 	ldw	r2,-20(fp)
    3130:	10800090 	cmplti	r2,r2,2
    3134:	1000021e 	bne	r2,zero,3140 <main+0x2ee4>
    3138:	00800044 	movi	r2,1
    313c:	e0bffb15 	stw	r2,-20(fp)
    MOUSE_PIO[0] = 1 - now;
    3140:	00c00044 	movi	r3,1
    3144:	e0bffb17 	ldw	r2,-20(fp)
    3148:	1885c83a 	sub	r2,r3,r2
    314c:	1007883a 	mov	r3,r2
    3150:	e0bffd17 	ldw	r2,-12(fp)
    3154:	10c00015 	stw	r3,0(r2)
    //while(MOUSE_PIO[0] != px);
    //MOUSE_PIO[1] = py;
    //while(MOUSE_PIO[1] != py);
    //*MOUSEY_PIO[1] = py;
    printf("\n[MOUSE XY]:%d, %d", px, py);
    3158:	e0fff88b 	ldhu	r3,-30(fp)
    315c:	e0bff90b 	ldhu	r2,-28(fp)
    3160:	01000074 	movhi	r4,1
    3164:	2109f104 	addi	r4,r4,10180
    3168:	180b883a 	mov	r5,r3
    316c:	100d883a 	mov	r6,r2
    3170:	00034380 	call	3438 <printf>
    usleep(5*1000);
    3174:	0104e204 	movi	r4,5000
    3178:	000ffc80 	call	ffc8 <usleep>
    //usleep(5*1000);
    //USB hot plug routine
    usb_ctl_val = UsbRead(ctl_reg);
    317c:	d0a6cb0b 	ldhu	r2,-25812(gp)
    3180:	10bfffcc 	andi	r2,r2,65535
    3184:	1009883a 	mov	r4,r2
    3188:	00033140 	call	3314 <UsbRead>
    318c:	e0bff80d 	sth	r2,-32(fp)
    //usleep(5*1000);
    usb_ctl_val = UsbRead(ctl_reg);
    3190:	d0a6cb0b 	ldhu	r2,-25812(gp)
    3194:	10bfffcc 	andi	r2,r2,65535
    3198:	1009883a 	mov	r4,r2
    319c:	00033140 	call	3314 <UsbRead>
    31a0:	e0bff80d 	sth	r2,-32(fp)
    //usleep(5*1000);
    usb_ctl_val = UsbRead(ctl_reg);
    31a4:	d0a6cb0b 	ldhu	r2,-25812(gp)
    31a8:	10bfffcc 	andi	r2,r2,65535
    31ac:	1009883a 	mov	r4,r2
    31b0:	00033140 	call	3314 <UsbRead>
    31b4:	e0bff80d 	sth	r2,-32(fp)
    //usleep(5*1000);
    usb_ctl_val = UsbRead(ctl_reg);
    31b8:	d0a6cb0b 	ldhu	r2,-25812(gp)
    31bc:	10bfffcc 	andi	r2,r2,65535
    31c0:	1009883a 	mov	r4,r2
    31c4:	00033140 	call	3314 <UsbRead>
    31c8:	e0bff80d 	sth	r2,-32(fp)
    //usleep(5*1000);
    usb_ctl_val = UsbRead(ctl_reg);
    31cc:	d0a6cb0b 	ldhu	r2,-25812(gp)
    31d0:	10bfffcc 	andi	r2,r2,65535
    31d4:	1009883a 	mov	r4,r2
    31d8:	00033140 	call	3314 <UsbRead>
    31dc:	e0bff80d 	sth	r2,-32(fp)
    //usleep(5*1000);
    usb_ctl_val = UsbRead(ctl_reg);
    31e0:	d0a6cb0b 	ldhu	r2,-25812(gp)
    31e4:	10bfffcc 	andi	r2,r2,65535
    31e8:	1009883a 	mov	r4,r2
    31ec:	00033140 	call	3314 <UsbRead>
    31f0:	e0bff80d 	sth	r2,-32(fp)
    //usleep(5*1000);

    if(!(usb_ctl_val & no_device))
    31f4:	d0a6cb8b 	ldhu	r2,-25810(gp)
    31f8:	e0fff80b 	ldhu	r3,-32(fp)
    31fc:	1884703a 	and	r2,r3,r2
    3200:	10bfffcc 	andi	r2,r2,65535
    3204:	1000061e 	bne	r2,zero,3220 <main+0x2fc4>
    {
       printf("\n[INFO]: the mouse has been removed!!! \n");
    3208:	01000074 	movhi	r4,1
    320c:	2109f604 	addi	r4,r4,10200
    3210:	000352c0 	call	352c <puts>
       printf("[INFO]: please insert again!!! \n");
    3214:	01000074 	movhi	r4,1
    3218:	210a0004 	addi	r4,r4,10240
    321c:	000352c0 	call	352c <puts>
    };
    usleep(5000);
    3220:	0104e204 	movi	r4,5000
    3224:	000ffc80 	call	ffc8 <usleep>
    usb_ctl_val = UsbRead(ctl_reg);
    3228:	d0a6cb0b 	ldhu	r2,-25812(gp)
    322c:	10bfffcc 	andi	r2,r2,65535
    3230:	1009883a 	mov	r4,r2
    3234:	00033140 	call	3314 <UsbRead>
    3238:	e0bff80d 	sth	r2,-32(fp)
    while (!(usb_ctl_val & no_device))
    323c:	00001d06 	br	32b4 <main+0x3058>
    {
       
       usb_ctl_val = UsbRead(ctl_reg);
    3240:	d0a6cb0b 	ldhu	r2,-25812(gp)
    3244:	10bfffcc 	andi	r2,r2,65535
    3248:	1009883a 	mov	r4,r2
    324c:	00033140 	call	3314 <UsbRead>
    3250:	e0bff80d 	sth	r2,-32(fp)
       usleep(5*1000);
    3254:	0104e204 	movi	r4,5000
    3258:	000ffc80 	call	ffc8 <usleep>
       usb_ctl_val = UsbRead(ctl_reg);
    325c:	d0a6cb0b 	ldhu	r2,-25812(gp)
    3260:	10bfffcc 	andi	r2,r2,65535
    3264:	1009883a 	mov	r4,r2
    3268:	00033140 	call	3314 <UsbRead>
    326c:	e0bff80d 	sth	r2,-32(fp)
       usleep(5*1000);
    3270:	0104e204 	movi	r4,5000
    3274:	000ffc80 	call	ffc8 <usleep>
       usb_ctl_val = UsbRead(ctl_reg);
    3278:	d0a6cb0b 	ldhu	r2,-25812(gp)
    327c:	10bfffcc 	andi	r2,r2,65535
    3280:	1009883a 	mov	r4,r2
    3284:	00033140 	call	3314 <UsbRead>
    3288:	e0bff80d 	sth	r2,-32(fp)
       usleep(5*1000);
    328c:	0104e204 	movi	r4,5000
    3290:	000ffc80 	call	ffc8 <usleep>

       if(usb_ctl_val & no_device)
    3294:	d0a6cb8b 	ldhu	r2,-25810(gp)
    3298:	e0fff80b 	ldhu	r3,-32(fp)
    329c:	1884703a 	and	r2,r3,r2
    32a0:	10bfffcc 	andi	r2,r2,65535
    32a4:	10000126 	beq	r2,zero,32ac <main+0x3050>
         goto USB_HOT_PLUG;
    32a8:	0033fc06 	br	29c <__alt_mem_sram+0xf7e0029c>
       
       usleep(200);
    32ac:	01003204 	movi	r4,200
    32b0:	000ffc80 	call	ffc8 <usleep>
       printf("\n[INFO]: the mouse has been removed!!! \n");
       printf("[INFO]: please insert again!!! \n");
    };
    usleep(5000);
    usb_ctl_val = UsbRead(ctl_reg);
    while (!(usb_ctl_val & no_device))
    32b4:	d0a6cb8b 	ldhu	r2,-25810(gp)
    32b8:	e0fff80b 	ldhu	r3,-32(fp)
    32bc:	1884703a 	and	r2,r3,r2
    32c0:	10bfffcc 	andi	r2,r2,65535
    32c4:	103fde26 	beq	r2,zero,3240 <__alt_mem_sram+0xf7e03240>
       
       usleep(200);

    }
    
    }//end while
    32c8:	003e8806 	br	2cec <__alt_mem_sram+0xf7e02cec>

000032cc <UsbWrite>:
*
* @note     None
*
******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    32cc:	defffd04 	addi	sp,sp,-12
    32d0:	df000215 	stw	fp,8(sp)
    32d4:	df000204 	addi	fp,sp,8
    32d8:	2007883a 	mov	r3,r4
    32dc:	2805883a 	mov	r2,r5
    32e0:	e0fffe0d 	sth	r3,-8(fp)
    32e4:	e0bfff0d 	sth	r2,-4(fp)
    //XIo_Out16(USB_ADDRESS, Address);
    IOWR(CY7C67200_BASE,HPI_ADDR,Address);
    32e8:	e0fffe0b 	ldhu	r3,-8(fp)
    32ec:	00824034 	movhi	r2,2304
    32f0:	10800204 	addi	r2,r2,8
    32f4:	10c00035 	stwio	r3,0(r2)
    //usleep(10);
    
    //XIo_Out16(USB_DATA, Data);
    IOWR(CY7C67200_BASE,HPI_DATA,Data); 
    32f8:	e0ffff0b 	ldhu	r3,-4(fp)
    32fc:	00824034 	movhi	r2,2304
    3300:	10c00035 	stwio	r3,0(r2)
}
    3304:	e037883a 	mov	sp,fp
    3308:	df000017 	ldw	fp,0(sp)
    330c:	dec00104 	addi	sp,sp,4
    3310:	f800283a 	ret

00003314 <UsbRead>:
*
* @note     None
*
******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    3314:	defffe04 	addi	sp,sp,-8
    3318:	df000115 	stw	fp,4(sp)
    331c:	df000104 	addi	fp,sp,4
    3320:	2005883a 	mov	r2,r4
    3324:	e0bfff0d 	sth	r2,-4(fp)
    //XIo_Out16(HPI_ADDR, Address);
    IOWR(CY7C67200_BASE,HPI_ADDR,Address);
    3328:	e0ffff0b 	ldhu	r3,-4(fp)
    332c:	00824034 	movhi	r2,2304
    3330:	10800204 	addi	r2,r2,8
    3334:	10c00035 	stwio	r3,0(r2)
    //usleep(20);
    return IORD(CY7C67200_BASE,HPI_DATA);
    3338:	00824034 	movhi	r2,2304
    333c:	10800037 	ldwio	r2,0(r2)
}
    3340:	e037883a 	mov	sp,fp
    3344:	df000017 	ldw	fp,0(sp)
    3348:	dec00104 	addi	sp,sp,4
    334c:	f800283a 	ret

00003350 <UsbSoftReset>:
*
* @note     None
*
******************************************************************************/
void UsbSoftReset()
{
    3350:	defffe04 	addi	sp,sp,-8
    3354:	dfc00115 	stw	ra,4(sp)
    3358:	df000015 	stw	fp,0(sp)
    335c:	d839883a 	mov	fp,sp
    //XIo_Out16(USB_MAILBOX, COMM_RESET);
    IOWR(CY7C67200_BASE,HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    3360:	00fe9414 	movui	r3,64080
    3364:	00824034 	movhi	r2,2304
    3368:	10800104 	addi	r2,r2,4
    336c:	10c00035 	stwio	r3,0(r2)
    usleep(100000);
    3370:	010000b4 	movhi	r4,2
    3374:	2121a804 	addi	r4,r4,-31072
    3378:	000ffc80 	call	ffc8 <usleep>
    printf("[USB INIT]:reset finished!\n");
    337c:	01000074 	movhi	r4,1
    3380:	210a0804 	addi	r4,r4,10272
    3384:	000352c0 	call	352c <puts>

    usleep(500000);
    3388:	01000234 	movhi	r4,8
    338c:	21284804 	addi	r4,r4,-24288
    3390:	000ffc80 	call	ffc8 <usleep>
    printf("[USB INIT]:Clear up the interrupt\r\n");
    3394:	01000074 	movhi	r4,1
    3398:	210a0f04 	addi	r4,r4,10300
    339c:	000352c0 	call	352c <puts>
    IORD(CY7C67200_BASE,HPI_MAILBOX);
    33a0:	00824034 	movhi	r2,2304
    33a4:	10800104 	addi	r2,r2,4
    33a8:	10800037 	ldwio	r2,0(r2)
    IORD(CY7C67200_BASE,HPI_STATUS);
    33ac:	00824034 	movhi	r2,2304
    33b0:	10800304 	addi	r2,r2,12
    33b4:	10800037 	ldwio	r2,0(r2)

    // Had to add the write due to a bug in BIOS where they overwrite
    // the mailbox after initialization with garbage.  The read clears
    // any pending interrupts.
    UsbRead (HPI_SIE1_MSG_ADR);
    33b8:	01005104 	movi	r4,324
    33bc:	00033140 	call	3314 <UsbRead>
    UsbWrite (HPI_SIE1_MSG_ADR, 0);
    33c0:	01005104 	movi	r4,324
    33c4:	000b883a 	mov	r5,zero
    33c8:	00032cc0 	call	32cc <UsbWrite>
    UsbRead (HPI_SIE2_MSG_ADR);
    33cc:	01005204 	movi	r4,328
    33d0:	00033140 	call	3314 <UsbRead>
    UsbWrite (HPI_SIE2_MSG_ADR, 0);
    33d4:	01005204 	movi	r4,328
    33d8:	000b883a 	mov	r5,zero
    33dc:	00032cc0 	call	32cc <UsbWrite>

    UsbWrite (HOST1_STAT_REG, 0xFFFF);
    33e0:	01302414 	movui	r4,49296
    33e4:	017fffd4 	movui	r5,65535
    33e8:	00032cc0 	call	32cc <UsbWrite>
    UsbWrite (HOST2_STAT_REG, 0xFFFF);
    33ec:	01302c14 	movui	r4,49328
    33f0:	017fffd4 	movui	r5,65535
    33f4:	00032cc0 	call	32cc <UsbWrite>
}
    33f8:	e037883a 	mov	sp,fp
    33fc:	dfc00117 	ldw	ra,4(sp)
    3400:	df000017 	ldw	fp,0(sp)
    3404:	dec00204 	addi	sp,sp,8
    3408:	f800283a 	ret

0000340c <_printf_r>:
    340c:	defffd04 	addi	sp,sp,-12
    3410:	dfc00015 	stw	ra,0(sp)
    3414:	d9800115 	stw	r6,4(sp)
    3418:	d9c00215 	stw	r7,8(sp)
    341c:	280d883a 	mov	r6,r5
    3420:	21400217 	ldw	r5,8(r4)
    3424:	d9c00104 	addi	r7,sp,4
    3428:	00035d80 	call	35d8 <___vfprintf_internal_r>
    342c:	dfc00017 	ldw	ra,0(sp)
    3430:	dec00304 	addi	sp,sp,12
    3434:	f800283a 	ret

00003438 <printf>:
    3438:	defffc04 	addi	sp,sp,-16
    343c:	dfc00015 	stw	ra,0(sp)
    3440:	d9400115 	stw	r5,4(sp)
    3444:	d9800215 	stw	r6,8(sp)
    3448:	d9c00315 	stw	r7,12(sp)
    344c:	00800074 	movhi	r2,1
    3450:	10918204 	addi	r2,r2,17928
    3454:	10800017 	ldw	r2,0(r2)
    3458:	200b883a 	mov	r5,r4
    345c:	d9800104 	addi	r6,sp,4
    3460:	11000217 	ldw	r4,8(r2)
    3464:	00055d40 	call	55d4 <__vfprintf_internal>
    3468:	dfc00017 	ldw	ra,0(sp)
    346c:	dec00404 	addi	sp,sp,16
    3470:	f800283a 	ret

00003474 <_puts_r>:
    3474:	defff604 	addi	sp,sp,-40
    3478:	dc000715 	stw	r16,28(sp)
    347c:	2021883a 	mov	r16,r4
    3480:	2809883a 	mov	r4,r5
    3484:	dc400815 	stw	r17,32(sp)
    3488:	dfc00915 	stw	ra,36(sp)
    348c:	2823883a 	mov	r17,r5
    3490:	00035400 	call	3540 <strlen>
    3494:	00c00074 	movhi	r3,1
    3498:	18d18204 	addi	r3,r3,17928
    349c:	18c00017 	ldw	r3,0(r3)
    34a0:	11000044 	addi	r4,r2,1
    34a4:	d8800115 	stw	r2,4(sp)
    34a8:	18c00217 	ldw	r3,8(r3)
    34ac:	01400074 	movhi	r5,1
    34b0:	294a1804 	addi	r5,r5,10336
    34b4:	1880030b 	ldhu	r2,12(r3)
    34b8:	d9400215 	stw	r5,8(sp)
    34bc:	d9000615 	stw	r4,24(sp)
    34c0:	01400044 	movi	r5,1
    34c4:	01000084 	movi	r4,2
    34c8:	d9000515 	stw	r4,20(sp)
    34cc:	dc400015 	stw	r17,0(sp)
    34d0:	d9400315 	stw	r5,12(sp)
    34d4:	dec00415 	stw	sp,16(sp)
    34d8:	1108000c 	andi	r4,r2,8192
    34dc:	2000061e 	bne	r4,zero,34f8 <_puts_r+0x84>
    34e0:	19401917 	ldw	r5,100(r3)
    34e4:	0137ffc4 	movi	r4,-8193
    34e8:	10880014 	ori	r2,r2,8192
    34ec:	2908703a 	and	r4,r5,r4
    34f0:	1880030d 	sth	r2,12(r3)
    34f4:	19001915 	stw	r4,100(r3)
    34f8:	81400217 	ldw	r5,8(r16)
    34fc:	8009883a 	mov	r4,r16
    3500:	d9800404 	addi	r6,sp,16
    3504:	0007a5c0 	call	7a5c <__sfvwrite_r>
    3508:	1000061e 	bne	r2,zero,3524 <_puts_r+0xb0>
    350c:	00800284 	movi	r2,10
    3510:	dfc00917 	ldw	ra,36(sp)
    3514:	dc400817 	ldw	r17,32(sp)
    3518:	dc000717 	ldw	r16,28(sp)
    351c:	dec00a04 	addi	sp,sp,40
    3520:	f800283a 	ret
    3524:	00bfffc4 	movi	r2,-1
    3528:	003ff906 	br	3510 <__alt_mem_sram+0xf7e03510>

0000352c <puts>:
    352c:	00800074 	movhi	r2,1
    3530:	10918204 	addi	r2,r2,17928
    3534:	200b883a 	mov	r5,r4
    3538:	11000017 	ldw	r4,0(r2)
    353c:	00034741 	jmpi	3474 <_puts_r>

00003540 <strlen>:
    3540:	208000cc 	andi	r2,r4,3
    3544:	10002026 	beq	r2,zero,35c8 <strlen+0x88>
    3548:	20800007 	ldb	r2,0(r4)
    354c:	10002026 	beq	r2,zero,35d0 <strlen+0x90>
    3550:	2005883a 	mov	r2,r4
    3554:	00000206 	br	3560 <strlen+0x20>
    3558:	10c00007 	ldb	r3,0(r2)
    355c:	18001826 	beq	r3,zero,35c0 <strlen+0x80>
    3560:	10800044 	addi	r2,r2,1
    3564:	10c000cc 	andi	r3,r2,3
    3568:	183ffb1e 	bne	r3,zero,3558 <__alt_mem_sram+0xf7e03558>
    356c:	10c00017 	ldw	r3,0(r2)
    3570:	01ffbff4 	movhi	r7,65279
    3574:	39ffbfc4 	addi	r7,r7,-257
    3578:	00ca303a 	nor	r5,zero,r3
    357c:	01a02074 	movhi	r6,32897
    3580:	19c7883a 	add	r3,r3,r7
    3584:	31a02004 	addi	r6,r6,-32640
    3588:	1946703a 	and	r3,r3,r5
    358c:	1986703a 	and	r3,r3,r6
    3590:	1800091e 	bne	r3,zero,35b8 <strlen+0x78>
    3594:	10800104 	addi	r2,r2,4
    3598:	10c00017 	ldw	r3,0(r2)
    359c:	19cb883a 	add	r5,r3,r7
    35a0:	00c6303a 	nor	r3,zero,r3
    35a4:	28c6703a 	and	r3,r5,r3
    35a8:	1986703a 	and	r3,r3,r6
    35ac:	183ff926 	beq	r3,zero,3594 <__alt_mem_sram+0xf7e03594>
    35b0:	00000106 	br	35b8 <strlen+0x78>
    35b4:	10800044 	addi	r2,r2,1
    35b8:	10c00007 	ldb	r3,0(r2)
    35bc:	183ffd1e 	bne	r3,zero,35b4 <__alt_mem_sram+0xf7e035b4>
    35c0:	1105c83a 	sub	r2,r2,r4
    35c4:	f800283a 	ret
    35c8:	2005883a 	mov	r2,r4
    35cc:	003fe706 	br	356c <__alt_mem_sram+0xf7e0356c>
    35d0:	0005883a 	mov	r2,zero
    35d4:	f800283a 	ret

000035d8 <___vfprintf_internal_r>:
    35d8:	defeb604 	addi	sp,sp,-1320
    35dc:	dfc14915 	stw	ra,1316(sp)
    35e0:	ddc14715 	stw	r23,1308(sp)
    35e4:	dd814615 	stw	r22,1304(sp)
    35e8:	282f883a 	mov	r23,r5
    35ec:	202d883a 	mov	r22,r4
    35f0:	d9812a15 	stw	r6,1192(sp)
    35f4:	d9c12d15 	stw	r7,1204(sp)
    35f8:	df014815 	stw	fp,1312(sp)
    35fc:	dd414515 	stw	r21,1300(sp)
    3600:	dd014415 	stw	r20,1296(sp)
    3604:	dcc14315 	stw	r19,1292(sp)
    3608:	dc814215 	stw	r18,1288(sp)
    360c:	dc414115 	stw	r17,1284(sp)
    3610:	dc014015 	stw	r16,1280(sp)
    3614:	000811c0 	call	811c <_localeconv_r>
    3618:	10800017 	ldw	r2,0(r2)
    361c:	1009883a 	mov	r4,r2
    3620:	d8813515 	stw	r2,1236(sp)
    3624:	00035400 	call	3540 <strlen>
    3628:	d8813815 	stw	r2,1248(sp)
    362c:	b0000226 	beq	r22,zero,3638 <___vfprintf_internal_r+0x60>
    3630:	b0800e17 	ldw	r2,56(r22)
    3634:	10010426 	beq	r2,zero,3a48 <___vfprintf_internal_r+0x470>
    3638:	b8c0030b 	ldhu	r3,12(r23)
    363c:	1908000c 	andi	r4,r3,8192
    3640:	1805883a 	mov	r2,r3
    3644:	2000071e 	bne	r4,zero,3664 <___vfprintf_internal_r+0x8c>
    3648:	b9001917 	ldw	r4,100(r23)
    364c:	18880014 	ori	r2,r3,8192
    3650:	00f7ffc4 	movi	r3,-8193
    3654:	20c8703a 	and	r4,r4,r3
    3658:	b880030d 	sth	r2,12(r23)
    365c:	1007883a 	mov	r3,r2
    3660:	b9001915 	stw	r4,100(r23)
    3664:	1100020c 	andi	r4,r2,8
    3668:	2000a726 	beq	r4,zero,3908 <___vfprintf_internal_r+0x330>
    366c:	b9000417 	ldw	r4,16(r23)
    3670:	2000a526 	beq	r4,zero,3908 <___vfprintf_internal_r+0x330>
    3674:	1080068c 	andi	r2,r2,26
    3678:	01000284 	movi	r4,10
    367c:	1100ab26 	beq	r2,r4,392c <___vfprintf_internal_r+0x354>
    3680:	dac10e04 	addi	r11,sp,1080
    3684:	db010dc4 	addi	r12,sp,1079
    3688:	d8800404 	addi	r2,sp,16
    368c:	05000074 	movhi	r20,1
    3690:	dac12815 	stw	r11,1184(sp)
    3694:	5b17c83a 	sub	r11,r11,r12
    3698:	a50a2984 	addi	r20,r20,10406
    369c:	db012915 	stw	r12,1188(sp)
    36a0:	d8811e15 	stw	r2,1144(sp)
    36a4:	d8012015 	stw	zero,1152(sp)
    36a8:	d8011f15 	stw	zero,1148(sp)
    36ac:	d8013315 	stw	zero,1228(sp)
    36b0:	d8013715 	stw	zero,1244(sp)
    36b4:	d8013915 	stw	zero,1252(sp)
    36b8:	d8013b15 	stw	zero,1260(sp)
    36bc:	d8013a15 	stw	zero,1256(sp)
    36c0:	d8012f15 	stw	zero,1212(sp)
    36c4:	1011883a 	mov	r8,r2
    36c8:	dac13c15 	stw	r11,1264(sp)
    36cc:	db012a17 	ldw	r12,1192(sp)
    36d0:	60800007 	ldb	r2,0(r12)
    36d4:	1000df26 	beq	r2,zero,3a54 <___vfprintf_internal_r+0x47c>
    36d8:	00c00944 	movi	r3,37
    36dc:	10c0dd26 	beq	r2,r3,3a54 <___vfprintf_internal_r+0x47c>
    36e0:	6021883a 	mov	r16,r12
    36e4:	00000106 	br	36ec <___vfprintf_internal_r+0x114>
    36e8:	10c08426 	beq	r2,r3,38fc <___vfprintf_internal_r+0x324>
    36ec:	84000044 	addi	r16,r16,1
    36f0:	80800007 	ldb	r2,0(r16)
    36f4:	103ffc1e 	bne	r2,zero,36e8 <__alt_mem_sram+0xf7e036e8>
    36f8:	dac12a17 	ldw	r11,1192(sp)
    36fc:	82e3c83a 	sub	r17,r16,r11
    3700:	88000f26 	beq	r17,zero,3740 <___vfprintf_internal_r+0x168>
    3704:	d8c12017 	ldw	r3,1152(sp)
    3708:	d8811f17 	ldw	r2,1148(sp)
    370c:	dac12a17 	ldw	r11,1192(sp)
    3710:	1c47883a 	add	r3,r3,r17
    3714:	10800044 	addi	r2,r2,1
    3718:	d8c12015 	stw	r3,1152(sp)
    371c:	42c00015 	stw	r11,0(r8)
    3720:	44400115 	stw	r17,4(r8)
    3724:	d8811f15 	stw	r2,1148(sp)
    3728:	00c001c4 	movi	r3,7
    372c:	1880b416 	blt	r3,r2,3a00 <___vfprintf_internal_r+0x428>
    3730:	42000204 	addi	r8,r8,8
    3734:	db012f17 	ldw	r12,1212(sp)
    3738:	6459883a 	add	r12,r12,r17
    373c:	db012f15 	stw	r12,1212(sp)
    3740:	80800007 	ldb	r2,0(r16)
    3744:	1000b526 	beq	r2,zero,3a1c <___vfprintf_internal_r+0x444>
    3748:	80800044 	addi	r2,r16,1
    374c:	84000047 	ldb	r16,1(r16)
    3750:	d8012785 	stb	zero,1182(sp)
    3754:	000d883a 	mov	r6,zero
    3758:	027fffc4 	movi	r9,-1
    375c:	d8012e15 	stw	zero,1208(sp)
    3760:	0023883a 	mov	r17,zero
    3764:	01001604 	movi	r4,88
    3768:	01400244 	movi	r5,9
    376c:	02800a84 	movi	r10,42
    3770:	01c01b04 	movi	r7,108
    3774:	10c00044 	addi	r3,r2,1
    3778:	80bff804 	addi	r2,r16,-32
    377c:	2082f236 	bltu	r4,r2,4348 <___vfprintf_internal_r+0xd70>
    3780:	100490ba 	slli	r2,r2,2
    3784:	02c00034 	movhi	r11,0
    3788:	5acde604 	addi	r11,r11,14232
    378c:	12c5883a 	add	r2,r2,r11
    3790:	10800017 	ldw	r2,0(r2)
    3794:	1000683a 	jmp	r2
    3798:	00004190 	cmplti	zero,zero,262
    379c:	00004348 	cmpgei	zero,zero,269
    37a0:	00004348 	cmpgei	zero,zero,269
    37a4:	000041b0 	cmpltui	zero,zero,262
    37a8:	00004348 	cmpgei	zero,zero,269
    37ac:	00004348 	cmpgei	zero,zero,269
    37b0:	00004348 	cmpgei	zero,zero,269
    37b4:	00004348 	cmpgei	zero,zero,269
    37b8:	00004348 	cmpgei	zero,zero,269
    37bc:	00004348 	cmpgei	zero,zero,269
    37c0:	0000430c 	andi	zero,zero,268
    37c4:	00004338 	rdprs	zero,zero,268
    37c8:	00004348 	cmpgei	zero,zero,269
    37cc:	00003a5c 	xori	zero,zero,233
    37d0:	00003a6c 	andhi	zero,zero,233
    37d4:	00004348 	cmpgei	zero,zero,269
    37d8:	00003aac 	andhi	zero,zero,234
    37dc:	00003fa0 	cmpeqi	zero,zero,254
    37e0:	00003fa0 	cmpeqi	zero,zero,254
    37e4:	00003fa0 	cmpeqi	zero,zero,254
    37e8:	00003fa0 	cmpeqi	zero,zero,254
    37ec:	00003fa0 	cmpeqi	zero,zero,254
    37f0:	00003fa0 	cmpeqi	zero,zero,254
    37f4:	00003fa0 	cmpeqi	zero,zero,254
    37f8:	00003fa0 	cmpeqi	zero,zero,254
    37fc:	00003fa0 	cmpeqi	zero,zero,254
    3800:	00004348 	cmpgei	zero,zero,269
    3804:	00004348 	cmpgei	zero,zero,269
    3808:	00004348 	cmpgei	zero,zero,269
    380c:	00004348 	cmpgei	zero,zero,269
    3810:	00004348 	cmpgei	zero,zero,269
    3814:	00004348 	cmpgei	zero,zero,269
    3818:	00004348 	cmpgei	zero,zero,269
    381c:	00004348 	cmpgei	zero,zero,269
    3820:	00004348 	cmpgei	zero,zero,269
    3824:	00004348 	cmpgei	zero,zero,269
    3828:	00003fd4 	movui	zero,255
    382c:	00003abc 	xorhi	zero,zero,234
    3830:	00004348 	cmpgei	zero,zero,269
    3834:	00003abc 	xorhi	zero,zero,234
    3838:	00004348 	cmpgei	zero,zero,269
    383c:	00004348 	cmpgei	zero,zero,269
    3840:	00004348 	cmpgei	zero,zero,269
    3844:	00004348 	cmpgei	zero,zero,269
    3848:	00003b60 	cmpeqi	zero,zero,237
    384c:	00004348 	cmpgei	zero,zero,269
    3850:	00004348 	cmpgei	zero,zero,269
    3854:	00003b70 	cmpltui	zero,zero,237
    3858:	00004348 	cmpgei	zero,zero,269
    385c:	00004348 	cmpgei	zero,zero,269
    3860:	00004348 	cmpgei	zero,zero,269
    3864:	00004348 	cmpgei	zero,zero,269
    3868:	00004348 	cmpgei	zero,zero,269
    386c:	00003f6c 	andhi	zero,zero,253
    3870:	00004348 	cmpgei	zero,zero,269
    3874:	00004348 	cmpgei	zero,zero,269
    3878:	0000401c 	xori	zero,zero,256
    387c:	00004348 	cmpgei	zero,zero,269
    3880:	00004348 	cmpgei	zero,zero,269
    3884:	00004348 	cmpgei	zero,zero,269
    3888:	00004348 	cmpgei	zero,zero,269
    388c:	00004348 	cmpgei	zero,zero,269
    3890:	00004348 	cmpgei	zero,zero,269
    3894:	00004348 	cmpgei	zero,zero,269
    3898:	00004348 	cmpgei	zero,zero,269
    389c:	00004348 	cmpgei	zero,zero,269
    38a0:	00004348 	cmpgei	zero,zero,269
    38a4:	00004210 	cmplti	zero,zero,264
    38a8:	000041c0 	call	41c <main+0x1c0>
    38ac:	00003abc 	xorhi	zero,zero,234
    38b0:	00003abc 	xorhi	zero,zero,234
    38b4:	00003abc 	xorhi	zero,zero,234
    38b8:	00004200 	call	420 <main+0x1c4>
    38bc:	000041c0 	call	41c <main+0x1c0>
    38c0:	00004348 	cmpgei	zero,zero,269
    38c4:	00004348 	cmpgei	zero,zero,269
    38c8:	00004108 	cmpgei	zero,zero,260
    38cc:	00004348 	cmpgei	zero,zero,269
    38d0:	0000411c 	xori	zero,zero,260
    38d4:	00004150 	cmplti	zero,zero,261
    38d8:	00004250 	cmplti	zero,zero,265
    38dc:	00004078 	rdprs	zero,zero,257
    38e0:	00004348 	cmpgei	zero,zero,269
    38e4:	00004298 	cmpnei	zero,zero,266
    38e8:	00004348 	cmpgei	zero,zero,269
    38ec:	00004088 	cmpgei	zero,zero,258
    38f0:	00004348 	cmpgei	zero,zero,269
    38f4:	00004348 	cmpgei	zero,zero,269
    38f8:	000040c8 	cmpgei	zero,zero,259
    38fc:	db012a17 	ldw	r12,1192(sp)
    3900:	8323c83a 	sub	r17,r16,r12
    3904:	003f7e06 	br	3700 <__alt_mem_sram+0xf7e03700>
    3908:	b009883a 	mov	r4,r22
    390c:	b80b883a 	mov	r5,r23
    3910:	00055f80 	call	55f8 <__swsetup_r>
    3914:	10002d1e 	bne	r2,zero,39cc <___vfprintf_internal_r+0x3f4>
    3918:	b8c0030b 	ldhu	r3,12(r23)
    391c:	01000284 	movi	r4,10
    3920:	1805883a 	mov	r2,r3
    3924:	1080068c 	andi	r2,r2,26
    3928:	113f551e 	bne	r2,r4,3680 <__alt_mem_sram+0xf7e03680>
    392c:	b880038b 	ldhu	r2,14(r23)
    3930:	113fffcc 	andi	r4,r2,65535
    3934:	2120001c 	xori	r4,r4,32768
    3938:	21200004 	addi	r4,r4,-32768
    393c:	203f5016 	blt	r4,zero,3680 <__alt_mem_sram+0xf7e03680>
    3940:	bac01917 	ldw	r11,100(r23)
    3944:	ba800717 	ldw	r10,28(r23)
    3948:	ba400917 	ldw	r9,36(r23)
    394c:	d9812a17 	ldw	r6,1192(sp)
    3950:	d9c12d17 	ldw	r7,1204(sp)
    3954:	02010004 	movi	r8,1024
    3958:	18ffff4c 	andi	r3,r3,65533
    395c:	d881078d 	sth	r2,1054(sp)
    3960:	b009883a 	mov	r4,r22
    3964:	d8800404 	addi	r2,sp,16
    3968:	d9410404 	addi	r5,sp,1040
    396c:	d8c1070d 	sth	r3,1052(sp)
    3970:	dac11d15 	stw	r11,1140(sp)
    3974:	da810b15 	stw	r10,1068(sp)
    3978:	da410d15 	stw	r9,1076(sp)
    397c:	d8810415 	stw	r2,1040(sp)
    3980:	d8810815 	stw	r2,1056(sp)
    3984:	da010615 	stw	r8,1048(sp)
    3988:	da010915 	stw	r8,1060(sp)
    398c:	d8010a15 	stw	zero,1064(sp)
    3990:	00035d80 	call	35d8 <___vfprintf_internal_r>
    3994:	1021883a 	mov	r16,r2
    3998:	10000416 	blt	r2,zero,39ac <___vfprintf_internal_r+0x3d4>
    399c:	b009883a 	mov	r4,r22
    39a0:	d9410404 	addi	r5,sp,1040
    39a4:	00070500 	call	7050 <_fflush_r>
    39a8:	1006ee1e 	bne	r2,zero,5564 <___vfprintf_internal_r+0x1f8c>
    39ac:	d881070b 	ldhu	r2,1052(sp)
    39b0:	1080100c 	andi	r2,r2,64
    39b4:	10000326 	beq	r2,zero,39c4 <___vfprintf_internal_r+0x3ec>
    39b8:	b880030b 	ldhu	r2,12(r23)
    39bc:	10801014 	ori	r2,r2,64
    39c0:	b880030d 	sth	r2,12(r23)
    39c4:	8005883a 	mov	r2,r16
    39c8:	00000106 	br	39d0 <___vfprintf_internal_r+0x3f8>
    39cc:	00bfffc4 	movi	r2,-1
    39d0:	dfc14917 	ldw	ra,1316(sp)
    39d4:	df014817 	ldw	fp,1312(sp)
    39d8:	ddc14717 	ldw	r23,1308(sp)
    39dc:	dd814617 	ldw	r22,1304(sp)
    39e0:	dd414517 	ldw	r21,1300(sp)
    39e4:	dd014417 	ldw	r20,1296(sp)
    39e8:	dcc14317 	ldw	r19,1292(sp)
    39ec:	dc814217 	ldw	r18,1288(sp)
    39f0:	dc414117 	ldw	r17,1284(sp)
    39f4:	dc014017 	ldw	r16,1280(sp)
    39f8:	dec14a04 	addi	sp,sp,1320
    39fc:	f800283a 	ret
    3a00:	b009883a 	mov	r4,r22
    3a04:	b80b883a 	mov	r5,r23
    3a08:	d9811e04 	addi	r6,sp,1144
    3a0c:	000a8200 	call	a820 <__sprint_r>
    3a10:	1000081e 	bne	r2,zero,3a34 <___vfprintf_internal_r+0x45c>
    3a14:	da000404 	addi	r8,sp,16
    3a18:	003f4606 	br	3734 <__alt_mem_sram+0xf7e03734>
    3a1c:	d8812017 	ldw	r2,1152(sp)
    3a20:	10000426 	beq	r2,zero,3a34 <___vfprintf_internal_r+0x45c>
    3a24:	b009883a 	mov	r4,r22
    3a28:	b80b883a 	mov	r5,r23
    3a2c:	d9811e04 	addi	r6,sp,1144
    3a30:	000a8200 	call	a820 <__sprint_r>
    3a34:	b880030b 	ldhu	r2,12(r23)
    3a38:	1080100c 	andi	r2,r2,64
    3a3c:	103fe31e 	bne	r2,zero,39cc <__alt_mem_sram+0xf7e039cc>
    3a40:	d8812f17 	ldw	r2,1212(sp)
    3a44:	003fe206 	br	39d0 <__alt_mem_sram+0xf7e039d0>
    3a48:	b009883a 	mov	r4,r22
    3a4c:	00075f80 	call	75f8 <__sinit>
    3a50:	003ef906 	br	3638 <__alt_mem_sram+0xf7e03638>
    3a54:	dc012a17 	ldw	r16,1192(sp)
    3a58:	003f3906 	br	3740 <__alt_mem_sram+0xf7e03740>
    3a5c:	1805883a 	mov	r2,r3
    3a60:	8c400114 	ori	r17,r17,4
    3a64:	1c000007 	ldb	r16,0(r3)
    3a68:	003f4206 	br	3774 <__alt_mem_sram+0xf7e03774>
    3a6c:	1c000007 	ldb	r16,0(r3)
    3a70:	18800044 	addi	r2,r3,1
    3a74:	8286b326 	beq	r16,r10,5544 <___vfprintf_internal_r+0x1f6c>
    3a78:	82fff404 	addi	r11,r16,-48
    3a7c:	1007883a 	mov	r3,r2
    3a80:	0013883a 	mov	r9,zero
    3a84:	2aff3c36 	bltu	r5,r11,3778 <__alt_mem_sram+0xf7e03778>
    3a88:	1c000007 	ldb	r16,0(r3)
    3a8c:	4a4002a4 	muli	r9,r9,10
    3a90:	18c00044 	addi	r3,r3,1
    3a94:	5a53883a 	add	r9,r11,r9
    3a98:	82fff404 	addi	r11,r16,-48
    3a9c:	2afffa2e 	bgeu	r5,r11,3a88 <__alt_mem_sram+0xf7e03a88>
    3aa0:	483f350e 	bge	r9,zero,3778 <__alt_mem_sram+0xf7e03778>
    3aa4:	027fffc4 	movi	r9,-1
    3aa8:	003f3306 	br	3778 <__alt_mem_sram+0xf7e03778>
    3aac:	8c402014 	ori	r17,r17,128
    3ab0:	1805883a 	mov	r2,r3
    3ab4:	1c000007 	ldb	r16,0(r3)
    3ab8:	003f2e06 	br	3774 <__alt_mem_sram+0xf7e03774>
    3abc:	db012d17 	ldw	r12,1204(sp)
    3ac0:	dac12d17 	ldw	r11,1204(sp)
    3ac4:	d8c12a15 	stw	r3,1192(sp)
    3ac8:	63000017 	ldw	r12,0(r12)
    3acc:	5ac00117 	ldw	r11,4(r11)
    3ad0:	d9812785 	stb	r6,1182(sp)
    3ad4:	6009883a 	mov	r4,r12
    3ad8:	580b883a 	mov	r5,r11
    3adc:	db013715 	stw	r12,1244(sp)
    3ae0:	da013f15 	stw	r8,1276(sp)
    3ae4:	da413e15 	stw	r9,1272(sp)
    3ae8:	dac13915 	stw	r11,1252(sp)
    3aec:	000a47c0 	call	a47c <__fpclassifyd>
    3af0:	db012d17 	ldw	r12,1204(sp)
    3af4:	04800044 	movi	r18,1
    3af8:	da013f17 	ldw	r8,1276(sp)
    3afc:	64c00204 	addi	r19,r12,8
    3b00:	da413e17 	ldw	r9,1272(sp)
    3b04:	d9013717 	ldw	r4,1244(sp)
    3b08:	d9413917 	ldw	r5,1252(sp)
    3b0c:	1484581e 	bne	r2,r18,4c70 <___vfprintf_internal_r+0x1698>
    3b10:	000d883a 	mov	r6,zero
    3b14:	000f883a 	mov	r7,zero
    3b18:	000e4380 	call	e438 <__ledf2>
    3b1c:	da013f17 	ldw	r8,1276(sp)
    3b20:	1005ef16 	blt	r2,zero,52e0 <___vfprintf_internal_r+0x1d08>
    3b24:	dd412783 	ldbu	r21,1182(sp)
    3b28:	008011c4 	movi	r2,71
    3b2c:	14053b0e 	bge	r2,r16,501c <___vfprintf_internal_r+0x1a44>
    3b30:	00c00074 	movhi	r3,1
    3b34:	18ca1a04 	addi	r3,r3,10344
    3b38:	d8c13115 	stw	r3,1220(sp)
    3b3c:	02c000c4 	movi	r11,3
    3b40:	00bfdfc4 	movi	r2,-129
    3b44:	dac12b15 	stw	r11,1196(sp)
    3b48:	88a2703a 	and	r17,r17,r2
    3b4c:	dcc12d15 	stw	r19,1204(sp)
    3b50:	5825883a 	mov	r18,r11
    3b54:	d8013215 	stw	zero,1224(sp)
    3b58:	d8013415 	stw	zero,1232(sp)
    3b5c:	00003206 	br	3c28 <___vfprintf_internal_r+0x650>
    3b60:	8c400214 	ori	r17,r17,8
    3b64:	1805883a 	mov	r2,r3
    3b68:	1c000007 	ldb	r16,0(r3)
    3b6c:	003f0106 	br	3774 <__alt_mem_sram+0xf7e03774>
    3b70:	8c400414 	ori	r17,r17,16
    3b74:	d8c12a15 	stw	r3,1192(sp)
    3b78:	88c0080c 	andi	r3,r17,32
    3b7c:	d8812d17 	ldw	r2,1204(sp)
    3b80:	18017726 	beq	r3,zero,4160 <___vfprintf_internal_r+0xb88>
    3b84:	db012d17 	ldw	r12,1204(sp)
    3b88:	14c00017 	ldw	r19,0(r2)
    3b8c:	17000117 	ldw	fp,4(r2)
    3b90:	63000204 	addi	r12,r12,8
    3b94:	db012d15 	stw	r12,1204(sp)
    3b98:	0005883a 	mov	r2,zero
    3b9c:	9f06b03a 	or	r3,r19,fp
    3ba0:	d8012785 	stb	zero,1182(sp)
    3ba4:	da413215 	stw	r9,1224(sp)
    3ba8:	002b883a 	mov	r21,zero
    3bac:	48000216 	blt	r9,zero,3bb8 <___vfprintf_internal_r+0x5e0>
    3bb0:	013fdfc4 	movi	r4,-129
    3bb4:	8922703a 	and	r17,r17,r4
    3bb8:	1801ed1e 	bne	r3,zero,4370 <___vfprintf_internal_r+0xd98>
    3bbc:	4802e026 	beq	r9,zero,4740 <___vfprintf_internal_r+0x1168>
    3bc0:	10803fcc 	andi	r2,r2,255
    3bc4:	00c00044 	movi	r3,1
    3bc8:	10c20f26 	beq	r2,r3,4408 <___vfprintf_internal_r+0xe30>
    3bcc:	00c00084 	movi	r3,2
    3bd0:	10c2fd26 	beq	r2,r3,47c8 <___vfprintf_internal_r+0x11f0>
    3bd4:	d8c10e04 	addi	r3,sp,1080
    3bd8:	9808d0fa 	srli	r4,r19,3
    3bdc:	e00a977a 	slli	r5,fp,29
    3be0:	e038d0fa 	srli	fp,fp,3
    3be4:	9cc001cc 	andi	r19,r19,7
    3be8:	98800c04 	addi	r2,r19,48
    3bec:	18ffffc4 	addi	r3,r3,-1
    3bf0:	2926b03a 	or	r19,r5,r4
    3bf4:	18800005 	stb	r2,0(r3)
    3bf8:	9f08b03a 	or	r4,r19,fp
    3bfc:	203ff61e 	bne	r4,zero,3bd8 <__alt_mem_sram+0xf7e03bd8>
    3c00:	8900004c 	andi	r4,r17,1
    3c04:	d8c13115 	stw	r3,1220(sp)
    3c08:	2003791e 	bne	r4,zero,49f0 <___vfprintf_internal_r+0x1418>
    3c0c:	dac12817 	ldw	r11,1184(sp)
    3c10:	58e5c83a 	sub	r18,r11,r3
    3c14:	9005883a 	mov	r2,r18
    3c18:	9240010e 	bge	r18,r9,3c20 <___vfprintf_internal_r+0x648>
    3c1c:	4805883a 	mov	r2,r9
    3c20:	d8812b15 	stw	r2,1196(sp)
    3c24:	d8013415 	stw	zero,1232(sp)
    3c28:	a8803fcc 	andi	r2,r21,255
    3c2c:	1080201c 	xori	r2,r2,128
    3c30:	10bfe004 	addi	r2,r2,-128
    3c34:	10000326 	beq	r2,zero,3c44 <___vfprintf_internal_r+0x66c>
    3c38:	db012b17 	ldw	r12,1196(sp)
    3c3c:	63000044 	addi	r12,r12,1
    3c40:	db012b15 	stw	r12,1196(sp)
    3c44:	88c0008c 	andi	r3,r17,2
    3c48:	d8c12c15 	stw	r3,1200(sp)
    3c4c:	18000326 	beq	r3,zero,3c5c <___vfprintf_internal_r+0x684>
    3c50:	dac12b17 	ldw	r11,1196(sp)
    3c54:	5ac00084 	addi	r11,r11,2
    3c58:	dac12b15 	stw	r11,1196(sp)
    3c5c:	8b00210c 	andi	r12,r17,132
    3c60:	db013015 	stw	r12,1216(sp)
    3c64:	6001c01e 	bne	r12,zero,4368 <___vfprintf_internal_r+0xd90>
    3c68:	dac12e17 	ldw	r11,1208(sp)
    3c6c:	db012b17 	ldw	r12,1196(sp)
    3c70:	5b39c83a 	sub	fp,r11,r12
    3c74:	0701bc0e 	bge	zero,fp,4368 <___vfprintf_internal_r+0xd90>
    3c78:	02400404 	movi	r9,16
    3c7c:	d8c12017 	ldw	r3,1152(sp)
    3c80:	d8811f17 	ldw	r2,1148(sp)
    3c84:	4f05220e 	bge	r9,fp,5110 <___vfprintf_internal_r+0x1b38>
    3c88:	01400074 	movhi	r5,1
    3c8c:	294a2d84 	addi	r5,r5,10422
    3c90:	d9413615 	stw	r5,1240(sp)
    3c94:	482b883a 	mov	r21,r9
    3c98:	04c001c4 	movi	r19,7
    3c9c:	00000306 	br	3cac <___vfprintf_internal_r+0x6d4>
    3ca0:	e73ffc04 	addi	fp,fp,-16
    3ca4:	42000204 	addi	r8,r8,8
    3ca8:	af00130e 	bge	r21,fp,3cf8 <___vfprintf_internal_r+0x720>
    3cac:	02c00074 	movhi	r11,1
    3cb0:	18c00404 	addi	r3,r3,16
    3cb4:	10800044 	addi	r2,r2,1
    3cb8:	5aca2d84 	addi	r11,r11,10422
    3cbc:	42c00015 	stw	r11,0(r8)
    3cc0:	45400115 	stw	r21,4(r8)
    3cc4:	d8c12015 	stw	r3,1152(sp)
    3cc8:	d8811f15 	stw	r2,1148(sp)
    3ccc:	98bff40e 	bge	r19,r2,3ca0 <__alt_mem_sram+0xf7e03ca0>
    3cd0:	b009883a 	mov	r4,r22
    3cd4:	b80b883a 	mov	r5,r23
    3cd8:	d9811e04 	addi	r6,sp,1144
    3cdc:	000a8200 	call	a820 <__sprint_r>
    3ce0:	103f541e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    3ce4:	e73ffc04 	addi	fp,fp,-16
    3ce8:	d8c12017 	ldw	r3,1152(sp)
    3cec:	d8811f17 	ldw	r2,1148(sp)
    3cf0:	da000404 	addi	r8,sp,16
    3cf4:	af3fed16 	blt	r21,fp,3cac <__alt_mem_sram+0xf7e03cac>
    3cf8:	db013617 	ldw	r12,1240(sp)
    3cfc:	e0c7883a 	add	r3,fp,r3
    3d00:	10800044 	addi	r2,r2,1
    3d04:	43000015 	stw	r12,0(r8)
    3d08:	47000115 	stw	fp,4(r8)
    3d0c:	d8c12015 	stw	r3,1152(sp)
    3d10:	d8811f15 	stw	r2,1148(sp)
    3d14:	010001c4 	movi	r4,7
    3d18:	2082f416 	blt	r4,r2,48ec <___vfprintf_internal_r+0x1314>
    3d1c:	d8812787 	ldb	r2,1182(sp)
    3d20:	42000204 	addi	r8,r8,8
    3d24:	10000c26 	beq	r2,zero,3d58 <___vfprintf_internal_r+0x780>
    3d28:	d8811f17 	ldw	r2,1148(sp)
    3d2c:	d9012784 	addi	r4,sp,1182
    3d30:	18c00044 	addi	r3,r3,1
    3d34:	10800044 	addi	r2,r2,1
    3d38:	41000015 	stw	r4,0(r8)
    3d3c:	01000044 	movi	r4,1
    3d40:	41000115 	stw	r4,4(r8)
    3d44:	d8c12015 	stw	r3,1152(sp)
    3d48:	d8811f15 	stw	r2,1148(sp)
    3d4c:	010001c4 	movi	r4,7
    3d50:	20828d16 	blt	r4,r2,4788 <___vfprintf_internal_r+0x11b0>
    3d54:	42000204 	addi	r8,r8,8
    3d58:	dac12c17 	ldw	r11,1200(sp)
    3d5c:	58000c26 	beq	r11,zero,3d90 <___vfprintf_internal_r+0x7b8>
    3d60:	d8811f17 	ldw	r2,1148(sp)
    3d64:	d9012704 	addi	r4,sp,1180
    3d68:	18c00084 	addi	r3,r3,2
    3d6c:	10800044 	addi	r2,r2,1
    3d70:	41000015 	stw	r4,0(r8)
    3d74:	01000084 	movi	r4,2
    3d78:	41000115 	stw	r4,4(r8)
    3d7c:	d8c12015 	stw	r3,1152(sp)
    3d80:	d8811f15 	stw	r2,1148(sp)
    3d84:	010001c4 	movi	r4,7
    3d88:	20828716 	blt	r4,r2,47a8 <___vfprintf_internal_r+0x11d0>
    3d8c:	42000204 	addi	r8,r8,8
    3d90:	db013017 	ldw	r12,1216(sp)
    3d94:	00802004 	movi	r2,128
    3d98:	6081e926 	beq	r12,r2,4540 <___vfprintf_internal_r+0xf68>
    3d9c:	db013217 	ldw	r12,1224(sp)
    3da0:	64abc83a 	sub	r21,r12,r18
    3da4:	0540260e 	bge	zero,r21,3e40 <___vfprintf_internal_r+0x868>
    3da8:	07000404 	movi	fp,16
    3dac:	d8811f17 	ldw	r2,1148(sp)
    3db0:	e5443d0e 	bge	fp,r21,4ea8 <___vfprintf_internal_r+0x18d0>
    3db4:	01400074 	movhi	r5,1
    3db8:	294a2984 	addi	r5,r5,10406
    3dbc:	d9412c15 	stw	r5,1200(sp)
    3dc0:	04c001c4 	movi	r19,7
    3dc4:	00000306 	br	3dd4 <___vfprintf_internal_r+0x7fc>
    3dc8:	ad7ffc04 	addi	r21,r21,-16
    3dcc:	42000204 	addi	r8,r8,8
    3dd0:	e540110e 	bge	fp,r21,3e18 <___vfprintf_internal_r+0x840>
    3dd4:	18c00404 	addi	r3,r3,16
    3dd8:	10800044 	addi	r2,r2,1
    3ddc:	45000015 	stw	r20,0(r8)
    3de0:	47000115 	stw	fp,4(r8)
    3de4:	d8c12015 	stw	r3,1152(sp)
    3de8:	d8811f15 	stw	r2,1148(sp)
    3dec:	98bff60e 	bge	r19,r2,3dc8 <__alt_mem_sram+0xf7e03dc8>
    3df0:	b009883a 	mov	r4,r22
    3df4:	b80b883a 	mov	r5,r23
    3df8:	d9811e04 	addi	r6,sp,1144
    3dfc:	000a8200 	call	a820 <__sprint_r>
    3e00:	103f0c1e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    3e04:	ad7ffc04 	addi	r21,r21,-16
    3e08:	d8c12017 	ldw	r3,1152(sp)
    3e0c:	d8811f17 	ldw	r2,1148(sp)
    3e10:	da000404 	addi	r8,sp,16
    3e14:	e57fef16 	blt	fp,r21,3dd4 <__alt_mem_sram+0xf7e03dd4>
    3e18:	dac12c17 	ldw	r11,1200(sp)
    3e1c:	1d47883a 	add	r3,r3,r21
    3e20:	10800044 	addi	r2,r2,1
    3e24:	42c00015 	stw	r11,0(r8)
    3e28:	45400115 	stw	r21,4(r8)
    3e2c:	d8c12015 	stw	r3,1152(sp)
    3e30:	d8811f15 	stw	r2,1148(sp)
    3e34:	010001c4 	movi	r4,7
    3e38:	20824b16 	blt	r4,r2,4768 <___vfprintf_internal_r+0x1190>
    3e3c:	42000204 	addi	r8,r8,8
    3e40:	8880400c 	andi	r2,r17,256
    3e44:	1001761e 	bne	r2,zero,4420 <___vfprintf_internal_r+0xe48>
    3e48:	d8811f17 	ldw	r2,1148(sp)
    3e4c:	db013117 	ldw	r12,1220(sp)
    3e50:	1c87883a 	add	r3,r3,r18
    3e54:	10800044 	addi	r2,r2,1
    3e58:	43000015 	stw	r12,0(r8)
    3e5c:	44800115 	stw	r18,4(r8)
    3e60:	d8c12015 	stw	r3,1152(sp)
    3e64:	d8811f15 	stw	r2,1148(sp)
    3e68:	010001c4 	movi	r4,7
    3e6c:	20822616 	blt	r4,r2,4708 <___vfprintf_internal_r+0x1130>
    3e70:	42000204 	addi	r8,r8,8
    3e74:	8c40010c 	andi	r17,r17,4
    3e78:	88003126 	beq	r17,zero,3f40 <___vfprintf_internal_r+0x968>
    3e7c:	db012e17 	ldw	r12,1208(sp)
    3e80:	dac12b17 	ldw	r11,1196(sp)
    3e84:	62e1c83a 	sub	r16,r12,r11
    3e88:	04002d0e 	bge	zero,r16,3f40 <___vfprintf_internal_r+0x968>
    3e8c:	04400404 	movi	r17,16
    3e90:	d8811f17 	ldw	r2,1148(sp)
    3e94:	8c04df0e 	bge	r17,r16,5214 <___vfprintf_internal_r+0x1c3c>
    3e98:	01000074 	movhi	r4,1
    3e9c:	210a2d84 	addi	r4,r4,10422
    3ea0:	d9013615 	stw	r4,1240(sp)
    3ea4:	048001c4 	movi	r18,7
    3ea8:	00000306 	br	3eb8 <___vfprintf_internal_r+0x8e0>
    3eac:	843ffc04 	addi	r16,r16,-16
    3eb0:	42000204 	addi	r8,r8,8
    3eb4:	8c00130e 	bge	r17,r16,3f04 <___vfprintf_internal_r+0x92c>
    3eb8:	01400074 	movhi	r5,1
    3ebc:	18c00404 	addi	r3,r3,16
    3ec0:	10800044 	addi	r2,r2,1
    3ec4:	294a2d84 	addi	r5,r5,10422
    3ec8:	41400015 	stw	r5,0(r8)
    3ecc:	44400115 	stw	r17,4(r8)
    3ed0:	d8c12015 	stw	r3,1152(sp)
    3ed4:	d8811f15 	stw	r2,1148(sp)
    3ed8:	90bff40e 	bge	r18,r2,3eac <__alt_mem_sram+0xf7e03eac>
    3edc:	b009883a 	mov	r4,r22
    3ee0:	b80b883a 	mov	r5,r23
    3ee4:	d9811e04 	addi	r6,sp,1144
    3ee8:	000a8200 	call	a820 <__sprint_r>
    3eec:	103ed11e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    3ef0:	843ffc04 	addi	r16,r16,-16
    3ef4:	d8c12017 	ldw	r3,1152(sp)
    3ef8:	d8811f17 	ldw	r2,1148(sp)
    3efc:	da000404 	addi	r8,sp,16
    3f00:	8c3fed16 	blt	r17,r16,3eb8 <__alt_mem_sram+0xf7e03eb8>
    3f04:	dac13617 	ldw	r11,1240(sp)
    3f08:	1c07883a 	add	r3,r3,r16
    3f0c:	10800044 	addi	r2,r2,1
    3f10:	42c00015 	stw	r11,0(r8)
    3f14:	44000115 	stw	r16,4(r8)
    3f18:	d8c12015 	stw	r3,1152(sp)
    3f1c:	d8811f15 	stw	r2,1148(sp)
    3f20:	010001c4 	movi	r4,7
    3f24:	2080060e 	bge	r4,r2,3f40 <___vfprintf_internal_r+0x968>
    3f28:	b009883a 	mov	r4,r22
    3f2c:	b80b883a 	mov	r5,r23
    3f30:	d9811e04 	addi	r6,sp,1144
    3f34:	000a8200 	call	a820 <__sprint_r>
    3f38:	103ebe1e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    3f3c:	d8c12017 	ldw	r3,1152(sp)
    3f40:	d8812b17 	ldw	r2,1196(sp)
    3f44:	db012e17 	ldw	r12,1208(sp)
    3f48:	1300010e 	bge	r2,r12,3f50 <___vfprintf_internal_r+0x978>
    3f4c:	6005883a 	mov	r2,r12
    3f50:	dac12f17 	ldw	r11,1212(sp)
    3f54:	5897883a 	add	r11,r11,r2
    3f58:	dac12f15 	stw	r11,1212(sp)
    3f5c:	1801f21e 	bne	r3,zero,4728 <___vfprintf_internal_r+0x1150>
    3f60:	d8011f15 	stw	zero,1148(sp)
    3f64:	da000404 	addi	r8,sp,16
    3f68:	003dd806 	br	36cc <__alt_mem_sram+0xf7e036cc>
    3f6c:	8c400414 	ori	r17,r17,16
    3f70:	d8c12a15 	stw	r3,1192(sp)
    3f74:	88c0080c 	andi	r3,r17,32
    3f78:	d8812d17 	ldw	r2,1204(sp)
    3f7c:	18004626 	beq	r3,zero,4098 <___vfprintf_internal_r+0xac0>
    3f80:	dac12d17 	ldw	r11,1204(sp)
    3f84:	14c00017 	ldw	r19,0(r2)
    3f88:	17000117 	ldw	fp,4(r2)
    3f8c:	5ac00204 	addi	r11,r11,8
    3f90:	dac12d15 	stw	r11,1204(sp)
    3f94:	00800044 	movi	r2,1
    3f98:	9f06b03a 	or	r3,r19,fp
    3f9c:	003f0006 	br	3ba0 <__alt_mem_sram+0xf7e03ba0>
    3fa0:	1805883a 	mov	r2,r3
    3fa4:	d8012e15 	stw	zero,1208(sp)
    3fa8:	82fff404 	addi	r11,r16,-48
    3fac:	0019883a 	mov	r12,zero
    3fb0:	14000007 	ldb	r16,0(r2)
    3fb4:	630002a4 	muli	r12,r12,10
    3fb8:	18c00044 	addi	r3,r3,1
    3fbc:	1805883a 	mov	r2,r3
    3fc0:	62d9883a 	add	r12,r12,r11
    3fc4:	82fff404 	addi	r11,r16,-48
    3fc8:	2afff92e 	bgeu	r5,r11,3fb0 <__alt_mem_sram+0xf7e03fb0>
    3fcc:	db012e15 	stw	r12,1208(sp)
    3fd0:	003de906 	br	3778 <__alt_mem_sram+0xf7e03778>
    3fd4:	8c400414 	ori	r17,r17,16
    3fd8:	d8c12a15 	stw	r3,1192(sp)
    3fdc:	d9812785 	stb	r6,1182(sp)
    3fe0:	8880080c 	andi	r2,r17,32
    3fe4:	d8c12d17 	ldw	r3,1204(sp)
    3fe8:	10007a26 	beq	r2,zero,41d4 <___vfprintf_internal_r+0xbfc>
    3fec:	db012d17 	ldw	r12,1204(sp)
    3ff0:	18800117 	ldw	r2,4(r3)
    3ff4:	1cc00017 	ldw	r19,0(r3)
    3ff8:	63000204 	addi	r12,r12,8
    3ffc:	db012d15 	stw	r12,1204(sp)
    4000:	1039883a 	mov	fp,r2
    4004:	10031016 	blt	r2,zero,4c48 <___vfprintf_internal_r+0x1670>
    4008:	dd412783 	ldbu	r21,1182(sp)
    400c:	da413215 	stw	r9,1224(sp)
    4010:	00800044 	movi	r2,1
    4014:	9f06b03a 	or	r3,r19,fp
    4018:	003ee406 	br	3bac <__alt_mem_sram+0xf7e03bac>
    401c:	03000074 	movhi	r12,1
    4020:	630a1d04 	addi	r12,r12,10356
    4024:	d8c12a15 	stw	r3,1192(sp)
    4028:	d9812785 	stb	r6,1182(sp)
    402c:	db013b15 	stw	r12,1260(sp)
    4030:	88c0080c 	andi	r3,r17,32
    4034:	d8812d17 	ldw	r2,1204(sp)
    4038:	18002b26 	beq	r3,zero,40e8 <___vfprintf_internal_r+0xb10>
    403c:	dac12d17 	ldw	r11,1204(sp)
    4040:	14c00017 	ldw	r19,0(r2)
    4044:	17000117 	ldw	fp,4(r2)
    4048:	5ac00204 	addi	r11,r11,8
    404c:	dac12d15 	stw	r11,1204(sp)
    4050:	8880004c 	andi	r2,r17,1
    4054:	10025b26 	beq	r2,zero,49c4 <___vfprintf_internal_r+0x13ec>
    4058:	9f06b03a 	or	r3,r19,fp
    405c:	18037026 	beq	r3,zero,4e20 <___vfprintf_internal_r+0x1848>
    4060:	00800c04 	movi	r2,48
    4064:	d8812705 	stb	r2,1180(sp)
    4068:	dc012745 	stb	r16,1181(sp)
    406c:	8c400094 	ori	r17,r17,2
    4070:	00800084 	movi	r2,2
    4074:	003eca06 	br	3ba0 <__alt_mem_sram+0xf7e03ba0>
    4078:	8c400814 	ori	r17,r17,32
    407c:	1805883a 	mov	r2,r3
    4080:	1c000007 	ldb	r16,0(r3)
    4084:	003dbb06 	br	3774 <__alt_mem_sram+0xf7e03774>
    4088:	d8c12a15 	stw	r3,1192(sp)
    408c:	88c0080c 	andi	r3,r17,32
    4090:	d8812d17 	ldw	r2,1204(sp)
    4094:	183fba1e 	bne	r3,zero,3f80 <__alt_mem_sram+0xf7e03f80>
    4098:	88c0040c 	andi	r3,r17,16
    409c:	18024c1e 	bne	r3,zero,49d0 <___vfprintf_internal_r+0x13f8>
    40a0:	88c0100c 	andi	r3,r17,64
    40a4:	18024a26 	beq	r3,zero,49d0 <___vfprintf_internal_r+0x13f8>
    40a8:	dac12d17 	ldw	r11,1204(sp)
    40ac:	14c0000b 	ldhu	r19,0(r2)
    40b0:	0039883a 	mov	fp,zero
    40b4:	5ac00104 	addi	r11,r11,4
    40b8:	dac12d15 	stw	r11,1204(sp)
    40bc:	00800044 	movi	r2,1
    40c0:	9807883a 	mov	r3,r19
    40c4:	003eb606 	br	3ba0 <__alt_mem_sram+0xf7e03ba0>
    40c8:	00800074 	movhi	r2,1
    40cc:	108a2204 	addi	r2,r2,10376
    40d0:	d8c12a15 	stw	r3,1192(sp)
    40d4:	d8813b15 	stw	r2,1260(sp)
    40d8:	d9812785 	stb	r6,1182(sp)
    40dc:	88c0080c 	andi	r3,r17,32
    40e0:	d8812d17 	ldw	r2,1204(sp)
    40e4:	183fd51e 	bne	r3,zero,403c <__alt_mem_sram+0xf7e0403c>
    40e8:	88c0040c 	andi	r3,r17,16
    40ec:	18034126 	beq	r3,zero,4df4 <___vfprintf_internal_r+0x181c>
    40f0:	db012d17 	ldw	r12,1204(sp)
    40f4:	14c00017 	ldw	r19,0(r2)
    40f8:	0039883a 	mov	fp,zero
    40fc:	63000104 	addi	r12,r12,4
    4100:	db012d15 	stw	r12,1204(sp)
    4104:	003fd206 	br	4050 <__alt_mem_sram+0xf7e04050>
    4108:	1c000007 	ldb	r16,0(r3)
    410c:	81c3d626 	beq	r16,r7,5068 <___vfprintf_internal_r+0x1a90>
    4110:	8c400414 	ori	r17,r17,16
    4114:	1805883a 	mov	r2,r3
    4118:	003d9606 	br	3774 <__alt_mem_sram+0xf7e03774>
    411c:	d8c12a15 	stw	r3,1192(sp)
    4120:	d9812785 	stb	r6,1182(sp)
    4124:	8880080c 	andi	r2,r17,32
    4128:	10033f26 	beq	r2,zero,4e28 <___vfprintf_internal_r+0x1850>
    412c:	db012d17 	ldw	r12,1204(sp)
    4130:	dac12f17 	ldw	r11,1212(sp)
    4134:	60800017 	ldw	r2,0(r12)
    4138:	5807d7fa 	srai	r3,r11,31
    413c:	63000104 	addi	r12,r12,4
    4140:	db012d15 	stw	r12,1204(sp)
    4144:	12c00015 	stw	r11,0(r2)
    4148:	10c00115 	stw	r3,4(r2)
    414c:	003d5f06 	br	36cc <__alt_mem_sram+0xf7e036cc>
    4150:	d8c12a15 	stw	r3,1192(sp)
    4154:	88c0080c 	andi	r3,r17,32
    4158:	d8812d17 	ldw	r2,1204(sp)
    415c:	183e891e 	bne	r3,zero,3b84 <__alt_mem_sram+0xf7e03b84>
    4160:	88c0040c 	andi	r3,r17,16
    4164:	1801ea1e 	bne	r3,zero,4910 <___vfprintf_internal_r+0x1338>
    4168:	88c0100c 	andi	r3,r17,64
    416c:	1801e826 	beq	r3,zero,4910 <___vfprintf_internal_r+0x1338>
    4170:	db012d17 	ldw	r12,1204(sp)
    4174:	14c0000b 	ldhu	r19,0(r2)
    4178:	0039883a 	mov	fp,zero
    417c:	63000104 	addi	r12,r12,4
    4180:	db012d15 	stw	r12,1204(sp)
    4184:	0005883a 	mov	r2,zero
    4188:	9807883a 	mov	r3,r19
    418c:	003e8406 	br	3ba0 <__alt_mem_sram+0xf7e03ba0>
    4190:	30803fcc 	andi	r2,r6,255
    4194:	1080201c 	xori	r2,r2,128
    4198:	10bfe004 	addi	r2,r2,-128
    419c:	10031d1e 	bne	r2,zero,4e14 <___vfprintf_internal_r+0x183c>
    41a0:	1805883a 	mov	r2,r3
    41a4:	01800804 	movi	r6,32
    41a8:	1c000007 	ldb	r16,0(r3)
    41ac:	003d7106 	br	3774 <__alt_mem_sram+0xf7e03774>
    41b0:	8c400054 	ori	r17,r17,1
    41b4:	1805883a 	mov	r2,r3
    41b8:	1c000007 	ldb	r16,0(r3)
    41bc:	003d6d06 	br	3774 <__alt_mem_sram+0xf7e03774>
    41c0:	d8c12a15 	stw	r3,1192(sp)
    41c4:	d9812785 	stb	r6,1182(sp)
    41c8:	8880080c 	andi	r2,r17,32
    41cc:	d8c12d17 	ldw	r3,1204(sp)
    41d0:	103f861e 	bne	r2,zero,3fec <__alt_mem_sram+0xf7e03fec>
    41d4:	8880040c 	andi	r2,r17,16
    41d8:	1001f31e 	bne	r2,zero,49a8 <___vfprintf_internal_r+0x13d0>
    41dc:	8880100c 	andi	r2,r17,64
    41e0:	1001f126 	beq	r2,zero,49a8 <___vfprintf_internal_r+0x13d0>
    41e4:	1cc0000f 	ldh	r19,0(r3)
    41e8:	db012d17 	ldw	r12,1204(sp)
    41ec:	9839d7fa 	srai	fp,r19,31
    41f0:	63000104 	addi	r12,r12,4
    41f4:	db012d15 	stw	r12,1204(sp)
    41f8:	e005883a 	mov	r2,fp
    41fc:	003f8106 	br	4004 <__alt_mem_sram+0xf7e04004>
    4200:	8c401014 	ori	r17,r17,64
    4204:	1805883a 	mov	r2,r3
    4208:	1c000007 	ldb	r16,0(r3)
    420c:	003d5906 	br	3774 <__alt_mem_sram+0xf7e03774>
    4210:	db012d17 	ldw	r12,1204(sp)
    4214:	d8c12a15 	stw	r3,1192(sp)
    4218:	00c00044 	movi	r3,1
    421c:	60800017 	ldw	r2,0(r12)
    4220:	63000104 	addi	r12,r12,4
    4224:	d8c12b15 	stw	r3,1196(sp)
    4228:	d8012785 	stb	zero,1182(sp)
    422c:	d8810405 	stb	r2,1040(sp)
    4230:	db012d15 	stw	r12,1204(sp)
    4234:	dac10404 	addi	r11,sp,1040
    4238:	1825883a 	mov	r18,r3
    423c:	d8013215 	stw	zero,1224(sp)
    4240:	d8013415 	stw	zero,1232(sp)
    4244:	dac13115 	stw	r11,1220(sp)
    4248:	0005883a 	mov	r2,zero
    424c:	003e7d06 	br	3c44 <__alt_mem_sram+0xf7e03c44>
    4250:	db012d17 	ldw	r12,1204(sp)
    4254:	00800c04 	movi	r2,48
    4258:	d8812705 	stb	r2,1180(sp)
    425c:	64c00017 	ldw	r19,0(r12)
    4260:	00801e04 	movi	r2,120
    4264:	d8812745 	stb	r2,1181(sp)
    4268:	00800074 	movhi	r2,1
    426c:	108a2204 	addi	r2,r2,10376
    4270:	63000104 	addi	r12,r12,4
    4274:	d8c12a15 	stw	r3,1192(sp)
    4278:	d8813b15 	stw	r2,1260(sp)
    427c:	0039883a 	mov	fp,zero
    4280:	8c400094 	ori	r17,r17,2
    4284:	db012d15 	stw	r12,1204(sp)
    4288:	00800084 	movi	r2,2
    428c:	04001e04 	movi	r16,120
    4290:	9807883a 	mov	r3,r19
    4294:	003e4206 	br	3ba0 <__alt_mem_sram+0xf7e03ba0>
    4298:	dac12d17 	ldw	r11,1204(sp)
    429c:	db012d17 	ldw	r12,1204(sp)
    42a0:	d8c12a15 	stw	r3,1192(sp)
    42a4:	5ac00017 	ldw	r11,0(r11)
    42a8:	d8012785 	stb	zero,1182(sp)
    42ac:	64c00104 	addi	r19,r12,4
    42b0:	dac13115 	stw	r11,1220(sp)
    42b4:	5803e826 	beq	r11,zero,5258 <___vfprintf_internal_r+0x1c80>
    42b8:	d9013117 	ldw	r4,1220(sp)
    42bc:	48037a16 	blt	r9,zero,50a8 <___vfprintf_internal_r+0x1ad0>
    42c0:	480d883a 	mov	r6,r9
    42c4:	000b883a 	mov	r5,zero
    42c8:	da013f15 	stw	r8,1276(sp)
    42cc:	da413e15 	stw	r9,1272(sp)
    42d0:	0008ab00 	call	8ab0 <memchr>
    42d4:	da013f17 	ldw	r8,1276(sp)
    42d8:	da413e17 	ldw	r9,1272(sp)
    42dc:	10044426 	beq	r2,zero,53f0 <___vfprintf_internal_r+0x1e18>
    42e0:	d8c13117 	ldw	r3,1220(sp)
    42e4:	10e5c83a 	sub	r18,r2,r3
    42e8:	4c834416 	blt	r9,r18,4ffc <___vfprintf_internal_r+0x1a24>
    42ec:	9005883a 	mov	r2,r18
    42f0:	90037216 	blt	r18,zero,50bc <___vfprintf_internal_r+0x1ae4>
    42f4:	dd412783 	ldbu	r21,1182(sp)
    42f8:	d8812b15 	stw	r2,1196(sp)
    42fc:	dcc12d15 	stw	r19,1204(sp)
    4300:	d8013215 	stw	zero,1224(sp)
    4304:	d8013415 	stw	zero,1232(sp)
    4308:	003e4706 	br	3c28 <__alt_mem_sram+0xf7e03c28>
    430c:	dac12d17 	ldw	r11,1204(sp)
    4310:	db012d17 	ldw	r12,1204(sp)
    4314:	5ac00017 	ldw	r11,0(r11)
    4318:	dac12e15 	stw	r11,1208(sp)
    431c:	62c00104 	addi	r11,r12,4
    4320:	db012e17 	ldw	r12,1208(sp)
    4324:	60034a16 	blt	r12,zero,5050 <___vfprintf_internal_r+0x1a78>
    4328:	dac12d15 	stw	r11,1204(sp)
    432c:	1805883a 	mov	r2,r3
    4330:	1c000007 	ldb	r16,0(r3)
    4334:	003d0f06 	br	3774 <__alt_mem_sram+0xf7e03774>
    4338:	1805883a 	mov	r2,r3
    433c:	01800ac4 	movi	r6,43
    4340:	1c000007 	ldb	r16,0(r3)
    4344:	003d0b06 	br	3774 <__alt_mem_sram+0xf7e03774>
    4348:	d8c12a15 	stw	r3,1192(sp)
    434c:	d9812785 	stb	r6,1182(sp)
    4350:	803db226 	beq	r16,zero,3a1c <__alt_mem_sram+0xf7e03a1c>
    4354:	00c00044 	movi	r3,1
    4358:	d8c12b15 	stw	r3,1196(sp)
    435c:	dc010405 	stb	r16,1040(sp)
    4360:	d8012785 	stb	zero,1182(sp)
    4364:	003fb306 	br	4234 <__alt_mem_sram+0xf7e04234>
    4368:	d8c12017 	ldw	r3,1152(sp)
    436c:	003e6d06 	br	3d24 <__alt_mem_sram+0xf7e03d24>
    4370:	10803fcc 	andi	r2,r2,255
    4374:	00c00044 	movi	r3,1
    4378:	10fe141e 	bne	r2,r3,3bcc <__alt_mem_sram+0xf7e03bcc>
    437c:	e000021e 	bne	fp,zero,4388 <___vfprintf_internal_r+0xdb0>
    4380:	00800244 	movi	r2,9
    4384:	14c0202e 	bgeu	r2,r19,4408 <___vfprintf_internal_r+0xe30>
    4388:	dc012b15 	stw	r16,1196(sp)
    438c:	dc412c15 	stw	r17,1200(sp)
    4390:	9821883a 	mov	r16,r19
    4394:	e023883a 	mov	r17,fp
    4398:	dc810e04 	addi	r18,sp,1080
    439c:	4027883a 	mov	r19,r8
    43a0:	4839883a 	mov	fp,r9
    43a4:	8009883a 	mov	r4,r16
    43a8:	880b883a 	mov	r5,r17
    43ac:	01800284 	movi	r6,10
    43b0:	000f883a 	mov	r7,zero
    43b4:	000cab00 	call	cab0 <__umoddi3>
    43b8:	10800c04 	addi	r2,r2,48
    43bc:	94bfffc4 	addi	r18,r18,-1
    43c0:	8009883a 	mov	r4,r16
    43c4:	880b883a 	mov	r5,r17
    43c8:	01800284 	movi	r6,10
    43cc:	000f883a 	mov	r7,zero
    43d0:	90800005 	stb	r2,0(r18)
    43d4:	000c4f00 	call	c4f0 <__udivdi3>
    43d8:	1021883a 	mov	r16,r2
    43dc:	10c4b03a 	or	r2,r2,r3
    43e0:	1823883a 	mov	r17,r3
    43e4:	103fef1e 	bne	r2,zero,43a4 <__alt_mem_sram+0xf7e043a4>
    43e8:	dac12817 	ldw	r11,1184(sp)
    43ec:	dc813115 	stw	r18,1220(sp)
    43f0:	dc012b17 	ldw	r16,1196(sp)
    43f4:	9811883a 	mov	r8,r19
    43f8:	dc412c17 	ldw	r17,1200(sp)
    43fc:	e013883a 	mov	r9,fp
    4400:	5ca5c83a 	sub	r18,r11,r18
    4404:	003e0306 	br	3c14 <__alt_mem_sram+0xf7e03c14>
    4408:	9cc00c04 	addi	r19,r19,48
    440c:	d8c10dc4 	addi	r3,sp,1079
    4410:	dcc10dc5 	stb	r19,1079(sp)
    4414:	dc813c17 	ldw	r18,1264(sp)
    4418:	d8c13115 	stw	r3,1220(sp)
    441c:	003dfd06 	br	3c14 <__alt_mem_sram+0xf7e03c14>
    4420:	00801944 	movi	r2,101
    4424:	1400710e 	bge	r2,r16,45ec <___vfprintf_internal_r+0x1014>
    4428:	d9013717 	ldw	r4,1244(sp)
    442c:	d9413917 	ldw	r5,1252(sp)
    4430:	000d883a 	mov	r6,zero
    4434:	000f883a 	mov	r7,zero
    4438:	d8c13d15 	stw	r3,1268(sp)
    443c:	da013f15 	stw	r8,1276(sp)
    4440:	000e2d40 	call	e2d4 <__eqdf2>
    4444:	d8c13d17 	ldw	r3,1268(sp)
    4448:	da013f17 	ldw	r8,1276(sp)
    444c:	1000ef1e 	bne	r2,zero,480c <___vfprintf_internal_r+0x1234>
    4450:	d8811f17 	ldw	r2,1148(sp)
    4454:	01000074 	movhi	r4,1
    4458:	210a2904 	addi	r4,r4,10404
    445c:	18c00044 	addi	r3,r3,1
    4460:	10800044 	addi	r2,r2,1
    4464:	41000015 	stw	r4,0(r8)
    4468:	01000044 	movi	r4,1
    446c:	41000115 	stw	r4,4(r8)
    4470:	d8c12015 	stw	r3,1152(sp)
    4474:	d8811f15 	stw	r2,1148(sp)
    4478:	010001c4 	movi	r4,7
    447c:	20828e16 	blt	r4,r2,4eb8 <___vfprintf_internal_r+0x18e0>
    4480:	42000204 	addi	r8,r8,8
    4484:	d8812617 	ldw	r2,1176(sp)
    4488:	dac13317 	ldw	r11,1228(sp)
    448c:	12c00216 	blt	r2,r11,4498 <___vfprintf_internal_r+0xec0>
    4490:	8880004c 	andi	r2,r17,1
    4494:	103e7726 	beq	r2,zero,3e74 <__alt_mem_sram+0xf7e03e74>
    4498:	db013817 	ldw	r12,1248(sp)
    449c:	d8811f17 	ldw	r2,1148(sp)
    44a0:	dac13517 	ldw	r11,1236(sp)
    44a4:	1b07883a 	add	r3,r3,r12
    44a8:	10800044 	addi	r2,r2,1
    44ac:	42c00015 	stw	r11,0(r8)
    44b0:	43000115 	stw	r12,4(r8)
    44b4:	d8c12015 	stw	r3,1152(sp)
    44b8:	d8811f15 	stw	r2,1148(sp)
    44bc:	010001c4 	movi	r4,7
    44c0:	2082ed16 	blt	r4,r2,5078 <___vfprintf_internal_r+0x1aa0>
    44c4:	42000204 	addi	r8,r8,8
    44c8:	db013317 	ldw	r12,1228(sp)
    44cc:	643fffc4 	addi	r16,r12,-1
    44d0:	043e680e 	bge	zero,r16,3e74 <__alt_mem_sram+0xf7e03e74>
    44d4:	04800404 	movi	r18,16
    44d8:	d8811f17 	ldw	r2,1148(sp)
    44dc:	94007e0e 	bge	r18,r16,46d8 <___vfprintf_internal_r+0x1100>
    44e0:	01400074 	movhi	r5,1
    44e4:	294a2984 	addi	r5,r5,10406
    44e8:	d9412c15 	stw	r5,1200(sp)
    44ec:	054001c4 	movi	r21,7
    44f0:	00000306 	br	4500 <___vfprintf_internal_r+0xf28>
    44f4:	42000204 	addi	r8,r8,8
    44f8:	843ffc04 	addi	r16,r16,-16
    44fc:	9400790e 	bge	r18,r16,46e4 <___vfprintf_internal_r+0x110c>
    4500:	18c00404 	addi	r3,r3,16
    4504:	10800044 	addi	r2,r2,1
    4508:	45000015 	stw	r20,0(r8)
    450c:	44800115 	stw	r18,4(r8)
    4510:	d8c12015 	stw	r3,1152(sp)
    4514:	d8811f15 	stw	r2,1148(sp)
    4518:	a8bff60e 	bge	r21,r2,44f4 <__alt_mem_sram+0xf7e044f4>
    451c:	b009883a 	mov	r4,r22
    4520:	b80b883a 	mov	r5,r23
    4524:	d9811e04 	addi	r6,sp,1144
    4528:	000a8200 	call	a820 <__sprint_r>
    452c:	103d411e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    4530:	d8c12017 	ldw	r3,1152(sp)
    4534:	d8811f17 	ldw	r2,1148(sp)
    4538:	da000404 	addi	r8,sp,16
    453c:	003fee06 	br	44f8 <__alt_mem_sram+0xf7e044f8>
    4540:	dac12e17 	ldw	r11,1208(sp)
    4544:	db012b17 	ldw	r12,1196(sp)
    4548:	5b2bc83a 	sub	r21,r11,r12
    454c:	057e130e 	bge	zero,r21,3d9c <__alt_mem_sram+0xf7e03d9c>
    4550:	07000404 	movi	fp,16
    4554:	d8811f17 	ldw	r2,1148(sp)
    4558:	e543640e 	bge	fp,r21,52ec <___vfprintf_internal_r+0x1d14>
    455c:	01400074 	movhi	r5,1
    4560:	294a2984 	addi	r5,r5,10406
    4564:	d9412c15 	stw	r5,1200(sp)
    4568:	04c001c4 	movi	r19,7
    456c:	00000306 	br	457c <___vfprintf_internal_r+0xfa4>
    4570:	ad7ffc04 	addi	r21,r21,-16
    4574:	42000204 	addi	r8,r8,8
    4578:	e540110e 	bge	fp,r21,45c0 <___vfprintf_internal_r+0xfe8>
    457c:	18c00404 	addi	r3,r3,16
    4580:	10800044 	addi	r2,r2,1
    4584:	45000015 	stw	r20,0(r8)
    4588:	47000115 	stw	fp,4(r8)
    458c:	d8c12015 	stw	r3,1152(sp)
    4590:	d8811f15 	stw	r2,1148(sp)
    4594:	98bff60e 	bge	r19,r2,4570 <__alt_mem_sram+0xf7e04570>
    4598:	b009883a 	mov	r4,r22
    459c:	b80b883a 	mov	r5,r23
    45a0:	d9811e04 	addi	r6,sp,1144
    45a4:	000a8200 	call	a820 <__sprint_r>
    45a8:	103d221e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    45ac:	ad7ffc04 	addi	r21,r21,-16
    45b0:	d8c12017 	ldw	r3,1152(sp)
    45b4:	d8811f17 	ldw	r2,1148(sp)
    45b8:	da000404 	addi	r8,sp,16
    45bc:	e57fef16 	blt	fp,r21,457c <__alt_mem_sram+0xf7e0457c>
    45c0:	dac12c17 	ldw	r11,1200(sp)
    45c4:	1d47883a 	add	r3,r3,r21
    45c8:	10800044 	addi	r2,r2,1
    45cc:	42c00015 	stw	r11,0(r8)
    45d0:	45400115 	stw	r21,4(r8)
    45d4:	d8c12015 	stw	r3,1152(sp)
    45d8:	d8811f15 	stw	r2,1148(sp)
    45dc:	010001c4 	movi	r4,7
    45e0:	20819116 	blt	r4,r2,4c28 <___vfprintf_internal_r+0x1650>
    45e4:	42000204 	addi	r8,r8,8
    45e8:	003dec06 	br	3d9c <__alt_mem_sram+0xf7e03d9c>
    45ec:	db013317 	ldw	r12,1228(sp)
    45f0:	00800044 	movi	r2,1
    45f4:	18c00044 	addi	r3,r3,1
    45f8:	1301530e 	bge	r2,r12,4b48 <___vfprintf_internal_r+0x1570>
    45fc:	dc011f17 	ldw	r16,1148(sp)
    4600:	dac13117 	ldw	r11,1220(sp)
    4604:	00800044 	movi	r2,1
    4608:	84000044 	addi	r16,r16,1
    460c:	40800115 	stw	r2,4(r8)
    4610:	42c00015 	stw	r11,0(r8)
    4614:	d8c12015 	stw	r3,1152(sp)
    4618:	dc011f15 	stw	r16,1148(sp)
    461c:	008001c4 	movi	r2,7
    4620:	14016b16 	blt	r2,r16,4bd0 <___vfprintf_internal_r+0x15f8>
    4624:	42000204 	addi	r8,r8,8
    4628:	db013817 	ldw	r12,1248(sp)
    462c:	dac13517 	ldw	r11,1236(sp)
    4630:	84000044 	addi	r16,r16,1
    4634:	1b07883a 	add	r3,r3,r12
    4638:	42c00015 	stw	r11,0(r8)
    463c:	43000115 	stw	r12,4(r8)
    4640:	d8c12015 	stw	r3,1152(sp)
    4644:	dc011f15 	stw	r16,1148(sp)
    4648:	008001c4 	movi	r2,7
    464c:	14016916 	blt	r2,r16,4bf4 <___vfprintf_internal_r+0x161c>
    4650:	44800204 	addi	r18,r8,8
    4654:	d9013717 	ldw	r4,1244(sp)
    4658:	d9413917 	ldw	r5,1252(sp)
    465c:	000d883a 	mov	r6,zero
    4660:	000f883a 	mov	r7,zero
    4664:	d8c13d15 	stw	r3,1268(sp)
    4668:	000e2d40 	call	e2d4 <__eqdf2>
    466c:	d8c13d17 	ldw	r3,1268(sp)
    4670:	db013317 	ldw	r12,1228(sp)
    4674:	1000ae26 	beq	r2,zero,4930 <___vfprintf_internal_r+0x1358>
    4678:	dac13117 	ldw	r11,1220(sp)
    467c:	60bfffc4 	addi	r2,r12,-1
    4680:	1887883a 	add	r3,r3,r2
    4684:	59000044 	addi	r4,r11,1
    4688:	84000044 	addi	r16,r16,1
    468c:	90800115 	stw	r2,4(r18)
    4690:	91000015 	stw	r4,0(r18)
    4694:	d8c12015 	stw	r3,1152(sp)
    4698:	dc011f15 	stw	r16,1148(sp)
    469c:	008001c4 	movi	r2,7
    46a0:	14014216 	blt	r2,r16,4bac <___vfprintf_internal_r+0x15d4>
    46a4:	94800204 	addi	r18,r18,8
    46a8:	dac13a17 	ldw	r11,1256(sp)
    46ac:	dd4122c4 	addi	r21,sp,1163
    46b0:	84000044 	addi	r16,r16,1
    46b4:	58c7883a 	add	r3,r11,r3
    46b8:	95400015 	stw	r21,0(r18)
    46bc:	92c00115 	stw	r11,4(r18)
    46c0:	d8c12015 	stw	r3,1152(sp)
    46c4:	dc011f15 	stw	r16,1148(sp)
    46c8:	008001c4 	movi	r2,7
    46cc:	14000e16 	blt	r2,r16,4708 <___vfprintf_internal_r+0x1130>
    46d0:	92000204 	addi	r8,r18,8
    46d4:	003de706 	br	3e74 <__alt_mem_sram+0xf7e03e74>
    46d8:	01000074 	movhi	r4,1
    46dc:	210a2984 	addi	r4,r4,10406
    46e0:	d9012c15 	stw	r4,1200(sp)
    46e4:	dac12c17 	ldw	r11,1200(sp)
    46e8:	1c07883a 	add	r3,r3,r16
    46ec:	44000115 	stw	r16,4(r8)
    46f0:	42c00015 	stw	r11,0(r8)
    46f4:	10800044 	addi	r2,r2,1
    46f8:	d8c12015 	stw	r3,1152(sp)
    46fc:	d8811f15 	stw	r2,1148(sp)
    4700:	010001c4 	movi	r4,7
    4704:	20bdda0e 	bge	r4,r2,3e70 <__alt_mem_sram+0xf7e03e70>
    4708:	b009883a 	mov	r4,r22
    470c:	b80b883a 	mov	r5,r23
    4710:	d9811e04 	addi	r6,sp,1144
    4714:	000a8200 	call	a820 <__sprint_r>
    4718:	103cc61e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    471c:	d8c12017 	ldw	r3,1152(sp)
    4720:	da000404 	addi	r8,sp,16
    4724:	003dd306 	br	3e74 <__alt_mem_sram+0xf7e03e74>
    4728:	b009883a 	mov	r4,r22
    472c:	b80b883a 	mov	r5,r23
    4730:	d9811e04 	addi	r6,sp,1144
    4734:	000a8200 	call	a820 <__sprint_r>
    4738:	103e0926 	beq	r2,zero,3f60 <__alt_mem_sram+0xf7e03f60>
    473c:	003cbd06 	br	3a34 <__alt_mem_sram+0xf7e03a34>
    4740:	10803fcc 	andi	r2,r2,255
    4744:	1000651e 	bne	r2,zero,48dc <___vfprintf_internal_r+0x1304>
    4748:	8880004c 	andi	r2,r17,1
    474c:	10013226 	beq	r2,zero,4c18 <___vfprintf_internal_r+0x1640>
    4750:	00800c04 	movi	r2,48
    4754:	d8c10dc4 	addi	r3,sp,1079
    4758:	d8810dc5 	stb	r2,1079(sp)
    475c:	dc813c17 	ldw	r18,1264(sp)
    4760:	d8c13115 	stw	r3,1220(sp)
    4764:	003d2b06 	br	3c14 <__alt_mem_sram+0xf7e03c14>
    4768:	b009883a 	mov	r4,r22
    476c:	b80b883a 	mov	r5,r23
    4770:	d9811e04 	addi	r6,sp,1144
    4774:	000a8200 	call	a820 <__sprint_r>
    4778:	103cae1e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    477c:	d8c12017 	ldw	r3,1152(sp)
    4780:	da000404 	addi	r8,sp,16
    4784:	003dae06 	br	3e40 <__alt_mem_sram+0xf7e03e40>
    4788:	b009883a 	mov	r4,r22
    478c:	b80b883a 	mov	r5,r23
    4790:	d9811e04 	addi	r6,sp,1144
    4794:	000a8200 	call	a820 <__sprint_r>
    4798:	103ca61e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    479c:	d8c12017 	ldw	r3,1152(sp)
    47a0:	da000404 	addi	r8,sp,16
    47a4:	003d6c06 	br	3d58 <__alt_mem_sram+0xf7e03d58>
    47a8:	b009883a 	mov	r4,r22
    47ac:	b80b883a 	mov	r5,r23
    47b0:	d9811e04 	addi	r6,sp,1144
    47b4:	000a8200 	call	a820 <__sprint_r>
    47b8:	103c9e1e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    47bc:	d8c12017 	ldw	r3,1152(sp)
    47c0:	da000404 	addi	r8,sp,16
    47c4:	003d7206 	br	3d90 <__alt_mem_sram+0xf7e03d90>
    47c8:	d9413b17 	ldw	r5,1260(sp)
    47cc:	d8c10e04 	addi	r3,sp,1080
    47d0:	988003cc 	andi	r2,r19,15
    47d4:	e008973a 	slli	r4,fp,28
    47d8:	2885883a 	add	r2,r5,r2
    47dc:	9826d13a 	srli	r19,r19,4
    47e0:	10800003 	ldbu	r2,0(r2)
    47e4:	e038d13a 	srli	fp,fp,4
    47e8:	18ffffc4 	addi	r3,r3,-1
    47ec:	24e6b03a 	or	r19,r4,r19
    47f0:	18800005 	stb	r2,0(r3)
    47f4:	9f04b03a 	or	r2,r19,fp
    47f8:	103ff51e 	bne	r2,zero,47d0 <__alt_mem_sram+0xf7e047d0>
    47fc:	db012817 	ldw	r12,1184(sp)
    4800:	d8c13115 	stw	r3,1220(sp)
    4804:	60e5c83a 	sub	r18,r12,r3
    4808:	003d0206 	br	3c14 <__alt_mem_sram+0xf7e03c14>
    480c:	dc012617 	ldw	r16,1176(sp)
    4810:	0401b10e 	bge	zero,r16,4ed8 <___vfprintf_internal_r+0x1900>
    4814:	db013117 	ldw	r12,1220(sp)
    4818:	dac13317 	ldw	r11,1228(sp)
    481c:	62e1883a 	add	r16,r12,r11
    4820:	db013417 	ldw	r12,1232(sp)
    4824:	5825883a 	mov	r18,r11
    4828:	62c0010e 	bge	r12,r11,4830 <___vfprintf_internal_r+0x1258>
    482c:	6025883a 	mov	r18,r12
    4830:	04800b0e 	bge	zero,r18,4860 <___vfprintf_internal_r+0x1288>
    4834:	d8811f17 	ldw	r2,1148(sp)
    4838:	dac13117 	ldw	r11,1220(sp)
    483c:	1c87883a 	add	r3,r3,r18
    4840:	10800044 	addi	r2,r2,1
    4844:	42c00015 	stw	r11,0(r8)
    4848:	44800115 	stw	r18,4(r8)
    484c:	d8c12015 	stw	r3,1152(sp)
    4850:	d8811f15 	stw	r2,1148(sp)
    4854:	010001c4 	movi	r4,7
    4858:	20824f16 	blt	r4,r2,5198 <___vfprintf_internal_r+0x1bc0>
    485c:	42000204 	addi	r8,r8,8
    4860:	90024b16 	blt	r18,zero,5190 <___vfprintf_internal_r+0x1bb8>
    4864:	db013417 	ldw	r12,1232(sp)
    4868:	64a5c83a 	sub	r18,r12,r18
    486c:	0480730e 	bge	zero,r18,4a3c <___vfprintf_internal_r+0x1464>
    4870:	05400404 	movi	r21,16
    4874:	d8811f17 	ldw	r2,1148(sp)
    4878:	ac817d0e 	bge	r21,r18,4e70 <___vfprintf_internal_r+0x1898>
    487c:	01400074 	movhi	r5,1
    4880:	294a2984 	addi	r5,r5,10406
    4884:	d9412c15 	stw	r5,1200(sp)
    4888:	070001c4 	movi	fp,7
    488c:	00000306 	br	489c <___vfprintf_internal_r+0x12c4>
    4890:	42000204 	addi	r8,r8,8
    4894:	94bffc04 	addi	r18,r18,-16
    4898:	ac81780e 	bge	r21,r18,4e7c <___vfprintf_internal_r+0x18a4>
    489c:	18c00404 	addi	r3,r3,16
    48a0:	10800044 	addi	r2,r2,1
    48a4:	45000015 	stw	r20,0(r8)
    48a8:	45400115 	stw	r21,4(r8)
    48ac:	d8c12015 	stw	r3,1152(sp)
    48b0:	d8811f15 	stw	r2,1148(sp)
    48b4:	e0bff60e 	bge	fp,r2,4890 <__alt_mem_sram+0xf7e04890>
    48b8:	b009883a 	mov	r4,r22
    48bc:	b80b883a 	mov	r5,r23
    48c0:	d9811e04 	addi	r6,sp,1144
    48c4:	000a8200 	call	a820 <__sprint_r>
    48c8:	103c5a1e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    48cc:	d8c12017 	ldw	r3,1152(sp)
    48d0:	d8811f17 	ldw	r2,1148(sp)
    48d4:	da000404 	addi	r8,sp,16
    48d8:	003fee06 	br	4894 <__alt_mem_sram+0xf7e04894>
    48dc:	dac10e04 	addi	r11,sp,1080
    48e0:	0025883a 	mov	r18,zero
    48e4:	dac13115 	stw	r11,1220(sp)
    48e8:	003cca06 	br	3c14 <__alt_mem_sram+0xf7e03c14>
    48ec:	b009883a 	mov	r4,r22
    48f0:	b80b883a 	mov	r5,r23
    48f4:	d9811e04 	addi	r6,sp,1144
    48f8:	000a8200 	call	a820 <__sprint_r>
    48fc:	103c4d1e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    4900:	d8c12017 	ldw	r3,1152(sp)
    4904:	d8812787 	ldb	r2,1182(sp)
    4908:	da000404 	addi	r8,sp,16
    490c:	003d0506 	br	3d24 <__alt_mem_sram+0xf7e03d24>
    4910:	dac12d17 	ldw	r11,1204(sp)
    4914:	14c00017 	ldw	r19,0(r2)
    4918:	0039883a 	mov	fp,zero
    491c:	5ac00104 	addi	r11,r11,4
    4920:	dac12d15 	stw	r11,1204(sp)
    4924:	0005883a 	mov	r2,zero
    4928:	9807883a 	mov	r3,r19
    492c:	003c9c06 	br	3ba0 <__alt_mem_sram+0xf7e03ba0>
    4930:	657fffc4 	addi	r21,r12,-1
    4934:	057f5c0e 	bge	zero,r21,46a8 <__alt_mem_sram+0xf7e046a8>
    4938:	07000404 	movi	fp,16
    493c:	e5408f0e 	bge	fp,r21,4b7c <___vfprintf_internal_r+0x15a4>
    4940:	01000074 	movhi	r4,1
    4944:	210a2984 	addi	r4,r4,10406
    4948:	d9012c15 	stw	r4,1200(sp)
    494c:	01c001c4 	movi	r7,7
    4950:	00000306 	br	4960 <___vfprintf_internal_r+0x1388>
    4954:	94800204 	addi	r18,r18,8
    4958:	ad7ffc04 	addi	r21,r21,-16
    495c:	e5408a0e 	bge	fp,r21,4b88 <___vfprintf_internal_r+0x15b0>
    4960:	18c00404 	addi	r3,r3,16
    4964:	84000044 	addi	r16,r16,1
    4968:	95000015 	stw	r20,0(r18)
    496c:	97000115 	stw	fp,4(r18)
    4970:	d8c12015 	stw	r3,1152(sp)
    4974:	dc011f15 	stw	r16,1148(sp)
    4978:	3c3ff60e 	bge	r7,r16,4954 <__alt_mem_sram+0xf7e04954>
    497c:	b009883a 	mov	r4,r22
    4980:	b80b883a 	mov	r5,r23
    4984:	d9811e04 	addi	r6,sp,1144
    4988:	d9c13d15 	stw	r7,1268(sp)
    498c:	000a8200 	call	a820 <__sprint_r>
    4990:	d9c13d17 	ldw	r7,1268(sp)
    4994:	103c271e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    4998:	d8c12017 	ldw	r3,1152(sp)
    499c:	dc011f17 	ldw	r16,1148(sp)
    49a0:	dc800404 	addi	r18,sp,16
    49a4:	003fec06 	br	4958 <__alt_mem_sram+0xf7e04958>
    49a8:	1cc00017 	ldw	r19,0(r3)
    49ac:	dac12d17 	ldw	r11,1204(sp)
    49b0:	9839d7fa 	srai	fp,r19,31
    49b4:	5ac00104 	addi	r11,r11,4
    49b8:	dac12d15 	stw	r11,1204(sp)
    49bc:	e005883a 	mov	r2,fp
    49c0:	003d9006 	br	4004 <__alt_mem_sram+0xf7e04004>
    49c4:	00800084 	movi	r2,2
    49c8:	9f06b03a 	or	r3,r19,fp
    49cc:	003c7406 	br	3ba0 <__alt_mem_sram+0xf7e03ba0>
    49d0:	db012d17 	ldw	r12,1204(sp)
    49d4:	14c00017 	ldw	r19,0(r2)
    49d8:	0039883a 	mov	fp,zero
    49dc:	63000104 	addi	r12,r12,4
    49e0:	db012d15 	stw	r12,1204(sp)
    49e4:	00800044 	movi	r2,1
    49e8:	9807883a 	mov	r3,r19
    49ec:	003c6c06 	br	3ba0 <__alt_mem_sram+0xf7e03ba0>
    49f0:	10803fcc 	andi	r2,r2,255
    49f4:	1080201c 	xori	r2,r2,128
    49f8:	10bfe004 	addi	r2,r2,-128
    49fc:	01000c04 	movi	r4,48
    4a00:	1101a526 	beq	r2,r4,5098 <___vfprintf_internal_r+0x1ac0>
    4a04:	dac13117 	ldw	r11,1220(sp)
    4a08:	db012817 	ldw	r12,1184(sp)
    4a0c:	193fffc5 	stb	r4,-1(r3)
    4a10:	5affffc4 	addi	r11,r11,-1
    4a14:	dac13115 	stw	r11,1220(sp)
    4a18:	62e5c83a 	sub	r18,r12,r11
    4a1c:	003c7d06 	br	3c14 <__alt_mem_sram+0xf7e03c14>
    4a20:	b009883a 	mov	r4,r22
    4a24:	b80b883a 	mov	r5,r23
    4a28:	d9811e04 	addi	r6,sp,1144
    4a2c:	000a8200 	call	a820 <__sprint_r>
    4a30:	103c001e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    4a34:	d8c12017 	ldw	r3,1152(sp)
    4a38:	da000404 	addi	r8,sp,16
    4a3c:	db013117 	ldw	r12,1220(sp)
    4a40:	dac13417 	ldw	r11,1232(sp)
    4a44:	d8812617 	ldw	r2,1176(sp)
    4a48:	62e5883a 	add	r18,r12,r11
    4a4c:	db013317 	ldw	r12,1228(sp)
    4a50:	13000216 	blt	r2,r12,4a5c <___vfprintf_internal_r+0x1484>
    4a54:	8900004c 	andi	r4,r17,1
    4a58:	20000c26 	beq	r4,zero,4a8c <___vfprintf_internal_r+0x14b4>
    4a5c:	dac13817 	ldw	r11,1248(sp)
    4a60:	d9011f17 	ldw	r4,1148(sp)
    4a64:	db013517 	ldw	r12,1236(sp)
    4a68:	1ac7883a 	add	r3,r3,r11
    4a6c:	21000044 	addi	r4,r4,1
    4a70:	43000015 	stw	r12,0(r8)
    4a74:	42c00115 	stw	r11,4(r8)
    4a78:	d8c12015 	stw	r3,1152(sp)
    4a7c:	d9011f15 	stw	r4,1148(sp)
    4a80:	014001c4 	movi	r5,7
    4a84:	2901cc16 	blt	r5,r4,51b8 <___vfprintf_internal_r+0x1be0>
    4a88:	42000204 	addi	r8,r8,8
    4a8c:	dac13317 	ldw	r11,1228(sp)
    4a90:	8489c83a 	sub	r4,r16,r18
    4a94:	5885c83a 	sub	r2,r11,r2
    4a98:	1021883a 	mov	r16,r2
    4a9c:	2080010e 	bge	r4,r2,4aa4 <___vfprintf_internal_r+0x14cc>
    4aa0:	2021883a 	mov	r16,r4
    4aa4:	04000a0e 	bge	zero,r16,4ad0 <___vfprintf_internal_r+0x14f8>
    4aa8:	d9011f17 	ldw	r4,1148(sp)
    4aac:	1c07883a 	add	r3,r3,r16
    4ab0:	44800015 	stw	r18,0(r8)
    4ab4:	21000044 	addi	r4,r4,1
    4ab8:	44000115 	stw	r16,4(r8)
    4abc:	d8c12015 	stw	r3,1152(sp)
    4ac0:	d9011f15 	stw	r4,1148(sp)
    4ac4:	014001c4 	movi	r5,7
    4ac8:	2901d616 	blt	r5,r4,5224 <___vfprintf_internal_r+0x1c4c>
    4acc:	42000204 	addi	r8,r8,8
    4ad0:	8001df16 	blt	r16,zero,5250 <___vfprintf_internal_r+0x1c78>
    4ad4:	1421c83a 	sub	r16,r2,r16
    4ad8:	043ce60e 	bge	zero,r16,3e74 <__alt_mem_sram+0xf7e03e74>
    4adc:	04800404 	movi	r18,16
    4ae0:	d8811f17 	ldw	r2,1148(sp)
    4ae4:	943efc0e 	bge	r18,r16,46d8 <__alt_mem_sram+0xf7e046d8>
    4ae8:	01400074 	movhi	r5,1
    4aec:	294a2984 	addi	r5,r5,10406
    4af0:	d9412c15 	stw	r5,1200(sp)
    4af4:	054001c4 	movi	r21,7
    4af8:	00000306 	br	4b08 <___vfprintf_internal_r+0x1530>
    4afc:	42000204 	addi	r8,r8,8
    4b00:	843ffc04 	addi	r16,r16,-16
    4b04:	943ef70e 	bge	r18,r16,46e4 <__alt_mem_sram+0xf7e046e4>
    4b08:	18c00404 	addi	r3,r3,16
    4b0c:	10800044 	addi	r2,r2,1
    4b10:	45000015 	stw	r20,0(r8)
    4b14:	44800115 	stw	r18,4(r8)
    4b18:	d8c12015 	stw	r3,1152(sp)
    4b1c:	d8811f15 	stw	r2,1148(sp)
    4b20:	a8bff60e 	bge	r21,r2,4afc <__alt_mem_sram+0xf7e04afc>
    4b24:	b009883a 	mov	r4,r22
    4b28:	b80b883a 	mov	r5,r23
    4b2c:	d9811e04 	addi	r6,sp,1144
    4b30:	000a8200 	call	a820 <__sprint_r>
    4b34:	103bbf1e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    4b38:	d8c12017 	ldw	r3,1152(sp)
    4b3c:	d8811f17 	ldw	r2,1148(sp)
    4b40:	da000404 	addi	r8,sp,16
    4b44:	003fee06 	br	4b00 <__alt_mem_sram+0xf7e04b00>
    4b48:	8888703a 	and	r4,r17,r2
    4b4c:	203eab1e 	bne	r4,zero,45fc <__alt_mem_sram+0xf7e045fc>
    4b50:	dc011f17 	ldw	r16,1148(sp)
    4b54:	db013117 	ldw	r12,1220(sp)
    4b58:	40800115 	stw	r2,4(r8)
    4b5c:	84000044 	addi	r16,r16,1
    4b60:	43000015 	stw	r12,0(r8)
    4b64:	d8c12015 	stw	r3,1152(sp)
    4b68:	dc011f15 	stw	r16,1148(sp)
    4b6c:	008001c4 	movi	r2,7
    4b70:	14000e16 	blt	r2,r16,4bac <___vfprintf_internal_r+0x15d4>
    4b74:	44800204 	addi	r18,r8,8
    4b78:	003ecb06 	br	46a8 <__alt_mem_sram+0xf7e046a8>
    4b7c:	00800074 	movhi	r2,1
    4b80:	108a2984 	addi	r2,r2,10406
    4b84:	d8812c15 	stw	r2,1200(sp)
    4b88:	dac12c17 	ldw	r11,1200(sp)
    4b8c:	1d47883a 	add	r3,r3,r21
    4b90:	84000044 	addi	r16,r16,1
    4b94:	92c00015 	stw	r11,0(r18)
    4b98:	95400115 	stw	r21,4(r18)
    4b9c:	d8c12015 	stw	r3,1152(sp)
    4ba0:	dc011f15 	stw	r16,1148(sp)
    4ba4:	008001c4 	movi	r2,7
    4ba8:	143ebe0e 	bge	r2,r16,46a4 <__alt_mem_sram+0xf7e046a4>
    4bac:	b009883a 	mov	r4,r22
    4bb0:	b80b883a 	mov	r5,r23
    4bb4:	d9811e04 	addi	r6,sp,1144
    4bb8:	000a8200 	call	a820 <__sprint_r>
    4bbc:	103b9d1e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    4bc0:	d8c12017 	ldw	r3,1152(sp)
    4bc4:	dc011f17 	ldw	r16,1148(sp)
    4bc8:	dc800404 	addi	r18,sp,16
    4bcc:	003eb606 	br	46a8 <__alt_mem_sram+0xf7e046a8>
    4bd0:	b009883a 	mov	r4,r22
    4bd4:	b80b883a 	mov	r5,r23
    4bd8:	d9811e04 	addi	r6,sp,1144
    4bdc:	000a8200 	call	a820 <__sprint_r>
    4be0:	103b941e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    4be4:	d8c12017 	ldw	r3,1152(sp)
    4be8:	dc011f17 	ldw	r16,1148(sp)
    4bec:	da000404 	addi	r8,sp,16
    4bf0:	003e8d06 	br	4628 <__alt_mem_sram+0xf7e04628>
    4bf4:	b009883a 	mov	r4,r22
    4bf8:	b80b883a 	mov	r5,r23
    4bfc:	d9811e04 	addi	r6,sp,1144
    4c00:	000a8200 	call	a820 <__sprint_r>
    4c04:	103b8b1e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    4c08:	d8c12017 	ldw	r3,1152(sp)
    4c0c:	dc011f17 	ldw	r16,1148(sp)
    4c10:	dc800404 	addi	r18,sp,16
    4c14:	003e8f06 	br	4654 <__alt_mem_sram+0xf7e04654>
    4c18:	db010e04 	addi	r12,sp,1080
    4c1c:	0025883a 	mov	r18,zero
    4c20:	db013115 	stw	r12,1220(sp)
    4c24:	003bfb06 	br	3c14 <__alt_mem_sram+0xf7e03c14>
    4c28:	b009883a 	mov	r4,r22
    4c2c:	b80b883a 	mov	r5,r23
    4c30:	d9811e04 	addi	r6,sp,1144
    4c34:	000a8200 	call	a820 <__sprint_r>
    4c38:	103b7e1e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    4c3c:	d8c12017 	ldw	r3,1152(sp)
    4c40:	da000404 	addi	r8,sp,16
    4c44:	003c5506 	br	3d9c <__alt_mem_sram+0xf7e03d9c>
    4c48:	04e7c83a 	sub	r19,zero,r19
    4c4c:	9804c03a 	cmpne	r2,r19,zero
    4c50:	0739c83a 	sub	fp,zero,fp
    4c54:	e0b9c83a 	sub	fp,fp,r2
    4c58:	05400b44 	movi	r21,45
    4c5c:	dd412785 	stb	r21,1182(sp)
    4c60:	da413215 	stw	r9,1224(sp)
    4c64:	00800044 	movi	r2,1
    4c68:	9f06b03a 	or	r3,r19,fp
    4c6c:	003bcf06 	br	3bac <__alt_mem_sram+0xf7e03bac>
    4c70:	da013f15 	stw	r8,1276(sp)
    4c74:	da413e15 	stw	r9,1272(sp)
    4c78:	000a47c0 	call	a47c <__fpclassifyd>
    4c7c:	da013f17 	ldw	r8,1276(sp)
    4c80:	da413e17 	ldw	r9,1272(sp)
    4c84:	1000ce26 	beq	r2,zero,4fc0 <___vfprintf_internal_r+0x19e8>
    4c88:	057ff7c4 	movi	r21,-33
    4c8c:	00bfffc4 	movi	r2,-1
    4c90:	856a703a 	and	r21,r16,r21
    4c94:	4881f026 	beq	r9,r2,5458 <___vfprintf_internal_r+0x1e80>
    4c98:	008011c4 	movi	r2,71
    4c9c:	a881e526 	beq	r21,r2,5434 <___vfprintf_internal_r+0x1e5c>
    4ca0:	db013917 	ldw	r12,1252(sp)
    4ca4:	8ac04014 	ori	r11,r17,256
    4ca8:	dac12d15 	stw	r11,1204(sp)
    4cac:	6001e416 	blt	r12,zero,5440 <___vfprintf_internal_r+0x1e68>
    4cb0:	dc813917 	ldw	r18,1252(sp)
    4cb4:	d8012b05 	stb	zero,1196(sp)
    4cb8:	00801984 	movi	r2,102
    4cbc:	80811826 	beq	r16,r2,5120 <___vfprintf_internal_r+0x1b48>
    4cc0:	00801184 	movi	r2,70
    4cc4:	80811626 	beq	r16,r2,5120 <___vfprintf_internal_r+0x1b48>
    4cc8:	00801144 	movi	r2,69
    4ccc:	a881e026 	beq	r21,r2,5450 <___vfprintf_internal_r+0x1e78>
    4cd0:	4839883a 	mov	fp,r9
    4cd4:	d8812604 	addi	r2,sp,1176
    4cd8:	d8800115 	stw	r2,4(sp)
    4cdc:	d9413717 	ldw	r5,1244(sp)
    4ce0:	d8812504 	addi	r2,sp,1172
    4ce4:	d8800215 	stw	r2,8(sp)
    4ce8:	d8812104 	addi	r2,sp,1156
    4cec:	df000015 	stw	fp,0(sp)
    4cf0:	d8800315 	stw	r2,12(sp)
    4cf4:	b009883a 	mov	r4,r22
    4cf8:	900d883a 	mov	r6,r18
    4cfc:	01c00084 	movi	r7,2
    4d00:	da013f15 	stw	r8,1276(sp)
    4d04:	da413e15 	stw	r9,1272(sp)
    4d08:	00059280 	call	5928 <_dtoa_r>
    4d0c:	d8813115 	stw	r2,1220(sp)
    4d10:	008019c4 	movi	r2,103
    4d14:	da013f17 	ldw	r8,1276(sp)
    4d18:	da413e17 	ldw	r9,1272(sp)
    4d1c:	80800226 	beq	r16,r2,4d28 <___vfprintf_internal_r+0x1750>
    4d20:	008011c4 	movi	r2,71
    4d24:	8081101e 	bne	r16,r2,5168 <___vfprintf_internal_r+0x1b90>
    4d28:	8880004c 	andi	r2,r17,1
    4d2c:	1001df26 	beq	r2,zero,54ac <___vfprintf_internal_r+0x1ed4>
    4d30:	db013117 	ldw	r12,1220(sp)
    4d34:	6715883a 	add	r10,r12,fp
    4d38:	d9013717 	ldw	r4,1244(sp)
    4d3c:	900b883a 	mov	r5,r18
    4d40:	000d883a 	mov	r6,zero
    4d44:	000f883a 	mov	r7,zero
    4d48:	da013f15 	stw	r8,1276(sp)
    4d4c:	da413e15 	stw	r9,1272(sp)
    4d50:	da813d15 	stw	r10,1268(sp)
    4d54:	000e2d40 	call	e2d4 <__eqdf2>
    4d58:	da013f17 	ldw	r8,1276(sp)
    4d5c:	da413e17 	ldw	r9,1272(sp)
    4d60:	da813d17 	ldw	r10,1268(sp)
    4d64:	10016526 	beq	r2,zero,52fc <___vfprintf_internal_r+0x1d24>
    4d68:	d8812117 	ldw	r2,1156(sp)
    4d6c:	1280062e 	bgeu	r2,r10,4d88 <___vfprintf_internal_r+0x17b0>
    4d70:	01000c04 	movi	r4,48
    4d74:	10c00044 	addi	r3,r2,1
    4d78:	d8c12115 	stw	r3,1156(sp)
    4d7c:	11000005 	stb	r4,0(r2)
    4d80:	d8812117 	ldw	r2,1156(sp)
    4d84:	12bffb36 	bltu	r2,r10,4d74 <__alt_mem_sram+0xf7e04d74>
    4d88:	db013117 	ldw	r12,1220(sp)
    4d8c:	1305c83a 	sub	r2,r2,r12
    4d90:	d8813315 	stw	r2,1228(sp)
    4d94:	008011c4 	movi	r2,71
    4d98:	a8814a26 	beq	r21,r2,52c4 <___vfprintf_internal_r+0x1cec>
    4d9c:	00801944 	movi	r2,101
    4da0:	14020a0e 	bge	r2,r16,55cc <___vfprintf_internal_r+0x1ff4>
    4da4:	00801984 	movi	r2,102
    4da8:	8081b626 	beq	r16,r2,5484 <___vfprintf_internal_r+0x1eac>
    4dac:	db012617 	ldw	r12,1176(sp)
    4db0:	db013415 	stw	r12,1232(sp)
    4db4:	db013417 	ldw	r12,1232(sp)
    4db8:	dac13317 	ldw	r11,1228(sp)
    4dbc:	62c1a816 	blt	r12,r11,5460 <___vfprintf_internal_r+0x1e88>
    4dc0:	8c40004c 	andi	r17,r17,1
    4dc4:	8801ca1e 	bne	r17,zero,54f0 <___vfprintf_internal_r+0x1f18>
    4dc8:	6005883a 	mov	r2,r12
    4dcc:	6001b516 	blt	r12,zero,54a4 <___vfprintf_internal_r+0x1ecc>
    4dd0:	dc813417 	ldw	r18,1232(sp)
    4dd4:	df012b07 	ldb	fp,1196(sp)
    4dd8:	e001321e 	bne	fp,zero,52a4 <___vfprintf_internal_r+0x1ccc>
    4ddc:	dc412d17 	ldw	r17,1204(sp)
    4de0:	dd412783 	ldbu	r21,1182(sp)
    4de4:	d8812b15 	stw	r2,1196(sp)
    4de8:	dcc12d15 	stw	r19,1204(sp)
    4dec:	d8013215 	stw	zero,1224(sp)
    4df0:	003b8d06 	br	3c28 <__alt_mem_sram+0xf7e03c28>
    4df4:	88c0100c 	andi	r3,r17,64
    4df8:	18008226 	beq	r3,zero,5004 <___vfprintf_internal_r+0x1a2c>
    4dfc:	dac12d17 	ldw	r11,1204(sp)
    4e00:	14c0000b 	ldhu	r19,0(r2)
    4e04:	0039883a 	mov	fp,zero
    4e08:	5ac00104 	addi	r11,r11,4
    4e0c:	dac12d15 	stw	r11,1204(sp)
    4e10:	003c8f06 	br	4050 <__alt_mem_sram+0xf7e04050>
    4e14:	1c000007 	ldb	r16,0(r3)
    4e18:	1805883a 	mov	r2,r3
    4e1c:	003a5506 	br	3774 <__alt_mem_sram+0xf7e03774>
    4e20:	00800084 	movi	r2,2
    4e24:	003b5e06 	br	3ba0 <__alt_mem_sram+0xf7e03ba0>
    4e28:	8880040c 	andi	r2,r17,16
    4e2c:	1000091e 	bne	r2,zero,4e54 <___vfprintf_internal_r+0x187c>
    4e30:	8c40100c 	andi	r17,r17,64
    4e34:	88000726 	beq	r17,zero,4e54 <___vfprintf_internal_r+0x187c>
    4e38:	db012d17 	ldw	r12,1204(sp)
    4e3c:	dac12f17 	ldw	r11,1212(sp)
    4e40:	60800017 	ldw	r2,0(r12)
    4e44:	63000104 	addi	r12,r12,4
    4e48:	db012d15 	stw	r12,1204(sp)
    4e4c:	12c0000d 	sth	r11,0(r2)
    4e50:	003a1e06 	br	36cc <__alt_mem_sram+0xf7e036cc>
    4e54:	db012d17 	ldw	r12,1204(sp)
    4e58:	dac12f17 	ldw	r11,1212(sp)
    4e5c:	60800017 	ldw	r2,0(r12)
    4e60:	63000104 	addi	r12,r12,4
    4e64:	db012d15 	stw	r12,1204(sp)
    4e68:	12c00015 	stw	r11,0(r2)
    4e6c:	003a1706 	br	36cc <__alt_mem_sram+0xf7e036cc>
    4e70:	01000074 	movhi	r4,1
    4e74:	210a2984 	addi	r4,r4,10406
    4e78:	d9012c15 	stw	r4,1200(sp)
    4e7c:	dac12c17 	ldw	r11,1200(sp)
    4e80:	1c87883a 	add	r3,r3,r18
    4e84:	10800044 	addi	r2,r2,1
    4e88:	42c00015 	stw	r11,0(r8)
    4e8c:	44800115 	stw	r18,4(r8)
    4e90:	d8c12015 	stw	r3,1152(sp)
    4e94:	d8811f15 	stw	r2,1148(sp)
    4e98:	010001c4 	movi	r4,7
    4e9c:	20bee016 	blt	r4,r2,4a20 <__alt_mem_sram+0xf7e04a20>
    4ea0:	42000204 	addi	r8,r8,8
    4ea4:	003ee506 	br	4a3c <__alt_mem_sram+0xf7e04a3c>
    4ea8:	01000074 	movhi	r4,1
    4eac:	210a2984 	addi	r4,r4,10406
    4eb0:	d9012c15 	stw	r4,1200(sp)
    4eb4:	003bd806 	br	3e18 <__alt_mem_sram+0xf7e03e18>
    4eb8:	b009883a 	mov	r4,r22
    4ebc:	b80b883a 	mov	r5,r23
    4ec0:	d9811e04 	addi	r6,sp,1144
    4ec4:	000a8200 	call	a820 <__sprint_r>
    4ec8:	103ada1e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    4ecc:	d8c12017 	ldw	r3,1152(sp)
    4ed0:	da000404 	addi	r8,sp,16
    4ed4:	003d6b06 	br	4484 <__alt_mem_sram+0xf7e04484>
    4ed8:	d8811f17 	ldw	r2,1148(sp)
    4edc:	03000074 	movhi	r12,1
    4ee0:	01000044 	movi	r4,1
    4ee4:	18c00044 	addi	r3,r3,1
    4ee8:	10800044 	addi	r2,r2,1
    4eec:	630a2904 	addi	r12,r12,10404
    4ef0:	41000115 	stw	r4,4(r8)
    4ef4:	43000015 	stw	r12,0(r8)
    4ef8:	d8c12015 	stw	r3,1152(sp)
    4efc:	d8811f15 	stw	r2,1148(sp)
    4f00:	010001c4 	movi	r4,7
    4f04:	20804916 	blt	r4,r2,502c <___vfprintf_internal_r+0x1a54>
    4f08:	42000204 	addi	r8,r8,8
    4f0c:	8000041e 	bne	r16,zero,4f20 <___vfprintf_internal_r+0x1948>
    4f10:	dac13317 	ldw	r11,1228(sp)
    4f14:	5800021e 	bne	r11,zero,4f20 <___vfprintf_internal_r+0x1948>
    4f18:	8880004c 	andi	r2,r17,1
    4f1c:	103bd526 	beq	r2,zero,3e74 <__alt_mem_sram+0xf7e03e74>
    4f20:	db013817 	ldw	r12,1248(sp)
    4f24:	d8811f17 	ldw	r2,1148(sp)
    4f28:	dac13517 	ldw	r11,1236(sp)
    4f2c:	1b07883a 	add	r3,r3,r12
    4f30:	10800044 	addi	r2,r2,1
    4f34:	42c00015 	stw	r11,0(r8)
    4f38:	43000115 	stw	r12,4(r8)
    4f3c:	d8c12015 	stw	r3,1152(sp)
    4f40:	d8811f15 	stw	r2,1148(sp)
    4f44:	010001c4 	movi	r4,7
    4f48:	20813016 	blt	r4,r2,540c <___vfprintf_internal_r+0x1e34>
    4f4c:	42000204 	addi	r8,r8,8
    4f50:	0421c83a 	sub	r16,zero,r16
    4f54:	0400630e 	bge	zero,r16,50e4 <___vfprintf_internal_r+0x1b0c>
    4f58:	04800404 	movi	r18,16
    4f5c:	94009f0e 	bge	r18,r16,51dc <___vfprintf_internal_r+0x1c04>
    4f60:	01000074 	movhi	r4,1
    4f64:	210a2984 	addi	r4,r4,10406
    4f68:	d9012c15 	stw	r4,1200(sp)
    4f6c:	054001c4 	movi	r21,7
    4f70:	00000306 	br	4f80 <___vfprintf_internal_r+0x19a8>
    4f74:	42000204 	addi	r8,r8,8
    4f78:	843ffc04 	addi	r16,r16,-16
    4f7c:	94009a0e 	bge	r18,r16,51e8 <___vfprintf_internal_r+0x1c10>
    4f80:	18c00404 	addi	r3,r3,16
    4f84:	10800044 	addi	r2,r2,1
    4f88:	45000015 	stw	r20,0(r8)
    4f8c:	44800115 	stw	r18,4(r8)
    4f90:	d8c12015 	stw	r3,1152(sp)
    4f94:	d8811f15 	stw	r2,1148(sp)
    4f98:	a8bff60e 	bge	r21,r2,4f74 <__alt_mem_sram+0xf7e04f74>
    4f9c:	b009883a 	mov	r4,r22
    4fa0:	b80b883a 	mov	r5,r23
    4fa4:	d9811e04 	addi	r6,sp,1144
    4fa8:	000a8200 	call	a820 <__sprint_r>
    4fac:	103aa11e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    4fb0:	d8c12017 	ldw	r3,1152(sp)
    4fb4:	d8811f17 	ldw	r2,1148(sp)
    4fb8:	da000404 	addi	r8,sp,16
    4fbc:	003fee06 	br	4f78 <__alt_mem_sram+0xf7e04f78>
    4fc0:	008011c4 	movi	r2,71
    4fc4:	1400b316 	blt	r2,r16,5294 <___vfprintf_internal_r+0x1cbc>
    4fc8:	03000074 	movhi	r12,1
    4fcc:	630a1b04 	addi	r12,r12,10348
    4fd0:	db013115 	stw	r12,1220(sp)
    4fd4:	00c000c4 	movi	r3,3
    4fd8:	00bfdfc4 	movi	r2,-129
    4fdc:	d8c12b15 	stw	r3,1196(sp)
    4fe0:	88a2703a 	and	r17,r17,r2
    4fe4:	dd412783 	ldbu	r21,1182(sp)
    4fe8:	dcc12d15 	stw	r19,1204(sp)
    4fec:	1825883a 	mov	r18,r3
    4ff0:	d8013215 	stw	zero,1224(sp)
    4ff4:	d8013415 	stw	zero,1232(sp)
    4ff8:	003b0b06 	br	3c28 <__alt_mem_sram+0xf7e03c28>
    4ffc:	4825883a 	mov	r18,r9
    5000:	003cba06 	br	42ec <__alt_mem_sram+0xf7e042ec>
    5004:	db012d17 	ldw	r12,1204(sp)
    5008:	14c00017 	ldw	r19,0(r2)
    500c:	0039883a 	mov	fp,zero
    5010:	63000104 	addi	r12,r12,4
    5014:	db012d15 	stw	r12,1204(sp)
    5018:	003c0d06 	br	4050 <__alt_mem_sram+0xf7e04050>
    501c:	00800074 	movhi	r2,1
    5020:	108a1904 	addi	r2,r2,10340
    5024:	d8813115 	stw	r2,1220(sp)
    5028:	003ac406 	br	3b3c <__alt_mem_sram+0xf7e03b3c>
    502c:	b009883a 	mov	r4,r22
    5030:	b80b883a 	mov	r5,r23
    5034:	d9811e04 	addi	r6,sp,1144
    5038:	000a8200 	call	a820 <__sprint_r>
    503c:	103a7d1e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    5040:	dc012617 	ldw	r16,1176(sp)
    5044:	d8c12017 	ldw	r3,1152(sp)
    5048:	da000404 	addi	r8,sp,16
    504c:	003faf06 	br	4f0c <__alt_mem_sram+0xf7e04f0c>
    5050:	db012e17 	ldw	r12,1208(sp)
    5054:	1805883a 	mov	r2,r3
    5058:	dac12d15 	stw	r11,1204(sp)
    505c:	0319c83a 	sub	r12,zero,r12
    5060:	db012e15 	stw	r12,1208(sp)
    5064:	003a7e06 	br	3a60 <__alt_mem_sram+0xf7e03a60>
    5068:	18800044 	addi	r2,r3,1
    506c:	8c400814 	ori	r17,r17,32
    5070:	1c000047 	ldb	r16,1(r3)
    5074:	0039bf06 	br	3774 <__alt_mem_sram+0xf7e03774>
    5078:	b009883a 	mov	r4,r22
    507c:	b80b883a 	mov	r5,r23
    5080:	d9811e04 	addi	r6,sp,1144
    5084:	000a8200 	call	a820 <__sprint_r>
    5088:	103a6a1e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    508c:	d8c12017 	ldw	r3,1152(sp)
    5090:	da000404 	addi	r8,sp,16
    5094:	003d0c06 	br	44c8 <__alt_mem_sram+0xf7e044c8>
    5098:	db012817 	ldw	r12,1184(sp)
    509c:	d8c13117 	ldw	r3,1220(sp)
    50a0:	60e5c83a 	sub	r18,r12,r3
    50a4:	003adb06 	br	3c14 <__alt_mem_sram+0xf7e03c14>
    50a8:	da013f15 	stw	r8,1276(sp)
    50ac:	00035400 	call	3540 <strlen>
    50b0:	1025883a 	mov	r18,r2
    50b4:	da013f17 	ldw	r8,1276(sp)
    50b8:	903c8e0e 	bge	r18,zero,42f4 <__alt_mem_sram+0xf7e042f4>
    50bc:	0005883a 	mov	r2,zero
    50c0:	003c8c06 	br	42f4 <__alt_mem_sram+0xf7e042f4>
    50c4:	b009883a 	mov	r4,r22
    50c8:	b80b883a 	mov	r5,r23
    50cc:	d9811e04 	addi	r6,sp,1144
    50d0:	000a8200 	call	a820 <__sprint_r>
    50d4:	103a571e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    50d8:	d8c12017 	ldw	r3,1152(sp)
    50dc:	d8811f17 	ldw	r2,1148(sp)
    50e0:	da000404 	addi	r8,sp,16
    50e4:	db013317 	ldw	r12,1228(sp)
    50e8:	dac13117 	ldw	r11,1220(sp)
    50ec:	10800044 	addi	r2,r2,1
    50f0:	60c7883a 	add	r3,r12,r3
    50f4:	42c00015 	stw	r11,0(r8)
    50f8:	43000115 	stw	r12,4(r8)
    50fc:	d8c12015 	stw	r3,1152(sp)
    5100:	d8811f15 	stw	r2,1148(sp)
    5104:	010001c4 	movi	r4,7
    5108:	20bb590e 	bge	r4,r2,3e70 <__alt_mem_sram+0xf7e03e70>
    510c:	003d7e06 	br	4708 <__alt_mem_sram+0xf7e04708>
    5110:	01000074 	movhi	r4,1
    5114:	210a2d84 	addi	r4,r4,10422
    5118:	d9013615 	stw	r4,1240(sp)
    511c:	003af606 	br	3cf8 <__alt_mem_sram+0xf7e03cf8>
    5120:	d8812604 	addi	r2,sp,1176
    5124:	d8800115 	stw	r2,4(sp)
    5128:	d9413717 	ldw	r5,1244(sp)
    512c:	d8812504 	addi	r2,sp,1172
    5130:	d8800215 	stw	r2,8(sp)
    5134:	d8812104 	addi	r2,sp,1156
    5138:	da400015 	stw	r9,0(sp)
    513c:	d8800315 	stw	r2,12(sp)
    5140:	b009883a 	mov	r4,r22
    5144:	900d883a 	mov	r6,r18
    5148:	01c000c4 	movi	r7,3
    514c:	da013f15 	stw	r8,1276(sp)
    5150:	da413e15 	stw	r9,1272(sp)
    5154:	00059280 	call	5928 <_dtoa_r>
    5158:	da413e17 	ldw	r9,1272(sp)
    515c:	da013f17 	ldw	r8,1276(sp)
    5160:	d8813115 	stw	r2,1220(sp)
    5164:	4839883a 	mov	fp,r9
    5168:	dac13117 	ldw	r11,1220(sp)
    516c:	00801184 	movi	r2,70
    5170:	5f15883a 	add	r10,r11,fp
    5174:	a8bef01e 	bne	r21,r2,4d38 <__alt_mem_sram+0xf7e04d38>
    5178:	59000007 	ldb	r4,0(r11)
    517c:	00800c04 	movi	r2,48
    5180:	2080e026 	beq	r4,r2,5504 <___vfprintf_internal_r+0x1f2c>
    5184:	d8c12617 	ldw	r3,1176(sp)
    5188:	50d5883a 	add	r10,r10,r3
    518c:	003eea06 	br	4d38 <__alt_mem_sram+0xf7e04d38>
    5190:	0025883a 	mov	r18,zero
    5194:	003db306 	br	4864 <__alt_mem_sram+0xf7e04864>
    5198:	b009883a 	mov	r4,r22
    519c:	b80b883a 	mov	r5,r23
    51a0:	d9811e04 	addi	r6,sp,1144
    51a4:	000a8200 	call	a820 <__sprint_r>
    51a8:	103a221e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    51ac:	d8c12017 	ldw	r3,1152(sp)
    51b0:	da000404 	addi	r8,sp,16
    51b4:	003daa06 	br	4860 <__alt_mem_sram+0xf7e04860>
    51b8:	b009883a 	mov	r4,r22
    51bc:	b80b883a 	mov	r5,r23
    51c0:	d9811e04 	addi	r6,sp,1144
    51c4:	000a8200 	call	a820 <__sprint_r>
    51c8:	103a1a1e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    51cc:	d8812617 	ldw	r2,1176(sp)
    51d0:	d8c12017 	ldw	r3,1152(sp)
    51d4:	da000404 	addi	r8,sp,16
    51d8:	003e2c06 	br	4a8c <__alt_mem_sram+0xf7e04a8c>
    51dc:	03000074 	movhi	r12,1
    51e0:	630a2984 	addi	r12,r12,10406
    51e4:	db012c15 	stw	r12,1200(sp)
    51e8:	dac12c17 	ldw	r11,1200(sp)
    51ec:	1c07883a 	add	r3,r3,r16
    51f0:	10800044 	addi	r2,r2,1
    51f4:	42c00015 	stw	r11,0(r8)
    51f8:	44000115 	stw	r16,4(r8)
    51fc:	d8c12015 	stw	r3,1152(sp)
    5200:	d8811f15 	stw	r2,1148(sp)
    5204:	010001c4 	movi	r4,7
    5208:	20bfae16 	blt	r4,r2,50c4 <__alt_mem_sram+0xf7e050c4>
    520c:	42000204 	addi	r8,r8,8
    5210:	003fb406 	br	50e4 <__alt_mem_sram+0xf7e050e4>
    5214:	03000074 	movhi	r12,1
    5218:	630a2d84 	addi	r12,r12,10422
    521c:	db013615 	stw	r12,1240(sp)
    5220:	003b3806 	br	3f04 <__alt_mem_sram+0xf7e03f04>
    5224:	b009883a 	mov	r4,r22
    5228:	b80b883a 	mov	r5,r23
    522c:	d9811e04 	addi	r6,sp,1144
    5230:	000a8200 	call	a820 <__sprint_r>
    5234:	1039ff1e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    5238:	d8812617 	ldw	r2,1176(sp)
    523c:	db013317 	ldw	r12,1228(sp)
    5240:	d8c12017 	ldw	r3,1152(sp)
    5244:	da000404 	addi	r8,sp,16
    5248:	6085c83a 	sub	r2,r12,r2
    524c:	003e2006 	br	4ad0 <__alt_mem_sram+0xf7e04ad0>
    5250:	0021883a 	mov	r16,zero
    5254:	003e1f06 	br	4ad4 <__alt_mem_sram+0xf7e04ad4>
    5258:	00800184 	movi	r2,6
    525c:	1240012e 	bgeu	r2,r9,5264 <___vfprintf_internal_r+0x1c8c>
    5260:	1013883a 	mov	r9,r2
    5264:	4825883a 	mov	r18,r9
    5268:	4805883a 	mov	r2,r9
    526c:	48009e16 	blt	r9,zero,54e8 <___vfprintf_internal_r+0x1f10>
    5270:	d8812b15 	stw	r2,1196(sp)
    5274:	00800074 	movhi	r2,1
    5278:	108a2704 	addi	r2,r2,10396
    527c:	d8813115 	stw	r2,1220(sp)
    5280:	dcc12d15 	stw	r19,1204(sp)
    5284:	d8013215 	stw	zero,1224(sp)
    5288:	d8013415 	stw	zero,1232(sp)
    528c:	0005883a 	mov	r2,zero
    5290:	003a6c06 	br	3c44 <__alt_mem_sram+0xf7e03c44>
    5294:	00800074 	movhi	r2,1
    5298:	108a1c04 	addi	r2,r2,10352
    529c:	d8813115 	stw	r2,1220(sp)
    52a0:	003f4c06 	br	4fd4 <__alt_mem_sram+0xf7e04fd4>
    52a4:	00c00b44 	movi	r3,45
    52a8:	d8812b15 	stw	r2,1196(sp)
    52ac:	dc412d17 	ldw	r17,1204(sp)
    52b0:	d8c12785 	stb	r3,1182(sp)
    52b4:	dcc12d15 	stw	r19,1204(sp)
    52b8:	d8013215 	stw	zero,1224(sp)
    52bc:	00800b44 	movi	r2,45
    52c0:	003a5d06 	br	3c38 <__alt_mem_sram+0xf7e03c38>
    52c4:	d8c12617 	ldw	r3,1176(sp)
    52c8:	00bfff44 	movi	r2,-3
    52cc:	18800d16 	blt	r3,r2,5304 <___vfprintf_internal_r+0x1d2c>
    52d0:	48c00c16 	blt	r9,r3,5304 <___vfprintf_internal_r+0x1d2c>
    52d4:	d8c13415 	stw	r3,1232(sp)
    52d8:	040019c4 	movi	r16,103
    52dc:	003eb506 	br	4db4 <__alt_mem_sram+0xf7e04db4>
    52e0:	05400b44 	movi	r21,45
    52e4:	dd412785 	stb	r21,1182(sp)
    52e8:	003a0f06 	br	3b28 <__alt_mem_sram+0xf7e03b28>
    52ec:	01000074 	movhi	r4,1
    52f0:	210a2984 	addi	r4,r4,10406
    52f4:	d9012c15 	stw	r4,1200(sp)
    52f8:	003cb106 	br	45c0 <__alt_mem_sram+0xf7e045c0>
    52fc:	5005883a 	mov	r2,r10
    5300:	003ea106 	br	4d88 <__alt_mem_sram+0xf7e04d88>
    5304:	843fff84 	addi	r16,r16,-2
    5308:	1f3fffc4 	addi	fp,r3,-1
    530c:	df012615 	stw	fp,1176(sp)
    5310:	dc0122c5 	stb	r16,1163(sp)
    5314:	e0009516 	blt	fp,zero,556c <___vfprintf_internal_r+0x1f94>
    5318:	00800ac4 	movi	r2,43
    531c:	d8812305 	stb	r2,1164(sp)
    5320:	00800244 	movi	r2,9
    5324:	1700690e 	bge	r2,fp,54cc <___vfprintf_internal_r+0x1ef4>
    5328:	dd4122c4 	addi	r21,sp,1163
    532c:	dc012c15 	stw	r16,1200(sp)
    5330:	8825883a 	mov	r18,r17
    5334:	a821883a 	mov	r16,r21
    5338:	4023883a 	mov	r17,r8
    533c:	e009883a 	mov	r4,fp
    5340:	01400284 	movi	r5,10
    5344:	000d1000 	call	d100 <__modsi3>
    5348:	10800c04 	addi	r2,r2,48
    534c:	843fffc4 	addi	r16,r16,-1
    5350:	e009883a 	mov	r4,fp
    5354:	01400284 	movi	r5,10
    5358:	80800005 	stb	r2,0(r16)
    535c:	000d0ac0 	call	d0ac <__divsi3>
    5360:	1039883a 	mov	fp,r2
    5364:	00800244 	movi	r2,9
    5368:	173ff416 	blt	r2,fp,533c <__alt_mem_sram+0xf7e0533c>
    536c:	8811883a 	mov	r8,r17
    5370:	e0800c04 	addi	r2,fp,48
    5374:	9023883a 	mov	r17,r18
    5378:	8025883a 	mov	r18,r16
    537c:	913fffc4 	addi	r4,r18,-1
    5380:	90bfffc5 	stb	r2,-1(r18)
    5384:	dc012c17 	ldw	r16,1200(sp)
    5388:	25408e2e 	bgeu	r4,r21,55c4 <___vfprintf_internal_r+0x1fec>
    538c:	d9412384 	addi	r5,sp,1166
    5390:	2c8bc83a 	sub	r5,r5,r18
    5394:	d8c12344 	addi	r3,sp,1165
    5398:	a94b883a 	add	r5,r21,r5
    539c:	00000106 	br	53a4 <___vfprintf_internal_r+0x1dcc>
    53a0:	20800003 	ldbu	r2,0(r4)
    53a4:	18800005 	stb	r2,0(r3)
    53a8:	18c00044 	addi	r3,r3,1
    53ac:	21000044 	addi	r4,r4,1
    53b0:	197ffb1e 	bne	r3,r5,53a0 <__alt_mem_sram+0xf7e053a0>
    53b4:	d8812304 	addi	r2,sp,1164
    53b8:	1485c83a 	sub	r2,r2,r18
    53bc:	d8c12344 	addi	r3,sp,1165
    53c0:	1885883a 	add	r2,r3,r2
    53c4:	dac13317 	ldw	r11,1228(sp)
    53c8:	156bc83a 	sub	r21,r2,r21
    53cc:	dd413a15 	stw	r21,1256(sp)
    53d0:	00800044 	movi	r2,1
    53d4:	5d65883a 	add	r18,r11,r21
    53d8:	12c0770e 	bge	r2,r11,55b8 <___vfprintf_internal_r+0x1fe0>
    53dc:	94800044 	addi	r18,r18,1
    53e0:	9005883a 	mov	r2,r18
    53e4:	90007216 	blt	r18,zero,55b0 <___vfprintf_internal_r+0x1fd8>
    53e8:	d8013415 	stw	zero,1232(sp)
    53ec:	003e7906 	br	4dd4 <__alt_mem_sram+0xf7e04dd4>
    53f0:	da412b15 	stw	r9,1196(sp)
    53f4:	dd412783 	ldbu	r21,1182(sp)
    53f8:	4825883a 	mov	r18,r9
    53fc:	dcc12d15 	stw	r19,1204(sp)
    5400:	d8013215 	stw	zero,1224(sp)
    5404:	d8013415 	stw	zero,1232(sp)
    5408:	003a0706 	br	3c28 <__alt_mem_sram+0xf7e03c28>
    540c:	b009883a 	mov	r4,r22
    5410:	b80b883a 	mov	r5,r23
    5414:	d9811e04 	addi	r6,sp,1144
    5418:	000a8200 	call	a820 <__sprint_r>
    541c:	1039851e 	bne	r2,zero,3a34 <__alt_mem_sram+0xf7e03a34>
    5420:	dc012617 	ldw	r16,1176(sp)
    5424:	d8c12017 	ldw	r3,1152(sp)
    5428:	d8811f17 	ldw	r2,1148(sp)
    542c:	da000404 	addi	r8,sp,16
    5430:	003ec706 	br	4f50 <__alt_mem_sram+0xf7e04f50>
    5434:	483e1a1e 	bne	r9,zero,4ca0 <__alt_mem_sram+0xf7e04ca0>
    5438:	9013883a 	mov	r9,r18
    543c:	003e1806 	br	4ca0 <__alt_mem_sram+0xf7e04ca0>
    5440:	00c00b44 	movi	r3,45
    5444:	64a0003c 	xorhi	r18,r12,32768
    5448:	d8c12b05 	stb	r3,1196(sp)
    544c:	003e1a06 	br	4cb8 <__alt_mem_sram+0xf7e04cb8>
    5450:	4f000044 	addi	fp,r9,1
    5454:	003e1f06 	br	4cd4 <__alt_mem_sram+0xf7e04cd4>
    5458:	02400184 	movi	r9,6
    545c:	003e1006 	br	4ca0 <__alt_mem_sram+0xf7e04ca0>
    5460:	d8c13417 	ldw	r3,1232(sp)
    5464:	00c04b0e 	bge	zero,r3,5594 <___vfprintf_internal_r+0x1fbc>
    5468:	04800044 	movi	r18,1
    546c:	dac13317 	ldw	r11,1228(sp)
    5470:	92e5883a 	add	r18,r18,r11
    5474:	9005883a 	mov	r2,r18
    5478:	903e560e 	bge	r18,zero,4dd4 <__alt_mem_sram+0xf7e04dd4>
    547c:	0005883a 	mov	r2,zero
    5480:	003e5406 	br	4dd4 <__alt_mem_sram+0xf7e04dd4>
    5484:	d8c12617 	ldw	r3,1176(sp)
    5488:	d8c13415 	stw	r3,1232(sp)
    548c:	00c03b0e 	bge	zero,r3,557c <___vfprintf_internal_r+0x1fa4>
    5490:	4800081e 	bne	r9,zero,54b4 <___vfprintf_internal_r+0x1edc>
    5494:	8c40004c 	andi	r17,r17,1
    5498:	8800061e 	bne	r17,zero,54b4 <___vfprintf_internal_r+0x1edc>
    549c:	1805883a 	mov	r2,r3
    54a0:	183e4b0e 	bge	r3,zero,4dd0 <__alt_mem_sram+0xf7e04dd0>
    54a4:	0005883a 	mov	r2,zero
    54a8:	003e4906 	br	4dd0 <__alt_mem_sram+0xf7e04dd0>
    54ac:	d8812117 	ldw	r2,1156(sp)
    54b0:	003e3506 	br	4d88 <__alt_mem_sram+0xf7e04d88>
    54b4:	dac13417 	ldw	r11,1232(sp)
    54b8:	4a400044 	addi	r9,r9,1
    54bc:	5a65883a 	add	r18,r11,r9
    54c0:	9005883a 	mov	r2,r18
    54c4:	903e430e 	bge	r18,zero,4dd4 <__alt_mem_sram+0xf7e04dd4>
    54c8:	003fec06 	br	547c <__alt_mem_sram+0xf7e0547c>
    54cc:	00800c04 	movi	r2,48
    54d0:	e0c00c04 	addi	r3,fp,48
    54d4:	d8812345 	stb	r2,1165(sp)
    54d8:	d8c12385 	stb	r3,1166(sp)
    54dc:	d88123c4 	addi	r2,sp,1167
    54e0:	dd4122c4 	addi	r21,sp,1163
    54e4:	003fb706 	br	53c4 <__alt_mem_sram+0xf7e053c4>
    54e8:	0005883a 	mov	r2,zero
    54ec:	003f6006 	br	5270 <__alt_mem_sram+0xf7e05270>
    54f0:	db013417 	ldw	r12,1232(sp)
    54f4:	64800044 	addi	r18,r12,1
    54f8:	9005883a 	mov	r2,r18
    54fc:	903e350e 	bge	r18,zero,4dd4 <__alt_mem_sram+0xf7e04dd4>
    5500:	003fde06 	br	547c <__alt_mem_sram+0xf7e0547c>
    5504:	d9013717 	ldw	r4,1244(sp)
    5508:	900b883a 	mov	r5,r18
    550c:	000d883a 	mov	r6,zero
    5510:	000f883a 	mov	r7,zero
    5514:	da013f15 	stw	r8,1276(sp)
    5518:	da413e15 	stw	r9,1272(sp)
    551c:	da813d15 	stw	r10,1268(sp)
    5520:	000e2d40 	call	e2d4 <__eqdf2>
    5524:	da013f17 	ldw	r8,1276(sp)
    5528:	da413e17 	ldw	r9,1272(sp)
    552c:	da813d17 	ldw	r10,1268(sp)
    5530:	103f1426 	beq	r2,zero,5184 <__alt_mem_sram+0xf7e05184>
    5534:	00800044 	movi	r2,1
    5538:	1707c83a 	sub	r3,r2,fp
    553c:	d8c12615 	stw	r3,1176(sp)
    5540:	003f1106 	br	5188 <__alt_mem_sram+0xf7e05188>
    5544:	dac12d17 	ldw	r11,1204(sp)
    5548:	5a400017 	ldw	r9,0(r11)
    554c:	5ac00104 	addi	r11,r11,4
    5550:	dac12d15 	stw	r11,1204(sp)
    5554:	483ec60e 	bge	r9,zero,5070 <__alt_mem_sram+0xf7e05070>
    5558:	027fffc4 	movi	r9,-1
    555c:	1c000047 	ldb	r16,1(r3)
    5560:	00388406 	br	3774 <__alt_mem_sram+0xf7e03774>
    5564:	043fffc4 	movi	r16,-1
    5568:	00391006 	br	39ac <__alt_mem_sram+0xf7e039ac>
    556c:	00800b44 	movi	r2,45
    5570:	0739c83a 	sub	fp,zero,fp
    5574:	d8812305 	stb	r2,1164(sp)
    5578:	003f6906 	br	5320 <__alt_mem_sram+0xf7e05320>
    557c:	4800081e 	bne	r9,zero,55a0 <___vfprintf_internal_r+0x1fc8>
    5580:	8c40004c 	andi	r17,r17,1
    5584:	8800061e 	bne	r17,zero,55a0 <___vfprintf_internal_r+0x1fc8>
    5588:	00800044 	movi	r2,1
    558c:	1025883a 	mov	r18,r2
    5590:	003e1006 	br	4dd4 <__alt_mem_sram+0xf7e04dd4>
    5594:	04800084 	movi	r18,2
    5598:	90e5c83a 	sub	r18,r18,r3
    559c:	003fb306 	br	546c <__alt_mem_sram+0xf7e0546c>
    55a0:	4c800084 	addi	r18,r9,2
    55a4:	9005883a 	mov	r2,r18
    55a8:	903e0a0e 	bge	r18,zero,4dd4 <__alt_mem_sram+0xf7e04dd4>
    55ac:	003fb306 	br	547c <__alt_mem_sram+0xf7e0547c>
    55b0:	0005883a 	mov	r2,zero
    55b4:	003f8c06 	br	53e8 <__alt_mem_sram+0xf7e053e8>
    55b8:	88a2703a 	and	r17,r17,r2
    55bc:	883f8826 	beq	r17,zero,53e0 <__alt_mem_sram+0xf7e053e0>
    55c0:	003f8606 	br	53dc <__alt_mem_sram+0xf7e053dc>
    55c4:	d8812344 	addi	r2,sp,1165
    55c8:	003f7e06 	br	53c4 <__alt_mem_sram+0xf7e053c4>
    55cc:	d8c12617 	ldw	r3,1176(sp)
    55d0:	003f4d06 	br	5308 <__alt_mem_sram+0xf7e05308>

000055d4 <__vfprintf_internal>:
    55d4:	2007883a 	mov	r3,r4
    55d8:	01000074 	movhi	r4,1
    55dc:	21118204 	addi	r4,r4,17928
    55e0:	21000017 	ldw	r4,0(r4)
    55e4:	2805883a 	mov	r2,r5
    55e8:	300f883a 	mov	r7,r6
    55ec:	180b883a 	mov	r5,r3
    55f0:	100d883a 	mov	r6,r2
    55f4:	00035d81 	jmpi	35d8 <___vfprintf_internal_r>

000055f8 <__swsetup_r>:
    55f8:	00800074 	movhi	r2,1
    55fc:	defffd04 	addi	sp,sp,-12
    5600:	10918204 	addi	r2,r2,17928
    5604:	dc400115 	stw	r17,4(sp)
    5608:	2023883a 	mov	r17,r4
    560c:	11000017 	ldw	r4,0(r2)
    5610:	dc000015 	stw	r16,0(sp)
    5614:	dfc00215 	stw	ra,8(sp)
    5618:	2821883a 	mov	r16,r5
    561c:	20000226 	beq	r4,zero,5628 <__swsetup_r+0x30>
    5620:	20c00e17 	ldw	r3,56(r4)
    5624:	18002e26 	beq	r3,zero,56e0 <__swsetup_r+0xe8>
    5628:	8080030b 	ldhu	r2,12(r16)
    562c:	10c0020c 	andi	r3,r2,8
    5630:	100d883a 	mov	r6,r2
    5634:	18000f26 	beq	r3,zero,5674 <__swsetup_r+0x7c>
    5638:	80c00417 	ldw	r3,16(r16)
    563c:	18001526 	beq	r3,zero,5694 <__swsetup_r+0x9c>
    5640:	1100004c 	andi	r4,r2,1
    5644:	20001c1e 	bne	r4,zero,56b8 <__swsetup_r+0xc0>
    5648:	1080008c 	andi	r2,r2,2
    564c:	1000261e 	bne	r2,zero,56e8 <__swsetup_r+0xf0>
    5650:	80800517 	ldw	r2,20(r16)
    5654:	80800215 	stw	r2,8(r16)
    5658:	18001c26 	beq	r3,zero,56cc <__swsetup_r+0xd4>
    565c:	0005883a 	mov	r2,zero
    5660:	dfc00217 	ldw	ra,8(sp)
    5664:	dc400117 	ldw	r17,4(sp)
    5668:	dc000017 	ldw	r16,0(sp)
    566c:	dec00304 	addi	sp,sp,12
    5670:	f800283a 	ret
    5674:	3080040c 	andi	r2,r6,16
    5678:	10001726 	beq	r2,zero,56d8 <__swsetup_r+0xe0>
    567c:	3080010c 	andi	r2,r6,4
    5680:	10001b1e 	bne	r2,zero,56f0 <__swsetup_r+0xf8>
    5684:	80c00417 	ldw	r3,16(r16)
    5688:	30800214 	ori	r2,r6,8
    568c:	8080030d 	sth	r2,12(r16)
    5690:	183feb1e 	bne	r3,zero,5640 <__alt_mem_sram+0xf7e05640>
    5694:	1140a00c 	andi	r5,r2,640
    5698:	01008004 	movi	r4,512
    569c:	293fe826 	beq	r5,r4,5640 <__alt_mem_sram+0xf7e05640>
    56a0:	8809883a 	mov	r4,r17
    56a4:	800b883a 	mov	r5,r16
    56a8:	00081500 	call	8150 <__smakebuf_r>
    56ac:	8080030b 	ldhu	r2,12(r16)
    56b0:	80c00417 	ldw	r3,16(r16)
    56b4:	003fe206 	br	5640 <__alt_mem_sram+0xf7e05640>
    56b8:	80800517 	ldw	r2,20(r16)
    56bc:	80000215 	stw	zero,8(r16)
    56c0:	0085c83a 	sub	r2,zero,r2
    56c4:	80800615 	stw	r2,24(r16)
    56c8:	183fe41e 	bne	r3,zero,565c <__alt_mem_sram+0xf7e0565c>
    56cc:	8080030b 	ldhu	r2,12(r16)
    56d0:	1080200c 	andi	r2,r2,128
    56d4:	103fe226 	beq	r2,zero,5660 <__alt_mem_sram+0xf7e05660>
    56d8:	00bfffc4 	movi	r2,-1
    56dc:	003fe006 	br	5660 <__alt_mem_sram+0xf7e05660>
    56e0:	00075f80 	call	75f8 <__sinit>
    56e4:	003fd006 	br	5628 <__alt_mem_sram+0xf7e05628>
    56e8:	0005883a 	mov	r2,zero
    56ec:	003fd906 	br	5654 <__alt_mem_sram+0xf7e05654>
    56f0:	81400c17 	ldw	r5,48(r16)
    56f4:	28000626 	beq	r5,zero,5710 <__swsetup_r+0x118>
    56f8:	80801004 	addi	r2,r16,64
    56fc:	28800326 	beq	r5,r2,570c <__swsetup_r+0x114>
    5700:	8809883a 	mov	r4,r17
    5704:	000776c0 	call	776c <_free_r>
    5708:	8180030b 	ldhu	r6,12(r16)
    570c:	80000c15 	stw	zero,48(r16)
    5710:	80c00417 	ldw	r3,16(r16)
    5714:	00bff6c4 	movi	r2,-37
    5718:	118c703a 	and	r6,r2,r6
    571c:	80000115 	stw	zero,4(r16)
    5720:	80c00015 	stw	r3,0(r16)
    5724:	003fd806 	br	5688 <__alt_mem_sram+0xf7e05688>

00005728 <quorem>:
    5728:	defff704 	addi	sp,sp,-36
    572c:	dc800215 	stw	r18,8(sp)
    5730:	20800417 	ldw	r2,16(r4)
    5734:	2c800417 	ldw	r18,16(r5)
    5738:	dfc00815 	stw	ra,32(sp)
    573c:	ddc00715 	stw	r23,28(sp)
    5740:	dd800615 	stw	r22,24(sp)
    5744:	dd400515 	stw	r21,20(sp)
    5748:	dd000415 	stw	r20,16(sp)
    574c:	dcc00315 	stw	r19,12(sp)
    5750:	dc400115 	stw	r17,4(sp)
    5754:	dc000015 	stw	r16,0(sp)
    5758:	14807116 	blt	r2,r18,5920 <quorem+0x1f8>
    575c:	94bfffc4 	addi	r18,r18,-1
    5760:	94ad883a 	add	r22,r18,r18
    5764:	b5ad883a 	add	r22,r22,r22
    5768:	2c400504 	addi	r17,r5,20
    576c:	8da9883a 	add	r20,r17,r22
    5770:	25400504 	addi	r21,r4,20
    5774:	282f883a 	mov	r23,r5
    5778:	adad883a 	add	r22,r21,r22
    577c:	a1400017 	ldw	r5,0(r20)
    5780:	2021883a 	mov	r16,r4
    5784:	b1000017 	ldw	r4,0(r22)
    5788:	29400044 	addi	r5,r5,1
    578c:	000d15c0 	call	d15c <__udivsi3>
    5790:	1027883a 	mov	r19,r2
    5794:	10002c26 	beq	r2,zero,5848 <quorem+0x120>
    5798:	a813883a 	mov	r9,r21
    579c:	8811883a 	mov	r8,r17
    57a0:	0009883a 	mov	r4,zero
    57a4:	000d883a 	mov	r6,zero
    57a8:	41c00017 	ldw	r7,0(r8)
    57ac:	49400017 	ldw	r5,0(r9)
    57b0:	42000104 	addi	r8,r8,4
    57b4:	38bfffcc 	andi	r2,r7,65535
    57b8:	14c5383a 	mul	r2,r2,r19
    57bc:	380ed43a 	srli	r7,r7,16
    57c0:	28ffffcc 	andi	r3,r5,65535
    57c4:	2085883a 	add	r2,r4,r2
    57c8:	1008d43a 	srli	r4,r2,16
    57cc:	3ccf383a 	mul	r7,r7,r19
    57d0:	198d883a 	add	r6,r3,r6
    57d4:	10ffffcc 	andi	r3,r2,65535
    57d8:	30c7c83a 	sub	r3,r6,r3
    57dc:	280ad43a 	srli	r5,r5,16
    57e0:	21c9883a 	add	r4,r4,r7
    57e4:	180dd43a 	srai	r6,r3,16
    57e8:	20bfffcc 	andi	r2,r4,65535
    57ec:	288bc83a 	sub	r5,r5,r2
    57f0:	298b883a 	add	r5,r5,r6
    57f4:	280e943a 	slli	r7,r5,16
    57f8:	18ffffcc 	andi	r3,r3,65535
    57fc:	2008d43a 	srli	r4,r4,16
    5800:	38ceb03a 	or	r7,r7,r3
    5804:	49c00015 	stw	r7,0(r9)
    5808:	280dd43a 	srai	r6,r5,16
    580c:	4a400104 	addi	r9,r9,4
    5810:	a23fe52e 	bgeu	r20,r8,57a8 <__alt_mem_sram+0xf7e057a8>
    5814:	b0800017 	ldw	r2,0(r22)
    5818:	10000b1e 	bne	r2,zero,5848 <quorem+0x120>
    581c:	b0bfff04 	addi	r2,r22,-4
    5820:	a880082e 	bgeu	r21,r2,5844 <quorem+0x11c>
    5824:	b0ffff17 	ldw	r3,-4(r22)
    5828:	18000326 	beq	r3,zero,5838 <quorem+0x110>
    582c:	00000506 	br	5844 <quorem+0x11c>
    5830:	10c00017 	ldw	r3,0(r2)
    5834:	1800031e 	bne	r3,zero,5844 <quorem+0x11c>
    5838:	10bfff04 	addi	r2,r2,-4
    583c:	94bfffc4 	addi	r18,r18,-1
    5840:	a8bffb36 	bltu	r21,r2,5830 <__alt_mem_sram+0xf7e05830>
    5844:	84800415 	stw	r18,16(r16)
    5848:	8009883a 	mov	r4,r16
    584c:	b80b883a 	mov	r5,r23
    5850:	00098100 	call	9810 <__mcmp>
    5854:	10002616 	blt	r2,zero,58f0 <quorem+0x1c8>
    5858:	9cc00044 	addi	r19,r19,1
    585c:	a80d883a 	mov	r6,r21
    5860:	000b883a 	mov	r5,zero
    5864:	31000017 	ldw	r4,0(r6)
    5868:	88800017 	ldw	r2,0(r17)
    586c:	31800104 	addi	r6,r6,4
    5870:	20ffffcc 	andi	r3,r4,65535
    5874:	194b883a 	add	r5,r3,r5
    5878:	10ffffcc 	andi	r3,r2,65535
    587c:	28c7c83a 	sub	r3,r5,r3
    5880:	1004d43a 	srli	r2,r2,16
    5884:	2008d43a 	srli	r4,r4,16
    5888:	180bd43a 	srai	r5,r3,16
    588c:	18ffffcc 	andi	r3,r3,65535
    5890:	2089c83a 	sub	r4,r4,r2
    5894:	2149883a 	add	r4,r4,r5
    5898:	2004943a 	slli	r2,r4,16
    589c:	8c400104 	addi	r17,r17,4
    58a0:	200bd43a 	srai	r5,r4,16
    58a4:	10c6b03a 	or	r3,r2,r3
    58a8:	30ffff15 	stw	r3,-4(r6)
    58ac:	a47fed2e 	bgeu	r20,r17,5864 <__alt_mem_sram+0xf7e05864>
    58b0:	9485883a 	add	r2,r18,r18
    58b4:	1085883a 	add	r2,r2,r2
    58b8:	a887883a 	add	r3,r21,r2
    58bc:	18800017 	ldw	r2,0(r3)
    58c0:	10000b1e 	bne	r2,zero,58f0 <quorem+0x1c8>
    58c4:	18bfff04 	addi	r2,r3,-4
    58c8:	a880082e 	bgeu	r21,r2,58ec <quorem+0x1c4>
    58cc:	18ffff17 	ldw	r3,-4(r3)
    58d0:	18000326 	beq	r3,zero,58e0 <quorem+0x1b8>
    58d4:	00000506 	br	58ec <quorem+0x1c4>
    58d8:	10c00017 	ldw	r3,0(r2)
    58dc:	1800031e 	bne	r3,zero,58ec <quorem+0x1c4>
    58e0:	10bfff04 	addi	r2,r2,-4
    58e4:	94bfffc4 	addi	r18,r18,-1
    58e8:	a8bffb36 	bltu	r21,r2,58d8 <__alt_mem_sram+0xf7e058d8>
    58ec:	84800415 	stw	r18,16(r16)
    58f0:	9805883a 	mov	r2,r19
    58f4:	dfc00817 	ldw	ra,32(sp)
    58f8:	ddc00717 	ldw	r23,28(sp)
    58fc:	dd800617 	ldw	r22,24(sp)
    5900:	dd400517 	ldw	r21,20(sp)
    5904:	dd000417 	ldw	r20,16(sp)
    5908:	dcc00317 	ldw	r19,12(sp)
    590c:	dc800217 	ldw	r18,8(sp)
    5910:	dc400117 	ldw	r17,4(sp)
    5914:	dc000017 	ldw	r16,0(sp)
    5918:	dec00904 	addi	sp,sp,36
    591c:	f800283a 	ret
    5920:	0005883a 	mov	r2,zero
    5924:	003ff306 	br	58f4 <__alt_mem_sram+0xf7e058f4>

00005928 <_dtoa_r>:
    5928:	20801017 	ldw	r2,64(r4)
    592c:	deffde04 	addi	sp,sp,-136
    5930:	dd401d15 	stw	r21,116(sp)
    5934:	dcc01b15 	stw	r19,108(sp)
    5938:	dc801a15 	stw	r18,104(sp)
    593c:	dc401915 	stw	r17,100(sp)
    5940:	dc001815 	stw	r16,96(sp)
    5944:	dfc02115 	stw	ra,132(sp)
    5948:	df002015 	stw	fp,128(sp)
    594c:	ddc01f15 	stw	r23,124(sp)
    5950:	dd801e15 	stw	r22,120(sp)
    5954:	dd001c15 	stw	r20,112(sp)
    5958:	d9c00315 	stw	r7,12(sp)
    595c:	2021883a 	mov	r16,r4
    5960:	302b883a 	mov	r21,r6
    5964:	2825883a 	mov	r18,r5
    5968:	dc402417 	ldw	r17,144(sp)
    596c:	3027883a 	mov	r19,r6
    5970:	10000826 	beq	r2,zero,5994 <_dtoa_r+0x6c>
    5974:	21801117 	ldw	r6,68(r4)
    5978:	00c00044 	movi	r3,1
    597c:	100b883a 	mov	r5,r2
    5980:	1986983a 	sll	r3,r3,r6
    5984:	11800115 	stw	r6,4(r2)
    5988:	10c00215 	stw	r3,8(r2)
    598c:	0008ff80 	call	8ff8 <_Bfree>
    5990:	80001015 	stw	zero,64(r16)
    5994:	a8002d16 	blt	r21,zero,5a4c <_dtoa_r+0x124>
    5998:	88000015 	stw	zero,0(r17)
    599c:	a8dffc2c 	andhi	r3,r21,32752
    59a0:	009ffc34 	movhi	r2,32752
    59a4:	18801b26 	beq	r3,r2,5a14 <_dtoa_r+0xec>
    59a8:	9009883a 	mov	r4,r18
    59ac:	980b883a 	mov	r5,r19
    59b0:	000d883a 	mov	r6,zero
    59b4:	000f883a 	mov	r7,zero
    59b8:	000e2d40 	call	e2d4 <__eqdf2>
    59bc:	10002a1e 	bne	r2,zero,5a68 <_dtoa_r+0x140>
    59c0:	d8c02317 	ldw	r3,140(sp)
    59c4:	d9002517 	ldw	r4,148(sp)
    59c8:	00800044 	movi	r2,1
    59cc:	18800015 	stw	r2,0(r3)
    59d0:	2001a226 	beq	r4,zero,605c <_dtoa_r+0x734>
    59d4:	00800074 	movhi	r2,1
    59d8:	108a2944 	addi	r2,r2,10405
    59dc:	20800015 	stw	r2,0(r4)
    59e0:	10bfffc4 	addi	r2,r2,-1
    59e4:	dfc02117 	ldw	ra,132(sp)
    59e8:	df002017 	ldw	fp,128(sp)
    59ec:	ddc01f17 	ldw	r23,124(sp)
    59f0:	dd801e17 	ldw	r22,120(sp)
    59f4:	dd401d17 	ldw	r21,116(sp)
    59f8:	dd001c17 	ldw	r20,112(sp)
    59fc:	dcc01b17 	ldw	r19,108(sp)
    5a00:	dc801a17 	ldw	r18,104(sp)
    5a04:	dc401917 	ldw	r17,100(sp)
    5a08:	dc001817 	ldw	r16,96(sp)
    5a0c:	dec02204 	addi	sp,sp,136
    5a10:	f800283a 	ret
    5a14:	d8c02317 	ldw	r3,140(sp)
    5a18:	0089c3c4 	movi	r2,9999
    5a1c:	18800015 	stw	r2,0(r3)
    5a20:	90017c26 	beq	r18,zero,6014 <_dtoa_r+0x6ec>
    5a24:	00800074 	movhi	r2,1
    5a28:	108a3504 	addi	r2,r2,10452
    5a2c:	d9002517 	ldw	r4,148(sp)
    5a30:	203fec26 	beq	r4,zero,59e4 <__alt_mem_sram+0xf7e059e4>
    5a34:	10c000c7 	ldb	r3,3(r2)
    5a38:	18017d1e 	bne	r3,zero,6030 <_dtoa_r+0x708>
    5a3c:	10c000c4 	addi	r3,r2,3
    5a40:	d9802517 	ldw	r6,148(sp)
    5a44:	30c00015 	stw	r3,0(r6)
    5a48:	003fe606 	br	59e4 <__alt_mem_sram+0xf7e059e4>
    5a4c:	04e00034 	movhi	r19,32768
    5a50:	9cffffc4 	addi	r19,r19,-1
    5a54:	00800044 	movi	r2,1
    5a58:	ace6703a 	and	r19,r21,r19
    5a5c:	88800015 	stw	r2,0(r17)
    5a60:	982b883a 	mov	r21,r19
    5a64:	003fcd06 	br	599c <__alt_mem_sram+0xf7e0599c>
    5a68:	d8800204 	addi	r2,sp,8
    5a6c:	a822d53a 	srli	r17,r21,20
    5a70:	d8800015 	stw	r2,0(sp)
    5a74:	8009883a 	mov	r4,r16
    5a78:	900b883a 	mov	r5,r18
    5a7c:	980d883a 	mov	r6,r19
    5a80:	d9c00104 	addi	r7,sp,4
    5a84:	0009b840 	call	9b84 <__d2b>
    5a88:	1039883a 	mov	fp,r2
    5a8c:	88016a1e 	bne	r17,zero,6038 <_dtoa_r+0x710>
    5a90:	dd000217 	ldw	r20,8(sp)
    5a94:	dc400117 	ldw	r17,4(sp)
    5a98:	00befbc4 	movi	r2,-1041
    5a9c:	a463883a 	add	r17,r20,r17
    5aa0:	8882ea16 	blt	r17,r2,664c <_dtoa_r+0xd24>
    5aa4:	00bf0384 	movi	r2,-1010
    5aa8:	1445c83a 	sub	r2,r2,r17
    5aac:	89010484 	addi	r4,r17,1042
    5ab0:	a8aa983a 	sll	r21,r21,r2
    5ab4:	9108d83a 	srl	r4,r18,r4
    5ab8:	a908b03a 	or	r4,r21,r4
    5abc:	000f6640 	call	f664 <__floatunsidf>
    5ac0:	017f8434 	movhi	r5,65040
    5ac4:	01800044 	movi	r6,1
    5ac8:	1009883a 	mov	r4,r2
    5acc:	194b883a 	add	r5,r3,r5
    5ad0:	8c7fffc4 	addi	r17,r17,-1
    5ad4:	d9800f15 	stw	r6,60(sp)
    5ad8:	000d883a 	mov	r6,zero
    5adc:	01cffe34 	movhi	r7,16376
    5ae0:	000ec3c0 	call	ec3c <__subdf3>
    5ae4:	0198dbf4 	movhi	r6,25455
    5ae8:	01cff4f4 	movhi	r7,16339
    5aec:	1009883a 	mov	r4,r2
    5af0:	180b883a 	mov	r5,r3
    5af4:	3190d844 	addi	r6,r6,17249
    5af8:	39e1e9c4 	addi	r7,r7,-30809
    5afc:	000e5180 	call	e518 <__muldf3>
    5b00:	01a2d874 	movhi	r6,35681
    5b04:	01cff1f4 	movhi	r7,16327
    5b08:	180b883a 	mov	r5,r3
    5b0c:	31b22cc4 	addi	r6,r6,-14157
    5b10:	39e28a04 	addi	r7,r7,-30168
    5b14:	1009883a 	mov	r4,r2
    5b18:	000d16c0 	call	d16c <__adddf3>
    5b1c:	8809883a 	mov	r4,r17
    5b20:	102d883a 	mov	r22,r2
    5b24:	182b883a 	mov	r21,r3
    5b28:	000f5940 	call	f594 <__floatsidf>
    5b2c:	019427f4 	movhi	r6,20639
    5b30:	01cff4f4 	movhi	r7,16339
    5b34:	1009883a 	mov	r4,r2
    5b38:	180b883a 	mov	r5,r3
    5b3c:	319e7ec4 	addi	r6,r6,31227
    5b40:	39d104c4 	addi	r7,r7,17427
    5b44:	000e5180 	call	e518 <__muldf3>
    5b48:	b009883a 	mov	r4,r22
    5b4c:	a80b883a 	mov	r5,r21
    5b50:	100d883a 	mov	r6,r2
    5b54:	180f883a 	mov	r7,r3
    5b58:	000d16c0 	call	d16c <__adddf3>
    5b5c:	1009883a 	mov	r4,r2
    5b60:	180b883a 	mov	r5,r3
    5b64:	102d883a 	mov	r22,r2
    5b68:	182b883a 	mov	r21,r3
    5b6c:	000f50c0 	call	f50c <__fixdfsi>
    5b70:	b009883a 	mov	r4,r22
    5b74:	a80b883a 	mov	r5,r21
    5b78:	000d883a 	mov	r6,zero
    5b7c:	000f883a 	mov	r7,zero
    5b80:	d8800515 	stw	r2,20(sp)
    5b84:	000e4380 	call	e438 <__ledf2>
    5b88:	10023116 	blt	r2,zero,6450 <_dtoa_r+0xb28>
    5b8c:	d8c00517 	ldw	r3,20(sp)
    5b90:	00800584 	movi	r2,22
    5b94:	10c21f36 	bltu	r2,r3,6414 <_dtoa_r+0xaec>
    5b98:	180490fa 	slli	r2,r3,3
    5b9c:	00c00074 	movhi	r3,1
    5ba0:	18ca5104 	addi	r3,r3,10564
    5ba4:	1885883a 	add	r2,r3,r2
    5ba8:	11000017 	ldw	r4,0(r2)
    5bac:	11400117 	ldw	r5,4(r2)
    5bb0:	900d883a 	mov	r6,r18
    5bb4:	980f883a 	mov	r7,r19
    5bb8:	000e3580 	call	e358 <__gedf2>
    5bbc:	0082a70e 	bge	zero,r2,665c <_dtoa_r+0xd34>
    5bc0:	d9000517 	ldw	r4,20(sp)
    5bc4:	d8000c15 	stw	zero,48(sp)
    5bc8:	213fffc4 	addi	r4,r4,-1
    5bcc:	d9000515 	stw	r4,20(sp)
    5bd0:	a463c83a 	sub	r17,r20,r17
    5bd4:	8dbfffc4 	addi	r22,r17,-1
    5bd8:	b0021916 	blt	r22,zero,6440 <_dtoa_r+0xb18>
    5bdc:	d8000815 	stw	zero,32(sp)
    5be0:	d8800517 	ldw	r2,20(sp)
    5be4:	10020e16 	blt	r2,zero,6420 <_dtoa_r+0xaf8>
    5be8:	b0ad883a 	add	r22,r22,r2
    5bec:	d8800a15 	stw	r2,40(sp)
    5bf0:	d8000915 	stw	zero,36(sp)
    5bf4:	d8c00317 	ldw	r3,12(sp)
    5bf8:	00800244 	movi	r2,9
    5bfc:	10c11a36 	bltu	r2,r3,6068 <_dtoa_r+0x740>
    5c00:	00800144 	movi	r2,5
    5c04:	10c4fc0e 	bge	r2,r3,6ff8 <_dtoa_r+0x16d0>
    5c08:	18ffff04 	addi	r3,r3,-4
    5c0c:	d8c00315 	stw	r3,12(sp)
    5c10:	0029883a 	mov	r20,zero
    5c14:	d9800317 	ldw	r6,12(sp)
    5c18:	008000c4 	movi	r2,3
    5c1c:	3083bd26 	beq	r6,r2,6b14 <_dtoa_r+0x11ec>
    5c20:	1183670e 	bge	r2,r6,69c0 <_dtoa_r+0x1098>
    5c24:	d8c00317 	ldw	r3,12(sp)
    5c28:	00800104 	movi	r2,4
    5c2c:	1882e726 	beq	r3,r2,67cc <_dtoa_r+0xea4>
    5c30:	00800144 	movi	r2,5
    5c34:	1884f21e 	bne	r3,r2,7000 <_dtoa_r+0x16d8>
    5c38:	00800044 	movi	r2,1
    5c3c:	d8800b15 	stw	r2,44(sp)
    5c40:	d8c02217 	ldw	r3,136(sp)
    5c44:	d9000517 	ldw	r4,20(sp)
    5c48:	1907883a 	add	r3,r3,r4
    5c4c:	19800044 	addi	r6,r3,1
    5c50:	d8c00d15 	stw	r3,52(sp)
    5c54:	d9800615 	stw	r6,24(sp)
    5c58:	0183c30e 	bge	zero,r6,6b68 <_dtoa_r+0x1240>
    5c5c:	d9800617 	ldw	r6,24(sp)
    5c60:	3023883a 	mov	r17,r6
    5c64:	80001115 	stw	zero,68(r16)
    5c68:	008005c4 	movi	r2,23
    5c6c:	1184f62e 	bgeu	r2,r6,7048 <_dtoa_r+0x1720>
    5c70:	00c00044 	movi	r3,1
    5c74:	00800104 	movi	r2,4
    5c78:	1085883a 	add	r2,r2,r2
    5c7c:	11000504 	addi	r4,r2,20
    5c80:	180b883a 	mov	r5,r3
    5c84:	18c00044 	addi	r3,r3,1
    5c88:	313ffb2e 	bgeu	r6,r4,5c78 <__alt_mem_sram+0xf7e05c78>
    5c8c:	81401115 	stw	r5,68(r16)
    5c90:	8009883a 	mov	r4,r16
    5c94:	0008f500 	call	8f50 <_Balloc>
    5c98:	d8800715 	stw	r2,28(sp)
    5c9c:	80801015 	stw	r2,64(r16)
    5ca0:	00800384 	movi	r2,14
    5ca4:	1440fd36 	bltu	r2,r17,609c <_dtoa_r+0x774>
    5ca8:	a000fc26 	beq	r20,zero,609c <_dtoa_r+0x774>
    5cac:	d8800517 	ldw	r2,20(sp)
    5cb0:	0083b90e 	bge	zero,r2,6b98 <_dtoa_r+0x1270>
    5cb4:	d8c00517 	ldw	r3,20(sp)
    5cb8:	108003cc 	andi	r2,r2,15
    5cbc:	100490fa 	slli	r2,r2,3
    5cc0:	182fd13a 	srai	r23,r3,4
    5cc4:	00c00074 	movhi	r3,1
    5cc8:	18ca5104 	addi	r3,r3,10564
    5ccc:	1885883a 	add	r2,r3,r2
    5cd0:	b8c0040c 	andi	r3,r23,16
    5cd4:	12c00017 	ldw	r11,0(r2)
    5cd8:	12800117 	ldw	r10,4(r2)
    5cdc:	18039726 	beq	r3,zero,6b3c <_dtoa_r+0x1214>
    5ce0:	00800074 	movhi	r2,1
    5ce4:	108a4704 	addi	r2,r2,10524
    5ce8:	11800817 	ldw	r6,32(r2)
    5cec:	11c00917 	ldw	r7,36(r2)
    5cf0:	9009883a 	mov	r4,r18
    5cf4:	980b883a 	mov	r5,r19
    5cf8:	da801615 	stw	r10,88(sp)
    5cfc:	dac01515 	stw	r11,84(sp)
    5d00:	000da080 	call	da08 <__divdf3>
    5d04:	da801617 	ldw	r10,88(sp)
    5d08:	dac01517 	ldw	r11,84(sp)
    5d0c:	bdc003cc 	andi	r23,r23,15
    5d10:	044000c4 	movi	r17,3
    5d14:	d8800e15 	stw	r2,56(sp)
    5d18:	182b883a 	mov	r21,r3
    5d1c:	b8001126 	beq	r23,zero,5d64 <_dtoa_r+0x43c>
    5d20:	05000074 	movhi	r20,1
    5d24:	a50a4704 	addi	r20,r20,10524
    5d28:	5805883a 	mov	r2,r11
    5d2c:	5007883a 	mov	r3,r10
    5d30:	b980004c 	andi	r6,r23,1
    5d34:	1009883a 	mov	r4,r2
    5d38:	b82fd07a 	srai	r23,r23,1
    5d3c:	180b883a 	mov	r5,r3
    5d40:	30000426 	beq	r6,zero,5d54 <_dtoa_r+0x42c>
    5d44:	a1800017 	ldw	r6,0(r20)
    5d48:	a1c00117 	ldw	r7,4(r20)
    5d4c:	8c400044 	addi	r17,r17,1
    5d50:	000e5180 	call	e518 <__muldf3>
    5d54:	a5000204 	addi	r20,r20,8
    5d58:	b83ff51e 	bne	r23,zero,5d30 <__alt_mem_sram+0xf7e05d30>
    5d5c:	1017883a 	mov	r11,r2
    5d60:	1815883a 	mov	r10,r3
    5d64:	d9000e17 	ldw	r4,56(sp)
    5d68:	a80b883a 	mov	r5,r21
    5d6c:	580d883a 	mov	r6,r11
    5d70:	500f883a 	mov	r7,r10
    5d74:	000da080 	call	da08 <__divdf3>
    5d78:	1029883a 	mov	r20,r2
    5d7c:	182b883a 	mov	r21,r3
    5d80:	d9800c17 	ldw	r6,48(sp)
    5d84:	30000626 	beq	r6,zero,5da0 <_dtoa_r+0x478>
    5d88:	a009883a 	mov	r4,r20
    5d8c:	a80b883a 	mov	r5,r21
    5d90:	000d883a 	mov	r6,zero
    5d94:	01cffc34 	movhi	r7,16368
    5d98:	000e4380 	call	e438 <__ledf2>
    5d9c:	10043216 	blt	r2,zero,6e68 <_dtoa_r+0x1540>
    5da0:	8809883a 	mov	r4,r17
    5da4:	000f5940 	call	f594 <__floatsidf>
    5da8:	1009883a 	mov	r4,r2
    5dac:	180b883a 	mov	r5,r3
    5db0:	a00d883a 	mov	r6,r20
    5db4:	a80f883a 	mov	r7,r21
    5db8:	000e5180 	call	e518 <__muldf3>
    5dbc:	000d883a 	mov	r6,zero
    5dc0:	1009883a 	mov	r4,r2
    5dc4:	180b883a 	mov	r5,r3
    5dc8:	01d00734 	movhi	r7,16412
    5dcc:	000d16c0 	call	d16c <__adddf3>
    5dd0:	1023883a 	mov	r17,r2
    5dd4:	d9800617 	ldw	r6,24(sp)
    5dd8:	00bf3034 	movhi	r2,64704
    5ddc:	1885883a 	add	r2,r3,r2
    5de0:	d8800e15 	stw	r2,56(sp)
    5de4:	30032e26 	beq	r6,zero,6aa0 <_dtoa_r+0x1178>
    5de8:	d8c00517 	ldw	r3,20(sp)
    5dec:	da800617 	ldw	r10,24(sp)
    5df0:	d8c01215 	stw	r3,72(sp)
    5df4:	d9000b17 	ldw	r4,44(sp)
    5df8:	2003b026 	beq	r4,zero,6cbc <_dtoa_r+0x1394>
    5dfc:	50bfffc4 	addi	r2,r10,-1
    5e00:	100490fa 	slli	r2,r2,3
    5e04:	00c00074 	movhi	r3,1
    5e08:	18ca5104 	addi	r3,r3,10564
    5e0c:	1885883a 	add	r2,r3,r2
    5e10:	11800017 	ldw	r6,0(r2)
    5e14:	11c00117 	ldw	r7,4(r2)
    5e18:	d8800717 	ldw	r2,28(sp)
    5e1c:	0009883a 	mov	r4,zero
    5e20:	014ff834 	movhi	r5,16352
    5e24:	da801615 	stw	r10,88(sp)
    5e28:	15c00044 	addi	r23,r2,1
    5e2c:	000da080 	call	da08 <__divdf3>
    5e30:	d9c00e17 	ldw	r7,56(sp)
    5e34:	880d883a 	mov	r6,r17
    5e38:	1009883a 	mov	r4,r2
    5e3c:	180b883a 	mov	r5,r3
    5e40:	000ec3c0 	call	ec3c <__subdf3>
    5e44:	a80b883a 	mov	r5,r21
    5e48:	a009883a 	mov	r4,r20
    5e4c:	d8c01015 	stw	r3,64(sp)
    5e50:	d8800e15 	stw	r2,56(sp)
    5e54:	000f50c0 	call	f50c <__fixdfsi>
    5e58:	1009883a 	mov	r4,r2
    5e5c:	d8801715 	stw	r2,92(sp)
    5e60:	000f5940 	call	f594 <__floatsidf>
    5e64:	a009883a 	mov	r4,r20
    5e68:	a80b883a 	mov	r5,r21
    5e6c:	100d883a 	mov	r6,r2
    5e70:	180f883a 	mov	r7,r3
    5e74:	000ec3c0 	call	ec3c <__subdf3>
    5e78:	da001717 	ldw	r8,92(sp)
    5e7c:	1829883a 	mov	r20,r3
    5e80:	d8c00717 	ldw	r3,28(sp)
    5e84:	d9000e17 	ldw	r4,56(sp)
    5e88:	d9401017 	ldw	r5,64(sp)
    5e8c:	42000c04 	addi	r8,r8,48
    5e90:	1023883a 	mov	r17,r2
    5e94:	1a000005 	stb	r8,0(r3)
    5e98:	880d883a 	mov	r6,r17
    5e9c:	a00f883a 	mov	r7,r20
    5ea0:	402b883a 	mov	r21,r8
    5ea4:	000e3580 	call	e358 <__gedf2>
    5ea8:	00844516 	blt	zero,r2,6fc0 <_dtoa_r+0x1698>
    5eac:	0009883a 	mov	r4,zero
    5eb0:	014ffc34 	movhi	r5,16368
    5eb4:	880d883a 	mov	r6,r17
    5eb8:	a00f883a 	mov	r7,r20
    5ebc:	000ec3c0 	call	ec3c <__subdf3>
    5ec0:	d9000e17 	ldw	r4,56(sp)
    5ec4:	d9401017 	ldw	r5,64(sp)
    5ec8:	100d883a 	mov	r6,r2
    5ecc:	180f883a 	mov	r7,r3
    5ed0:	000e3580 	call	e358 <__gedf2>
    5ed4:	da801617 	ldw	r10,88(sp)
    5ed8:	00843616 	blt	zero,r2,6fb4 <_dtoa_r+0x168c>
    5edc:	00800044 	movi	r2,1
    5ee0:	12806e0e 	bge	r2,r10,609c <_dtoa_r+0x774>
    5ee4:	d9000717 	ldw	r4,28(sp)
    5ee8:	dd801315 	stw	r22,76(sp)
    5eec:	dc001115 	stw	r16,68(sp)
    5ef0:	2295883a 	add	r10,r4,r10
    5ef4:	dcc01415 	stw	r19,80(sp)
    5ef8:	502d883a 	mov	r22,r10
    5efc:	dcc01017 	ldw	r19,64(sp)
    5f00:	b821883a 	mov	r16,r23
    5f04:	dc801015 	stw	r18,64(sp)
    5f08:	dc800e17 	ldw	r18,56(sp)
    5f0c:	00000906 	br	5f34 <_dtoa_r+0x60c>
    5f10:	000ec3c0 	call	ec3c <__subdf3>
    5f14:	1009883a 	mov	r4,r2
    5f18:	180b883a 	mov	r5,r3
    5f1c:	900d883a 	mov	r6,r18
    5f20:	980f883a 	mov	r7,r19
    5f24:	000e4380 	call	e438 <__ledf2>
    5f28:	10040e16 	blt	r2,zero,6f64 <_dtoa_r+0x163c>
    5f2c:	b821883a 	mov	r16,r23
    5f30:	bd841026 	beq	r23,r22,6f74 <_dtoa_r+0x164c>
    5f34:	9009883a 	mov	r4,r18
    5f38:	980b883a 	mov	r5,r19
    5f3c:	000d883a 	mov	r6,zero
    5f40:	01d00934 	movhi	r7,16420
    5f44:	000e5180 	call	e518 <__muldf3>
    5f48:	000d883a 	mov	r6,zero
    5f4c:	01d00934 	movhi	r7,16420
    5f50:	8809883a 	mov	r4,r17
    5f54:	a00b883a 	mov	r5,r20
    5f58:	1025883a 	mov	r18,r2
    5f5c:	1827883a 	mov	r19,r3
    5f60:	000e5180 	call	e518 <__muldf3>
    5f64:	180b883a 	mov	r5,r3
    5f68:	1009883a 	mov	r4,r2
    5f6c:	1823883a 	mov	r17,r3
    5f70:	1029883a 	mov	r20,r2
    5f74:	000f50c0 	call	f50c <__fixdfsi>
    5f78:	1009883a 	mov	r4,r2
    5f7c:	102b883a 	mov	r21,r2
    5f80:	000f5940 	call	f594 <__floatsidf>
    5f84:	a009883a 	mov	r4,r20
    5f88:	880b883a 	mov	r5,r17
    5f8c:	100d883a 	mov	r6,r2
    5f90:	180f883a 	mov	r7,r3
    5f94:	000ec3c0 	call	ec3c <__subdf3>
    5f98:	ad400c04 	addi	r21,r21,48
    5f9c:	1009883a 	mov	r4,r2
    5fa0:	180b883a 	mov	r5,r3
    5fa4:	900d883a 	mov	r6,r18
    5fa8:	980f883a 	mov	r7,r19
    5fac:	85400005 	stb	r21,0(r16)
    5fb0:	1023883a 	mov	r17,r2
    5fb4:	1829883a 	mov	r20,r3
    5fb8:	000e4380 	call	e438 <__ledf2>
    5fbc:	bdc00044 	addi	r23,r23,1
    5fc0:	0009883a 	mov	r4,zero
    5fc4:	014ffc34 	movhi	r5,16368
    5fc8:	880d883a 	mov	r6,r17
    5fcc:	a00f883a 	mov	r7,r20
    5fd0:	103fcf0e 	bge	r2,zero,5f10 <__alt_mem_sram+0xf7e05f10>
    5fd4:	d9801217 	ldw	r6,72(sp)
    5fd8:	dc001117 	ldw	r16,68(sp)
    5fdc:	d9800515 	stw	r6,20(sp)
    5fe0:	8009883a 	mov	r4,r16
    5fe4:	e00b883a 	mov	r5,fp
    5fe8:	0008ff80 	call	8ff8 <_Bfree>
    5fec:	d8c00517 	ldw	r3,20(sp)
    5ff0:	d9002317 	ldw	r4,140(sp)
    5ff4:	d9802517 	ldw	r6,148(sp)
    5ff8:	b8000005 	stb	zero,0(r23)
    5ffc:	18800044 	addi	r2,r3,1
    6000:	20800015 	stw	r2,0(r4)
    6004:	30027226 	beq	r6,zero,69d0 <_dtoa_r+0x10a8>
    6008:	35c00015 	stw	r23,0(r6)
    600c:	d8800717 	ldw	r2,28(sp)
    6010:	003e7406 	br	59e4 <__alt_mem_sram+0xf7e059e4>
    6014:	00800434 	movhi	r2,16
    6018:	10bfffc4 	addi	r2,r2,-1
    601c:	a8aa703a 	and	r21,r21,r2
    6020:	a83e801e 	bne	r21,zero,5a24 <__alt_mem_sram+0xf7e05a24>
    6024:	00800074 	movhi	r2,1
    6028:	108a3204 	addi	r2,r2,10440
    602c:	003e7f06 	br	5a2c <__alt_mem_sram+0xf7e05a2c>
    6030:	10c00204 	addi	r3,r2,8
    6034:	003e8206 	br	5a40 <__alt_mem_sram+0xf7e05a40>
    6038:	01400434 	movhi	r5,16
    603c:	297fffc4 	addi	r5,r5,-1
    6040:	994a703a 	and	r5,r19,r5
    6044:	9009883a 	mov	r4,r18
    6048:	8c7f0044 	addi	r17,r17,-1023
    604c:	294ffc34 	orhi	r5,r5,16368
    6050:	dd000217 	ldw	r20,8(sp)
    6054:	d8000f15 	stw	zero,60(sp)
    6058:	003e9f06 	br	5ad8 <__alt_mem_sram+0xf7e05ad8>
    605c:	00800074 	movhi	r2,1
    6060:	108a2904 	addi	r2,r2,10404
    6064:	003e5f06 	br	59e4 <__alt_mem_sram+0xf7e059e4>
    6068:	80001115 	stw	zero,68(r16)
    606c:	8009883a 	mov	r4,r16
    6070:	000b883a 	mov	r5,zero
    6074:	0008f500 	call	8f50 <_Balloc>
    6078:	01bfffc4 	movi	r6,-1
    607c:	d8800715 	stw	r2,28(sp)
    6080:	80801015 	stw	r2,64(r16)
    6084:	00800044 	movi	r2,1
    6088:	d9800615 	stw	r6,24(sp)
    608c:	d8800b15 	stw	r2,44(sp)
    6090:	d8002215 	stw	zero,136(sp)
    6094:	d9800d15 	stw	r6,52(sp)
    6098:	d8000315 	stw	zero,12(sp)
    609c:	d8800117 	ldw	r2,4(sp)
    60a0:	10008e16 	blt	r2,zero,62dc <_dtoa_r+0x9b4>
    60a4:	d9000517 	ldw	r4,20(sp)
    60a8:	00c00384 	movi	r3,14
    60ac:	19008b16 	blt	r3,r4,62dc <_dtoa_r+0x9b4>
    60b0:	200490fa 	slli	r2,r4,3
    60b4:	00c00074 	movhi	r3,1
    60b8:	d9802217 	ldw	r6,136(sp)
    60bc:	18ca5104 	addi	r3,r3,10564
    60c0:	1885883a 	add	r2,r3,r2
    60c4:	14400017 	ldw	r17,0(r2)
    60c8:	15000117 	ldw	r20,4(r2)
    60cc:	3001c716 	blt	r6,zero,67ec <_dtoa_r+0xec4>
    60d0:	880d883a 	mov	r6,r17
    60d4:	a00f883a 	mov	r7,r20
    60d8:	9009883a 	mov	r4,r18
    60dc:	980b883a 	mov	r5,r19
    60e0:	000da080 	call	da08 <__divdf3>
    60e4:	180b883a 	mov	r5,r3
    60e8:	1009883a 	mov	r4,r2
    60ec:	000f50c0 	call	f50c <__fixdfsi>
    60f0:	1009883a 	mov	r4,r2
    60f4:	102d883a 	mov	r22,r2
    60f8:	000f5940 	call	f594 <__floatsidf>
    60fc:	1009883a 	mov	r4,r2
    6100:	180b883a 	mov	r5,r3
    6104:	880d883a 	mov	r6,r17
    6108:	a00f883a 	mov	r7,r20
    610c:	000e5180 	call	e518 <__muldf3>
    6110:	9009883a 	mov	r4,r18
    6114:	980b883a 	mov	r5,r19
    6118:	100d883a 	mov	r6,r2
    611c:	180f883a 	mov	r7,r3
    6120:	000ec3c0 	call	ec3c <__subdf3>
    6124:	d9000717 	ldw	r4,28(sp)
    6128:	d9800617 	ldw	r6,24(sp)
    612c:	180b883a 	mov	r5,r3
    6130:	b0c00c04 	addi	r3,r22,48
    6134:	20c00005 	stb	r3,0(r4)
    6138:	25c00044 	addi	r23,r4,1
    613c:	01000044 	movi	r4,1
    6140:	1011883a 	mov	r8,r2
    6144:	2807883a 	mov	r3,r5
    6148:	31003d26 	beq	r6,r4,6240 <_dtoa_r+0x918>
    614c:	000d883a 	mov	r6,zero
    6150:	01d00934 	movhi	r7,16420
    6154:	1009883a 	mov	r4,r2
    6158:	000e5180 	call	e518 <__muldf3>
    615c:	1009883a 	mov	r4,r2
    6160:	180b883a 	mov	r5,r3
    6164:	000d883a 	mov	r6,zero
    6168:	000f883a 	mov	r7,zero
    616c:	1027883a 	mov	r19,r2
    6170:	182b883a 	mov	r21,r3
    6174:	000e2d40 	call	e2d4 <__eqdf2>
    6178:	103f9926 	beq	r2,zero,5fe0 <__alt_mem_sram+0xf7e05fe0>
    617c:	d8c00617 	ldw	r3,24(sp)
    6180:	d9000717 	ldw	r4,28(sp)
    6184:	b825883a 	mov	r18,r23
    6188:	18bfffc4 	addi	r2,r3,-1
    618c:	20ad883a 	add	r22,r4,r2
    6190:	dc000315 	stw	r16,12(sp)
    6194:	00000a06 	br	61c0 <_dtoa_r+0x898>
    6198:	000e5180 	call	e518 <__muldf3>
    619c:	1009883a 	mov	r4,r2
    61a0:	180b883a 	mov	r5,r3
    61a4:	000d883a 	mov	r6,zero
    61a8:	000f883a 	mov	r7,zero
    61ac:	1027883a 	mov	r19,r2
    61b0:	182b883a 	mov	r21,r3
    61b4:	b825883a 	mov	r18,r23
    61b8:	000e2d40 	call	e2d4 <__eqdf2>
    61bc:	10022626 	beq	r2,zero,6a58 <_dtoa_r+0x1130>
    61c0:	880d883a 	mov	r6,r17
    61c4:	a00f883a 	mov	r7,r20
    61c8:	9809883a 	mov	r4,r19
    61cc:	a80b883a 	mov	r5,r21
    61d0:	000da080 	call	da08 <__divdf3>
    61d4:	180b883a 	mov	r5,r3
    61d8:	1009883a 	mov	r4,r2
    61dc:	000f50c0 	call	f50c <__fixdfsi>
    61e0:	1009883a 	mov	r4,r2
    61e4:	1021883a 	mov	r16,r2
    61e8:	000f5940 	call	f594 <__floatsidf>
    61ec:	1009883a 	mov	r4,r2
    61f0:	180b883a 	mov	r5,r3
    61f4:	880d883a 	mov	r6,r17
    61f8:	a00f883a 	mov	r7,r20
    61fc:	000e5180 	call	e518 <__muldf3>
    6200:	9809883a 	mov	r4,r19
    6204:	a80b883a 	mov	r5,r21
    6208:	100d883a 	mov	r6,r2
    620c:	180f883a 	mov	r7,r3
    6210:	000ec3c0 	call	ec3c <__subdf3>
    6214:	82000c04 	addi	r8,r16,48
    6218:	92000005 	stb	r8,0(r18)
    621c:	1009883a 	mov	r4,r2
    6220:	180b883a 	mov	r5,r3
    6224:	000d883a 	mov	r6,zero
    6228:	01d00934 	movhi	r7,16420
    622c:	1011883a 	mov	r8,r2
    6230:	bdc00044 	addi	r23,r23,1
    6234:	95bfd81e 	bne	r18,r22,6198 <__alt_mem_sram+0xf7e06198>
    6238:	802d883a 	mov	r22,r16
    623c:	dc000317 	ldw	r16,12(sp)
    6240:	4009883a 	mov	r4,r8
    6244:	180b883a 	mov	r5,r3
    6248:	400d883a 	mov	r6,r8
    624c:	180f883a 	mov	r7,r3
    6250:	000d16c0 	call	d16c <__adddf3>
    6254:	8809883a 	mov	r4,r17
    6258:	a00b883a 	mov	r5,r20
    625c:	100d883a 	mov	r6,r2
    6260:	180f883a 	mov	r7,r3
    6264:	1027883a 	mov	r19,r2
    6268:	1825883a 	mov	r18,r3
    626c:	000e4380 	call	e438 <__ledf2>
    6270:	10000816 	blt	r2,zero,6294 <_dtoa_r+0x96c>
    6274:	8809883a 	mov	r4,r17
    6278:	a00b883a 	mov	r5,r20
    627c:	980d883a 	mov	r6,r19
    6280:	900f883a 	mov	r7,r18
    6284:	000e2d40 	call	e2d4 <__eqdf2>
    6288:	103f551e 	bne	r2,zero,5fe0 <__alt_mem_sram+0xf7e05fe0>
    628c:	b580004c 	andi	r22,r22,1
    6290:	b03f5326 	beq	r22,zero,5fe0 <__alt_mem_sram+0xf7e05fe0>
    6294:	bd7fffc3 	ldbu	r21,-1(r23)
    6298:	b8bfffc4 	addi	r2,r23,-1
    629c:	1007883a 	mov	r3,r2
    62a0:	01400e44 	movi	r5,57
    62a4:	d9800717 	ldw	r6,28(sp)
    62a8:	00000506 	br	62c0 <_dtoa_r+0x998>
    62ac:	18ffffc4 	addi	r3,r3,-1
    62b0:	30825e26 	beq	r6,r2,6c2c <_dtoa_r+0x1304>
    62b4:	1d400003 	ldbu	r21,0(r3)
    62b8:	102f883a 	mov	r23,r2
    62bc:	10bfffc4 	addi	r2,r2,-1
    62c0:	a9003fcc 	andi	r4,r21,255
    62c4:	2100201c 	xori	r4,r4,128
    62c8:	213fe004 	addi	r4,r4,-128
    62cc:	217ff726 	beq	r4,r5,62ac <__alt_mem_sram+0xf7e062ac>
    62d0:	aa000044 	addi	r8,r21,1
    62d4:	12000005 	stb	r8,0(r2)
    62d8:	003f4106 	br	5fe0 <__alt_mem_sram+0xf7e05fe0>
    62dc:	d8c00b17 	ldw	r3,44(sp)
    62e0:	18006726 	beq	r3,zero,6480 <_dtoa_r+0xb58>
    62e4:	d9000317 	ldw	r4,12(sp)
    62e8:	00c00044 	movi	r3,1
    62ec:	19016a0e 	bge	r3,r4,6898 <_dtoa_r+0xf70>
    62f0:	d8800617 	ldw	r2,24(sp)
    62f4:	d8c00917 	ldw	r3,36(sp)
    62f8:	157fffc4 	addi	r21,r2,-1
    62fc:	1d420716 	blt	r3,r21,6b1c <_dtoa_r+0x11f4>
    6300:	1d6bc83a 	sub	r21,r3,r21
    6304:	d8800617 	ldw	r2,24(sp)
    6308:	1002c716 	blt	r2,zero,6e28 <_dtoa_r+0x1500>
    630c:	dd000817 	ldw	r20,32(sp)
    6310:	d8800617 	ldw	r2,24(sp)
    6314:	d9800817 	ldw	r6,32(sp)
    6318:	8009883a 	mov	r4,r16
    631c:	01400044 	movi	r5,1
    6320:	308d883a 	add	r6,r6,r2
    6324:	d9800815 	stw	r6,32(sp)
    6328:	b0ad883a 	add	r22,r22,r2
    632c:	00093500 	call	9350 <__i2b>
    6330:	1023883a 	mov	r17,r2
    6334:	a0000826 	beq	r20,zero,6358 <_dtoa_r+0xa30>
    6338:	0580070e 	bge	zero,r22,6358 <_dtoa_r+0xa30>
    633c:	b005883a 	mov	r2,r22
    6340:	a5812016 	blt	r20,r22,67c4 <_dtoa_r+0xe9c>
    6344:	d8c00817 	ldw	r3,32(sp)
    6348:	a0a9c83a 	sub	r20,r20,r2
    634c:	b0adc83a 	sub	r22,r22,r2
    6350:	1887c83a 	sub	r3,r3,r2
    6354:	d8c00815 	stw	r3,32(sp)
    6358:	d9000917 	ldw	r4,36(sp)
    635c:	0100140e 	bge	zero,r4,63b0 <_dtoa_r+0xa88>
    6360:	d9800b17 	ldw	r6,44(sp)
    6364:	3001e526 	beq	r6,zero,6afc <_dtoa_r+0x11d4>
    6368:	05400e0e 	bge	zero,r21,63a4 <_dtoa_r+0xa7c>
    636c:	880b883a 	mov	r5,r17
    6370:	8009883a 	mov	r4,r16
    6374:	a80d883a 	mov	r6,r21
    6378:	00095880 	call	9588 <__pow5mult>
    637c:	e00d883a 	mov	r6,fp
    6380:	8009883a 	mov	r4,r16
    6384:	100b883a 	mov	r5,r2
    6388:	1023883a 	mov	r17,r2
    638c:	000938c0 	call	938c <__multiply>
    6390:	102f883a 	mov	r23,r2
    6394:	e00b883a 	mov	r5,fp
    6398:	8009883a 	mov	r4,r16
    639c:	0008ff80 	call	8ff8 <_Bfree>
    63a0:	b839883a 	mov	fp,r23
    63a4:	d8800917 	ldw	r2,36(sp)
    63a8:	154dc83a 	sub	r6,r2,r21
    63ac:	3001281e 	bne	r6,zero,6850 <_dtoa_r+0xf28>
    63b0:	05c00044 	movi	r23,1
    63b4:	8009883a 	mov	r4,r16
    63b8:	b80b883a 	mov	r5,r23
    63bc:	00093500 	call	9350 <__i2b>
    63c0:	d8c00a17 	ldw	r3,40(sp)
    63c4:	102b883a 	mov	r21,r2
    63c8:	00c0310e 	bge	zero,r3,6490 <_dtoa_r+0xb68>
    63cc:	8009883a 	mov	r4,r16
    63d0:	100b883a 	mov	r5,r2
    63d4:	180d883a 	mov	r6,r3
    63d8:	00095880 	call	9588 <__pow5mult>
    63dc:	d9000317 	ldw	r4,12(sp)
    63e0:	102b883a 	mov	r21,r2
    63e4:	b9011f0e 	bge	r23,r4,6864 <_dtoa_r+0xf3c>
    63e8:	0027883a 	mov	r19,zero
    63ec:	a8800417 	ldw	r2,16(r21)
    63f0:	10800104 	addi	r2,r2,4
    63f4:	1085883a 	add	r2,r2,r2
    63f8:	1085883a 	add	r2,r2,r2
    63fc:	a885883a 	add	r2,r21,r2
    6400:	11000017 	ldw	r4,0(r2)
    6404:	00092380 	call	9238 <__hi0bits>
    6408:	00c00804 	movi	r3,32
    640c:	1885c83a 	sub	r2,r3,r2
    6410:	00002506 	br	64a8 <_dtoa_r+0xb80>
    6414:	01800044 	movi	r6,1
    6418:	d9800c15 	stw	r6,48(sp)
    641c:	003dec06 	br	5bd0 <__alt_mem_sram+0xf7e05bd0>
    6420:	d8c00817 	ldw	r3,32(sp)
    6424:	d9000517 	ldw	r4,20(sp)
    6428:	d8000a15 	stw	zero,40(sp)
    642c:	1907c83a 	sub	r3,r3,r4
    6430:	010dc83a 	sub	r6,zero,r4
    6434:	d8c00815 	stw	r3,32(sp)
    6438:	d9800915 	stw	r6,36(sp)
    643c:	003ded06 	br	5bf4 <__alt_mem_sram+0xf7e05bf4>
    6440:	05adc83a 	sub	r22,zero,r22
    6444:	dd800815 	stw	r22,32(sp)
    6448:	002d883a 	mov	r22,zero
    644c:	003de406 	br	5be0 <__alt_mem_sram+0xf7e05be0>
    6450:	d9000517 	ldw	r4,20(sp)
    6454:	000f5940 	call	f594 <__floatsidf>
    6458:	1009883a 	mov	r4,r2
    645c:	180b883a 	mov	r5,r3
    6460:	b00d883a 	mov	r6,r22
    6464:	a80f883a 	mov	r7,r21
    6468:	000e2d40 	call	e2d4 <__eqdf2>
    646c:	103dc726 	beq	r2,zero,5b8c <__alt_mem_sram+0xf7e05b8c>
    6470:	d8800517 	ldw	r2,20(sp)
    6474:	10bfffc4 	addi	r2,r2,-1
    6478:	d8800515 	stw	r2,20(sp)
    647c:	003dc306 	br	5b8c <__alt_mem_sram+0xf7e05b8c>
    6480:	dd400917 	ldw	r21,36(sp)
    6484:	dd000817 	ldw	r20,32(sp)
    6488:	0023883a 	mov	r17,zero
    648c:	003fa906 	br	6334 <__alt_mem_sram+0xf7e06334>
    6490:	d9800317 	ldw	r6,12(sp)
    6494:	b981670e 	bge	r23,r6,6a34 <_dtoa_r+0x110c>
    6498:	0027883a 	mov	r19,zero
    649c:	d8c00a17 	ldw	r3,40(sp)
    64a0:	183fd21e 	bne	r3,zero,63ec <__alt_mem_sram+0xf7e063ec>
    64a4:	00800044 	movi	r2,1
    64a8:	1585883a 	add	r2,r2,r22
    64ac:	108007cc 	andi	r2,r2,31
    64b0:	10005f26 	beq	r2,zero,6630 <_dtoa_r+0xd08>
    64b4:	00c00804 	movi	r3,32
    64b8:	1887c83a 	sub	r3,r3,r2
    64bc:	01000104 	movi	r4,4
    64c0:	20c2dd0e 	bge	r4,r3,7038 <_dtoa_r+0x1710>
    64c4:	d9000817 	ldw	r4,32(sp)
    64c8:	00c00704 	movi	r3,28
    64cc:	1885c83a 	sub	r2,r3,r2
    64d0:	2089883a 	add	r4,r4,r2
    64d4:	d9000815 	stw	r4,32(sp)
    64d8:	a0a9883a 	add	r20,r20,r2
    64dc:	b0ad883a 	add	r22,r22,r2
    64e0:	d8800817 	ldw	r2,32(sp)
    64e4:	0080050e 	bge	zero,r2,64fc <_dtoa_r+0xbd4>
    64e8:	e00b883a 	mov	r5,fp
    64ec:	8009883a 	mov	r4,r16
    64f0:	100d883a 	mov	r6,r2
    64f4:	00096c80 	call	96c8 <__lshift>
    64f8:	1039883a 	mov	fp,r2
    64fc:	0580050e 	bge	zero,r22,6514 <_dtoa_r+0xbec>
    6500:	a80b883a 	mov	r5,r21
    6504:	8009883a 	mov	r4,r16
    6508:	b00d883a 	mov	r6,r22
    650c:	00096c80 	call	96c8 <__lshift>
    6510:	102b883a 	mov	r21,r2
    6514:	d8c00c17 	ldw	r3,48(sp)
    6518:	1801161e 	bne	r3,zero,6974 <_dtoa_r+0x104c>
    651c:	d8c00617 	ldw	r3,24(sp)
    6520:	00c12d0e 	bge	zero,r3,69d8 <_dtoa_r+0x10b0>
    6524:	d8c00b17 	ldw	r3,44(sp)
    6528:	1800571e 	bne	r3,zero,6688 <_dtoa_r+0xd60>
    652c:	dc800717 	ldw	r18,28(sp)
    6530:	dcc00617 	ldw	r19,24(sp)
    6534:	9029883a 	mov	r20,r18
    6538:	00000206 	br	6544 <_dtoa_r+0xc1c>
    653c:	00090200 	call	9020 <__multadd>
    6540:	1039883a 	mov	fp,r2
    6544:	e009883a 	mov	r4,fp
    6548:	a80b883a 	mov	r5,r21
    654c:	00057280 	call	5728 <quorem>
    6550:	10800c04 	addi	r2,r2,48
    6554:	90800005 	stb	r2,0(r18)
    6558:	94800044 	addi	r18,r18,1
    655c:	9507c83a 	sub	r3,r18,r20
    6560:	8009883a 	mov	r4,r16
    6564:	e00b883a 	mov	r5,fp
    6568:	01800284 	movi	r6,10
    656c:	000f883a 	mov	r7,zero
    6570:	1cfff216 	blt	r3,r19,653c <__alt_mem_sram+0xf7e0653c>
    6574:	1011883a 	mov	r8,r2
    6578:	d8800617 	ldw	r2,24(sp)
    657c:	00822e0e 	bge	zero,r2,6e38 <_dtoa_r+0x1510>
    6580:	d9000717 	ldw	r4,28(sp)
    6584:	0025883a 	mov	r18,zero
    6588:	20af883a 	add	r23,r4,r2
    658c:	e00b883a 	mov	r5,fp
    6590:	01800044 	movi	r6,1
    6594:	8009883a 	mov	r4,r16
    6598:	da001715 	stw	r8,92(sp)
    659c:	00096c80 	call	96c8 <__lshift>
    65a0:	1009883a 	mov	r4,r2
    65a4:	a80b883a 	mov	r5,r21
    65a8:	1039883a 	mov	fp,r2
    65ac:	00098100 	call	9810 <__mcmp>
    65b0:	da001717 	ldw	r8,92(sp)
    65b4:	00816e0e 	bge	zero,r2,6b70 <_dtoa_r+0x1248>
    65b8:	b93fffc3 	ldbu	r4,-1(r23)
    65bc:	b8bfffc4 	addi	r2,r23,-1
    65c0:	1007883a 	mov	r3,r2
    65c4:	01800e44 	movi	r6,57
    65c8:	d9c00717 	ldw	r7,28(sp)
    65cc:	00000506 	br	65e4 <_dtoa_r+0xcbc>
    65d0:	18ffffc4 	addi	r3,r3,-1
    65d4:	38811926 	beq	r7,r2,6a3c <_dtoa_r+0x1114>
    65d8:	19000003 	ldbu	r4,0(r3)
    65dc:	102f883a 	mov	r23,r2
    65e0:	10bfffc4 	addi	r2,r2,-1
    65e4:	21403fcc 	andi	r5,r4,255
    65e8:	2940201c 	xori	r5,r5,128
    65ec:	297fe004 	addi	r5,r5,-128
    65f0:	29bff726 	beq	r5,r6,65d0 <__alt_mem_sram+0xf7e065d0>
    65f4:	21000044 	addi	r4,r4,1
    65f8:	11000005 	stb	r4,0(r2)
    65fc:	8009883a 	mov	r4,r16
    6600:	a80b883a 	mov	r5,r21
    6604:	0008ff80 	call	8ff8 <_Bfree>
    6608:	883e7526 	beq	r17,zero,5fe0 <__alt_mem_sram+0xf7e05fe0>
    660c:	90000426 	beq	r18,zero,6620 <_dtoa_r+0xcf8>
    6610:	94400326 	beq	r18,r17,6620 <_dtoa_r+0xcf8>
    6614:	8009883a 	mov	r4,r16
    6618:	900b883a 	mov	r5,r18
    661c:	0008ff80 	call	8ff8 <_Bfree>
    6620:	8009883a 	mov	r4,r16
    6624:	880b883a 	mov	r5,r17
    6628:	0008ff80 	call	8ff8 <_Bfree>
    662c:	003e6c06 	br	5fe0 <__alt_mem_sram+0xf7e05fe0>
    6630:	00800704 	movi	r2,28
    6634:	d9800817 	ldw	r6,32(sp)
    6638:	a0a9883a 	add	r20,r20,r2
    663c:	b0ad883a 	add	r22,r22,r2
    6640:	308d883a 	add	r6,r6,r2
    6644:	d9800815 	stw	r6,32(sp)
    6648:	003fa506 	br	64e0 <__alt_mem_sram+0xf7e064e0>
    664c:	013efb84 	movi	r4,-1042
    6650:	246bc83a 	sub	r21,r4,r17
    6654:	9548983a 	sll	r4,r18,r21
    6658:	003d1806 	br	5abc <__alt_mem_sram+0xf7e05abc>
    665c:	d8000c15 	stw	zero,48(sp)
    6660:	003d5b06 	br	5bd0 <__alt_mem_sram+0xf7e05bd0>
    6664:	880b883a 	mov	r5,r17
    6668:	8009883a 	mov	r4,r16
    666c:	01800284 	movi	r6,10
    6670:	000f883a 	mov	r7,zero
    6674:	00090200 	call	9020 <__multadd>
    6678:	1023883a 	mov	r17,r2
    667c:	d8800d17 	ldw	r2,52(sp)
    6680:	0082550e 	bge	zero,r2,6fd8 <_dtoa_r+0x16b0>
    6684:	d8800615 	stw	r2,24(sp)
    6688:	0500050e 	bge	zero,r20,66a0 <_dtoa_r+0xd78>
    668c:	880b883a 	mov	r5,r17
    6690:	8009883a 	mov	r4,r16
    6694:	a00d883a 	mov	r6,r20
    6698:	00096c80 	call	96c8 <__lshift>
    669c:	1023883a 	mov	r17,r2
    66a0:	98016a1e 	bne	r19,zero,6c4c <_dtoa_r+0x1324>
    66a4:	8829883a 	mov	r20,r17
    66a8:	d9000617 	ldw	r4,24(sp)
    66ac:	dcc00717 	ldw	r19,28(sp)
    66b0:	9480004c 	andi	r18,r18,1
    66b4:	20bfffc4 	addi	r2,r4,-1
    66b8:	9885883a 	add	r2,r19,r2
    66bc:	d8800415 	stw	r2,16(sp)
    66c0:	dc800615 	stw	r18,24(sp)
    66c4:	e009883a 	mov	r4,fp
    66c8:	a80b883a 	mov	r5,r21
    66cc:	00057280 	call	5728 <quorem>
    66d0:	e009883a 	mov	r4,fp
    66d4:	880b883a 	mov	r5,r17
    66d8:	102f883a 	mov	r23,r2
    66dc:	00098100 	call	9810 <__mcmp>
    66e0:	8009883a 	mov	r4,r16
    66e4:	a80b883a 	mov	r5,r21
    66e8:	a00d883a 	mov	r6,r20
    66ec:	102d883a 	mov	r22,r2
    66f0:	00098700 	call	9870 <__mdiff>
    66f4:	1007883a 	mov	r3,r2
    66f8:	10800317 	ldw	r2,12(r2)
    66fc:	bc800c04 	addi	r18,r23,48
    6700:	1000971e 	bne	r2,zero,6960 <_dtoa_r+0x1038>
    6704:	180b883a 	mov	r5,r3
    6708:	e009883a 	mov	r4,fp
    670c:	d8c01515 	stw	r3,84(sp)
    6710:	00098100 	call	9810 <__mcmp>
    6714:	d8c01517 	ldw	r3,84(sp)
    6718:	8009883a 	mov	r4,r16
    671c:	d8801515 	stw	r2,84(sp)
    6720:	180b883a 	mov	r5,r3
    6724:	0008ff80 	call	8ff8 <_Bfree>
    6728:	d8801517 	ldw	r2,84(sp)
    672c:	1000041e 	bne	r2,zero,6740 <_dtoa_r+0xe18>
    6730:	d9800317 	ldw	r6,12(sp)
    6734:	3000021e 	bne	r6,zero,6740 <_dtoa_r+0xe18>
    6738:	d8c00617 	ldw	r3,24(sp)
    673c:	18007626 	beq	r3,zero,6918 <_dtoa_r+0xff0>
    6740:	b0005b16 	blt	r22,zero,68b0 <_dtoa_r+0xf88>
    6744:	b000041e 	bne	r22,zero,6758 <_dtoa_r+0xe30>
    6748:	d9000317 	ldw	r4,12(sp)
    674c:	2000021e 	bne	r4,zero,6758 <_dtoa_r+0xe30>
    6750:	d8c00617 	ldw	r3,24(sp)
    6754:	18005626 	beq	r3,zero,68b0 <_dtoa_r+0xf88>
    6758:	00814d16 	blt	zero,r2,6c90 <_dtoa_r+0x1368>
    675c:	d8c00417 	ldw	r3,16(sp)
    6760:	9d800044 	addi	r22,r19,1
    6764:	9c800005 	stb	r18,0(r19)
    6768:	b02f883a 	mov	r23,r22
    676c:	98c14c26 	beq	r19,r3,6ca0 <_dtoa_r+0x1378>
    6770:	e00b883a 	mov	r5,fp
    6774:	8009883a 	mov	r4,r16
    6778:	01800284 	movi	r6,10
    677c:	000f883a 	mov	r7,zero
    6780:	00090200 	call	9020 <__multadd>
    6784:	1039883a 	mov	fp,r2
    6788:	8d006d26 	beq	r17,r20,6940 <_dtoa_r+0x1018>
    678c:	880b883a 	mov	r5,r17
    6790:	01800284 	movi	r6,10
    6794:	000f883a 	mov	r7,zero
    6798:	8009883a 	mov	r4,r16
    679c:	00090200 	call	9020 <__multadd>
    67a0:	a00b883a 	mov	r5,r20
    67a4:	8009883a 	mov	r4,r16
    67a8:	01800284 	movi	r6,10
    67ac:	000f883a 	mov	r7,zero
    67b0:	1023883a 	mov	r17,r2
    67b4:	00090200 	call	9020 <__multadd>
    67b8:	1029883a 	mov	r20,r2
    67bc:	b027883a 	mov	r19,r22
    67c0:	003fc006 	br	66c4 <__alt_mem_sram+0xf7e066c4>
    67c4:	a005883a 	mov	r2,r20
    67c8:	003ede06 	br	6344 <__alt_mem_sram+0xf7e06344>
    67cc:	01000044 	movi	r4,1
    67d0:	d9000b15 	stw	r4,44(sp)
    67d4:	d9802217 	ldw	r6,136(sp)
    67d8:	0180dc0e 	bge	zero,r6,6b4c <_dtoa_r+0x1224>
    67dc:	3023883a 	mov	r17,r6
    67e0:	d9800d15 	stw	r6,52(sp)
    67e4:	d9800615 	stw	r6,24(sp)
    67e8:	003d1e06 	br	5c64 <__alt_mem_sram+0xf7e05c64>
    67ec:	d8800617 	ldw	r2,24(sp)
    67f0:	00be3716 	blt	zero,r2,60d0 <__alt_mem_sram+0xf7e060d0>
    67f4:	1000be1e 	bne	r2,zero,6af0 <_dtoa_r+0x11c8>
    67f8:	8809883a 	mov	r4,r17
    67fc:	a00b883a 	mov	r5,r20
    6800:	000d883a 	mov	r6,zero
    6804:	01d00534 	movhi	r7,16404
    6808:	000e5180 	call	e518 <__muldf3>
    680c:	1009883a 	mov	r4,r2
    6810:	180b883a 	mov	r5,r3
    6814:	900d883a 	mov	r6,r18
    6818:	980f883a 	mov	r7,r19
    681c:	000e3580 	call	e358 <__gedf2>
    6820:	002b883a 	mov	r21,zero
    6824:	0023883a 	mov	r17,zero
    6828:	10007a16 	blt	r2,zero,6a14 <_dtoa_r+0x10ec>
    682c:	d9002217 	ldw	r4,136(sp)
    6830:	ddc00717 	ldw	r23,28(sp)
    6834:	0108303a 	nor	r4,zero,r4
    6838:	d9000515 	stw	r4,20(sp)
    683c:	8009883a 	mov	r4,r16
    6840:	a80b883a 	mov	r5,r21
    6844:	0008ff80 	call	8ff8 <_Bfree>
    6848:	883f751e 	bne	r17,zero,6620 <__alt_mem_sram+0xf7e06620>
    684c:	003de406 	br	5fe0 <__alt_mem_sram+0xf7e05fe0>
    6850:	e00b883a 	mov	r5,fp
    6854:	8009883a 	mov	r4,r16
    6858:	00095880 	call	9588 <__pow5mult>
    685c:	1039883a 	mov	fp,r2
    6860:	003ed306 	br	63b0 <__alt_mem_sram+0xf7e063b0>
    6864:	903ee01e 	bne	r18,zero,63e8 <__alt_mem_sram+0xf7e063e8>
    6868:	00800434 	movhi	r2,16
    686c:	10bfffc4 	addi	r2,r2,-1
    6870:	9884703a 	and	r2,r19,r2
    6874:	103f081e 	bne	r2,zero,6498 <__alt_mem_sram+0xf7e06498>
    6878:	9cdffc2c 	andhi	r19,r19,32752
    687c:	983f0626 	beq	r19,zero,6498 <__alt_mem_sram+0xf7e06498>
    6880:	d8800817 	ldw	r2,32(sp)
    6884:	b5800044 	addi	r22,r22,1
    6888:	04c00044 	movi	r19,1
    688c:	10800044 	addi	r2,r2,1
    6890:	d8800815 	stw	r2,32(sp)
    6894:	003f0106 	br	649c <__alt_mem_sram+0xf7e0649c>
    6898:	d9800f17 	ldw	r6,60(sp)
    689c:	30016826 	beq	r6,zero,6e40 <_dtoa_r+0x1518>
    68a0:	10810cc4 	addi	r2,r2,1075
    68a4:	dd400917 	ldw	r21,36(sp)
    68a8:	dd000817 	ldw	r20,32(sp)
    68ac:	003e9906 	br	6314 <__alt_mem_sram+0xf7e06314>
    68b0:	9011883a 	mov	r8,r18
    68b4:	4007883a 	mov	r3,r8
    68b8:	e02d883a 	mov	r22,fp
    68bc:	0080100e 	bge	zero,r2,6900 <_dtoa_r+0xfd8>
    68c0:	01800044 	movi	r6,1
    68c4:	8009883a 	mov	r4,r16
    68c8:	e00b883a 	mov	r5,fp
    68cc:	da001515 	stw	r8,84(sp)
    68d0:	da001715 	stw	r8,92(sp)
    68d4:	00096c80 	call	96c8 <__lshift>
    68d8:	1009883a 	mov	r4,r2
    68dc:	a80b883a 	mov	r5,r21
    68e0:	102d883a 	mov	r22,r2
    68e4:	00098100 	call	9810 <__mcmp>
    68e8:	d8c01517 	ldw	r3,84(sp)
    68ec:	da001717 	ldw	r8,92(sp)
    68f0:	0081a50e 	bge	zero,r2,6f88 <_dtoa_r+0x1660>
    68f4:	00800e44 	movi	r2,57
    68f8:	40817b26 	beq	r8,r2,6ee8 <_dtoa_r+0x15c0>
    68fc:	40c00044 	addi	r3,r8,1
    6900:	8825883a 	mov	r18,r17
    6904:	9dc00044 	addi	r23,r19,1
    6908:	98c00005 	stb	r3,0(r19)
    690c:	a023883a 	mov	r17,r20
    6910:	b039883a 	mov	fp,r22
    6914:	003f3906 	br	65fc <__alt_mem_sram+0xf7e065fc>
    6918:	00800e44 	movi	r2,57
    691c:	9011883a 	mov	r8,r18
    6920:	90817226 	beq	r18,r2,6eec <_dtoa_r+0x15c4>
    6924:	0580010e 	bge	zero,r22,692c <_dtoa_r+0x1004>
    6928:	ba000c44 	addi	r8,r23,49
    692c:	8825883a 	mov	r18,r17
    6930:	9dc00044 	addi	r23,r19,1
    6934:	9a000005 	stb	r8,0(r19)
    6938:	a023883a 	mov	r17,r20
    693c:	003f2f06 	br	65fc <__alt_mem_sram+0xf7e065fc>
    6940:	880b883a 	mov	r5,r17
    6944:	8009883a 	mov	r4,r16
    6948:	01800284 	movi	r6,10
    694c:	000f883a 	mov	r7,zero
    6950:	00090200 	call	9020 <__multadd>
    6954:	1023883a 	mov	r17,r2
    6958:	1029883a 	mov	r20,r2
    695c:	003f9706 	br	67bc <__alt_mem_sram+0xf7e067bc>
    6960:	8009883a 	mov	r4,r16
    6964:	180b883a 	mov	r5,r3
    6968:	0008ff80 	call	8ff8 <_Bfree>
    696c:	00800044 	movi	r2,1
    6970:	003f7306 	br	6740 <__alt_mem_sram+0xf7e06740>
    6974:	e009883a 	mov	r4,fp
    6978:	a80b883a 	mov	r5,r21
    697c:	00098100 	call	9810 <__mcmp>
    6980:	103ee60e 	bge	r2,zero,651c <__alt_mem_sram+0xf7e0651c>
    6984:	8009883a 	mov	r4,r16
    6988:	e00b883a 	mov	r5,fp
    698c:	01800284 	movi	r6,10
    6990:	000f883a 	mov	r7,zero
    6994:	00090200 	call	9020 <__multadd>
    6998:	d9000517 	ldw	r4,20(sp)
    699c:	d9800b17 	ldw	r6,44(sp)
    69a0:	1039883a 	mov	fp,r2
    69a4:	213fffc4 	addi	r4,r4,-1
    69a8:	d9000515 	stw	r4,20(sp)
    69ac:	303f2d1e 	bne	r6,zero,6664 <__alt_mem_sram+0xf7e06664>
    69b0:	d9000d17 	ldw	r4,52(sp)
    69b4:	0101780e 	bge	zero,r4,6f98 <_dtoa_r+0x1670>
    69b8:	d9000615 	stw	r4,24(sp)
    69bc:	003edb06 	br	652c <__alt_mem_sram+0xf7e0652c>
    69c0:	00800084 	movi	r2,2
    69c4:	30818e1e 	bne	r6,r2,7000 <_dtoa_r+0x16d8>
    69c8:	d8000b15 	stw	zero,44(sp)
    69cc:	003f8106 	br	67d4 <__alt_mem_sram+0xf7e067d4>
    69d0:	d8800717 	ldw	r2,28(sp)
    69d4:	003c0306 	br	59e4 <__alt_mem_sram+0xf7e059e4>
    69d8:	d9000317 	ldw	r4,12(sp)
    69dc:	00800084 	movi	r2,2
    69e0:	113ed00e 	bge	r2,r4,6524 <__alt_mem_sram+0xf7e06524>
    69e4:	d8c00617 	ldw	r3,24(sp)
    69e8:	183f901e 	bne	r3,zero,682c <__alt_mem_sram+0xf7e0682c>
    69ec:	a80b883a 	mov	r5,r21
    69f0:	8009883a 	mov	r4,r16
    69f4:	01800144 	movi	r6,5
    69f8:	000f883a 	mov	r7,zero
    69fc:	00090200 	call	9020 <__multadd>
    6a00:	e009883a 	mov	r4,fp
    6a04:	100b883a 	mov	r5,r2
    6a08:	102b883a 	mov	r21,r2
    6a0c:	00098100 	call	9810 <__mcmp>
    6a10:	00bf860e 	bge	zero,r2,682c <__alt_mem_sram+0xf7e0682c>
    6a14:	d9800717 	ldw	r6,28(sp)
    6a18:	00800c44 	movi	r2,49
    6a1c:	30800005 	stb	r2,0(r6)
    6a20:	d8800517 	ldw	r2,20(sp)
    6a24:	35c00044 	addi	r23,r6,1
    6a28:	10800044 	addi	r2,r2,1
    6a2c:	d8800515 	stw	r2,20(sp)
    6a30:	003f8206 	br	683c <__alt_mem_sram+0xf7e0683c>
    6a34:	903e981e 	bne	r18,zero,6498 <__alt_mem_sram+0xf7e06498>
    6a38:	003f8b06 	br	6868 <__alt_mem_sram+0xf7e06868>
    6a3c:	d9800517 	ldw	r6,20(sp)
    6a40:	d8c00717 	ldw	r3,28(sp)
    6a44:	00800c44 	movi	r2,49
    6a48:	31800044 	addi	r6,r6,1
    6a4c:	d9800515 	stw	r6,20(sp)
    6a50:	18800005 	stb	r2,0(r3)
    6a54:	003ee906 	br	65fc <__alt_mem_sram+0xf7e065fc>
    6a58:	dc000317 	ldw	r16,12(sp)
    6a5c:	003d6006 	br	5fe0 <__alt_mem_sram+0xf7e05fe0>
    6a60:	8809883a 	mov	r4,r17
    6a64:	000f5940 	call	f594 <__floatsidf>
    6a68:	a009883a 	mov	r4,r20
    6a6c:	a80b883a 	mov	r5,r21
    6a70:	100d883a 	mov	r6,r2
    6a74:	180f883a 	mov	r7,r3
    6a78:	000e5180 	call	e518 <__muldf3>
    6a7c:	1009883a 	mov	r4,r2
    6a80:	180b883a 	mov	r5,r3
    6a84:	000d883a 	mov	r6,zero
    6a88:	01d00734 	movhi	r7,16412
    6a8c:	000d16c0 	call	d16c <__adddf3>
    6a90:	1023883a 	mov	r17,r2
    6a94:	00bf3034 	movhi	r2,64704
    6a98:	1885883a 	add	r2,r3,r2
    6a9c:	d8800e15 	stw	r2,56(sp)
    6aa0:	a009883a 	mov	r4,r20
    6aa4:	a80b883a 	mov	r5,r21
    6aa8:	000d883a 	mov	r6,zero
    6aac:	01d00534 	movhi	r7,16404
    6ab0:	000ec3c0 	call	ec3c <__subdf3>
    6ab4:	d9c00e17 	ldw	r7,56(sp)
    6ab8:	1009883a 	mov	r4,r2
    6abc:	180b883a 	mov	r5,r3
    6ac0:	880d883a 	mov	r6,r17
    6ac4:	102b883a 	mov	r21,r2
    6ac8:	1829883a 	mov	r20,r3
    6acc:	000e3580 	call	e358 <__gedf2>
    6ad0:	00807716 	blt	zero,r2,6cb0 <_dtoa_r+0x1388>
    6ad4:	d8800e17 	ldw	r2,56(sp)
    6ad8:	a809883a 	mov	r4,r21
    6adc:	a00b883a 	mov	r5,r20
    6ae0:	11e0003c 	xorhi	r7,r2,32768
    6ae4:	880d883a 	mov	r6,r17
    6ae8:	000e4380 	call	e438 <__ledf2>
    6aec:	103d6b0e 	bge	r2,zero,609c <__alt_mem_sram+0xf7e0609c>
    6af0:	002b883a 	mov	r21,zero
    6af4:	0023883a 	mov	r17,zero
    6af8:	003f4c06 	br	682c <__alt_mem_sram+0xf7e0682c>
    6afc:	d9800917 	ldw	r6,36(sp)
    6b00:	e00b883a 	mov	r5,fp
    6b04:	8009883a 	mov	r4,r16
    6b08:	00095880 	call	9588 <__pow5mult>
    6b0c:	1039883a 	mov	fp,r2
    6b10:	003e2706 	br	63b0 <__alt_mem_sram+0xf7e063b0>
    6b14:	d8000b15 	stw	zero,44(sp)
    6b18:	003c4906 	br	5c40 <__alt_mem_sram+0xf7e05c40>
    6b1c:	d9000917 	ldw	r4,36(sp)
    6b20:	d9800a17 	ldw	r6,40(sp)
    6b24:	dd400915 	stw	r21,36(sp)
    6b28:	a905c83a 	sub	r2,r21,r4
    6b2c:	308d883a 	add	r6,r6,r2
    6b30:	d9800a15 	stw	r6,40(sp)
    6b34:	002b883a 	mov	r21,zero
    6b38:	003df206 	br	6304 <__alt_mem_sram+0xf7e06304>
    6b3c:	dc800e15 	stw	r18,56(sp)
    6b40:	982b883a 	mov	r21,r19
    6b44:	04400084 	movi	r17,2
    6b48:	003c7406 	br	5d1c <__alt_mem_sram+0xf7e05d1c>
    6b4c:	04400044 	movi	r17,1
    6b50:	dc400d15 	stw	r17,52(sp)
    6b54:	dc400615 	stw	r17,24(sp)
    6b58:	dc402215 	stw	r17,136(sp)
    6b5c:	80001115 	stw	zero,68(r16)
    6b60:	000b883a 	mov	r5,zero
    6b64:	003c4a06 	br	5c90 <__alt_mem_sram+0xf7e05c90>
    6b68:	3023883a 	mov	r17,r6
    6b6c:	003ffb06 	br	6b5c <__alt_mem_sram+0xf7e06b5c>
    6b70:	1000021e 	bne	r2,zero,6b7c <_dtoa_r+0x1254>
    6b74:	4200004c 	andi	r8,r8,1
    6b78:	403e8f1e 	bne	r8,zero,65b8 <__alt_mem_sram+0xf7e065b8>
    6b7c:	01000c04 	movi	r4,48
    6b80:	00000106 	br	6b88 <_dtoa_r+0x1260>
    6b84:	102f883a 	mov	r23,r2
    6b88:	b8bfffc4 	addi	r2,r23,-1
    6b8c:	10c00007 	ldb	r3,0(r2)
    6b90:	193ffc26 	beq	r3,r4,6b84 <__alt_mem_sram+0xf7e06b84>
    6b94:	003e9906 	br	65fc <__alt_mem_sram+0xf7e065fc>
    6b98:	d9000517 	ldw	r4,20(sp)
    6b9c:	012fc83a 	sub	r23,zero,r4
    6ba0:	b800ad26 	beq	r23,zero,6e58 <_dtoa_r+0x1530>
    6ba4:	b88003cc 	andi	r2,r23,15
    6ba8:	100490fa 	slli	r2,r2,3
    6bac:	00c00074 	movhi	r3,1
    6bb0:	18ca5104 	addi	r3,r3,10564
    6bb4:	1885883a 	add	r2,r3,r2
    6bb8:	11800017 	ldw	r6,0(r2)
    6bbc:	11c00117 	ldw	r7,4(r2)
    6bc0:	b82fd13a 	srai	r23,r23,4
    6bc4:	9009883a 	mov	r4,r18
    6bc8:	980b883a 	mov	r5,r19
    6bcc:	000e5180 	call	e518 <__muldf3>
    6bd0:	1029883a 	mov	r20,r2
    6bd4:	182b883a 	mov	r21,r3
    6bd8:	b800f426 	beq	r23,zero,6fac <_dtoa_r+0x1684>
    6bdc:	02000074 	movhi	r8,1
    6be0:	420a4704 	addi	r8,r8,10524
    6be4:	8029883a 	mov	r20,r16
    6be8:	04400084 	movi	r17,2
    6bec:	4021883a 	mov	r16,r8
    6bf0:	b980004c 	andi	r6,r23,1
    6bf4:	1009883a 	mov	r4,r2
    6bf8:	b82fd07a 	srai	r23,r23,1
    6bfc:	180b883a 	mov	r5,r3
    6c00:	30000426 	beq	r6,zero,6c14 <_dtoa_r+0x12ec>
    6c04:	81800017 	ldw	r6,0(r16)
    6c08:	81c00117 	ldw	r7,4(r16)
    6c0c:	8c400044 	addi	r17,r17,1
    6c10:	000e5180 	call	e518 <__muldf3>
    6c14:	84000204 	addi	r16,r16,8
    6c18:	b83ff51e 	bne	r23,zero,6bf0 <__alt_mem_sram+0xf7e06bf0>
    6c1c:	a021883a 	mov	r16,r20
    6c20:	182b883a 	mov	r21,r3
    6c24:	1029883a 	mov	r20,r2
    6c28:	003c5506 	br	5d80 <__alt_mem_sram+0xf7e05d80>
    6c2c:	d9800517 	ldw	r6,20(sp)
    6c30:	d9000717 	ldw	r4,28(sp)
    6c34:	00c00c04 	movi	r3,48
    6c38:	31800044 	addi	r6,r6,1
    6c3c:	d9800515 	stw	r6,20(sp)
    6c40:	20c00005 	stb	r3,0(r4)
    6c44:	02000c44 	movi	r8,49
    6c48:	003da206 	br	62d4 <__alt_mem_sram+0xf7e062d4>
    6c4c:	89400117 	ldw	r5,4(r17)
    6c50:	8009883a 	mov	r4,r16
    6c54:	0008f500 	call	8f50 <_Balloc>
    6c58:	89800417 	ldw	r6,16(r17)
    6c5c:	11000304 	addi	r4,r2,12
    6c60:	89400304 	addi	r5,r17,12
    6c64:	31800084 	addi	r6,r6,2
    6c68:	318d883a 	add	r6,r6,r6
    6c6c:	318d883a 	add	r6,r6,r6
    6c70:	1027883a 	mov	r19,r2
    6c74:	0008b980 	call	8b98 <memcpy>
    6c78:	8009883a 	mov	r4,r16
    6c7c:	980b883a 	mov	r5,r19
    6c80:	01800044 	movi	r6,1
    6c84:	00096c80 	call	96c8 <__lshift>
    6c88:	1029883a 	mov	r20,r2
    6c8c:	003e8606 	br	66a8 <__alt_mem_sram+0xf7e066a8>
    6c90:	00800e44 	movi	r2,57
    6c94:	90809526 	beq	r18,r2,6eec <_dtoa_r+0x15c4>
    6c98:	92000044 	addi	r8,r18,1
    6c9c:	003f2306 	br	692c <__alt_mem_sram+0xf7e0692c>
    6ca0:	9011883a 	mov	r8,r18
    6ca4:	8825883a 	mov	r18,r17
    6ca8:	a023883a 	mov	r17,r20
    6cac:	003e3706 	br	658c <__alt_mem_sram+0xf7e0658c>
    6cb0:	002b883a 	mov	r21,zero
    6cb4:	0023883a 	mov	r17,zero
    6cb8:	003f5606 	br	6a14 <__alt_mem_sram+0xf7e06a14>
    6cbc:	51bfffc4 	addi	r6,r10,-1
    6cc0:	300490fa 	slli	r2,r6,3
    6cc4:	00c00074 	movhi	r3,1
    6cc8:	18ca5104 	addi	r3,r3,10564
    6ccc:	1885883a 	add	r2,r3,r2
    6cd0:	d9c00e17 	ldw	r7,56(sp)
    6cd4:	11000017 	ldw	r4,0(r2)
    6cd8:	11400117 	ldw	r5,4(r2)
    6cdc:	d8800717 	ldw	r2,28(sp)
    6ce0:	d9801015 	stw	r6,64(sp)
    6ce4:	880d883a 	mov	r6,r17
    6ce8:	da801615 	stw	r10,88(sp)
    6cec:	15c00044 	addi	r23,r2,1
    6cf0:	000e5180 	call	e518 <__muldf3>
    6cf4:	a80b883a 	mov	r5,r21
    6cf8:	a009883a 	mov	r4,r20
    6cfc:	d8c01115 	stw	r3,68(sp)
    6d00:	d8800e15 	stw	r2,56(sp)
    6d04:	000f50c0 	call	f50c <__fixdfsi>
    6d08:	1009883a 	mov	r4,r2
    6d0c:	1023883a 	mov	r17,r2
    6d10:	000f5940 	call	f594 <__floatsidf>
    6d14:	a009883a 	mov	r4,r20
    6d18:	a80b883a 	mov	r5,r21
    6d1c:	100d883a 	mov	r6,r2
    6d20:	180f883a 	mov	r7,r3
    6d24:	000ec3c0 	call	ec3c <__subdf3>
    6d28:	1813883a 	mov	r9,r3
    6d2c:	d8c00717 	ldw	r3,28(sp)
    6d30:	8c400c04 	addi	r17,r17,48
    6d34:	1011883a 	mov	r8,r2
    6d38:	1c400005 	stb	r17,0(r3)
    6d3c:	da801617 	ldw	r10,88(sp)
    6d40:	00800044 	movi	r2,1
    6d44:	50802326 	beq	r10,r2,6dd4 <_dtoa_r+0x14ac>
    6d48:	d8800717 	ldw	r2,28(sp)
    6d4c:	b82b883a 	mov	r21,r23
    6d50:	dc001315 	stw	r16,76(sp)
    6d54:	12a9883a 	add	r20,r2,r10
    6d58:	4807883a 	mov	r3,r9
    6d5c:	4005883a 	mov	r2,r8
    6d60:	dc801415 	stw	r18,80(sp)
    6d64:	000d883a 	mov	r6,zero
    6d68:	01d00934 	movhi	r7,16420
    6d6c:	1009883a 	mov	r4,r2
    6d70:	180b883a 	mov	r5,r3
    6d74:	000e5180 	call	e518 <__muldf3>
    6d78:	180b883a 	mov	r5,r3
    6d7c:	1009883a 	mov	r4,r2
    6d80:	1821883a 	mov	r16,r3
    6d84:	1025883a 	mov	r18,r2
    6d88:	000f50c0 	call	f50c <__fixdfsi>
    6d8c:	1009883a 	mov	r4,r2
    6d90:	1023883a 	mov	r17,r2
    6d94:	000f5940 	call	f594 <__floatsidf>
    6d98:	9009883a 	mov	r4,r18
    6d9c:	800b883a 	mov	r5,r16
    6da0:	100d883a 	mov	r6,r2
    6da4:	180f883a 	mov	r7,r3
    6da8:	8c400c04 	addi	r17,r17,48
    6dac:	000ec3c0 	call	ec3c <__subdf3>
    6db0:	ad400044 	addi	r21,r21,1
    6db4:	ac7fffc5 	stb	r17,-1(r21)
    6db8:	ad3fea1e 	bne	r21,r20,6d64 <__alt_mem_sram+0xf7e06d64>
    6dbc:	1813883a 	mov	r9,r3
    6dc0:	d8c01017 	ldw	r3,64(sp)
    6dc4:	dc001317 	ldw	r16,76(sp)
    6dc8:	dc801417 	ldw	r18,80(sp)
    6dcc:	1011883a 	mov	r8,r2
    6dd0:	b8ef883a 	add	r23,r23,r3
    6dd4:	d9000e17 	ldw	r4,56(sp)
    6dd8:	d9401117 	ldw	r5,68(sp)
    6ddc:	000d883a 	mov	r6,zero
    6de0:	01cff834 	movhi	r7,16352
    6de4:	da001715 	stw	r8,92(sp)
    6de8:	da401515 	stw	r9,84(sp)
    6dec:	000d16c0 	call	d16c <__adddf3>
    6df0:	da001717 	ldw	r8,92(sp)
    6df4:	da401517 	ldw	r9,84(sp)
    6df8:	1009883a 	mov	r4,r2
    6dfc:	400d883a 	mov	r6,r8
    6e00:	480f883a 	mov	r7,r9
    6e04:	180b883a 	mov	r5,r3
    6e08:	000e4380 	call	e438 <__ledf2>
    6e0c:	da001717 	ldw	r8,92(sp)
    6e10:	da401517 	ldw	r9,84(sp)
    6e14:	10003b0e 	bge	r2,zero,6f04 <_dtoa_r+0x15dc>
    6e18:	d9001217 	ldw	r4,72(sp)
    6e1c:	bd7fffc3 	ldbu	r21,-1(r23)
    6e20:	d9000515 	stw	r4,20(sp)
    6e24:	003d1c06 	br	6298 <__alt_mem_sram+0xf7e06298>
    6e28:	d8c00817 	ldw	r3,32(sp)
    6e2c:	18a9c83a 	sub	r20,r3,r2
    6e30:	0005883a 	mov	r2,zero
    6e34:	003d3706 	br	6314 <__alt_mem_sram+0xf7e06314>
    6e38:	00800044 	movi	r2,1
    6e3c:	003dd006 	br	6580 <__alt_mem_sram+0xf7e06580>
    6e40:	d8c00217 	ldw	r3,8(sp)
    6e44:	00800d84 	movi	r2,54
    6e48:	dd400917 	ldw	r21,36(sp)
    6e4c:	10c5c83a 	sub	r2,r2,r3
    6e50:	dd000817 	ldw	r20,32(sp)
    6e54:	003d2f06 	br	6314 <__alt_mem_sram+0xf7e06314>
    6e58:	9029883a 	mov	r20,r18
    6e5c:	982b883a 	mov	r21,r19
    6e60:	04400084 	movi	r17,2
    6e64:	003bc606 	br	5d80 <__alt_mem_sram+0xf7e05d80>
    6e68:	d8800617 	ldw	r2,24(sp)
    6e6c:	103efc26 	beq	r2,zero,6a60 <__alt_mem_sram+0xf7e06a60>
    6e70:	d8c00d17 	ldw	r3,52(sp)
    6e74:	00fc890e 	bge	zero,r3,609c <__alt_mem_sram+0xf7e0609c>
    6e78:	a80b883a 	mov	r5,r21
    6e7c:	a009883a 	mov	r4,r20
    6e80:	000d883a 	mov	r6,zero
    6e84:	01d00934 	movhi	r7,16420
    6e88:	000e5180 	call	e518 <__muldf3>
    6e8c:	89000044 	addi	r4,r17,1
    6e90:	1029883a 	mov	r20,r2
    6e94:	182b883a 	mov	r21,r3
    6e98:	000f5940 	call	f594 <__floatsidf>
    6e9c:	a009883a 	mov	r4,r20
    6ea0:	a80b883a 	mov	r5,r21
    6ea4:	100d883a 	mov	r6,r2
    6ea8:	180f883a 	mov	r7,r3
    6eac:	000e5180 	call	e518 <__muldf3>
    6eb0:	1009883a 	mov	r4,r2
    6eb4:	180b883a 	mov	r5,r3
    6eb8:	000d883a 	mov	r6,zero
    6ebc:	01d00734 	movhi	r7,16412
    6ec0:	000d16c0 	call	d16c <__adddf3>
    6ec4:	d9000517 	ldw	r4,20(sp)
    6ec8:	1023883a 	mov	r17,r2
    6ecc:	00bf3034 	movhi	r2,64704
    6ed0:	213fffc4 	addi	r4,r4,-1
    6ed4:	1885883a 	add	r2,r3,r2
    6ed8:	d9001215 	stw	r4,72(sp)
    6edc:	d8800e15 	stw	r2,56(sp)
    6ee0:	da800d17 	ldw	r10,52(sp)
    6ee4:	003bc306 	br	5df4 <__alt_mem_sram+0xf7e05df4>
    6ee8:	b039883a 	mov	fp,r22
    6eec:	01000e44 	movi	r4,57
    6ef0:	8825883a 	mov	r18,r17
    6ef4:	9dc00044 	addi	r23,r19,1
    6ef8:	99000005 	stb	r4,0(r19)
    6efc:	a023883a 	mov	r17,r20
    6f00:	003dae06 	br	65bc <__alt_mem_sram+0xf7e065bc>
    6f04:	d9800e17 	ldw	r6,56(sp)
    6f08:	d9c01117 	ldw	r7,68(sp)
    6f0c:	0009883a 	mov	r4,zero
    6f10:	014ff834 	movhi	r5,16352
    6f14:	da001715 	stw	r8,92(sp)
    6f18:	da401515 	stw	r9,84(sp)
    6f1c:	000ec3c0 	call	ec3c <__subdf3>
    6f20:	da001717 	ldw	r8,92(sp)
    6f24:	da401517 	ldw	r9,84(sp)
    6f28:	1009883a 	mov	r4,r2
    6f2c:	180b883a 	mov	r5,r3
    6f30:	400d883a 	mov	r6,r8
    6f34:	480f883a 	mov	r7,r9
    6f38:	000e3580 	call	e358 <__gedf2>
    6f3c:	00bc570e 	bge	zero,r2,609c <__alt_mem_sram+0xf7e0609c>
    6f40:	01000c04 	movi	r4,48
    6f44:	00000106 	br	6f4c <_dtoa_r+0x1624>
    6f48:	102f883a 	mov	r23,r2
    6f4c:	b8bfffc4 	addi	r2,r23,-1
    6f50:	10c00007 	ldb	r3,0(r2)
    6f54:	193ffc26 	beq	r3,r4,6f48 <__alt_mem_sram+0xf7e06f48>
    6f58:	d9801217 	ldw	r6,72(sp)
    6f5c:	d9800515 	stw	r6,20(sp)
    6f60:	003c1f06 	br	5fe0 <__alt_mem_sram+0xf7e05fe0>
    6f64:	d8801217 	ldw	r2,72(sp)
    6f68:	dc001117 	ldw	r16,68(sp)
    6f6c:	d8800515 	stw	r2,20(sp)
    6f70:	003cc906 	br	6298 <__alt_mem_sram+0xf7e06298>
    6f74:	dd801317 	ldw	r22,76(sp)
    6f78:	dc001117 	ldw	r16,68(sp)
    6f7c:	dcc01417 	ldw	r19,80(sp)
    6f80:	dc801017 	ldw	r18,64(sp)
    6f84:	003c4506 	br	609c <__alt_mem_sram+0xf7e0609c>
    6f88:	103e5d1e 	bne	r2,zero,6900 <__alt_mem_sram+0xf7e06900>
    6f8c:	4080004c 	andi	r2,r8,1
    6f90:	103e5b26 	beq	r2,zero,6900 <__alt_mem_sram+0xf7e06900>
    6f94:	003e5706 	br	68f4 <__alt_mem_sram+0xf7e068f4>
    6f98:	d8c00317 	ldw	r3,12(sp)
    6f9c:	00800084 	movi	r2,2
    6fa0:	10c00a16 	blt	r2,r3,6fcc <_dtoa_r+0x16a4>
    6fa4:	d9000d17 	ldw	r4,52(sp)
    6fa8:	003e8306 	br	69b8 <__alt_mem_sram+0xf7e069b8>
    6fac:	04400084 	movi	r17,2
    6fb0:	003b7306 	br	5d80 <__alt_mem_sram+0xf7e05d80>
    6fb4:	d9801217 	ldw	r6,72(sp)
    6fb8:	d9800515 	stw	r6,20(sp)
    6fbc:	003cb606 	br	6298 <__alt_mem_sram+0xf7e06298>
    6fc0:	d9001217 	ldw	r4,72(sp)
    6fc4:	d9000515 	stw	r4,20(sp)
    6fc8:	003c0506 	br	5fe0 <__alt_mem_sram+0xf7e05fe0>
    6fcc:	d9800d17 	ldw	r6,52(sp)
    6fd0:	d9800615 	stw	r6,24(sp)
    6fd4:	003e8306 	br	69e4 <__alt_mem_sram+0xf7e069e4>
    6fd8:	d9800317 	ldw	r6,12(sp)
    6fdc:	00800084 	movi	r2,2
    6fe0:	11800216 	blt	r2,r6,6fec <_dtoa_r+0x16c4>
    6fe4:	d8800d17 	ldw	r2,52(sp)
    6fe8:	003da606 	br	6684 <__alt_mem_sram+0xf7e06684>
    6fec:	d8800d17 	ldw	r2,52(sp)
    6ff0:	d8800615 	stw	r2,24(sp)
    6ff4:	003e7b06 	br	69e4 <__alt_mem_sram+0xf7e069e4>
    6ff8:	05000044 	movi	r20,1
    6ffc:	003b0506 	br	5c14 <__alt_mem_sram+0xf7e05c14>
    7000:	8009883a 	mov	r4,r16
    7004:	80001115 	stw	zero,68(r16)
    7008:	000b883a 	mov	r5,zero
    700c:	0008f500 	call	8f50 <_Balloc>
    7010:	d8800715 	stw	r2,28(sp)
    7014:	d8c00717 	ldw	r3,28(sp)
    7018:	00bfffc4 	movi	r2,-1
    701c:	01000044 	movi	r4,1
    7020:	d8800615 	stw	r2,24(sp)
    7024:	80c01015 	stw	r3,64(r16)
    7028:	d9000b15 	stw	r4,44(sp)
    702c:	d8002215 	stw	zero,136(sp)
    7030:	d8800d15 	stw	r2,52(sp)
    7034:	003c1906 	br	609c <__alt_mem_sram+0xf7e0609c>
    7038:	193d2926 	beq	r3,r4,64e0 <__alt_mem_sram+0xf7e064e0>
    703c:	00c00f04 	movi	r3,60
    7040:	1885c83a 	sub	r2,r3,r2
    7044:	003d7b06 	br	6634 <__alt_mem_sram+0xf7e06634>
    7048:	000b883a 	mov	r5,zero
    704c:	003b1006 	br	5c90 <__alt_mem_sram+0xf7e05c90>

00007050 <_fflush_r>:
    7050:	defffb04 	addi	sp,sp,-20
    7054:	dcc00315 	stw	r19,12(sp)
    7058:	dc000015 	stw	r16,0(sp)
    705c:	dfc00415 	stw	ra,16(sp)
    7060:	dc800215 	stw	r18,8(sp)
    7064:	dc400115 	stw	r17,4(sp)
    7068:	2027883a 	mov	r19,r4
    706c:	2821883a 	mov	r16,r5
    7070:	20000226 	beq	r4,zero,707c <_fflush_r+0x2c>
    7074:	20800e17 	ldw	r2,56(r4)
    7078:	10005326 	beq	r2,zero,71c8 <_fflush_r+0x178>
    707c:	8080030b 	ldhu	r2,12(r16)
    7080:	10ffffcc 	andi	r3,r2,65535
    7084:	18e0001c 	xori	r3,r3,32768
    7088:	18e00004 	addi	r3,r3,-32768
    708c:	18002c26 	beq	r3,zero,7140 <_fflush_r+0xf0>
    7090:	10c0020c 	andi	r3,r2,8
    7094:	1800321e 	bne	r3,zero,7160 <_fflush_r+0x110>
    7098:	80c00117 	ldw	r3,4(r16)
    709c:	10820014 	ori	r2,r2,2048
    70a0:	8080030d 	sth	r2,12(r16)
    70a4:	00c0570e 	bge	zero,r3,7204 <_fflush_r+0x1b4>
    70a8:	82000a17 	ldw	r8,40(r16)
    70ac:	40002426 	beq	r8,zero,7140 <_fflush_r+0xf0>
    70b0:	9c400017 	ldw	r17,0(r19)
    70b4:	10c4000c 	andi	r3,r2,4096
    70b8:	98000015 	stw	zero,0(r19)
    70bc:	18004626 	beq	r3,zero,71d8 <_fflush_r+0x188>
    70c0:	81801417 	ldw	r6,80(r16)
    70c4:	10c0010c 	andi	r3,r2,4
    70c8:	18000626 	beq	r3,zero,70e4 <_fflush_r+0x94>
    70cc:	80c00117 	ldw	r3,4(r16)
    70d0:	80800c17 	ldw	r2,48(r16)
    70d4:	30cdc83a 	sub	r6,r6,r3
    70d8:	10000226 	beq	r2,zero,70e4 <_fflush_r+0x94>
    70dc:	80800f17 	ldw	r2,60(r16)
    70e0:	308dc83a 	sub	r6,r6,r2
    70e4:	81400717 	ldw	r5,28(r16)
    70e8:	9809883a 	mov	r4,r19
    70ec:	000f883a 	mov	r7,zero
    70f0:	403ee83a 	callr	r8
    70f4:	00ffffc4 	movi	r3,-1
    70f8:	10c04526 	beq	r2,r3,7210 <_fflush_r+0x1c0>
    70fc:	80c0030b 	ldhu	r3,12(r16)
    7100:	81000417 	ldw	r4,16(r16)
    7104:	80000115 	stw	zero,4(r16)
    7108:	197dffcc 	andi	r5,r3,63487
    710c:	8140030d 	sth	r5,12(r16)
    7110:	81000015 	stw	r4,0(r16)
    7114:	18c4000c 	andi	r3,r3,4096
    7118:	18000126 	beq	r3,zero,7120 <_fflush_r+0xd0>
    711c:	80801415 	stw	r2,80(r16)
    7120:	81400c17 	ldw	r5,48(r16)
    7124:	9c400015 	stw	r17,0(r19)
    7128:	28000526 	beq	r5,zero,7140 <_fflush_r+0xf0>
    712c:	80801004 	addi	r2,r16,64
    7130:	28800226 	beq	r5,r2,713c <_fflush_r+0xec>
    7134:	9809883a 	mov	r4,r19
    7138:	000776c0 	call	776c <_free_r>
    713c:	80000c15 	stw	zero,48(r16)
    7140:	0005883a 	mov	r2,zero
    7144:	dfc00417 	ldw	ra,16(sp)
    7148:	dcc00317 	ldw	r19,12(sp)
    714c:	dc800217 	ldw	r18,8(sp)
    7150:	dc400117 	ldw	r17,4(sp)
    7154:	dc000017 	ldw	r16,0(sp)
    7158:	dec00504 	addi	sp,sp,20
    715c:	f800283a 	ret
    7160:	84800417 	ldw	r18,16(r16)
    7164:	903ff626 	beq	r18,zero,7140 <__alt_mem_sram+0xf7e07140>
    7168:	84400017 	ldw	r17,0(r16)
    716c:	108000cc 	andi	r2,r2,3
    7170:	84800015 	stw	r18,0(r16)
    7174:	8ca3c83a 	sub	r17,r17,r18
    7178:	10001526 	beq	r2,zero,71d0 <_fflush_r+0x180>
    717c:	0005883a 	mov	r2,zero
    7180:	80800215 	stw	r2,8(r16)
    7184:	04400316 	blt	zero,r17,7194 <_fflush_r+0x144>
    7188:	003fed06 	br	7140 <__alt_mem_sram+0xf7e07140>
    718c:	90a5883a 	add	r18,r18,r2
    7190:	047feb0e 	bge	zero,r17,7140 <__alt_mem_sram+0xf7e07140>
    7194:	80800917 	ldw	r2,36(r16)
    7198:	81400717 	ldw	r5,28(r16)
    719c:	880f883a 	mov	r7,r17
    71a0:	900d883a 	mov	r6,r18
    71a4:	9809883a 	mov	r4,r19
    71a8:	103ee83a 	callr	r2
    71ac:	88a3c83a 	sub	r17,r17,r2
    71b0:	00bff616 	blt	zero,r2,718c <__alt_mem_sram+0xf7e0718c>
    71b4:	80c0030b 	ldhu	r3,12(r16)
    71b8:	00bfffc4 	movi	r2,-1
    71bc:	18c01014 	ori	r3,r3,64
    71c0:	80c0030d 	sth	r3,12(r16)
    71c4:	003fdf06 	br	7144 <__alt_mem_sram+0xf7e07144>
    71c8:	00075f80 	call	75f8 <__sinit>
    71cc:	003fab06 	br	707c <__alt_mem_sram+0xf7e0707c>
    71d0:	80800517 	ldw	r2,20(r16)
    71d4:	003fea06 	br	7180 <__alt_mem_sram+0xf7e07180>
    71d8:	81400717 	ldw	r5,28(r16)
    71dc:	000d883a 	mov	r6,zero
    71e0:	9809883a 	mov	r4,r19
    71e4:	01c00044 	movi	r7,1
    71e8:	403ee83a 	callr	r8
    71ec:	100d883a 	mov	r6,r2
    71f0:	00bfffc4 	movi	r2,-1
    71f4:	30801326 	beq	r6,r2,7244 <_fflush_r+0x1f4>
    71f8:	8080030b 	ldhu	r2,12(r16)
    71fc:	82000a17 	ldw	r8,40(r16)
    7200:	003fb006 	br	70c4 <__alt_mem_sram+0xf7e070c4>
    7204:	80c00f17 	ldw	r3,60(r16)
    7208:	00ffa716 	blt	zero,r3,70a8 <__alt_mem_sram+0xf7e070a8>
    720c:	003fcc06 	br	7140 <__alt_mem_sram+0xf7e07140>
    7210:	98c00017 	ldw	r3,0(r19)
    7214:	183fb926 	beq	r3,zero,70fc <__alt_mem_sram+0xf7e070fc>
    7218:	01000744 	movi	r4,29
    721c:	19000226 	beq	r3,r4,7228 <_fflush_r+0x1d8>
    7220:	01000584 	movi	r4,22
    7224:	1900101e 	bne	r3,r4,7268 <_fflush_r+0x218>
    7228:	8080030b 	ldhu	r2,12(r16)
    722c:	80c00417 	ldw	r3,16(r16)
    7230:	80000115 	stw	zero,4(r16)
    7234:	10bdffcc 	andi	r2,r2,63487
    7238:	8080030d 	sth	r2,12(r16)
    723c:	80c00015 	stw	r3,0(r16)
    7240:	003fb706 	br	7120 <__alt_mem_sram+0xf7e07120>
    7244:	98800017 	ldw	r2,0(r19)
    7248:	103feb26 	beq	r2,zero,71f8 <__alt_mem_sram+0xf7e071f8>
    724c:	00c00744 	movi	r3,29
    7250:	10c00226 	beq	r2,r3,725c <_fflush_r+0x20c>
    7254:	00c00584 	movi	r3,22
    7258:	10ffd61e 	bne	r2,r3,71b4 <__alt_mem_sram+0xf7e071b4>
    725c:	9c400015 	stw	r17,0(r19)
    7260:	0005883a 	mov	r2,zero
    7264:	003fb706 	br	7144 <__alt_mem_sram+0xf7e07144>
    7268:	80c0030b 	ldhu	r3,12(r16)
    726c:	18c01014 	ori	r3,r3,64
    7270:	80c0030d 	sth	r3,12(r16)
    7274:	003fb306 	br	7144 <__alt_mem_sram+0xf7e07144>

00007278 <fflush>:
    7278:	20000526 	beq	r4,zero,7290 <fflush+0x18>
    727c:	00800074 	movhi	r2,1
    7280:	10918204 	addi	r2,r2,17928
    7284:	200b883a 	mov	r5,r4
    7288:	11000017 	ldw	r4,0(r2)
    728c:	00070501 	jmpi	7050 <_fflush_r>
    7290:	00800074 	movhi	r2,1
    7294:	10918104 	addi	r2,r2,17924
    7298:	11000017 	ldw	r4,0(r2)
    729c:	01400034 	movhi	r5,0
    72a0:	295c1404 	addi	r5,r5,28752
    72a4:	0007fb81 	jmpi	7fb8 <_fwalk_reent>

000072a8 <__fp_lock>:
    72a8:	0005883a 	mov	r2,zero
    72ac:	f800283a 	ret

000072b0 <__fp_unlock>:
    72b0:	0005883a 	mov	r2,zero
    72b4:	f800283a 	ret

000072b8 <_cleanup_r>:
    72b8:	01400074 	movhi	r5,1
    72bc:	296f8b04 	addi	r5,r5,-16852
    72c0:	0007f001 	jmpi	7f00 <_fwalk>

000072c4 <__sinit.part.1>:
    72c4:	defff604 	addi	sp,sp,-40
    72c8:	00c00034 	movhi	r3,0
    72cc:	dfc00915 	stw	ra,36(sp)
    72d0:	df000815 	stw	fp,32(sp)
    72d4:	ddc00715 	stw	r23,28(sp)
    72d8:	dd800615 	stw	r22,24(sp)
    72dc:	dd400515 	stw	r21,20(sp)
    72e0:	dd000415 	stw	r20,16(sp)
    72e4:	dcc00315 	stw	r19,12(sp)
    72e8:	dc800215 	stw	r18,8(sp)
    72ec:	dc400115 	stw	r17,4(sp)
    72f0:	dc000015 	stw	r16,0(sp)
    72f4:	18dcae04 	addi	r3,r3,29368
    72f8:	24000117 	ldw	r16,4(r4)
    72fc:	20c00f15 	stw	r3,60(r4)
    7300:	07000044 	movi	fp,1
    7304:	00c000c4 	movi	r3,3
    7308:	2080bb04 	addi	r2,r4,748
    730c:	20c0b915 	stw	r3,740(r4)
    7310:	27000e15 	stw	fp,56(r4)
    7314:	2080ba15 	stw	r2,744(r4)
    7318:	2000b815 	stw	zero,736(r4)
    731c:	05c00204 	movi	r23,8
    7320:	00800104 	movi	r2,4
    7324:	2025883a 	mov	r18,r4
    7328:	b80d883a 	mov	r6,r23
    732c:	81001704 	addi	r4,r16,92
    7330:	000b883a 	mov	r5,zero
    7334:	80000015 	stw	zero,0(r16)
    7338:	80000115 	stw	zero,4(r16)
    733c:	80000215 	stw	zero,8(r16)
    7340:	8080030d 	sth	r2,12(r16)
    7344:	80001915 	stw	zero,100(r16)
    7348:	8000038d 	sth	zero,14(r16)
    734c:	80000415 	stw	zero,16(r16)
    7350:	80000515 	stw	zero,20(r16)
    7354:	80000615 	stw	zero,24(r16)
    7358:	0008e2c0 	call	8e2c <memset>
    735c:	05800074 	movhi	r22,1
    7360:	94400217 	ldw	r17,8(r18)
    7364:	05400074 	movhi	r21,1
    7368:	05000074 	movhi	r20,1
    736c:	04c00074 	movhi	r19,1
    7370:	b5a95104 	addi	r22,r22,-23228
    7374:	ad696804 	addi	r21,r21,-23136
    7378:	a5298704 	addi	r20,r20,-23012
    737c:	9ce99e04 	addi	r19,r19,-22920
    7380:	85800815 	stw	r22,32(r16)
    7384:	85400915 	stw	r21,36(r16)
    7388:	85000a15 	stw	r20,40(r16)
    738c:	84c00b15 	stw	r19,44(r16)
    7390:	84000715 	stw	r16,28(r16)
    7394:	00800284 	movi	r2,10
    7398:	89001704 	addi	r4,r17,92
    739c:	b80d883a 	mov	r6,r23
    73a0:	000b883a 	mov	r5,zero
    73a4:	88000015 	stw	zero,0(r17)
    73a8:	88000115 	stw	zero,4(r17)
    73ac:	88000215 	stw	zero,8(r17)
    73b0:	8880030d 	sth	r2,12(r17)
    73b4:	88001915 	stw	zero,100(r17)
    73b8:	8f00038d 	sth	fp,14(r17)
    73bc:	88000415 	stw	zero,16(r17)
    73c0:	88000515 	stw	zero,20(r17)
    73c4:	88000615 	stw	zero,24(r17)
    73c8:	0008e2c0 	call	8e2c <memset>
    73cc:	94000317 	ldw	r16,12(r18)
    73d0:	00800484 	movi	r2,18
    73d4:	8c400715 	stw	r17,28(r17)
    73d8:	8d800815 	stw	r22,32(r17)
    73dc:	8d400915 	stw	r21,36(r17)
    73e0:	8d000a15 	stw	r20,40(r17)
    73e4:	8cc00b15 	stw	r19,44(r17)
    73e8:	8080030d 	sth	r2,12(r16)
    73ec:	00800084 	movi	r2,2
    73f0:	80000015 	stw	zero,0(r16)
    73f4:	80000115 	stw	zero,4(r16)
    73f8:	80000215 	stw	zero,8(r16)
    73fc:	80001915 	stw	zero,100(r16)
    7400:	8080038d 	sth	r2,14(r16)
    7404:	80000415 	stw	zero,16(r16)
    7408:	80000515 	stw	zero,20(r16)
    740c:	80000615 	stw	zero,24(r16)
    7410:	81001704 	addi	r4,r16,92
    7414:	000b883a 	mov	r5,zero
    7418:	b80d883a 	mov	r6,r23
    741c:	0008e2c0 	call	8e2c <memset>
    7420:	84000715 	stw	r16,28(r16)
    7424:	85800815 	stw	r22,32(r16)
    7428:	85400915 	stw	r21,36(r16)
    742c:	85000a15 	stw	r20,40(r16)
    7430:	84c00b15 	stw	r19,44(r16)
    7434:	dfc00917 	ldw	ra,36(sp)
    7438:	df000817 	ldw	fp,32(sp)
    743c:	ddc00717 	ldw	r23,28(sp)
    7440:	dd800617 	ldw	r22,24(sp)
    7444:	dd400517 	ldw	r21,20(sp)
    7448:	dd000417 	ldw	r20,16(sp)
    744c:	dcc00317 	ldw	r19,12(sp)
    7450:	dc800217 	ldw	r18,8(sp)
    7454:	dc400117 	ldw	r17,4(sp)
    7458:	dc000017 	ldw	r16,0(sp)
    745c:	dec00a04 	addi	sp,sp,40
    7460:	f800283a 	ret

00007464 <__sfmoreglue>:
    7464:	defffc04 	addi	sp,sp,-16
    7468:	dc400115 	stw	r17,4(sp)
    746c:	2c401a24 	muli	r17,r5,104
    7470:	dc800215 	stw	r18,8(sp)
    7474:	2825883a 	mov	r18,r5
    7478:	89400304 	addi	r5,r17,12
    747c:	dc000015 	stw	r16,0(sp)
    7480:	dfc00315 	stw	ra,12(sp)
    7484:	00083080 	call	8308 <_malloc_r>
    7488:	1021883a 	mov	r16,r2
    748c:	10000726 	beq	r2,zero,74ac <__sfmoreglue+0x48>
    7490:	11000304 	addi	r4,r2,12
    7494:	10000015 	stw	zero,0(r2)
    7498:	14800115 	stw	r18,4(r2)
    749c:	11000215 	stw	r4,8(r2)
    74a0:	000b883a 	mov	r5,zero
    74a4:	880d883a 	mov	r6,r17
    74a8:	0008e2c0 	call	8e2c <memset>
    74ac:	8005883a 	mov	r2,r16
    74b0:	dfc00317 	ldw	ra,12(sp)
    74b4:	dc800217 	ldw	r18,8(sp)
    74b8:	dc400117 	ldw	r17,4(sp)
    74bc:	dc000017 	ldw	r16,0(sp)
    74c0:	dec00404 	addi	sp,sp,16
    74c4:	f800283a 	ret

000074c8 <__sfp>:
    74c8:	00800074 	movhi	r2,1
    74cc:	defffb04 	addi	sp,sp,-20
    74d0:	10918104 	addi	r2,r2,17924
    74d4:	dc800215 	stw	r18,8(sp)
    74d8:	14800017 	ldw	r18,0(r2)
    74dc:	dcc00315 	stw	r19,12(sp)
    74e0:	dfc00415 	stw	ra,16(sp)
    74e4:	90800e17 	ldw	r2,56(r18)
    74e8:	dc400115 	stw	r17,4(sp)
    74ec:	dc000015 	stw	r16,0(sp)
    74f0:	2027883a 	mov	r19,r4
    74f4:	1000021e 	bne	r2,zero,7500 <__sfp+0x38>
    74f8:	9009883a 	mov	r4,r18
    74fc:	00072c40 	call	72c4 <__sinit.part.1>
    7500:	9480b804 	addi	r18,r18,736
    7504:	047fffc4 	movi	r17,-1
    7508:	91400117 	ldw	r5,4(r18)
    750c:	94000217 	ldw	r16,8(r18)
    7510:	297fffc4 	addi	r5,r5,-1
    7514:	28000a16 	blt	r5,zero,7540 <__sfp+0x78>
    7518:	8080030f 	ldh	r2,12(r16)
    751c:	10000c26 	beq	r2,zero,7550 <__sfp+0x88>
    7520:	80c01d04 	addi	r3,r16,116
    7524:	00000206 	br	7530 <__sfp+0x68>
    7528:	18bfe60f 	ldh	r2,-104(r3)
    752c:	10000826 	beq	r2,zero,7550 <__sfp+0x88>
    7530:	297fffc4 	addi	r5,r5,-1
    7534:	1c3ffd04 	addi	r16,r3,-12
    7538:	18c01a04 	addi	r3,r3,104
    753c:	2c7ffa1e 	bne	r5,r17,7528 <__alt_mem_sram+0xf7e07528>
    7540:	90800017 	ldw	r2,0(r18)
    7544:	10001d26 	beq	r2,zero,75bc <__sfp+0xf4>
    7548:	1025883a 	mov	r18,r2
    754c:	003fee06 	br	7508 <__alt_mem_sram+0xf7e07508>
    7550:	00bfffc4 	movi	r2,-1
    7554:	8080038d 	sth	r2,14(r16)
    7558:	00800044 	movi	r2,1
    755c:	8080030d 	sth	r2,12(r16)
    7560:	80001915 	stw	zero,100(r16)
    7564:	80000015 	stw	zero,0(r16)
    7568:	80000215 	stw	zero,8(r16)
    756c:	80000115 	stw	zero,4(r16)
    7570:	80000415 	stw	zero,16(r16)
    7574:	80000515 	stw	zero,20(r16)
    7578:	80000615 	stw	zero,24(r16)
    757c:	81001704 	addi	r4,r16,92
    7580:	000b883a 	mov	r5,zero
    7584:	01800204 	movi	r6,8
    7588:	0008e2c0 	call	8e2c <memset>
    758c:	8005883a 	mov	r2,r16
    7590:	80000c15 	stw	zero,48(r16)
    7594:	80000d15 	stw	zero,52(r16)
    7598:	80001115 	stw	zero,68(r16)
    759c:	80001215 	stw	zero,72(r16)
    75a0:	dfc00417 	ldw	ra,16(sp)
    75a4:	dcc00317 	ldw	r19,12(sp)
    75a8:	dc800217 	ldw	r18,8(sp)
    75ac:	dc400117 	ldw	r17,4(sp)
    75b0:	dc000017 	ldw	r16,0(sp)
    75b4:	dec00504 	addi	sp,sp,20
    75b8:	f800283a 	ret
    75bc:	9809883a 	mov	r4,r19
    75c0:	01400104 	movi	r5,4
    75c4:	00074640 	call	7464 <__sfmoreglue>
    75c8:	90800015 	stw	r2,0(r18)
    75cc:	103fde1e 	bne	r2,zero,7548 <__alt_mem_sram+0xf7e07548>
    75d0:	00800304 	movi	r2,12
    75d4:	98800015 	stw	r2,0(r19)
    75d8:	0005883a 	mov	r2,zero
    75dc:	003ff006 	br	75a0 <__alt_mem_sram+0xf7e075a0>

000075e0 <_cleanup>:
    75e0:	00800074 	movhi	r2,1
    75e4:	10918104 	addi	r2,r2,17924
    75e8:	11000017 	ldw	r4,0(r2)
    75ec:	01400074 	movhi	r5,1
    75f0:	296f8b04 	addi	r5,r5,-16852
    75f4:	0007f001 	jmpi	7f00 <_fwalk>

000075f8 <__sinit>:
    75f8:	20800e17 	ldw	r2,56(r4)
    75fc:	10000126 	beq	r2,zero,7604 <__sinit+0xc>
    7600:	f800283a 	ret
    7604:	00072c41 	jmpi	72c4 <__sinit.part.1>

00007608 <__sfp_lock_acquire>:
    7608:	f800283a 	ret

0000760c <__sfp_lock_release>:
    760c:	f800283a 	ret

00007610 <__sinit_lock_acquire>:
    7610:	f800283a 	ret

00007614 <__sinit_lock_release>:
    7614:	f800283a 	ret

00007618 <__fp_lock_all>:
    7618:	00800074 	movhi	r2,1
    761c:	10918204 	addi	r2,r2,17928
    7620:	11000017 	ldw	r4,0(r2)
    7624:	01400034 	movhi	r5,0
    7628:	295caa04 	addi	r5,r5,29352
    762c:	0007f001 	jmpi	7f00 <_fwalk>

00007630 <__fp_unlock_all>:
    7630:	00800074 	movhi	r2,1
    7634:	10918204 	addi	r2,r2,17928
    7638:	11000017 	ldw	r4,0(r2)
    763c:	01400034 	movhi	r5,0
    7640:	295cac04 	addi	r5,r5,29360
    7644:	0007f001 	jmpi	7f00 <_fwalk>

00007648 <_malloc_trim_r>:
    7648:	defffb04 	addi	sp,sp,-20
    764c:	dcc00315 	stw	r19,12(sp)
    7650:	04c00074 	movhi	r19,1
    7654:	dc800215 	stw	r18,8(sp)
    7658:	dc400115 	stw	r17,4(sp)
    765c:	dc000015 	stw	r16,0(sp)
    7660:	dfc00415 	stw	ra,16(sp)
    7664:	2821883a 	mov	r16,r5
    7668:	9ccbfd04 	addi	r19,r19,12276
    766c:	2025883a 	mov	r18,r4
    7670:	000fd2c0 	call	fd2c <__malloc_lock>
    7674:	98800217 	ldw	r2,8(r19)
    7678:	14400117 	ldw	r17,4(r2)
    767c:	00bfff04 	movi	r2,-4
    7680:	88a2703a 	and	r17,r17,r2
    7684:	8c21c83a 	sub	r16,r17,r16
    7688:	8403fbc4 	addi	r16,r16,4079
    768c:	8020d33a 	srli	r16,r16,12
    7690:	0083ffc4 	movi	r2,4095
    7694:	843fffc4 	addi	r16,r16,-1
    7698:	8020933a 	slli	r16,r16,12
    769c:	1400060e 	bge	r2,r16,76b8 <_malloc_trim_r+0x70>
    76a0:	9009883a 	mov	r4,r18
    76a4:	000b883a 	mov	r5,zero
    76a8:	000a4f00 	call	a4f0 <_sbrk_r>
    76ac:	98c00217 	ldw	r3,8(r19)
    76b0:	1c47883a 	add	r3,r3,r17
    76b4:	10c00a26 	beq	r2,r3,76e0 <_malloc_trim_r+0x98>
    76b8:	9009883a 	mov	r4,r18
    76bc:	000fd4c0 	call	fd4c <__malloc_unlock>
    76c0:	0005883a 	mov	r2,zero
    76c4:	dfc00417 	ldw	ra,16(sp)
    76c8:	dcc00317 	ldw	r19,12(sp)
    76cc:	dc800217 	ldw	r18,8(sp)
    76d0:	dc400117 	ldw	r17,4(sp)
    76d4:	dc000017 	ldw	r16,0(sp)
    76d8:	dec00504 	addi	sp,sp,20
    76dc:	f800283a 	ret
    76e0:	9009883a 	mov	r4,r18
    76e4:	040bc83a 	sub	r5,zero,r16
    76e8:	000a4f00 	call	a4f0 <_sbrk_r>
    76ec:	00ffffc4 	movi	r3,-1
    76f0:	10c00d26 	beq	r2,r3,7728 <_malloc_trim_r+0xe0>
    76f4:	00c00074 	movhi	r3,1
    76f8:	18d85a04 	addi	r3,r3,24936
    76fc:	18800017 	ldw	r2,0(r3)
    7700:	99000217 	ldw	r4,8(r19)
    7704:	8c23c83a 	sub	r17,r17,r16
    7708:	8c400054 	ori	r17,r17,1
    770c:	1421c83a 	sub	r16,r2,r16
    7710:	24400115 	stw	r17,4(r4)
    7714:	9009883a 	mov	r4,r18
    7718:	1c000015 	stw	r16,0(r3)
    771c:	000fd4c0 	call	fd4c <__malloc_unlock>
    7720:	00800044 	movi	r2,1
    7724:	003fe706 	br	76c4 <__alt_mem_sram+0xf7e076c4>
    7728:	9009883a 	mov	r4,r18
    772c:	000b883a 	mov	r5,zero
    7730:	000a4f00 	call	a4f0 <_sbrk_r>
    7734:	99000217 	ldw	r4,8(r19)
    7738:	014003c4 	movi	r5,15
    773c:	1107c83a 	sub	r3,r2,r4
    7740:	28ffdd0e 	bge	r5,r3,76b8 <__alt_mem_sram+0xf7e076b8>
    7744:	01400074 	movhi	r5,1
    7748:	29518404 	addi	r5,r5,17936
    774c:	29400017 	ldw	r5,0(r5)
    7750:	18c00054 	ori	r3,r3,1
    7754:	20c00115 	stw	r3,4(r4)
    7758:	00c00074 	movhi	r3,1
    775c:	1145c83a 	sub	r2,r2,r5
    7760:	18d85a04 	addi	r3,r3,24936
    7764:	18800015 	stw	r2,0(r3)
    7768:	003fd306 	br	76b8 <__alt_mem_sram+0xf7e076b8>

0000776c <_free_r>:
    776c:	28004c26 	beq	r5,zero,78a0 <_free_r+0x134>
    7770:	defffd04 	addi	sp,sp,-12
    7774:	dc400115 	stw	r17,4(sp)
    7778:	dc000015 	stw	r16,0(sp)
    777c:	2023883a 	mov	r17,r4
    7780:	2821883a 	mov	r16,r5
    7784:	dfc00215 	stw	ra,8(sp)
    7788:	000fd2c0 	call	fd2c <__malloc_lock>
    778c:	813fff17 	ldw	r4,-4(r16)
    7790:	00bfff84 	movi	r2,-2
    7794:	02400074 	movhi	r9,1
    7798:	81bffe04 	addi	r6,r16,-8
    779c:	2084703a 	and	r2,r4,r2
    77a0:	4a4bfd04 	addi	r9,r9,12276
    77a4:	308b883a 	add	r5,r6,r2
    77a8:	2a000117 	ldw	r8,4(r5)
    77ac:	49c00217 	ldw	r7,8(r9)
    77b0:	00ffff04 	movi	r3,-4
    77b4:	40c6703a 	and	r3,r8,r3
    77b8:	39405326 	beq	r7,r5,7908 <_free_r+0x19c>
    77bc:	28c00115 	stw	r3,4(r5)
    77c0:	2100004c 	andi	r4,r4,1
    77c4:	2000091e 	bne	r4,zero,77ec <_free_r+0x80>
    77c8:	81fffe17 	ldw	r7,-8(r16)
    77cc:	4a000204 	addi	r8,r9,8
    77d0:	31cdc83a 	sub	r6,r6,r7
    77d4:	31000217 	ldw	r4,8(r6)
    77d8:	11c5883a 	add	r2,r2,r7
    77dc:	22006126 	beq	r4,r8,7964 <_free_r+0x1f8>
    77e0:	31c00317 	ldw	r7,12(r6)
    77e4:	21c00315 	stw	r7,12(r4)
    77e8:	39000215 	stw	r4,8(r7)
    77ec:	28c9883a 	add	r4,r5,r3
    77f0:	21c00117 	ldw	r7,4(r4)
    77f4:	39c0004c 	andi	r7,r7,1
    77f8:	38000d1e 	bne	r7,zero,7830 <_free_r+0xc4>
    77fc:	29000217 	ldw	r4,8(r5)
    7800:	10c5883a 	add	r2,r2,r3
    7804:	00c00074 	movhi	r3,1
    7808:	18cbff04 	addi	r3,r3,12284
    780c:	20c07526 	beq	r4,r3,79e4 <_free_r+0x278>
    7810:	29c00317 	ldw	r7,12(r5)
    7814:	11400054 	ori	r5,r2,1
    7818:	3087883a 	add	r3,r6,r2
    781c:	21c00315 	stw	r7,12(r4)
    7820:	39000215 	stw	r4,8(r7)
    7824:	31400115 	stw	r5,4(r6)
    7828:	18800015 	stw	r2,0(r3)
    782c:	00000406 	br	7840 <_free_r+0xd4>
    7830:	10c00054 	ori	r3,r2,1
    7834:	30c00115 	stw	r3,4(r6)
    7838:	3087883a 	add	r3,r6,r2
    783c:	18800015 	stw	r2,0(r3)
    7840:	00c07fc4 	movi	r3,511
    7844:	18801736 	bltu	r3,r2,78a4 <_free_r+0x138>
    7848:	1004d0fa 	srli	r2,r2,3
    784c:	01400044 	movi	r5,1
    7850:	49000117 	ldw	r4,4(r9)
    7854:	1087883a 	add	r3,r2,r2
    7858:	18c7883a 	add	r3,r3,r3
    785c:	1005d0ba 	srai	r2,r2,2
    7860:	18c7883a 	add	r3,r3,r3
    7864:	1a47883a 	add	r3,r3,r9
    7868:	19c00217 	ldw	r7,8(r3)
    786c:	2884983a 	sll	r2,r5,r2
    7870:	30c00315 	stw	r3,12(r6)
    7874:	31c00215 	stw	r7,8(r6)
    7878:	1104b03a 	or	r2,r2,r4
    787c:	19800215 	stw	r6,8(r3)
    7880:	48800115 	stw	r2,4(r9)
    7884:	39800315 	stw	r6,12(r7)
    7888:	8809883a 	mov	r4,r17
    788c:	dfc00217 	ldw	ra,8(sp)
    7890:	dc400117 	ldw	r17,4(sp)
    7894:	dc000017 	ldw	r16,0(sp)
    7898:	dec00304 	addi	sp,sp,12
    789c:	000fd4c1 	jmpi	fd4c <__malloc_unlock>
    78a0:	f800283a 	ret
    78a4:	1006d27a 	srli	r3,r2,9
    78a8:	01000104 	movi	r4,4
    78ac:	20c04036 	bltu	r4,r3,79b0 <_free_r+0x244>
    78b0:	1006d1ba 	srli	r3,r2,6
    78b4:	19400e04 	addi	r5,r3,56
    78b8:	2947883a 	add	r3,r5,r5
    78bc:	18c7883a 	add	r3,r3,r3
    78c0:	18c7883a 	add	r3,r3,r3
    78c4:	1a49883a 	add	r4,r3,r9
    78c8:	20c00217 	ldw	r3,8(r4)
    78cc:	01c00074 	movhi	r7,1
    78d0:	39cbfd04 	addi	r7,r7,12276
    78d4:	19003b26 	beq	r3,r4,79c4 <_free_r+0x258>
    78d8:	01ffff04 	movi	r7,-4
    78dc:	19400117 	ldw	r5,4(r3)
    78e0:	29ca703a 	and	r5,r5,r7
    78e4:	1140022e 	bgeu	r2,r5,78f0 <_free_r+0x184>
    78e8:	18c00217 	ldw	r3,8(r3)
    78ec:	20fffb1e 	bne	r4,r3,78dc <__alt_mem_sram+0xf7e078dc>
    78f0:	18800317 	ldw	r2,12(r3)
    78f4:	30800315 	stw	r2,12(r6)
    78f8:	30c00215 	stw	r3,8(r6)
    78fc:	11800215 	stw	r6,8(r2)
    7900:	19800315 	stw	r6,12(r3)
    7904:	003fe006 	br	7888 <__alt_mem_sram+0xf7e07888>
    7908:	2100004c 	andi	r4,r4,1
    790c:	1885883a 	add	r2,r3,r2
    7910:	2000071e 	bne	r4,zero,7930 <_free_r+0x1c4>
    7914:	817ffe17 	ldw	r5,-8(r16)
    7918:	314dc83a 	sub	r6,r6,r5
    791c:	30c00317 	ldw	r3,12(r6)
    7920:	31000217 	ldw	r4,8(r6)
    7924:	1145883a 	add	r2,r2,r5
    7928:	20c00315 	stw	r3,12(r4)
    792c:	19000215 	stw	r4,8(r3)
    7930:	10c00054 	ori	r3,r2,1
    7934:	30c00115 	stw	r3,4(r6)
    7938:	00c00074 	movhi	r3,1
    793c:	18d18504 	addi	r3,r3,17940
    7940:	18c00017 	ldw	r3,0(r3)
    7944:	49800215 	stw	r6,8(r9)
    7948:	10ffcf36 	bltu	r2,r3,7888 <__alt_mem_sram+0xf7e07888>
    794c:	00800074 	movhi	r2,1
    7950:	10985204 	addi	r2,r2,24904
    7954:	11400017 	ldw	r5,0(r2)
    7958:	8809883a 	mov	r4,r17
    795c:	00076480 	call	7648 <_malloc_trim_r>
    7960:	003fc906 	br	7888 <__alt_mem_sram+0xf7e07888>
    7964:	28c9883a 	add	r4,r5,r3
    7968:	21000117 	ldw	r4,4(r4)
    796c:	2100004c 	andi	r4,r4,1
    7970:	20000a1e 	bne	r4,zero,799c <_free_r+0x230>
    7974:	29000317 	ldw	r4,12(r5)
    7978:	29400217 	ldw	r5,8(r5)
    797c:	10c5883a 	add	r2,r2,r3
    7980:	10c00054 	ori	r3,r2,1
    7984:	29000315 	stw	r4,12(r5)
    7988:	21400215 	stw	r5,8(r4)
    798c:	30c00115 	stw	r3,4(r6)
    7990:	308d883a 	add	r6,r6,r2
    7994:	30800015 	stw	r2,0(r6)
    7998:	003fbb06 	br	7888 <__alt_mem_sram+0xf7e07888>
    799c:	10c00054 	ori	r3,r2,1
    79a0:	30c00115 	stw	r3,4(r6)
    79a4:	308d883a 	add	r6,r6,r2
    79a8:	30800015 	stw	r2,0(r6)
    79ac:	003fb606 	br	7888 <__alt_mem_sram+0xf7e07888>
    79b0:	01000504 	movi	r4,20
    79b4:	20c01436 	bltu	r4,r3,7a08 <_free_r+0x29c>
    79b8:	194016c4 	addi	r5,r3,91
    79bc:	2947883a 	add	r3,r5,r5
    79c0:	003fbe06 	br	78bc <__alt_mem_sram+0xf7e078bc>
    79c4:	280bd0ba 	srai	r5,r5,2
    79c8:	00800044 	movi	r2,1
    79cc:	39000117 	ldw	r4,4(r7)
    79d0:	114a983a 	sll	r5,r2,r5
    79d4:	1805883a 	mov	r2,r3
    79d8:	2908b03a 	or	r4,r5,r4
    79dc:	39000115 	stw	r4,4(r7)
    79e0:	003fc406 	br	78f4 <__alt_mem_sram+0xf7e078f4>
    79e4:	49800515 	stw	r6,20(r9)
    79e8:	49800415 	stw	r6,16(r9)
    79ec:	10c00054 	ori	r3,r2,1
    79f0:	31000315 	stw	r4,12(r6)
    79f4:	31000215 	stw	r4,8(r6)
    79f8:	30c00115 	stw	r3,4(r6)
    79fc:	308d883a 	add	r6,r6,r2
    7a00:	30800015 	stw	r2,0(r6)
    7a04:	003fa006 	br	7888 <__alt_mem_sram+0xf7e07888>
    7a08:	01001504 	movi	r4,84
    7a0c:	20c00436 	bltu	r4,r3,7a20 <_free_r+0x2b4>
    7a10:	1006d33a 	srli	r3,r2,12
    7a14:	19401b84 	addi	r5,r3,110
    7a18:	2947883a 	add	r3,r5,r5
    7a1c:	003fa706 	br	78bc <__alt_mem_sram+0xf7e078bc>
    7a20:	01005504 	movi	r4,340
    7a24:	20c00436 	bltu	r4,r3,7a38 <_free_r+0x2cc>
    7a28:	1006d3fa 	srli	r3,r2,15
    7a2c:	19401dc4 	addi	r5,r3,119
    7a30:	2947883a 	add	r3,r5,r5
    7a34:	003fa106 	br	78bc <__alt_mem_sram+0xf7e078bc>
    7a38:	01015504 	movi	r4,1364
    7a3c:	20c00436 	bltu	r4,r3,7a50 <_free_r+0x2e4>
    7a40:	1006d4ba 	srli	r3,r2,18
    7a44:	19401f04 	addi	r5,r3,124
    7a48:	2947883a 	add	r3,r5,r5
    7a4c:	003f9b06 	br	78bc <__alt_mem_sram+0xf7e078bc>
    7a50:	00c03f04 	movi	r3,252
    7a54:	01401f84 	movi	r5,126
    7a58:	003f9806 	br	78bc <__alt_mem_sram+0xf7e078bc>

00007a5c <__sfvwrite_r>:
    7a5c:	30800217 	ldw	r2,8(r6)
    7a60:	10004526 	beq	r2,zero,7b78 <__sfvwrite_r+0x11c>
    7a64:	28c0030b 	ldhu	r3,12(r5)
    7a68:	defff404 	addi	sp,sp,-48
    7a6c:	dd400715 	stw	r21,28(sp)
    7a70:	dcc00515 	stw	r19,20(sp)
    7a74:	dc000215 	stw	r16,8(sp)
    7a78:	dfc00b15 	stw	ra,44(sp)
    7a7c:	df000a15 	stw	fp,40(sp)
    7a80:	ddc00915 	stw	r23,36(sp)
    7a84:	dd800815 	stw	r22,32(sp)
    7a88:	dd000615 	stw	r20,24(sp)
    7a8c:	dc800415 	stw	r18,16(sp)
    7a90:	dc400315 	stw	r17,12(sp)
    7a94:	1880020c 	andi	r2,r3,8
    7a98:	2821883a 	mov	r16,r5
    7a9c:	202b883a 	mov	r21,r4
    7aa0:	3027883a 	mov	r19,r6
    7aa4:	10002526 	beq	r2,zero,7b3c <__sfvwrite_r+0xe0>
    7aa8:	28800417 	ldw	r2,16(r5)
    7aac:	10002326 	beq	r2,zero,7b3c <__sfvwrite_r+0xe0>
    7ab0:	1880008c 	andi	r2,r3,2
    7ab4:	9c400017 	ldw	r17,0(r19)
    7ab8:	10003126 	beq	r2,zero,7b80 <__sfvwrite_r+0x124>
    7abc:	0029883a 	mov	r20,zero
    7ac0:	0025883a 	mov	r18,zero
    7ac4:	05810004 	movi	r22,1024
    7ac8:	a00d883a 	mov	r6,r20
    7acc:	a809883a 	mov	r4,r21
    7ad0:	90002526 	beq	r18,zero,7b68 <__sfvwrite_r+0x10c>
    7ad4:	900f883a 	mov	r7,r18
    7ad8:	81400717 	ldw	r5,28(r16)
    7adc:	b480012e 	bgeu	r22,r18,7ae4 <__sfvwrite_r+0x88>
    7ae0:	01c10004 	movi	r7,1024
    7ae4:	80800917 	ldw	r2,36(r16)
    7ae8:	103ee83a 	callr	r2
    7aec:	0080510e 	bge	zero,r2,7c34 <__sfvwrite_r+0x1d8>
    7af0:	98c00217 	ldw	r3,8(r19)
    7af4:	a0a9883a 	add	r20,r20,r2
    7af8:	90a5c83a 	sub	r18,r18,r2
    7afc:	1885c83a 	sub	r2,r3,r2
    7b00:	98800215 	stw	r2,8(r19)
    7b04:	103ff01e 	bne	r2,zero,7ac8 <__alt_mem_sram+0xf7e07ac8>
    7b08:	0005883a 	mov	r2,zero
    7b0c:	dfc00b17 	ldw	ra,44(sp)
    7b10:	df000a17 	ldw	fp,40(sp)
    7b14:	ddc00917 	ldw	r23,36(sp)
    7b18:	dd800817 	ldw	r22,32(sp)
    7b1c:	dd400717 	ldw	r21,28(sp)
    7b20:	dd000617 	ldw	r20,24(sp)
    7b24:	dcc00517 	ldw	r19,20(sp)
    7b28:	dc800417 	ldw	r18,16(sp)
    7b2c:	dc400317 	ldw	r17,12(sp)
    7b30:	dc000217 	ldw	r16,8(sp)
    7b34:	dec00c04 	addi	sp,sp,48
    7b38:	f800283a 	ret
    7b3c:	a809883a 	mov	r4,r21
    7b40:	800b883a 	mov	r5,r16
    7b44:	00055f80 	call	55f8 <__swsetup_r>
    7b48:	80c0030b 	ldhu	r3,12(r16)
    7b4c:	103fd826 	beq	r2,zero,7ab0 <__alt_mem_sram+0xf7e07ab0>
    7b50:	18c01014 	ori	r3,r3,64
    7b54:	80c0030d 	sth	r3,12(r16)
    7b58:	00c00244 	movi	r3,9
    7b5c:	00bfffc4 	movi	r2,-1
    7b60:	a8c00015 	stw	r3,0(r21)
    7b64:	003fe906 	br	7b0c <__alt_mem_sram+0xf7e07b0c>
    7b68:	8d000017 	ldw	r20,0(r17)
    7b6c:	8c800117 	ldw	r18,4(r17)
    7b70:	8c400204 	addi	r17,r17,8
    7b74:	003fd406 	br	7ac8 <__alt_mem_sram+0xf7e07ac8>
    7b78:	0005883a 	mov	r2,zero
    7b7c:	f800283a 	ret
    7b80:	1880004c 	andi	r2,r3,1
    7b84:	1000301e 	bne	r2,zero,7c48 <__sfvwrite_r+0x1ec>
    7b88:	002f883a 	mov	r23,zero
    7b8c:	0025883a 	mov	r18,zero
    7b90:	90001c26 	beq	r18,zero,7c04 <__sfvwrite_r+0x1a8>
    7b94:	1880800c 	andi	r2,r3,512
    7b98:	85000217 	ldw	r20,8(r16)
    7b9c:	10006c26 	beq	r2,zero,7d50 <__sfvwrite_r+0x2f4>
    7ba0:	a02d883a 	mov	r22,r20
    7ba4:	95008536 	bltu	r18,r20,7dbc <__sfvwrite_r+0x360>
    7ba8:	1881200c 	andi	r2,r3,1152
    7bac:	10009d1e 	bne	r2,zero,7e24 <__sfvwrite_r+0x3c8>
    7bb0:	81000017 	ldw	r4,0(r16)
    7bb4:	a039883a 	mov	fp,r20
    7bb8:	9029883a 	mov	r20,r18
    7bbc:	b80b883a 	mov	r5,r23
    7bc0:	b00d883a 	mov	r6,r22
    7bc4:	0008cd00 	call	8cd0 <memmove>
    7bc8:	80c00217 	ldw	r3,8(r16)
    7bcc:	81000017 	ldw	r4,0(r16)
    7bd0:	9005883a 	mov	r2,r18
    7bd4:	1f39c83a 	sub	fp,r3,fp
    7bd8:	258f883a 	add	r7,r4,r22
    7bdc:	87000215 	stw	fp,8(r16)
    7be0:	81c00015 	stw	r7,0(r16)
    7be4:	98c00217 	ldw	r3,8(r19)
    7be8:	b8af883a 	add	r23,r23,r2
    7bec:	90a5c83a 	sub	r18,r18,r2
    7bf0:	1d05c83a 	sub	r2,r3,r20
    7bf4:	98800215 	stw	r2,8(r19)
    7bf8:	103fc326 	beq	r2,zero,7b08 <__alt_mem_sram+0xf7e07b08>
    7bfc:	80c0030b 	ldhu	r3,12(r16)
    7c00:	903fe41e 	bne	r18,zero,7b94 <__alt_mem_sram+0xf7e07b94>
    7c04:	8dc00017 	ldw	r23,0(r17)
    7c08:	8c800117 	ldw	r18,4(r17)
    7c0c:	8c400204 	addi	r17,r17,8
    7c10:	003fdf06 	br	7b90 <__alt_mem_sram+0xf7e07b90>
    7c14:	0009edc0 	call	9edc <_realloc_r>
    7c18:	102d883a 	mov	r22,r2
    7c1c:	1000a01e 	bne	r2,zero,7ea0 <__sfvwrite_r+0x444>
    7c20:	81400417 	ldw	r5,16(r16)
    7c24:	a809883a 	mov	r4,r21
    7c28:	000776c0 	call	776c <_free_r>
    7c2c:	00800304 	movi	r2,12
    7c30:	a8800015 	stw	r2,0(r21)
    7c34:	80c0030b 	ldhu	r3,12(r16)
    7c38:	00bfffc4 	movi	r2,-1
    7c3c:	18c01014 	ori	r3,r3,64
    7c40:	80c0030d 	sth	r3,12(r16)
    7c44:	003fb106 	br	7b0c <__alt_mem_sram+0xf7e07b0c>
    7c48:	0029883a 	mov	r20,zero
    7c4c:	0011883a 	mov	r8,zero
    7c50:	0039883a 	mov	fp,zero
    7c54:	0025883a 	mov	r18,zero
    7c58:	90001f26 	beq	r18,zero,7cd8 <__sfvwrite_r+0x27c>
    7c5c:	40006826 	beq	r8,zero,7e00 <__sfvwrite_r+0x3a4>
    7c60:	a02f883a 	mov	r23,r20
    7c64:	9500012e 	bgeu	r18,r20,7c6c <__sfvwrite_r+0x210>
    7c68:	902f883a 	mov	r23,r18
    7c6c:	81000017 	ldw	r4,0(r16)
    7c70:	80800417 	ldw	r2,16(r16)
    7c74:	b82d883a 	mov	r22,r23
    7c78:	81800217 	ldw	r6,8(r16)
    7c7c:	81c00517 	ldw	r7,20(r16)
    7c80:	1100022e 	bgeu	r2,r4,7c8c <__sfvwrite_r+0x230>
    7c84:	31c7883a 	add	r3,r6,r7
    7c88:	1dc01816 	blt	r3,r23,7cec <__sfvwrite_r+0x290>
    7c8c:	b9c03f16 	blt	r23,r7,7d8c <__sfvwrite_r+0x330>
    7c90:	80800917 	ldw	r2,36(r16)
    7c94:	81400717 	ldw	r5,28(r16)
    7c98:	a809883a 	mov	r4,r21
    7c9c:	da000115 	stw	r8,4(sp)
    7ca0:	e00d883a 	mov	r6,fp
    7ca4:	103ee83a 	callr	r2
    7ca8:	102d883a 	mov	r22,r2
    7cac:	da000117 	ldw	r8,4(sp)
    7cb0:	00bfe00e 	bge	zero,r2,7c34 <__alt_mem_sram+0xf7e07c34>
    7cb4:	a5a9c83a 	sub	r20,r20,r22
    7cb8:	a0001f26 	beq	r20,zero,7d38 <__sfvwrite_r+0x2dc>
    7cbc:	98800217 	ldw	r2,8(r19)
    7cc0:	e5b9883a 	add	fp,fp,r22
    7cc4:	95a5c83a 	sub	r18,r18,r22
    7cc8:	15adc83a 	sub	r22,r2,r22
    7ccc:	9d800215 	stw	r22,8(r19)
    7cd0:	b03f8d26 	beq	r22,zero,7b08 <__alt_mem_sram+0xf7e07b08>
    7cd4:	903fe11e 	bne	r18,zero,7c5c <__alt_mem_sram+0xf7e07c5c>
    7cd8:	8f000017 	ldw	fp,0(r17)
    7cdc:	8c800117 	ldw	r18,4(r17)
    7ce0:	0011883a 	mov	r8,zero
    7ce4:	8c400204 	addi	r17,r17,8
    7ce8:	003fdb06 	br	7c58 <__alt_mem_sram+0xf7e07c58>
    7cec:	180d883a 	mov	r6,r3
    7cf0:	e00b883a 	mov	r5,fp
    7cf4:	da000115 	stw	r8,4(sp)
    7cf8:	d8c00015 	stw	r3,0(sp)
    7cfc:	0008cd00 	call	8cd0 <memmove>
    7d00:	d8c00017 	ldw	r3,0(sp)
    7d04:	80800017 	ldw	r2,0(r16)
    7d08:	a809883a 	mov	r4,r21
    7d0c:	800b883a 	mov	r5,r16
    7d10:	10c5883a 	add	r2,r2,r3
    7d14:	80800015 	stw	r2,0(r16)
    7d18:	d8c00015 	stw	r3,0(sp)
    7d1c:	00070500 	call	7050 <_fflush_r>
    7d20:	d8c00017 	ldw	r3,0(sp)
    7d24:	da000117 	ldw	r8,4(sp)
    7d28:	103fc21e 	bne	r2,zero,7c34 <__alt_mem_sram+0xf7e07c34>
    7d2c:	182d883a 	mov	r22,r3
    7d30:	a5a9c83a 	sub	r20,r20,r22
    7d34:	a03fe11e 	bne	r20,zero,7cbc <__alt_mem_sram+0xf7e07cbc>
    7d38:	a809883a 	mov	r4,r21
    7d3c:	800b883a 	mov	r5,r16
    7d40:	00070500 	call	7050 <_fflush_r>
    7d44:	103fbb1e 	bne	r2,zero,7c34 <__alt_mem_sram+0xf7e07c34>
    7d48:	0011883a 	mov	r8,zero
    7d4c:	003fdb06 	br	7cbc <__alt_mem_sram+0xf7e07cbc>
    7d50:	81000017 	ldw	r4,0(r16)
    7d54:	80800417 	ldw	r2,16(r16)
    7d58:	1100012e 	bgeu	r2,r4,7d60 <__sfvwrite_r+0x304>
    7d5c:	a4805a36 	bltu	r20,r18,7ec8 <__sfvwrite_r+0x46c>
    7d60:	81c00517 	ldw	r7,20(r16)
    7d64:	91c01a36 	bltu	r18,r7,7dd0 <__sfvwrite_r+0x374>
    7d68:	80800917 	ldw	r2,36(r16)
    7d6c:	81400717 	ldw	r5,28(r16)
    7d70:	a809883a 	mov	r4,r21
    7d74:	b80d883a 	mov	r6,r23
    7d78:	103ee83a 	callr	r2
    7d7c:	1029883a 	mov	r20,r2
    7d80:	00bfac0e 	bge	zero,r2,7c34 <__alt_mem_sram+0xf7e07c34>
    7d84:	a005883a 	mov	r2,r20
    7d88:	003f9606 	br	7be4 <__alt_mem_sram+0xf7e07be4>
    7d8c:	b80d883a 	mov	r6,r23
    7d90:	e00b883a 	mov	r5,fp
    7d94:	da000115 	stw	r8,4(sp)
    7d98:	0008cd00 	call	8cd0 <memmove>
    7d9c:	80800217 	ldw	r2,8(r16)
    7da0:	80c00017 	ldw	r3,0(r16)
    7da4:	da000117 	ldw	r8,4(sp)
    7da8:	15c5c83a 	sub	r2,r2,r23
    7dac:	1def883a 	add	r23,r3,r23
    7db0:	80800215 	stw	r2,8(r16)
    7db4:	85c00015 	stw	r23,0(r16)
    7db8:	003fbe06 	br	7cb4 <__alt_mem_sram+0xf7e07cb4>
    7dbc:	81000017 	ldw	r4,0(r16)
    7dc0:	9039883a 	mov	fp,r18
    7dc4:	9029883a 	mov	r20,r18
    7dc8:	902d883a 	mov	r22,r18
    7dcc:	003f7b06 	br	7bbc <__alt_mem_sram+0xf7e07bbc>
    7dd0:	b80b883a 	mov	r5,r23
    7dd4:	900d883a 	mov	r6,r18
    7dd8:	0008cd00 	call	8cd0 <memmove>
    7ddc:	80c00217 	ldw	r3,8(r16)
    7de0:	80800017 	ldw	r2,0(r16)
    7de4:	9029883a 	mov	r20,r18
    7de8:	1c87c83a 	sub	r3,r3,r18
    7dec:	1485883a 	add	r2,r2,r18
    7df0:	80800015 	stw	r2,0(r16)
    7df4:	80c00215 	stw	r3,8(r16)
    7df8:	9005883a 	mov	r2,r18
    7dfc:	003f7906 	br	7be4 <__alt_mem_sram+0xf7e07be4>
    7e00:	e009883a 	mov	r4,fp
    7e04:	01400284 	movi	r5,10
    7e08:	900d883a 	mov	r6,r18
    7e0c:	0008ab00 	call	8ab0 <memchr>
    7e10:	10003826 	beq	r2,zero,7ef4 <__sfvwrite_r+0x498>
    7e14:	10800044 	addi	r2,r2,1
    7e18:	1729c83a 	sub	r20,r2,fp
    7e1c:	02000044 	movi	r8,1
    7e20:	003f8f06 	br	7c60 <__alt_mem_sram+0xf7e07c60>
    7e24:	80800517 	ldw	r2,20(r16)
    7e28:	81400417 	ldw	r5,16(r16)
    7e2c:	87000017 	ldw	fp,0(r16)
    7e30:	10a9883a 	add	r20,r2,r2
    7e34:	a085883a 	add	r2,r20,r2
    7e38:	1028d7fa 	srli	r20,r2,31
    7e3c:	e179c83a 	sub	fp,fp,r5
    7e40:	e1000044 	addi	r4,fp,1
    7e44:	a085883a 	add	r2,r20,r2
    7e48:	1029d07a 	srai	r20,r2,1
    7e4c:	2485883a 	add	r2,r4,r18
    7e50:	a00d883a 	mov	r6,r20
    7e54:	a080022e 	bgeu	r20,r2,7e60 <__sfvwrite_r+0x404>
    7e58:	1029883a 	mov	r20,r2
    7e5c:	100d883a 	mov	r6,r2
    7e60:	18c1000c 	andi	r3,r3,1024
    7e64:	a809883a 	mov	r4,r21
    7e68:	183f6a26 	beq	r3,zero,7c14 <__alt_mem_sram+0xf7e07c14>
    7e6c:	300b883a 	mov	r5,r6
    7e70:	00083080 	call	8308 <_malloc_r>
    7e74:	102d883a 	mov	r22,r2
    7e78:	103f6c26 	beq	r2,zero,7c2c <__alt_mem_sram+0xf7e07c2c>
    7e7c:	81400417 	ldw	r5,16(r16)
    7e80:	1009883a 	mov	r4,r2
    7e84:	e00d883a 	mov	r6,fp
    7e88:	0008b980 	call	8b98 <memcpy>
    7e8c:	8080030b 	ldhu	r2,12(r16)
    7e90:	00fedfc4 	movi	r3,-1153
    7e94:	10c4703a 	and	r2,r2,r3
    7e98:	10802014 	ori	r2,r2,128
    7e9c:	8080030d 	sth	r2,12(r16)
    7ea0:	b709883a 	add	r4,r22,fp
    7ea4:	a707c83a 	sub	r3,r20,fp
    7ea8:	85800415 	stw	r22,16(r16)
    7eac:	85000515 	stw	r20,20(r16)
    7eb0:	81000015 	stw	r4,0(r16)
    7eb4:	9039883a 	mov	fp,r18
    7eb8:	80c00215 	stw	r3,8(r16)
    7ebc:	9029883a 	mov	r20,r18
    7ec0:	902d883a 	mov	r22,r18
    7ec4:	003f3d06 	br	7bbc <__alt_mem_sram+0xf7e07bbc>
    7ec8:	b80b883a 	mov	r5,r23
    7ecc:	a00d883a 	mov	r6,r20
    7ed0:	0008cd00 	call	8cd0 <memmove>
    7ed4:	80800017 	ldw	r2,0(r16)
    7ed8:	a809883a 	mov	r4,r21
    7edc:	800b883a 	mov	r5,r16
    7ee0:	1505883a 	add	r2,r2,r20
    7ee4:	80800015 	stw	r2,0(r16)
    7ee8:	00070500 	call	7050 <_fflush_r>
    7eec:	103fa526 	beq	r2,zero,7d84 <__alt_mem_sram+0xf7e07d84>
    7ef0:	003f5006 	br	7c34 <__alt_mem_sram+0xf7e07c34>
    7ef4:	95000044 	addi	r20,r18,1
    7ef8:	02000044 	movi	r8,1
    7efc:	003f5806 	br	7c60 <__alt_mem_sram+0xf7e07c60>

00007f00 <_fwalk>:
    7f00:	defff804 	addi	sp,sp,-32
    7f04:	dd400515 	stw	r21,20(sp)
    7f08:	2540b804 	addi	r21,r4,736
    7f0c:	dd800615 	stw	r22,24(sp)
    7f10:	dd000415 	stw	r20,16(sp)
    7f14:	dfc00715 	stw	ra,28(sp)
    7f18:	dcc00315 	stw	r19,12(sp)
    7f1c:	dc800215 	stw	r18,8(sp)
    7f20:	dc400115 	stw	r17,4(sp)
    7f24:	dc000015 	stw	r16,0(sp)
    7f28:	2829883a 	mov	r20,r5
    7f2c:	002d883a 	mov	r22,zero
    7f30:	00076080 	call	7608 <__sfp_lock_acquire>
    7f34:	a8001426 	beq	r21,zero,7f88 <_fwalk+0x88>
    7f38:	04ffffc4 	movi	r19,-1
    7f3c:	ac400117 	ldw	r17,4(r21)
    7f40:	ac800217 	ldw	r18,8(r21)
    7f44:	8c7fffc4 	addi	r17,r17,-1
    7f48:	88000d16 	blt	r17,zero,7f80 <_fwalk+0x80>
    7f4c:	94000304 	addi	r16,r18,12
    7f50:	94800384 	addi	r18,r18,14
    7f54:	80c0000f 	ldh	r3,0(r16)
    7f58:	8c7fffc4 	addi	r17,r17,-1
    7f5c:	813ffd04 	addi	r4,r16,-12
    7f60:	18000426 	beq	r3,zero,7f74 <_fwalk+0x74>
    7f64:	90c0000f 	ldh	r3,0(r18)
    7f68:	1cc00226 	beq	r3,r19,7f74 <_fwalk+0x74>
    7f6c:	a03ee83a 	callr	r20
    7f70:	b0acb03a 	or	r22,r22,r2
    7f74:	84001a04 	addi	r16,r16,104
    7f78:	94801a04 	addi	r18,r18,104
    7f7c:	8cfff51e 	bne	r17,r19,7f54 <__alt_mem_sram+0xf7e07f54>
    7f80:	ad400017 	ldw	r21,0(r21)
    7f84:	a83fed1e 	bne	r21,zero,7f3c <__alt_mem_sram+0xf7e07f3c>
    7f88:	000760c0 	call	760c <__sfp_lock_release>
    7f8c:	b005883a 	mov	r2,r22
    7f90:	dfc00717 	ldw	ra,28(sp)
    7f94:	dd800617 	ldw	r22,24(sp)
    7f98:	dd400517 	ldw	r21,20(sp)
    7f9c:	dd000417 	ldw	r20,16(sp)
    7fa0:	dcc00317 	ldw	r19,12(sp)
    7fa4:	dc800217 	ldw	r18,8(sp)
    7fa8:	dc400117 	ldw	r17,4(sp)
    7fac:	dc000017 	ldw	r16,0(sp)
    7fb0:	dec00804 	addi	sp,sp,32
    7fb4:	f800283a 	ret

00007fb8 <_fwalk_reent>:
    7fb8:	defff804 	addi	sp,sp,-32
    7fbc:	dd400515 	stw	r21,20(sp)
    7fc0:	2540b804 	addi	r21,r4,736
    7fc4:	dd800615 	stw	r22,24(sp)
    7fc8:	dd000415 	stw	r20,16(sp)
    7fcc:	dcc00315 	stw	r19,12(sp)
    7fd0:	dfc00715 	stw	ra,28(sp)
    7fd4:	dc800215 	stw	r18,8(sp)
    7fd8:	dc400115 	stw	r17,4(sp)
    7fdc:	dc000015 	stw	r16,0(sp)
    7fe0:	2027883a 	mov	r19,r4
    7fe4:	2829883a 	mov	r20,r5
    7fe8:	002d883a 	mov	r22,zero
    7fec:	00076080 	call	7608 <__sfp_lock_acquire>
    7ff0:	a8001326 	beq	r21,zero,8040 <_fwalk_reent+0x88>
    7ff4:	04bfffc4 	movi	r18,-1
    7ff8:	ac400117 	ldw	r17,4(r21)
    7ffc:	ac000217 	ldw	r16,8(r21)
    8000:	8c7fffc4 	addi	r17,r17,-1
    8004:	88000c16 	blt	r17,zero,8038 <_fwalk_reent+0x80>
    8008:	84000304 	addi	r16,r16,12
    800c:	80c0000f 	ldh	r3,0(r16)
    8010:	8c7fffc4 	addi	r17,r17,-1
    8014:	817ffd04 	addi	r5,r16,-12
    8018:	18000526 	beq	r3,zero,8030 <_fwalk_reent+0x78>
    801c:	80c0008f 	ldh	r3,2(r16)
    8020:	9809883a 	mov	r4,r19
    8024:	1c800226 	beq	r3,r18,8030 <_fwalk_reent+0x78>
    8028:	a03ee83a 	callr	r20
    802c:	b0acb03a 	or	r22,r22,r2
    8030:	84001a04 	addi	r16,r16,104
    8034:	8cbff51e 	bne	r17,r18,800c <__alt_mem_sram+0xf7e0800c>
    8038:	ad400017 	ldw	r21,0(r21)
    803c:	a83fee1e 	bne	r21,zero,7ff8 <__alt_mem_sram+0xf7e07ff8>
    8040:	000760c0 	call	760c <__sfp_lock_release>
    8044:	b005883a 	mov	r2,r22
    8048:	dfc00717 	ldw	ra,28(sp)
    804c:	dd800617 	ldw	r22,24(sp)
    8050:	dd400517 	ldw	r21,20(sp)
    8054:	dd000417 	ldw	r20,16(sp)
    8058:	dcc00317 	ldw	r19,12(sp)
    805c:	dc800217 	ldw	r18,8(sp)
    8060:	dc400117 	ldw	r17,4(sp)
    8064:	dc000017 	ldw	r16,0(sp)
    8068:	dec00804 	addi	sp,sp,32
    806c:	f800283a 	ret

00008070 <_setlocale_r>:
    8070:	30001b26 	beq	r6,zero,80e0 <_setlocale_r+0x70>
    8074:	01400074 	movhi	r5,1
    8078:	defffe04 	addi	sp,sp,-8
    807c:	294a3704 	addi	r5,r5,10460
    8080:	3009883a 	mov	r4,r6
    8084:	dc000015 	stw	r16,0(sp)
    8088:	dfc00115 	stw	ra,4(sp)
    808c:	3021883a 	mov	r16,r6
    8090:	000a6800 	call	a680 <strcmp>
    8094:	1000061e 	bne	r2,zero,80b0 <_setlocale_r+0x40>
    8098:	00800074 	movhi	r2,1
    809c:	108a3604 	addi	r2,r2,10456
    80a0:	dfc00117 	ldw	ra,4(sp)
    80a4:	dc000017 	ldw	r16,0(sp)
    80a8:	dec00204 	addi	sp,sp,8
    80ac:	f800283a 	ret
    80b0:	01400074 	movhi	r5,1
    80b4:	294a3604 	addi	r5,r5,10456
    80b8:	8009883a 	mov	r4,r16
    80bc:	000a6800 	call	a680 <strcmp>
    80c0:	103ff526 	beq	r2,zero,8098 <__alt_mem_sram+0xf7e08098>
    80c4:	01400074 	movhi	r5,1
    80c8:	294a2104 	addi	r5,r5,10372
    80cc:	8009883a 	mov	r4,r16
    80d0:	000a6800 	call	a680 <strcmp>
    80d4:	103ff026 	beq	r2,zero,8098 <__alt_mem_sram+0xf7e08098>
    80d8:	0005883a 	mov	r2,zero
    80dc:	003ff006 	br	80a0 <__alt_mem_sram+0xf7e080a0>
    80e0:	00800074 	movhi	r2,1
    80e4:	108a3604 	addi	r2,r2,10456
    80e8:	f800283a 	ret

000080ec <__locale_charset>:
    80ec:	00800074 	movhi	r2,1
    80f0:	108be704 	addi	r2,r2,12188
    80f4:	f800283a 	ret

000080f8 <__locale_mb_cur_max>:
    80f8:	00800074 	movhi	r2,1
    80fc:	10918304 	addi	r2,r2,17932
    8100:	10800017 	ldw	r2,0(r2)
    8104:	f800283a 	ret

00008108 <__locale_msgcharset>:
    8108:	00800074 	movhi	r2,1
    810c:	108bdf04 	addi	r2,r2,12156
    8110:	f800283a 	ret

00008114 <__locale_cjk_lang>:
    8114:	0005883a 	mov	r2,zero
    8118:	f800283a 	ret

0000811c <_localeconv_r>:
    811c:	00800074 	movhi	r2,1
    8120:	108bef04 	addi	r2,r2,12220
    8124:	f800283a 	ret

00008128 <setlocale>:
    8128:	00c00074 	movhi	r3,1
    812c:	18d18204 	addi	r3,r3,17928
    8130:	2005883a 	mov	r2,r4
    8134:	19000017 	ldw	r4,0(r3)
    8138:	280d883a 	mov	r6,r5
    813c:	100b883a 	mov	r5,r2
    8140:	00080701 	jmpi	8070 <_setlocale_r>

00008144 <localeconv>:
    8144:	00800074 	movhi	r2,1
    8148:	108bef04 	addi	r2,r2,12220
    814c:	f800283a 	ret

00008150 <__smakebuf_r>:
    8150:	2880030b 	ldhu	r2,12(r5)
    8154:	10c0008c 	andi	r3,r2,2
    8158:	1800401e 	bne	r3,zero,825c <__smakebuf_r+0x10c>
    815c:	deffec04 	addi	sp,sp,-80
    8160:	dc000f15 	stw	r16,60(sp)
    8164:	2821883a 	mov	r16,r5
    8168:	2940038f 	ldh	r5,14(r5)
    816c:	dc401015 	stw	r17,64(sp)
    8170:	dfc01315 	stw	ra,76(sp)
    8174:	dcc01215 	stw	r19,72(sp)
    8178:	dc801115 	stw	r18,68(sp)
    817c:	2023883a 	mov	r17,r4
    8180:	28001b16 	blt	r5,zero,81f0 <__smakebuf_r+0xa0>
    8184:	d80d883a 	mov	r6,sp
    8188:	000c01c0 	call	c01c <_fstat_r>
    818c:	10001716 	blt	r2,zero,81ec <__smakebuf_r+0x9c>
    8190:	d8800117 	ldw	r2,4(sp)
    8194:	00e00014 	movui	r3,32768
    8198:	10bc000c 	andi	r2,r2,61440
    819c:	10c03726 	beq	r2,r3,827c <__smakebuf_r+0x12c>
    81a0:	80c0030b 	ldhu	r3,12(r16)
    81a4:	18c20014 	ori	r3,r3,2048
    81a8:	80c0030d 	sth	r3,12(r16)
    81ac:	00c80004 	movi	r3,8192
    81b0:	10c03c1e 	bne	r2,r3,82a4 <__smakebuf_r+0x154>
    81b4:	8140038f 	ldh	r5,14(r16)
    81b8:	8809883a 	mov	r4,r17
    81bc:	000c0740 	call	c074 <_isatty_r>
    81c0:	10004e26 	beq	r2,zero,82fc <__smakebuf_r+0x1ac>
    81c4:	8080030b 	ldhu	r2,12(r16)
    81c8:	04c00044 	movi	r19,1
    81cc:	80c010c4 	addi	r3,r16,67
    81d0:	14c4b03a 	or	r2,r2,r19
    81d4:	8080030d 	sth	r2,12(r16)
    81d8:	80c00015 	stw	r3,0(r16)
    81dc:	80c00415 	stw	r3,16(r16)
    81e0:	84c00515 	stw	r19,20(r16)
    81e4:	04810004 	movi	r18,1024
    81e8:	00000706 	br	8208 <__smakebuf_r+0xb8>
    81ec:	8080030b 	ldhu	r2,12(r16)
    81f0:	10c0200c 	andi	r3,r2,128
    81f4:	18001f1e 	bne	r3,zero,8274 <__smakebuf_r+0x124>
    81f8:	04810004 	movi	r18,1024
    81fc:	10820014 	ori	r2,r2,2048
    8200:	8080030d 	sth	r2,12(r16)
    8204:	0027883a 	mov	r19,zero
    8208:	8809883a 	mov	r4,r17
    820c:	900b883a 	mov	r5,r18
    8210:	00083080 	call	8308 <_malloc_r>
    8214:	10002e26 	beq	r2,zero,82d0 <__smakebuf_r+0x180>
    8218:	80c0030b 	ldhu	r3,12(r16)
    821c:	01000034 	movhi	r4,0
    8220:	211cae04 	addi	r4,r4,29368
    8224:	89000f15 	stw	r4,60(r17)
    8228:	18c02014 	ori	r3,r3,128
    822c:	80c0030d 	sth	r3,12(r16)
    8230:	80800015 	stw	r2,0(r16)
    8234:	80800415 	stw	r2,16(r16)
    8238:	84800515 	stw	r18,20(r16)
    823c:	98001c1e 	bne	r19,zero,82b0 <__smakebuf_r+0x160>
    8240:	dfc01317 	ldw	ra,76(sp)
    8244:	dcc01217 	ldw	r19,72(sp)
    8248:	dc801117 	ldw	r18,68(sp)
    824c:	dc401017 	ldw	r17,64(sp)
    8250:	dc000f17 	ldw	r16,60(sp)
    8254:	dec01404 	addi	sp,sp,80
    8258:	f800283a 	ret
    825c:	288010c4 	addi	r2,r5,67
    8260:	28800015 	stw	r2,0(r5)
    8264:	28800415 	stw	r2,16(r5)
    8268:	00800044 	movi	r2,1
    826c:	28800515 	stw	r2,20(r5)
    8270:	f800283a 	ret
    8274:	04801004 	movi	r18,64
    8278:	003fe006 	br	81fc <__alt_mem_sram+0xf7e081fc>
    827c:	81000a17 	ldw	r4,40(r16)
    8280:	00c00074 	movhi	r3,1
    8284:	18e98704 	addi	r3,r3,-23012
    8288:	20ffc51e 	bne	r4,r3,81a0 <__alt_mem_sram+0xf7e081a0>
    828c:	80c0030b 	ldhu	r3,12(r16)
    8290:	01010004 	movi	r4,1024
    8294:	81001315 	stw	r4,76(r16)
    8298:	1906b03a 	or	r3,r3,r4
    829c:	80c0030d 	sth	r3,12(r16)
    82a0:	003fc206 	br	81ac <__alt_mem_sram+0xf7e081ac>
    82a4:	0027883a 	mov	r19,zero
    82a8:	04810004 	movi	r18,1024
    82ac:	003fd606 	br	8208 <__alt_mem_sram+0xf7e08208>
    82b0:	8140038f 	ldh	r5,14(r16)
    82b4:	8809883a 	mov	r4,r17
    82b8:	000c0740 	call	c074 <_isatty_r>
    82bc:	103fe026 	beq	r2,zero,8240 <__alt_mem_sram+0xf7e08240>
    82c0:	8080030b 	ldhu	r2,12(r16)
    82c4:	10800054 	ori	r2,r2,1
    82c8:	8080030d 	sth	r2,12(r16)
    82cc:	003fdc06 	br	8240 <__alt_mem_sram+0xf7e08240>
    82d0:	8080030b 	ldhu	r2,12(r16)
    82d4:	10c0800c 	andi	r3,r2,512
    82d8:	183fd91e 	bne	r3,zero,8240 <__alt_mem_sram+0xf7e08240>
    82dc:	10800094 	ori	r2,r2,2
    82e0:	80c010c4 	addi	r3,r16,67
    82e4:	8080030d 	sth	r2,12(r16)
    82e8:	00800044 	movi	r2,1
    82ec:	80c00015 	stw	r3,0(r16)
    82f0:	80c00415 	stw	r3,16(r16)
    82f4:	80800515 	stw	r2,20(r16)
    82f8:	003fd106 	br	8240 <__alt_mem_sram+0xf7e08240>
    82fc:	04c00044 	movi	r19,1
    8300:	04810004 	movi	r18,1024
    8304:	003fc006 	br	8208 <__alt_mem_sram+0xf7e08208>

00008308 <_malloc_r>:
    8308:	defff504 	addi	sp,sp,-44
    830c:	dc800315 	stw	r18,12(sp)
    8310:	dfc00a15 	stw	ra,40(sp)
    8314:	df000915 	stw	fp,36(sp)
    8318:	ddc00815 	stw	r23,32(sp)
    831c:	dd800715 	stw	r22,28(sp)
    8320:	dd400615 	stw	r21,24(sp)
    8324:	dd000515 	stw	r20,20(sp)
    8328:	dcc00415 	stw	r19,16(sp)
    832c:	dc400215 	stw	r17,8(sp)
    8330:	dc000115 	stw	r16,4(sp)
    8334:	288002c4 	addi	r2,r5,11
    8338:	00c00584 	movi	r3,22
    833c:	2025883a 	mov	r18,r4
    8340:	18802a2e 	bgeu	r3,r2,83ec <_malloc_r+0xe4>
    8344:	047ffe04 	movi	r17,-8
    8348:	1462703a 	and	r17,r2,r17
    834c:	88009e16 	blt	r17,zero,85c8 <_malloc_r+0x2c0>
    8350:	89409d36 	bltu	r17,r5,85c8 <_malloc_r+0x2c0>
    8354:	000fd2c0 	call	fd2c <__malloc_lock>
    8358:	00807dc4 	movi	r2,503
    835c:	14402736 	bltu	r2,r17,83fc <_malloc_r+0xf4>
    8360:	8806d0fa 	srli	r3,r17,3
    8364:	04c00074 	movhi	r19,1
    8368:	9ccbfd04 	addi	r19,r19,12276
    836c:	18c5883a 	add	r2,r3,r3
    8370:	1085883a 	add	r2,r2,r2
    8374:	1085883a 	add	r2,r2,r2
    8378:	9885883a 	add	r2,r19,r2
    837c:	14000317 	ldw	r16,12(r2)
    8380:	80814a26 	beq	r16,r2,88ac <_malloc_r+0x5a4>
    8384:	80c00117 	ldw	r3,4(r16)
    8388:	81000317 	ldw	r4,12(r16)
    838c:	00bfff04 	movi	r2,-4
    8390:	1884703a 	and	r2,r3,r2
    8394:	81400217 	ldw	r5,8(r16)
    8398:	8085883a 	add	r2,r16,r2
    839c:	10c00117 	ldw	r3,4(r2)
    83a0:	29000315 	stw	r4,12(r5)
    83a4:	21400215 	stw	r5,8(r4)
    83a8:	18c00054 	ori	r3,r3,1
    83ac:	10c00115 	stw	r3,4(r2)
    83b0:	9009883a 	mov	r4,r18
    83b4:	000fd4c0 	call	fd4c <__malloc_unlock>
    83b8:	80800204 	addi	r2,r16,8
    83bc:	dfc00a17 	ldw	ra,40(sp)
    83c0:	df000917 	ldw	fp,36(sp)
    83c4:	ddc00817 	ldw	r23,32(sp)
    83c8:	dd800717 	ldw	r22,28(sp)
    83cc:	dd400617 	ldw	r21,24(sp)
    83d0:	dd000517 	ldw	r20,20(sp)
    83d4:	dcc00417 	ldw	r19,16(sp)
    83d8:	dc800317 	ldw	r18,12(sp)
    83dc:	dc400217 	ldw	r17,8(sp)
    83e0:	dc000117 	ldw	r16,4(sp)
    83e4:	dec00b04 	addi	sp,sp,44
    83e8:	f800283a 	ret
    83ec:	04400404 	movi	r17,16
    83f0:	89407536 	bltu	r17,r5,85c8 <_malloc_r+0x2c0>
    83f4:	000fd2c0 	call	fd2c <__malloc_lock>
    83f8:	003fd906 	br	8360 <__alt_mem_sram+0xf7e08360>
    83fc:	8806d27a 	srli	r3,r17,9
    8400:	18007526 	beq	r3,zero,85d8 <_malloc_r+0x2d0>
    8404:	00800104 	movi	r2,4
    8408:	10c0ef36 	bltu	r2,r3,87c8 <_malloc_r+0x4c0>
    840c:	8806d1ba 	srli	r3,r17,6
    8410:	19c00e04 	addi	r7,r3,56
    8414:	39cb883a 	add	r5,r7,r7
    8418:	04c00074 	movhi	r19,1
    841c:	294b883a 	add	r5,r5,r5
    8420:	9ccbfd04 	addi	r19,r19,12276
    8424:	294b883a 	add	r5,r5,r5
    8428:	994b883a 	add	r5,r19,r5
    842c:	2c000317 	ldw	r16,12(r5)
    8430:	2c000e26 	beq	r5,r16,846c <_malloc_r+0x164>
    8434:	80800117 	ldw	r2,4(r16)
    8438:	01bfff04 	movi	r6,-4
    843c:	010003c4 	movi	r4,15
    8440:	1184703a 	and	r2,r2,r6
    8444:	1447c83a 	sub	r3,r2,r17
    8448:	20c00716 	blt	r4,r3,8468 <_malloc_r+0x160>
    844c:	1800650e 	bge	r3,zero,85e4 <_malloc_r+0x2dc>
    8450:	84000317 	ldw	r16,12(r16)
    8454:	2c000526 	beq	r5,r16,846c <_malloc_r+0x164>
    8458:	80800117 	ldw	r2,4(r16)
    845c:	1184703a 	and	r2,r2,r6
    8460:	1447c83a 	sub	r3,r2,r17
    8464:	20fff90e 	bge	r4,r3,844c <__alt_mem_sram+0xf7e0844c>
    8468:	39ffffc4 	addi	r7,r7,-1
    846c:	38c00044 	addi	r3,r7,1
    8470:	01800074 	movhi	r6,1
    8474:	9c000417 	ldw	r16,16(r19)
    8478:	318bfd04 	addi	r6,r6,12276
    847c:	32400204 	addi	r9,r6,8
    8480:	82410326 	beq	r16,r9,8890 <_malloc_r+0x588>
    8484:	81000117 	ldw	r4,4(r16)
    8488:	00bfff04 	movi	r2,-4
    848c:	208e703a 	and	r7,r4,r2
    8490:	3c45c83a 	sub	r2,r7,r17
    8494:	010003c4 	movi	r4,15
    8498:	2080ee16 	blt	r4,r2,8854 <_malloc_r+0x54c>
    849c:	32400515 	stw	r9,20(r6)
    84a0:	32400415 	stw	r9,16(r6)
    84a4:	1000510e 	bge	r2,zero,85ec <_malloc_r+0x2e4>
    84a8:	00807fc4 	movi	r2,511
    84ac:	11c0ce36 	bltu	r2,r7,87e8 <_malloc_r+0x4e0>
    84b0:	3808d0fa 	srli	r4,r7,3
    84b4:	01c00044 	movi	r7,1
    84b8:	30800117 	ldw	r2,4(r6)
    84bc:	210b883a 	add	r5,r4,r4
    84c0:	294b883a 	add	r5,r5,r5
    84c4:	2009d0ba 	srai	r4,r4,2
    84c8:	294b883a 	add	r5,r5,r5
    84cc:	298b883a 	add	r5,r5,r6
    84d0:	2a000217 	ldw	r8,8(r5)
    84d4:	3908983a 	sll	r4,r7,r4
    84d8:	81400315 	stw	r5,12(r16)
    84dc:	82000215 	stw	r8,8(r16)
    84e0:	2088b03a 	or	r4,r4,r2
    84e4:	2c000215 	stw	r16,8(r5)
    84e8:	31000115 	stw	r4,4(r6)
    84ec:	44000315 	stw	r16,12(r8)
    84f0:	1805d0ba 	srai	r2,r3,2
    84f4:	01400044 	movi	r5,1
    84f8:	288a983a 	sll	r5,r5,r2
    84fc:	21404336 	bltu	r4,r5,860c <_malloc_r+0x304>
    8500:	2144703a 	and	r2,r4,r5
    8504:	10000a1e 	bne	r2,zero,8530 <_malloc_r+0x228>
    8508:	00bfff04 	movi	r2,-4
    850c:	294b883a 	add	r5,r5,r5
    8510:	1886703a 	and	r3,r3,r2
    8514:	2144703a 	and	r2,r4,r5
    8518:	18c00104 	addi	r3,r3,4
    851c:	1000041e 	bne	r2,zero,8530 <_malloc_r+0x228>
    8520:	294b883a 	add	r5,r5,r5
    8524:	2144703a 	and	r2,r4,r5
    8528:	18c00104 	addi	r3,r3,4
    852c:	103ffc26 	beq	r2,zero,8520 <__alt_mem_sram+0xf7e08520>
    8530:	023fff04 	movi	r8,-4
    8534:	01c003c4 	movi	r7,15
    8538:	18c5883a 	add	r2,r3,r3
    853c:	1085883a 	add	r2,r2,r2
    8540:	1085883a 	add	r2,r2,r2
    8544:	9895883a 	add	r10,r19,r2
    8548:	52c00304 	addi	r11,r10,12
    854c:	1819883a 	mov	r12,r3
    8550:	5c000017 	ldw	r16,0(r11)
    8554:	59bffd04 	addi	r6,r11,-12
    8558:	8180041e 	bne	r16,r6,856c <_malloc_r+0x264>
    855c:	0000ce06 	br	8898 <_malloc_r+0x590>
    8560:	2000d70e 	bge	r4,zero,88c0 <_malloc_r+0x5b8>
    8564:	84000317 	ldw	r16,12(r16)
    8568:	8180cb26 	beq	r16,r6,8898 <_malloc_r+0x590>
    856c:	80800117 	ldw	r2,4(r16)
    8570:	1204703a 	and	r2,r2,r8
    8574:	1449c83a 	sub	r4,r2,r17
    8578:	393ff90e 	bge	r7,r4,8560 <__alt_mem_sram+0xf7e08560>
    857c:	80800317 	ldw	r2,12(r16)
    8580:	80c00217 	ldw	r3,8(r16)
    8584:	89400054 	ori	r5,r17,1
    8588:	81400115 	stw	r5,4(r16)
    858c:	18800315 	stw	r2,12(r3)
    8590:	10c00215 	stw	r3,8(r2)
    8594:	8463883a 	add	r17,r16,r17
    8598:	9c400515 	stw	r17,20(r19)
    859c:	9c400415 	stw	r17,16(r19)
    85a0:	20800054 	ori	r2,r4,1
    85a4:	88800115 	stw	r2,4(r17)
    85a8:	8a400315 	stw	r9,12(r17)
    85ac:	8a400215 	stw	r9,8(r17)
    85b0:	8923883a 	add	r17,r17,r4
    85b4:	89000015 	stw	r4,0(r17)
    85b8:	9009883a 	mov	r4,r18
    85bc:	000fd4c0 	call	fd4c <__malloc_unlock>
    85c0:	80800204 	addi	r2,r16,8
    85c4:	003f7d06 	br	83bc <__alt_mem_sram+0xf7e083bc>
    85c8:	00800304 	movi	r2,12
    85cc:	90800015 	stw	r2,0(r18)
    85d0:	0005883a 	mov	r2,zero
    85d4:	003f7906 	br	83bc <__alt_mem_sram+0xf7e083bc>
    85d8:	01401f84 	movi	r5,126
    85dc:	01c00fc4 	movi	r7,63
    85e0:	003f8d06 	br	8418 <__alt_mem_sram+0xf7e08418>
    85e4:	81000317 	ldw	r4,12(r16)
    85e8:	003f6a06 	br	8394 <__alt_mem_sram+0xf7e08394>
    85ec:	81c5883a 	add	r2,r16,r7
    85f0:	10c00117 	ldw	r3,4(r2)
    85f4:	9009883a 	mov	r4,r18
    85f8:	18c00054 	ori	r3,r3,1
    85fc:	10c00115 	stw	r3,4(r2)
    8600:	000fd4c0 	call	fd4c <__malloc_unlock>
    8604:	80800204 	addi	r2,r16,8
    8608:	003f6c06 	br	83bc <__alt_mem_sram+0xf7e083bc>
    860c:	9c000217 	ldw	r16,8(r19)
    8610:	00bfff04 	movi	r2,-4
    8614:	85800117 	ldw	r22,4(r16)
    8618:	b0ac703a 	and	r22,r22,r2
    861c:	b4400336 	bltu	r22,r17,862c <_malloc_r+0x324>
    8620:	b445c83a 	sub	r2,r22,r17
    8624:	00c003c4 	movi	r3,15
    8628:	18805d16 	blt	r3,r2,87a0 <_malloc_r+0x498>
    862c:	05c00074 	movhi	r23,1
    8630:	00800074 	movhi	r2,1
    8634:	bdd18404 	addi	r23,r23,17936
    8638:	10985204 	addi	r2,r2,24904
    863c:	15400017 	ldw	r21,0(r2)
    8640:	b9000017 	ldw	r4,0(r23)
    8644:	00ffffc4 	movi	r3,-1
    8648:	858d883a 	add	r6,r16,r22
    864c:	8d6b883a 	add	r21,r17,r21
    8650:	20c0e426 	beq	r4,r3,89e4 <_malloc_r+0x6dc>
    8654:	ad4403c4 	addi	r21,r21,4111
    8658:	00fc0004 	movi	r3,-4096
    865c:	a8ea703a 	and	r21,r21,r3
    8660:	9009883a 	mov	r4,r18
    8664:	a80b883a 	mov	r5,r21
    8668:	d9800015 	stw	r6,0(sp)
    866c:	000a4f00 	call	a4f0 <_sbrk_r>
    8670:	00ffffc4 	movi	r3,-1
    8674:	1029883a 	mov	r20,r2
    8678:	d9800017 	ldw	r6,0(sp)
    867c:	10c0a426 	beq	r2,r3,8910 <_malloc_r+0x608>
    8680:	1180a236 	bltu	r2,r6,890c <_malloc_r+0x604>
    8684:	07000074 	movhi	fp,1
    8688:	e7185a04 	addi	fp,fp,24936
    868c:	e0c00017 	ldw	r3,0(fp)
    8690:	a8c7883a 	add	r3,r21,r3
    8694:	e0c00015 	stw	r3,0(fp)
    8698:	3500da26 	beq	r6,r20,8a04 <_malloc_r+0x6fc>
    869c:	b9000017 	ldw	r4,0(r23)
    86a0:	00bfffc4 	movi	r2,-1
    86a4:	2080e426 	beq	r4,r2,8a38 <_malloc_r+0x730>
    86a8:	a185c83a 	sub	r2,r20,r6
    86ac:	1885883a 	add	r2,r3,r2
    86b0:	e0800015 	stw	r2,0(fp)
    86b4:	a0c001cc 	andi	r3,r20,7
    86b8:	1800b526 	beq	r3,zero,8990 <_malloc_r+0x688>
    86bc:	a0e9c83a 	sub	r20,r20,r3
    86c0:	00840204 	movi	r2,4104
    86c4:	a5000204 	addi	r20,r20,8
    86c8:	10c7c83a 	sub	r3,r2,r3
    86cc:	a545883a 	add	r2,r20,r21
    86d0:	1083ffcc 	andi	r2,r2,4095
    86d4:	18abc83a 	sub	r21,r3,r2
    86d8:	9009883a 	mov	r4,r18
    86dc:	a80b883a 	mov	r5,r21
    86e0:	000a4f00 	call	a4f0 <_sbrk_r>
    86e4:	00ffffc4 	movi	r3,-1
    86e8:	10c0d026 	beq	r2,r3,8a2c <_malloc_r+0x724>
    86ec:	1507c83a 	sub	r3,r2,r20
    86f0:	a8c7883a 	add	r3,r21,r3
    86f4:	18c00054 	ori	r3,r3,1
    86f8:	e0800017 	ldw	r2,0(fp)
    86fc:	9d000215 	stw	r20,8(r19)
    8700:	a0c00115 	stw	r3,4(r20)
    8704:	a887883a 	add	r3,r21,r2
    8708:	e0c00015 	stw	r3,0(fp)
    870c:	84c00e26 	beq	r16,r19,8748 <_malloc_r+0x440>
    8710:	018003c4 	movi	r6,15
    8714:	3580a02e 	bgeu	r6,r22,8998 <_malloc_r+0x690>
    8718:	81400117 	ldw	r5,4(r16)
    871c:	013ffe04 	movi	r4,-8
    8720:	b0bffd04 	addi	r2,r22,-12
    8724:	1104703a 	and	r2,r2,r4
    8728:	2900004c 	andi	r4,r5,1
    872c:	1108b03a 	or	r4,r2,r4
    8730:	81000115 	stw	r4,4(r16)
    8734:	01400144 	movi	r5,5
    8738:	8089883a 	add	r4,r16,r2
    873c:	21400115 	stw	r5,4(r4)
    8740:	21400215 	stw	r5,8(r4)
    8744:	3080c036 	bltu	r6,r2,8a48 <_malloc_r+0x740>
    8748:	00800074 	movhi	r2,1
    874c:	10985104 	addi	r2,r2,24900
    8750:	11000017 	ldw	r4,0(r2)
    8754:	20c0012e 	bgeu	r4,r3,875c <_malloc_r+0x454>
    8758:	10c00015 	stw	r3,0(r2)
    875c:	00800074 	movhi	r2,1
    8760:	10985004 	addi	r2,r2,24896
    8764:	11000017 	ldw	r4,0(r2)
    8768:	9c000217 	ldw	r16,8(r19)
    876c:	20c0012e 	bgeu	r4,r3,8774 <_malloc_r+0x46c>
    8770:	10c00015 	stw	r3,0(r2)
    8774:	80c00117 	ldw	r3,4(r16)
    8778:	00bfff04 	movi	r2,-4
    877c:	1886703a 	and	r3,r3,r2
    8780:	1c45c83a 	sub	r2,r3,r17
    8784:	1c400236 	bltu	r3,r17,8790 <_malloc_r+0x488>
    8788:	00c003c4 	movi	r3,15
    878c:	18800416 	blt	r3,r2,87a0 <_malloc_r+0x498>
    8790:	9009883a 	mov	r4,r18
    8794:	000fd4c0 	call	fd4c <__malloc_unlock>
    8798:	0005883a 	mov	r2,zero
    879c:	003f0706 	br	83bc <__alt_mem_sram+0xf7e083bc>
    87a0:	88c00054 	ori	r3,r17,1
    87a4:	80c00115 	stw	r3,4(r16)
    87a8:	8463883a 	add	r17,r16,r17
    87ac:	10800054 	ori	r2,r2,1
    87b0:	9c400215 	stw	r17,8(r19)
    87b4:	88800115 	stw	r2,4(r17)
    87b8:	9009883a 	mov	r4,r18
    87bc:	000fd4c0 	call	fd4c <__malloc_unlock>
    87c0:	80800204 	addi	r2,r16,8
    87c4:	003efd06 	br	83bc <__alt_mem_sram+0xf7e083bc>
    87c8:	00800504 	movi	r2,20
    87cc:	10c0482e 	bgeu	r2,r3,88f0 <_malloc_r+0x5e8>
    87d0:	00801504 	movi	r2,84
    87d4:	10c06836 	bltu	r2,r3,8978 <_malloc_r+0x670>
    87d8:	8806d33a 	srli	r3,r17,12
    87dc:	19c01b84 	addi	r7,r3,110
    87e0:	39cb883a 	add	r5,r7,r7
    87e4:	003f0c06 	br	8418 <__alt_mem_sram+0xf7e08418>
    87e8:	3804d27a 	srli	r2,r7,9
    87ec:	01000104 	movi	r4,4
    87f0:	2080422e 	bgeu	r4,r2,88fc <_malloc_r+0x5f4>
    87f4:	01000504 	movi	r4,20
    87f8:	20807c36 	bltu	r4,r2,89ec <_malloc_r+0x6e4>
    87fc:	110016c4 	addi	r4,r2,91
    8800:	210b883a 	add	r5,r4,r4
    8804:	294b883a 	add	r5,r5,r5
    8808:	294b883a 	add	r5,r5,r5
    880c:	994b883a 	add	r5,r19,r5
    8810:	28800217 	ldw	r2,8(r5)
    8814:	02000074 	movhi	r8,1
    8818:	420bfd04 	addi	r8,r8,12276
    881c:	11406326 	beq	r2,r5,89ac <_malloc_r+0x6a4>
    8820:	01bfff04 	movi	r6,-4
    8824:	11000117 	ldw	r4,4(r2)
    8828:	2188703a 	and	r4,r4,r6
    882c:	3900022e 	bgeu	r7,r4,8838 <_malloc_r+0x530>
    8830:	10800217 	ldw	r2,8(r2)
    8834:	28bffb1e 	bne	r5,r2,8824 <__alt_mem_sram+0xf7e08824>
    8838:	11800317 	ldw	r6,12(r2)
    883c:	99000117 	ldw	r4,4(r19)
    8840:	81800315 	stw	r6,12(r16)
    8844:	80800215 	stw	r2,8(r16)
    8848:	34000215 	stw	r16,8(r6)
    884c:	14000315 	stw	r16,12(r2)
    8850:	003f2706 	br	84f0 <__alt_mem_sram+0xf7e084f0>
    8854:	88c00054 	ori	r3,r17,1
    8858:	80c00115 	stw	r3,4(r16)
    885c:	8463883a 	add	r17,r16,r17
    8860:	34400515 	stw	r17,20(r6)
    8864:	34400415 	stw	r17,16(r6)
    8868:	10c00054 	ori	r3,r2,1
    886c:	8a400315 	stw	r9,12(r17)
    8870:	8a400215 	stw	r9,8(r17)
    8874:	88c00115 	stw	r3,4(r17)
    8878:	88a3883a 	add	r17,r17,r2
    887c:	88800015 	stw	r2,0(r17)
    8880:	9009883a 	mov	r4,r18
    8884:	000fd4c0 	call	fd4c <__malloc_unlock>
    8888:	80800204 	addi	r2,r16,8
    888c:	003ecb06 	br	83bc <__alt_mem_sram+0xf7e083bc>
    8890:	31000117 	ldw	r4,4(r6)
    8894:	003f1606 	br	84f0 <__alt_mem_sram+0xf7e084f0>
    8898:	63000044 	addi	r12,r12,1
    889c:	608000cc 	andi	r2,r12,3
    88a0:	5ac00204 	addi	r11,r11,8
    88a4:	103f2a1e 	bne	r2,zero,8550 <__alt_mem_sram+0xf7e08550>
    88a8:	00002106 	br	8930 <_malloc_r+0x628>
    88ac:	80800204 	addi	r2,r16,8
    88b0:	84000517 	ldw	r16,20(r16)
    88b4:	143eb31e 	bne	r2,r16,8384 <__alt_mem_sram+0xf7e08384>
    88b8:	18c00084 	addi	r3,r3,2
    88bc:	003eec06 	br	8470 <__alt_mem_sram+0xf7e08470>
    88c0:	8085883a 	add	r2,r16,r2
    88c4:	10c00117 	ldw	r3,4(r2)
    88c8:	81000317 	ldw	r4,12(r16)
    88cc:	81400217 	ldw	r5,8(r16)
    88d0:	18c00054 	ori	r3,r3,1
    88d4:	10c00115 	stw	r3,4(r2)
    88d8:	29000315 	stw	r4,12(r5)
    88dc:	21400215 	stw	r5,8(r4)
    88e0:	9009883a 	mov	r4,r18
    88e4:	000fd4c0 	call	fd4c <__malloc_unlock>
    88e8:	80800204 	addi	r2,r16,8
    88ec:	003eb306 	br	83bc <__alt_mem_sram+0xf7e083bc>
    88f0:	19c016c4 	addi	r7,r3,91
    88f4:	39cb883a 	add	r5,r7,r7
    88f8:	003ec706 	br	8418 <__alt_mem_sram+0xf7e08418>
    88fc:	3804d1ba 	srli	r2,r7,6
    8900:	11000e04 	addi	r4,r2,56
    8904:	210b883a 	add	r5,r4,r4
    8908:	003fbe06 	br	8804 <__alt_mem_sram+0xf7e08804>
    890c:	84ff5d26 	beq	r16,r19,8684 <__alt_mem_sram+0xf7e08684>
    8910:	9c000217 	ldw	r16,8(r19)
    8914:	00bfff04 	movi	r2,-4
    8918:	80c00117 	ldw	r3,4(r16)
    891c:	1886703a 	and	r3,r3,r2
    8920:	003f9706 	br	8780 <__alt_mem_sram+0xf7e08780>
    8924:	52800017 	ldw	r10,0(r10)
    8928:	18ffffc4 	addi	r3,r3,-1
    892c:	50805c1e 	bne	r10,r2,8aa0 <_malloc_r+0x798>
    8930:	190000cc 	andi	r4,r3,3
    8934:	50bffe04 	addi	r2,r10,-8
    8938:	203ffa1e 	bne	r4,zero,8924 <__alt_mem_sram+0xf7e08924>
    893c:	98800117 	ldw	r2,4(r19)
    8940:	0146303a 	nor	r3,zero,r5
    8944:	1884703a 	and	r2,r3,r2
    8948:	98800115 	stw	r2,4(r19)
    894c:	294b883a 	add	r5,r5,r5
    8950:	117f2e36 	bltu	r2,r5,860c <__alt_mem_sram+0xf7e0860c>
    8954:	283f2d26 	beq	r5,zero,860c <__alt_mem_sram+0xf7e0860c>
    8958:	1146703a 	and	r3,r2,r5
    895c:	1800521e 	bne	r3,zero,8aa8 <_malloc_r+0x7a0>
    8960:	6007883a 	mov	r3,r12
    8964:	294b883a 	add	r5,r5,r5
    8968:	1148703a 	and	r4,r2,r5
    896c:	18c00104 	addi	r3,r3,4
    8970:	203ffc26 	beq	r4,zero,8964 <__alt_mem_sram+0xf7e08964>
    8974:	003ef006 	br	8538 <__alt_mem_sram+0xf7e08538>
    8978:	00805504 	movi	r2,340
    897c:	10c01336 	bltu	r2,r3,89cc <_malloc_r+0x6c4>
    8980:	8806d3fa 	srli	r3,r17,15
    8984:	19c01dc4 	addi	r7,r3,119
    8988:	39cb883a 	add	r5,r7,r7
    898c:	003ea206 	br	8418 <__alt_mem_sram+0xf7e08418>
    8990:	00c40004 	movi	r3,4096
    8994:	003f4d06 	br	86cc <__alt_mem_sram+0xf7e086cc>
    8998:	00800044 	movi	r2,1
    899c:	a0800115 	stw	r2,4(r20)
    89a0:	a021883a 	mov	r16,r20
    89a4:	0007883a 	mov	r3,zero
    89a8:	003f7506 	br	8780 <__alt_mem_sram+0xf7e08780>
    89ac:	200bd0ba 	srai	r5,r4,2
    89b0:	01800044 	movi	r6,1
    89b4:	41000117 	ldw	r4,4(r8)
    89b8:	314a983a 	sll	r5,r6,r5
    89bc:	100d883a 	mov	r6,r2
    89c0:	2908b03a 	or	r4,r5,r4
    89c4:	41000115 	stw	r4,4(r8)
    89c8:	003f9d06 	br	8840 <__alt_mem_sram+0xf7e08840>
    89cc:	00815504 	movi	r2,1364
    89d0:	10c01336 	bltu	r2,r3,8a20 <_malloc_r+0x718>
    89d4:	8806d4ba 	srli	r3,r17,18
    89d8:	19c01f04 	addi	r7,r3,124
    89dc:	39cb883a 	add	r5,r7,r7
    89e0:	003e8d06 	br	8418 <__alt_mem_sram+0xf7e08418>
    89e4:	ad400404 	addi	r21,r21,16
    89e8:	003f1d06 	br	8660 <__alt_mem_sram+0xf7e08660>
    89ec:	01001504 	movi	r4,84
    89f0:	20801c36 	bltu	r4,r2,8a64 <_malloc_r+0x75c>
    89f4:	3804d33a 	srli	r2,r7,12
    89f8:	11001b84 	addi	r4,r2,110
    89fc:	210b883a 	add	r5,r4,r4
    8a00:	003f8006 	br	8804 <__alt_mem_sram+0xf7e08804>
    8a04:	3083ffcc 	andi	r2,r6,4095
    8a08:	103f241e 	bne	r2,zero,869c <__alt_mem_sram+0xf7e0869c>
    8a0c:	99000217 	ldw	r4,8(r19)
    8a10:	ad85883a 	add	r2,r21,r22
    8a14:	10800054 	ori	r2,r2,1
    8a18:	20800115 	stw	r2,4(r4)
    8a1c:	003f4a06 	br	8748 <__alt_mem_sram+0xf7e08748>
    8a20:	01403f04 	movi	r5,252
    8a24:	01c01f84 	movi	r7,126
    8a28:	003e7b06 	br	8418 <__alt_mem_sram+0xf7e08418>
    8a2c:	00c00044 	movi	r3,1
    8a30:	002b883a 	mov	r21,zero
    8a34:	003f3006 	br	86f8 <__alt_mem_sram+0xf7e086f8>
    8a38:	00800074 	movhi	r2,1
    8a3c:	10918404 	addi	r2,r2,17936
    8a40:	15000015 	stw	r20,0(r2)
    8a44:	003f1b06 	br	86b4 <__alt_mem_sram+0xf7e086b4>
    8a48:	9009883a 	mov	r4,r18
    8a4c:	81400204 	addi	r5,r16,8
    8a50:	000776c0 	call	776c <_free_r>
    8a54:	00800074 	movhi	r2,1
    8a58:	10985a04 	addi	r2,r2,24936
    8a5c:	10c00017 	ldw	r3,0(r2)
    8a60:	003f3906 	br	8748 <__alt_mem_sram+0xf7e08748>
    8a64:	01005504 	movi	r4,340
    8a68:	20800436 	bltu	r4,r2,8a7c <_malloc_r+0x774>
    8a6c:	3804d3fa 	srli	r2,r7,15
    8a70:	11001dc4 	addi	r4,r2,119
    8a74:	210b883a 	add	r5,r4,r4
    8a78:	003f6206 	br	8804 <__alt_mem_sram+0xf7e08804>
    8a7c:	01015504 	movi	r4,1364
    8a80:	20800436 	bltu	r4,r2,8a94 <_malloc_r+0x78c>
    8a84:	3804d4ba 	srli	r2,r7,18
    8a88:	11001f04 	addi	r4,r2,124
    8a8c:	210b883a 	add	r5,r4,r4
    8a90:	003f5c06 	br	8804 <__alt_mem_sram+0xf7e08804>
    8a94:	01403f04 	movi	r5,252
    8a98:	01001f84 	movi	r4,126
    8a9c:	003f5906 	br	8804 <__alt_mem_sram+0xf7e08804>
    8aa0:	98800117 	ldw	r2,4(r19)
    8aa4:	003fa906 	br	894c <__alt_mem_sram+0xf7e0894c>
    8aa8:	6007883a 	mov	r3,r12
    8aac:	003ea206 	br	8538 <__alt_mem_sram+0xf7e08538>

00008ab0 <memchr>:
    8ab0:	208000cc 	andi	r2,r4,3
    8ab4:	280f883a 	mov	r7,r5
    8ab8:	10003526 	beq	r2,zero,8b90 <memchr+0xe0>
    8abc:	30bfffc4 	addi	r2,r6,-1
    8ac0:	30001b26 	beq	r6,zero,8b30 <memchr+0x80>
    8ac4:	21800003 	ldbu	r6,0(r4)
    8ac8:	28c03fcc 	andi	r3,r5,255
    8acc:	30c01a26 	beq	r6,r3,8b38 <memchr+0x88>
    8ad0:	180d883a 	mov	r6,r3
    8ad4:	00000406 	br	8ae8 <memchr+0x38>
    8ad8:	10001526 	beq	r2,zero,8b30 <memchr+0x80>
    8adc:	20c00003 	ldbu	r3,0(r4)
    8ae0:	10bfffc4 	addi	r2,r2,-1
    8ae4:	19801426 	beq	r3,r6,8b38 <memchr+0x88>
    8ae8:	21000044 	addi	r4,r4,1
    8aec:	20c000cc 	andi	r3,r4,3
    8af0:	183ff91e 	bne	r3,zero,8ad8 <__alt_mem_sram+0xf7e08ad8>
    8af4:	024000c4 	movi	r9,3
    8af8:	48801136 	bltu	r9,r2,8b40 <memchr+0x90>
    8afc:	10000c26 	beq	r2,zero,8b30 <memchr+0x80>
    8b00:	20c00003 	ldbu	r3,0(r4)
    8b04:	29403fcc 	andi	r5,r5,255
    8b08:	19400b26 	beq	r3,r5,8b38 <memchr+0x88>
    8b0c:	20c00044 	addi	r3,r4,1
    8b10:	2085883a 	add	r2,r4,r2
    8b14:	39803fcc 	andi	r6,r7,255
    8b18:	00000306 	br	8b28 <memchr+0x78>
    8b1c:	18c00044 	addi	r3,r3,1
    8b20:	197fffc3 	ldbu	r5,-1(r3)
    8b24:	29800426 	beq	r5,r6,8b38 <memchr+0x88>
    8b28:	1809883a 	mov	r4,r3
    8b2c:	18bffb1e 	bne	r3,r2,8b1c <__alt_mem_sram+0xf7e08b1c>
    8b30:	0005883a 	mov	r2,zero
    8b34:	f800283a 	ret
    8b38:	2005883a 	mov	r2,r4
    8b3c:	f800283a 	ret
    8b40:	28c03fcc 	andi	r3,r5,255
    8b44:	1810923a 	slli	r8,r3,8
    8b48:	02ffbff4 	movhi	r11,65279
    8b4c:	02a02074 	movhi	r10,32897
    8b50:	40c6b03a 	or	r3,r8,r3
    8b54:	1810943a 	slli	r8,r3,16
    8b58:	5affbfc4 	addi	r11,r11,-257
    8b5c:	52a02004 	addi	r10,r10,-32640
    8b60:	40d0b03a 	or	r8,r8,r3
    8b64:	20c00017 	ldw	r3,0(r4)
    8b68:	40c6f03a 	xor	r3,r8,r3
    8b6c:	1acd883a 	add	r6,r3,r11
    8b70:	00c6303a 	nor	r3,zero,r3
    8b74:	30c6703a 	and	r3,r6,r3
    8b78:	1a86703a 	and	r3,r3,r10
    8b7c:	183fdf1e 	bne	r3,zero,8afc <__alt_mem_sram+0xf7e08afc>
    8b80:	10bfff04 	addi	r2,r2,-4
    8b84:	21000104 	addi	r4,r4,4
    8b88:	48bff636 	bltu	r9,r2,8b64 <__alt_mem_sram+0xf7e08b64>
    8b8c:	003fdb06 	br	8afc <__alt_mem_sram+0xf7e08afc>
    8b90:	3005883a 	mov	r2,r6
    8b94:	003fd706 	br	8af4 <__alt_mem_sram+0xf7e08af4>

00008b98 <memcpy>:
    8b98:	deffff04 	addi	sp,sp,-4
    8b9c:	dc000015 	stw	r16,0(sp)
    8ba0:	00c003c4 	movi	r3,15
    8ba4:	2005883a 	mov	r2,r4
    8ba8:	1980432e 	bgeu	r3,r6,8cb8 <memcpy+0x120>
    8bac:	2146b03a 	or	r3,r4,r5
    8bb0:	18c000cc 	andi	r3,r3,3
    8bb4:	1800421e 	bne	r3,zero,8cc0 <memcpy+0x128>
    8bb8:	343ffc04 	addi	r16,r6,-16
    8bbc:	8020d13a 	srli	r16,r16,4
    8bc0:	28c00104 	addi	r3,r5,4
    8bc4:	23400104 	addi	r13,r4,4
    8bc8:	801e913a 	slli	r15,r16,4
    8bcc:	2b000204 	addi	r12,r5,8
    8bd0:	22c00204 	addi	r11,r4,8
    8bd4:	7bc00504 	addi	r15,r15,20
    8bd8:	2a800304 	addi	r10,r5,12
    8bdc:	22400304 	addi	r9,r4,12
    8be0:	2bdf883a 	add	r15,r5,r15
    8be4:	2811883a 	mov	r8,r5
    8be8:	200f883a 	mov	r7,r4
    8bec:	41000017 	ldw	r4,0(r8)
    8bf0:	39c00404 	addi	r7,r7,16
    8bf4:	18c00404 	addi	r3,r3,16
    8bf8:	393ffc15 	stw	r4,-16(r7)
    8bfc:	1bbffc17 	ldw	r14,-16(r3)
    8c00:	6b400404 	addi	r13,r13,16
    8c04:	5ac00404 	addi	r11,r11,16
    8c08:	6bbffc15 	stw	r14,-16(r13)
    8c0c:	63800017 	ldw	r14,0(r12)
    8c10:	4a400404 	addi	r9,r9,16
    8c14:	42000404 	addi	r8,r8,16
    8c18:	5bbffc15 	stw	r14,-16(r11)
    8c1c:	53800017 	ldw	r14,0(r10)
    8c20:	63000404 	addi	r12,r12,16
    8c24:	52800404 	addi	r10,r10,16
    8c28:	4bbffc15 	stw	r14,-16(r9)
    8c2c:	1bffef1e 	bne	r3,r15,8bec <__alt_mem_sram+0xf7e08bec>
    8c30:	81c00044 	addi	r7,r16,1
    8c34:	380e913a 	slli	r7,r7,4
    8c38:	310003cc 	andi	r4,r6,15
    8c3c:	02c000c4 	movi	r11,3
    8c40:	11c7883a 	add	r3,r2,r7
    8c44:	29cb883a 	add	r5,r5,r7
    8c48:	59001f2e 	bgeu	r11,r4,8cc8 <memcpy+0x130>
    8c4c:	1813883a 	mov	r9,r3
    8c50:	2811883a 	mov	r8,r5
    8c54:	200f883a 	mov	r7,r4
    8c58:	42800017 	ldw	r10,0(r8)
    8c5c:	4a400104 	addi	r9,r9,4
    8c60:	39ffff04 	addi	r7,r7,-4
    8c64:	4abfff15 	stw	r10,-4(r9)
    8c68:	42000104 	addi	r8,r8,4
    8c6c:	59fffa36 	bltu	r11,r7,8c58 <__alt_mem_sram+0xf7e08c58>
    8c70:	213fff04 	addi	r4,r4,-4
    8c74:	2008d0ba 	srli	r4,r4,2
    8c78:	318000cc 	andi	r6,r6,3
    8c7c:	21000044 	addi	r4,r4,1
    8c80:	2109883a 	add	r4,r4,r4
    8c84:	2109883a 	add	r4,r4,r4
    8c88:	1907883a 	add	r3,r3,r4
    8c8c:	290b883a 	add	r5,r5,r4
    8c90:	30000626 	beq	r6,zero,8cac <memcpy+0x114>
    8c94:	198d883a 	add	r6,r3,r6
    8c98:	29c00003 	ldbu	r7,0(r5)
    8c9c:	18c00044 	addi	r3,r3,1
    8ca0:	29400044 	addi	r5,r5,1
    8ca4:	19ffffc5 	stb	r7,-1(r3)
    8ca8:	19bffb1e 	bne	r3,r6,8c98 <__alt_mem_sram+0xf7e08c98>
    8cac:	dc000017 	ldw	r16,0(sp)
    8cb0:	dec00104 	addi	sp,sp,4
    8cb4:	f800283a 	ret
    8cb8:	2007883a 	mov	r3,r4
    8cbc:	003ff406 	br	8c90 <__alt_mem_sram+0xf7e08c90>
    8cc0:	2007883a 	mov	r3,r4
    8cc4:	003ff306 	br	8c94 <__alt_mem_sram+0xf7e08c94>
    8cc8:	200d883a 	mov	r6,r4
    8ccc:	003ff006 	br	8c90 <__alt_mem_sram+0xf7e08c90>

00008cd0 <memmove>:
    8cd0:	2005883a 	mov	r2,r4
    8cd4:	29000b2e 	bgeu	r5,r4,8d04 <memmove+0x34>
    8cd8:	298f883a 	add	r7,r5,r6
    8cdc:	21c0092e 	bgeu	r4,r7,8d04 <memmove+0x34>
    8ce0:	2187883a 	add	r3,r4,r6
    8ce4:	198bc83a 	sub	r5,r3,r6
    8ce8:	30004b26 	beq	r6,zero,8e18 <memmove+0x148>
    8cec:	39ffffc4 	addi	r7,r7,-1
    8cf0:	39000003 	ldbu	r4,0(r7)
    8cf4:	18ffffc4 	addi	r3,r3,-1
    8cf8:	19000005 	stb	r4,0(r3)
    8cfc:	197ffb1e 	bne	r3,r5,8cec <__alt_mem_sram+0xf7e08cec>
    8d00:	f800283a 	ret
    8d04:	00c003c4 	movi	r3,15
    8d08:	1980412e 	bgeu	r3,r6,8e10 <memmove+0x140>
    8d0c:	1146b03a 	or	r3,r2,r5
    8d10:	18c000cc 	andi	r3,r3,3
    8d14:	1800411e 	bne	r3,zero,8e1c <memmove+0x14c>
    8d18:	33fffc04 	addi	r15,r6,-16
    8d1c:	781ed13a 	srli	r15,r15,4
    8d20:	28c00104 	addi	r3,r5,4
    8d24:	13400104 	addi	r13,r2,4
    8d28:	781c913a 	slli	r14,r15,4
    8d2c:	2b000204 	addi	r12,r5,8
    8d30:	12c00204 	addi	r11,r2,8
    8d34:	73800504 	addi	r14,r14,20
    8d38:	2a800304 	addi	r10,r5,12
    8d3c:	12400304 	addi	r9,r2,12
    8d40:	2b9d883a 	add	r14,r5,r14
    8d44:	2811883a 	mov	r8,r5
    8d48:	100f883a 	mov	r7,r2
    8d4c:	41000017 	ldw	r4,0(r8)
    8d50:	39c00404 	addi	r7,r7,16
    8d54:	18c00404 	addi	r3,r3,16
    8d58:	393ffc15 	stw	r4,-16(r7)
    8d5c:	193ffc17 	ldw	r4,-16(r3)
    8d60:	6b400404 	addi	r13,r13,16
    8d64:	5ac00404 	addi	r11,r11,16
    8d68:	693ffc15 	stw	r4,-16(r13)
    8d6c:	61000017 	ldw	r4,0(r12)
    8d70:	4a400404 	addi	r9,r9,16
    8d74:	42000404 	addi	r8,r8,16
    8d78:	593ffc15 	stw	r4,-16(r11)
    8d7c:	51000017 	ldw	r4,0(r10)
    8d80:	63000404 	addi	r12,r12,16
    8d84:	52800404 	addi	r10,r10,16
    8d88:	493ffc15 	stw	r4,-16(r9)
    8d8c:	1bbfef1e 	bne	r3,r14,8d4c <__alt_mem_sram+0xf7e08d4c>
    8d90:	79000044 	addi	r4,r15,1
    8d94:	2008913a 	slli	r4,r4,4
    8d98:	328003cc 	andi	r10,r6,15
    8d9c:	02c000c4 	movi	r11,3
    8da0:	1107883a 	add	r3,r2,r4
    8da4:	290b883a 	add	r5,r5,r4
    8da8:	5a801e2e 	bgeu	r11,r10,8e24 <memmove+0x154>
    8dac:	1813883a 	mov	r9,r3
    8db0:	2811883a 	mov	r8,r5
    8db4:	500f883a 	mov	r7,r10
    8db8:	41000017 	ldw	r4,0(r8)
    8dbc:	4a400104 	addi	r9,r9,4
    8dc0:	39ffff04 	addi	r7,r7,-4
    8dc4:	493fff15 	stw	r4,-4(r9)
    8dc8:	42000104 	addi	r8,r8,4
    8dcc:	59fffa36 	bltu	r11,r7,8db8 <__alt_mem_sram+0xf7e08db8>
    8dd0:	513fff04 	addi	r4,r10,-4
    8dd4:	2008d0ba 	srli	r4,r4,2
    8dd8:	318000cc 	andi	r6,r6,3
    8ddc:	21000044 	addi	r4,r4,1
    8de0:	2109883a 	add	r4,r4,r4
    8de4:	2109883a 	add	r4,r4,r4
    8de8:	1907883a 	add	r3,r3,r4
    8dec:	290b883a 	add	r5,r5,r4
    8df0:	30000926 	beq	r6,zero,8e18 <memmove+0x148>
    8df4:	198d883a 	add	r6,r3,r6
    8df8:	29c00003 	ldbu	r7,0(r5)
    8dfc:	18c00044 	addi	r3,r3,1
    8e00:	29400044 	addi	r5,r5,1
    8e04:	19ffffc5 	stb	r7,-1(r3)
    8e08:	19bffb1e 	bne	r3,r6,8df8 <__alt_mem_sram+0xf7e08df8>
    8e0c:	f800283a 	ret
    8e10:	1007883a 	mov	r3,r2
    8e14:	003ff606 	br	8df0 <__alt_mem_sram+0xf7e08df0>
    8e18:	f800283a 	ret
    8e1c:	1007883a 	mov	r3,r2
    8e20:	003ff406 	br	8df4 <__alt_mem_sram+0xf7e08df4>
    8e24:	500d883a 	mov	r6,r10
    8e28:	003ff106 	br	8df0 <__alt_mem_sram+0xf7e08df0>

00008e2c <memset>:
    8e2c:	20c000cc 	andi	r3,r4,3
    8e30:	2005883a 	mov	r2,r4
    8e34:	18004326 	beq	r3,zero,8f44 <memset+0x118>
    8e38:	31ffffc4 	addi	r7,r6,-1
    8e3c:	30004026 	beq	r6,zero,8f40 <memset+0x114>
    8e40:	2813883a 	mov	r9,r5
    8e44:	200d883a 	mov	r6,r4
    8e48:	2007883a 	mov	r3,r4
    8e4c:	00000406 	br	8e60 <memset+0x34>
    8e50:	3a3fffc4 	addi	r8,r7,-1
    8e54:	31800044 	addi	r6,r6,1
    8e58:	38003926 	beq	r7,zero,8f40 <memset+0x114>
    8e5c:	400f883a 	mov	r7,r8
    8e60:	18c00044 	addi	r3,r3,1
    8e64:	32400005 	stb	r9,0(r6)
    8e68:	1a0000cc 	andi	r8,r3,3
    8e6c:	403ff81e 	bne	r8,zero,8e50 <__alt_mem_sram+0xf7e08e50>
    8e70:	010000c4 	movi	r4,3
    8e74:	21c02d2e 	bgeu	r4,r7,8f2c <memset+0x100>
    8e78:	29803fcc 	andi	r6,r5,255
    8e7c:	3008923a 	slli	r4,r6,8
    8e80:	218cb03a 	or	r6,r4,r6
    8e84:	3008943a 	slli	r4,r6,16
    8e88:	218cb03a 	or	r6,r4,r6
    8e8c:	010003c4 	movi	r4,15
    8e90:	21c0182e 	bgeu	r4,r7,8ef4 <memset+0xc8>
    8e94:	3b3ffc04 	addi	r12,r7,-16
    8e98:	6018d13a 	srli	r12,r12,4
    8e9c:	1a000104 	addi	r8,r3,4
    8ea0:	1ac00204 	addi	r11,r3,8
    8ea4:	6008913a 	slli	r4,r12,4
    8ea8:	1a800304 	addi	r10,r3,12
    8eac:	1813883a 	mov	r9,r3
    8eb0:	21000504 	addi	r4,r4,20
    8eb4:	1909883a 	add	r4,r3,r4
    8eb8:	49800015 	stw	r6,0(r9)
    8ebc:	41800015 	stw	r6,0(r8)
    8ec0:	59800015 	stw	r6,0(r11)
    8ec4:	51800015 	stw	r6,0(r10)
    8ec8:	42000404 	addi	r8,r8,16
    8ecc:	4a400404 	addi	r9,r9,16
    8ed0:	5ac00404 	addi	r11,r11,16
    8ed4:	52800404 	addi	r10,r10,16
    8ed8:	413ff71e 	bne	r8,r4,8eb8 <__alt_mem_sram+0xf7e08eb8>
    8edc:	63000044 	addi	r12,r12,1
    8ee0:	6018913a 	slli	r12,r12,4
    8ee4:	39c003cc 	andi	r7,r7,15
    8ee8:	010000c4 	movi	r4,3
    8eec:	1b07883a 	add	r3,r3,r12
    8ef0:	21c00e2e 	bgeu	r4,r7,8f2c <memset+0x100>
    8ef4:	1813883a 	mov	r9,r3
    8ef8:	3811883a 	mov	r8,r7
    8efc:	010000c4 	movi	r4,3
    8f00:	49800015 	stw	r6,0(r9)
    8f04:	423fff04 	addi	r8,r8,-4
    8f08:	4a400104 	addi	r9,r9,4
    8f0c:	223ffc36 	bltu	r4,r8,8f00 <__alt_mem_sram+0xf7e08f00>
    8f10:	393fff04 	addi	r4,r7,-4
    8f14:	2008d0ba 	srli	r4,r4,2
    8f18:	39c000cc 	andi	r7,r7,3
    8f1c:	21000044 	addi	r4,r4,1
    8f20:	2109883a 	add	r4,r4,r4
    8f24:	2109883a 	add	r4,r4,r4
    8f28:	1907883a 	add	r3,r3,r4
    8f2c:	38000426 	beq	r7,zero,8f40 <memset+0x114>
    8f30:	19cf883a 	add	r7,r3,r7
    8f34:	19400005 	stb	r5,0(r3)
    8f38:	18c00044 	addi	r3,r3,1
    8f3c:	19fffd1e 	bne	r3,r7,8f34 <__alt_mem_sram+0xf7e08f34>
    8f40:	f800283a 	ret
    8f44:	2007883a 	mov	r3,r4
    8f48:	300f883a 	mov	r7,r6
    8f4c:	003fc806 	br	8e70 <__alt_mem_sram+0xf7e08e70>

00008f50 <_Balloc>:
    8f50:	20801317 	ldw	r2,76(r4)
    8f54:	defffc04 	addi	sp,sp,-16
    8f58:	dc400115 	stw	r17,4(sp)
    8f5c:	dc000015 	stw	r16,0(sp)
    8f60:	dfc00315 	stw	ra,12(sp)
    8f64:	dc800215 	stw	r18,8(sp)
    8f68:	2023883a 	mov	r17,r4
    8f6c:	2821883a 	mov	r16,r5
    8f70:	10000f26 	beq	r2,zero,8fb0 <_Balloc+0x60>
    8f74:	8407883a 	add	r3,r16,r16
    8f78:	18c7883a 	add	r3,r3,r3
    8f7c:	10c7883a 	add	r3,r2,r3
    8f80:	18800017 	ldw	r2,0(r3)
    8f84:	10001126 	beq	r2,zero,8fcc <_Balloc+0x7c>
    8f88:	11000017 	ldw	r4,0(r2)
    8f8c:	19000015 	stw	r4,0(r3)
    8f90:	10000415 	stw	zero,16(r2)
    8f94:	10000315 	stw	zero,12(r2)
    8f98:	dfc00317 	ldw	ra,12(sp)
    8f9c:	dc800217 	ldw	r18,8(sp)
    8fa0:	dc400117 	ldw	r17,4(sp)
    8fa4:	dc000017 	ldw	r16,0(sp)
    8fa8:	dec00404 	addi	sp,sp,16
    8fac:	f800283a 	ret
    8fb0:	01400104 	movi	r5,4
    8fb4:	01800844 	movi	r6,33
    8fb8:	000bc680 	call	bc68 <_calloc_r>
    8fbc:	88801315 	stw	r2,76(r17)
    8fc0:	103fec1e 	bne	r2,zero,8f74 <__alt_mem_sram+0xf7e08f74>
    8fc4:	0005883a 	mov	r2,zero
    8fc8:	003ff306 	br	8f98 <__alt_mem_sram+0xf7e08f98>
    8fcc:	01400044 	movi	r5,1
    8fd0:	2c24983a 	sll	r18,r5,r16
    8fd4:	8809883a 	mov	r4,r17
    8fd8:	91800144 	addi	r6,r18,5
    8fdc:	318d883a 	add	r6,r6,r6
    8fe0:	318d883a 	add	r6,r6,r6
    8fe4:	000bc680 	call	bc68 <_calloc_r>
    8fe8:	103ff626 	beq	r2,zero,8fc4 <__alt_mem_sram+0xf7e08fc4>
    8fec:	14000115 	stw	r16,4(r2)
    8ff0:	14800215 	stw	r18,8(r2)
    8ff4:	003fe606 	br	8f90 <__alt_mem_sram+0xf7e08f90>

00008ff8 <_Bfree>:
    8ff8:	28000826 	beq	r5,zero,901c <_Bfree+0x24>
    8ffc:	28c00117 	ldw	r3,4(r5)
    9000:	20801317 	ldw	r2,76(r4)
    9004:	18c7883a 	add	r3,r3,r3
    9008:	18c7883a 	add	r3,r3,r3
    900c:	10c5883a 	add	r2,r2,r3
    9010:	10c00017 	ldw	r3,0(r2)
    9014:	28c00015 	stw	r3,0(r5)
    9018:	11400015 	stw	r5,0(r2)
    901c:	f800283a 	ret

00009020 <__multadd>:
    9020:	defffa04 	addi	sp,sp,-24
    9024:	dc000115 	stw	r16,4(sp)
    9028:	2c000417 	ldw	r16,16(r5)
    902c:	dc800315 	stw	r18,12(sp)
    9030:	dc400215 	stw	r17,8(sp)
    9034:	dfc00515 	stw	ra,20(sp)
    9038:	dcc00415 	stw	r19,16(sp)
    903c:	2823883a 	mov	r17,r5
    9040:	2025883a 	mov	r18,r4
    9044:	2a400504 	addi	r9,r5,20
    9048:	0015883a 	mov	r10,zero
    904c:	4a000017 	ldw	r8,0(r9)
    9050:	4a400104 	addi	r9,r9,4
    9054:	52800044 	addi	r10,r10,1
    9058:	40ffffcc 	andi	r3,r8,65535
    905c:	1987383a 	mul	r3,r3,r6
    9060:	4010d43a 	srli	r8,r8,16
    9064:	19cf883a 	add	r7,r3,r7
    9068:	4191383a 	mul	r8,r8,r6
    906c:	3816d43a 	srli	r11,r7,16
    9070:	38ffffcc 	andi	r3,r7,65535
    9074:	5a0f883a 	add	r7,r11,r8
    9078:	3810943a 	slli	r8,r7,16
    907c:	380ed43a 	srli	r7,r7,16
    9080:	40c7883a 	add	r3,r8,r3
    9084:	48ffff15 	stw	r3,-4(r9)
    9088:	543ff016 	blt	r10,r16,904c <__alt_mem_sram+0xf7e0904c>
    908c:	38000926 	beq	r7,zero,90b4 <__multadd+0x94>
    9090:	88800217 	ldw	r2,8(r17)
    9094:	80800f0e 	bge	r16,r2,90d4 <__multadd+0xb4>
    9098:	80800144 	addi	r2,r16,5
    909c:	1085883a 	add	r2,r2,r2
    90a0:	1085883a 	add	r2,r2,r2
    90a4:	8885883a 	add	r2,r17,r2
    90a8:	11c00015 	stw	r7,0(r2)
    90ac:	84000044 	addi	r16,r16,1
    90b0:	8c000415 	stw	r16,16(r17)
    90b4:	8805883a 	mov	r2,r17
    90b8:	dfc00517 	ldw	ra,20(sp)
    90bc:	dcc00417 	ldw	r19,16(sp)
    90c0:	dc800317 	ldw	r18,12(sp)
    90c4:	dc400217 	ldw	r17,8(sp)
    90c8:	dc000117 	ldw	r16,4(sp)
    90cc:	dec00604 	addi	sp,sp,24
    90d0:	f800283a 	ret
    90d4:	89400117 	ldw	r5,4(r17)
    90d8:	9009883a 	mov	r4,r18
    90dc:	d9c00015 	stw	r7,0(sp)
    90e0:	29400044 	addi	r5,r5,1
    90e4:	0008f500 	call	8f50 <_Balloc>
    90e8:	89800417 	ldw	r6,16(r17)
    90ec:	89400304 	addi	r5,r17,12
    90f0:	11000304 	addi	r4,r2,12
    90f4:	31800084 	addi	r6,r6,2
    90f8:	318d883a 	add	r6,r6,r6
    90fc:	318d883a 	add	r6,r6,r6
    9100:	1027883a 	mov	r19,r2
    9104:	0008b980 	call	8b98 <memcpy>
    9108:	89000117 	ldw	r4,4(r17)
    910c:	90c01317 	ldw	r3,76(r18)
    9110:	d9c00017 	ldw	r7,0(sp)
    9114:	2109883a 	add	r4,r4,r4
    9118:	2109883a 	add	r4,r4,r4
    911c:	1907883a 	add	r3,r3,r4
    9120:	18800017 	ldw	r2,0(r3)
    9124:	88800015 	stw	r2,0(r17)
    9128:	1c400015 	stw	r17,0(r3)
    912c:	9823883a 	mov	r17,r19
    9130:	003fd906 	br	9098 <__alt_mem_sram+0xf7e09098>

00009134 <__s2b>:
    9134:	defff904 	addi	sp,sp,-28
    9138:	dc400115 	stw	r17,4(sp)
    913c:	dc000015 	stw	r16,0(sp)
    9140:	2023883a 	mov	r17,r4
    9144:	2821883a 	mov	r16,r5
    9148:	39000204 	addi	r4,r7,8
    914c:	01400244 	movi	r5,9
    9150:	dcc00315 	stw	r19,12(sp)
    9154:	dc800215 	stw	r18,8(sp)
    9158:	dfc00615 	stw	ra,24(sp)
    915c:	dd400515 	stw	r21,20(sp)
    9160:	dd000415 	stw	r20,16(sp)
    9164:	3825883a 	mov	r18,r7
    9168:	3027883a 	mov	r19,r6
    916c:	000d0ac0 	call	d0ac <__divsi3>
    9170:	00c00044 	movi	r3,1
    9174:	000b883a 	mov	r5,zero
    9178:	1880030e 	bge	r3,r2,9188 <__s2b+0x54>
    917c:	18c7883a 	add	r3,r3,r3
    9180:	29400044 	addi	r5,r5,1
    9184:	18bffd16 	blt	r3,r2,917c <__alt_mem_sram+0xf7e0917c>
    9188:	8809883a 	mov	r4,r17
    918c:	0008f500 	call	8f50 <_Balloc>
    9190:	d8c00717 	ldw	r3,28(sp)
    9194:	10c00515 	stw	r3,20(r2)
    9198:	00c00044 	movi	r3,1
    919c:	10c00415 	stw	r3,16(r2)
    91a0:	00c00244 	movi	r3,9
    91a4:	1cc0210e 	bge	r3,r19,922c <__s2b+0xf8>
    91a8:	80eb883a 	add	r21,r16,r3
    91ac:	a829883a 	mov	r20,r21
    91b0:	84e1883a 	add	r16,r16,r19
    91b4:	a1c00007 	ldb	r7,0(r20)
    91b8:	8809883a 	mov	r4,r17
    91bc:	a5000044 	addi	r20,r20,1
    91c0:	100b883a 	mov	r5,r2
    91c4:	01800284 	movi	r6,10
    91c8:	39fff404 	addi	r7,r7,-48
    91cc:	00090200 	call	9020 <__multadd>
    91d0:	a43ff81e 	bne	r20,r16,91b4 <__alt_mem_sram+0xf7e091b4>
    91d4:	ace1883a 	add	r16,r21,r19
    91d8:	843ffe04 	addi	r16,r16,-8
    91dc:	9c800a0e 	bge	r19,r18,9208 <__s2b+0xd4>
    91e0:	94e5c83a 	sub	r18,r18,r19
    91e4:	84a5883a 	add	r18,r16,r18
    91e8:	81c00007 	ldb	r7,0(r16)
    91ec:	8809883a 	mov	r4,r17
    91f0:	84000044 	addi	r16,r16,1
    91f4:	100b883a 	mov	r5,r2
    91f8:	01800284 	movi	r6,10
    91fc:	39fff404 	addi	r7,r7,-48
    9200:	00090200 	call	9020 <__multadd>
    9204:	84bff81e 	bne	r16,r18,91e8 <__alt_mem_sram+0xf7e091e8>
    9208:	dfc00617 	ldw	ra,24(sp)
    920c:	dd400517 	ldw	r21,20(sp)
    9210:	dd000417 	ldw	r20,16(sp)
    9214:	dcc00317 	ldw	r19,12(sp)
    9218:	dc800217 	ldw	r18,8(sp)
    921c:	dc400117 	ldw	r17,4(sp)
    9220:	dc000017 	ldw	r16,0(sp)
    9224:	dec00704 	addi	sp,sp,28
    9228:	f800283a 	ret
    922c:	84000284 	addi	r16,r16,10
    9230:	1827883a 	mov	r19,r3
    9234:	003fe906 	br	91dc <__alt_mem_sram+0xf7e091dc>

00009238 <__hi0bits>:
    9238:	20bfffec 	andhi	r2,r4,65535
    923c:	1000141e 	bne	r2,zero,9290 <__hi0bits+0x58>
    9240:	2008943a 	slli	r4,r4,16
    9244:	00800404 	movi	r2,16
    9248:	20ffc02c 	andhi	r3,r4,65280
    924c:	1800021e 	bne	r3,zero,9258 <__hi0bits+0x20>
    9250:	2008923a 	slli	r4,r4,8
    9254:	10800204 	addi	r2,r2,8
    9258:	20fc002c 	andhi	r3,r4,61440
    925c:	1800021e 	bne	r3,zero,9268 <__hi0bits+0x30>
    9260:	2008913a 	slli	r4,r4,4
    9264:	10800104 	addi	r2,r2,4
    9268:	20f0002c 	andhi	r3,r4,49152
    926c:	1800031e 	bne	r3,zero,927c <__hi0bits+0x44>
    9270:	2109883a 	add	r4,r4,r4
    9274:	10800084 	addi	r2,r2,2
    9278:	2109883a 	add	r4,r4,r4
    927c:	20000316 	blt	r4,zero,928c <__hi0bits+0x54>
    9280:	2110002c 	andhi	r4,r4,16384
    9284:	2000041e 	bne	r4,zero,9298 <__hi0bits+0x60>
    9288:	00800804 	movi	r2,32
    928c:	f800283a 	ret
    9290:	0005883a 	mov	r2,zero
    9294:	003fec06 	br	9248 <__alt_mem_sram+0xf7e09248>
    9298:	10800044 	addi	r2,r2,1
    929c:	f800283a 	ret

000092a0 <__lo0bits>:
    92a0:	20c00017 	ldw	r3,0(r4)
    92a4:	188001cc 	andi	r2,r3,7
    92a8:	10000826 	beq	r2,zero,92cc <__lo0bits+0x2c>
    92ac:	1880004c 	andi	r2,r3,1
    92b0:	1000211e 	bne	r2,zero,9338 <__lo0bits+0x98>
    92b4:	1880008c 	andi	r2,r3,2
    92b8:	1000211e 	bne	r2,zero,9340 <__lo0bits+0xa0>
    92bc:	1806d0ba 	srli	r3,r3,2
    92c0:	00800084 	movi	r2,2
    92c4:	20c00015 	stw	r3,0(r4)
    92c8:	f800283a 	ret
    92cc:	18bfffcc 	andi	r2,r3,65535
    92d0:	10001326 	beq	r2,zero,9320 <__lo0bits+0x80>
    92d4:	0005883a 	mov	r2,zero
    92d8:	19403fcc 	andi	r5,r3,255
    92dc:	2800021e 	bne	r5,zero,92e8 <__lo0bits+0x48>
    92e0:	1806d23a 	srli	r3,r3,8
    92e4:	10800204 	addi	r2,r2,8
    92e8:	194003cc 	andi	r5,r3,15
    92ec:	2800021e 	bne	r5,zero,92f8 <__lo0bits+0x58>
    92f0:	1806d13a 	srli	r3,r3,4
    92f4:	10800104 	addi	r2,r2,4
    92f8:	194000cc 	andi	r5,r3,3
    92fc:	2800021e 	bne	r5,zero,9308 <__lo0bits+0x68>
    9300:	1806d0ba 	srli	r3,r3,2
    9304:	10800084 	addi	r2,r2,2
    9308:	1940004c 	andi	r5,r3,1
    930c:	2800081e 	bne	r5,zero,9330 <__lo0bits+0x90>
    9310:	1806d07a 	srli	r3,r3,1
    9314:	1800051e 	bne	r3,zero,932c <__lo0bits+0x8c>
    9318:	00800804 	movi	r2,32
    931c:	f800283a 	ret
    9320:	1806d43a 	srli	r3,r3,16
    9324:	00800404 	movi	r2,16
    9328:	003feb06 	br	92d8 <__alt_mem_sram+0xf7e092d8>
    932c:	10800044 	addi	r2,r2,1
    9330:	20c00015 	stw	r3,0(r4)
    9334:	f800283a 	ret
    9338:	0005883a 	mov	r2,zero
    933c:	f800283a 	ret
    9340:	1806d07a 	srli	r3,r3,1
    9344:	00800044 	movi	r2,1
    9348:	20c00015 	stw	r3,0(r4)
    934c:	f800283a 	ret

00009350 <__i2b>:
    9350:	defffd04 	addi	sp,sp,-12
    9354:	dc000015 	stw	r16,0(sp)
    9358:	04000044 	movi	r16,1
    935c:	dc400115 	stw	r17,4(sp)
    9360:	2823883a 	mov	r17,r5
    9364:	800b883a 	mov	r5,r16
    9368:	dfc00215 	stw	ra,8(sp)
    936c:	0008f500 	call	8f50 <_Balloc>
    9370:	14400515 	stw	r17,20(r2)
    9374:	14000415 	stw	r16,16(r2)
    9378:	dfc00217 	ldw	ra,8(sp)
    937c:	dc400117 	ldw	r17,4(sp)
    9380:	dc000017 	ldw	r16,0(sp)
    9384:	dec00304 	addi	sp,sp,12
    9388:	f800283a 	ret

0000938c <__multiply>:
    938c:	defffa04 	addi	sp,sp,-24
    9390:	dcc00315 	stw	r19,12(sp)
    9394:	dc800215 	stw	r18,8(sp)
    9398:	2cc00417 	ldw	r19,16(r5)
    939c:	34800417 	ldw	r18,16(r6)
    93a0:	dd000415 	stw	r20,16(sp)
    93a4:	dc400115 	stw	r17,4(sp)
    93a8:	dfc00515 	stw	ra,20(sp)
    93ac:	dc000015 	stw	r16,0(sp)
    93b0:	2829883a 	mov	r20,r5
    93b4:	3023883a 	mov	r17,r6
    93b8:	9c807016 	blt	r19,r18,957c <__multiply+0x1f0>
    93bc:	9005883a 	mov	r2,r18
    93c0:	9825883a 	mov	r18,r19
    93c4:	1027883a 	mov	r19,r2
    93c8:	a0800217 	ldw	r2,8(r20)
    93cc:	94e1883a 	add	r16,r18,r19
    93d0:	a1400117 	ldw	r5,4(r20)
    93d4:	1400010e 	bge	r2,r16,93dc <__multiply+0x50>
    93d8:	29400044 	addi	r5,r5,1
    93dc:	0008f500 	call	8f50 <_Balloc>
    93e0:	8417883a 	add	r11,r16,r16
    93e4:	13000504 	addi	r12,r2,20
    93e8:	5ad7883a 	add	r11,r11,r11
    93ec:	62d7883a 	add	r11,r12,r11
    93f0:	6007883a 	mov	r3,r12
    93f4:	62c0032e 	bgeu	r12,r11,9404 <__multiply+0x78>
    93f8:	18000015 	stw	zero,0(r3)
    93fc:	18c00104 	addi	r3,r3,4
    9400:	1afffd36 	bltu	r3,r11,93f8 <__alt_mem_sram+0xf7e093f8>
    9404:	9ce7883a 	add	r19,r19,r19
    9408:	94a5883a 	add	r18,r18,r18
    940c:	89800504 	addi	r6,r17,20
    9410:	9ce7883a 	add	r19,r19,r19
    9414:	a3800504 	addi	r14,r20,20
    9418:	94a5883a 	add	r18,r18,r18
    941c:	34db883a 	add	r13,r6,r19
    9420:	7495883a 	add	r10,r14,r18
    9424:	3340422e 	bgeu	r6,r13,9530 <__multiply+0x1a4>
    9428:	34400017 	ldw	r17,0(r6)
    942c:	8cbfffcc 	andi	r18,r17,65535
    9430:	90001b26 	beq	r18,zero,94a0 <__multiply+0x114>
    9434:	6013883a 	mov	r9,r12
    9438:	7023883a 	mov	r17,r14
    943c:	0011883a 	mov	r8,zero
    9440:	88c00017 	ldw	r3,0(r17)
    9444:	4bc00017 	ldw	r15,0(r9)
    9448:	8c400104 	addi	r17,r17,4
    944c:	19ffffcc 	andi	r7,r3,65535
    9450:	3c8f383a 	mul	r7,r7,r18
    9454:	1808d43a 	srli	r4,r3,16
    9458:	797fffcc 	andi	r5,r15,65535
    945c:	29cb883a 	add	r5,r5,r7
    9460:	2a0b883a 	add	r5,r5,r8
    9464:	2489383a 	mul	r4,r4,r18
    9468:	7806d43a 	srli	r3,r15,16
    946c:	2810d43a 	srli	r8,r5,16
    9470:	297fffcc 	andi	r5,r5,65535
    9474:	1907883a 	add	r3,r3,r4
    9478:	1a07883a 	add	r3,r3,r8
    947c:	1808943a 	slli	r4,r3,16
    9480:	480f883a 	mov	r7,r9
    9484:	1810d43a 	srli	r8,r3,16
    9488:	214ab03a 	or	r5,r4,r5
    948c:	49400015 	stw	r5,0(r9)
    9490:	4a400104 	addi	r9,r9,4
    9494:	8abfea36 	bltu	r17,r10,9440 <__alt_mem_sram+0xf7e09440>
    9498:	3a000115 	stw	r8,4(r7)
    949c:	34400017 	ldw	r17,0(r6)
    94a0:	8822d43a 	srli	r17,r17,16
    94a4:	88001f26 	beq	r17,zero,9524 <__multiply+0x198>
    94a8:	60c00017 	ldw	r3,0(r12)
    94ac:	7013883a 	mov	r9,r14
    94b0:	601f883a 	mov	r15,r12
    94b4:	1811883a 	mov	r8,r3
    94b8:	6027883a 	mov	r19,r12
    94bc:	000f883a 	mov	r7,zero
    94c0:	00000106 	br	94c8 <__multiply+0x13c>
    94c4:	9027883a 	mov	r19,r18
    94c8:	4940000b 	ldhu	r5,0(r9)
    94cc:	4010d43a 	srli	r8,r8,16
    94d0:	193fffcc 	andi	r4,r3,65535
    94d4:	2c4b383a 	mul	r5,r5,r17
    94d8:	7bc00104 	addi	r15,r15,4
    94dc:	4a400104 	addi	r9,r9,4
    94e0:	2a0b883a 	add	r5,r5,r8
    94e4:	29cb883a 	add	r5,r5,r7
    94e8:	2806943a 	slli	r3,r5,16
    94ec:	9c800104 	addi	r18,r19,4
    94f0:	280ad43a 	srli	r5,r5,16
    94f4:	1908b03a 	or	r4,r3,r4
    94f8:	793fff15 	stw	r4,-4(r15)
    94fc:	48ffff17 	ldw	r3,-4(r9)
    9500:	92000017 	ldw	r8,0(r18)
    9504:	1806d43a 	srli	r3,r3,16
    9508:	413fffcc 	andi	r4,r8,65535
    950c:	1c47383a 	mul	r3,r3,r17
    9510:	1907883a 	add	r3,r3,r4
    9514:	1947883a 	add	r3,r3,r5
    9518:	180ed43a 	srli	r7,r3,16
    951c:	4abfe936 	bltu	r9,r10,94c4 <__alt_mem_sram+0xf7e094c4>
    9520:	98c00115 	stw	r3,4(r19)
    9524:	31800104 	addi	r6,r6,4
    9528:	63000104 	addi	r12,r12,4
    952c:	337fbe36 	bltu	r6,r13,9428 <__alt_mem_sram+0xf7e09428>
    9530:	0400090e 	bge	zero,r16,9558 <__multiply+0x1cc>
    9534:	58ffff17 	ldw	r3,-4(r11)
    9538:	5affff04 	addi	r11,r11,-4
    953c:	18000326 	beq	r3,zero,954c <__multiply+0x1c0>
    9540:	00000506 	br	9558 <__multiply+0x1cc>
    9544:	58c00017 	ldw	r3,0(r11)
    9548:	1800031e 	bne	r3,zero,9558 <__multiply+0x1cc>
    954c:	843fffc4 	addi	r16,r16,-1
    9550:	5affff04 	addi	r11,r11,-4
    9554:	803ffb1e 	bne	r16,zero,9544 <__alt_mem_sram+0xf7e09544>
    9558:	14000415 	stw	r16,16(r2)
    955c:	dfc00517 	ldw	ra,20(sp)
    9560:	dd000417 	ldw	r20,16(sp)
    9564:	dcc00317 	ldw	r19,12(sp)
    9568:	dc800217 	ldw	r18,8(sp)
    956c:	dc400117 	ldw	r17,4(sp)
    9570:	dc000017 	ldw	r16,0(sp)
    9574:	dec00604 	addi	sp,sp,24
    9578:	f800283a 	ret
    957c:	3029883a 	mov	r20,r6
    9580:	2823883a 	mov	r17,r5
    9584:	003f9006 	br	93c8 <__alt_mem_sram+0xf7e093c8>

00009588 <__pow5mult>:
    9588:	defffa04 	addi	sp,sp,-24
    958c:	dcc00315 	stw	r19,12(sp)
    9590:	dc800215 	stw	r18,8(sp)
    9594:	dc000015 	stw	r16,0(sp)
    9598:	dfc00515 	stw	ra,20(sp)
    959c:	dd000415 	stw	r20,16(sp)
    95a0:	dc400115 	stw	r17,4(sp)
    95a4:	308000cc 	andi	r2,r6,3
    95a8:	3021883a 	mov	r16,r6
    95ac:	2027883a 	mov	r19,r4
    95b0:	2825883a 	mov	r18,r5
    95b4:	10002e1e 	bne	r2,zero,9670 <__pow5mult+0xe8>
    95b8:	8021d0ba 	srai	r16,r16,2
    95bc:	80001a26 	beq	r16,zero,9628 <__pow5mult+0xa0>
    95c0:	9c401217 	ldw	r17,72(r19)
    95c4:	8800061e 	bne	r17,zero,95e0 <__pow5mult+0x58>
    95c8:	00003406 	br	969c <__pow5mult+0x114>
    95cc:	8021d07a 	srai	r16,r16,1
    95d0:	80001526 	beq	r16,zero,9628 <__pow5mult+0xa0>
    95d4:	88800017 	ldw	r2,0(r17)
    95d8:	10001c26 	beq	r2,zero,964c <__pow5mult+0xc4>
    95dc:	1023883a 	mov	r17,r2
    95e0:	80c0004c 	andi	r3,r16,1
    95e4:	183ff926 	beq	r3,zero,95cc <__alt_mem_sram+0xf7e095cc>
    95e8:	900b883a 	mov	r5,r18
    95ec:	880d883a 	mov	r6,r17
    95f0:	9809883a 	mov	r4,r19
    95f4:	000938c0 	call	938c <__multiply>
    95f8:	90001b26 	beq	r18,zero,9668 <__pow5mult+0xe0>
    95fc:	91c00117 	ldw	r7,4(r18)
    9600:	98c01317 	ldw	r3,76(r19)
    9604:	8021d07a 	srai	r16,r16,1
    9608:	39cf883a 	add	r7,r7,r7
    960c:	39cf883a 	add	r7,r7,r7
    9610:	19c7883a 	add	r3,r3,r7
    9614:	19000017 	ldw	r4,0(r3)
    9618:	91000015 	stw	r4,0(r18)
    961c:	1c800015 	stw	r18,0(r3)
    9620:	1025883a 	mov	r18,r2
    9624:	803feb1e 	bne	r16,zero,95d4 <__alt_mem_sram+0xf7e095d4>
    9628:	9005883a 	mov	r2,r18
    962c:	dfc00517 	ldw	ra,20(sp)
    9630:	dd000417 	ldw	r20,16(sp)
    9634:	dcc00317 	ldw	r19,12(sp)
    9638:	dc800217 	ldw	r18,8(sp)
    963c:	dc400117 	ldw	r17,4(sp)
    9640:	dc000017 	ldw	r16,0(sp)
    9644:	dec00604 	addi	sp,sp,24
    9648:	f800283a 	ret
    964c:	9809883a 	mov	r4,r19
    9650:	880b883a 	mov	r5,r17
    9654:	880d883a 	mov	r6,r17
    9658:	000938c0 	call	938c <__multiply>
    965c:	88800015 	stw	r2,0(r17)
    9660:	10000015 	stw	zero,0(r2)
    9664:	003fdd06 	br	95dc <__alt_mem_sram+0xf7e095dc>
    9668:	1025883a 	mov	r18,r2
    966c:	003fd706 	br	95cc <__alt_mem_sram+0xf7e095cc>
    9670:	10bfffc4 	addi	r2,r2,-1
    9674:	1085883a 	add	r2,r2,r2
    9678:	00c00074 	movhi	r3,1
    967c:	18ca3a04 	addi	r3,r3,10472
    9680:	1085883a 	add	r2,r2,r2
    9684:	1885883a 	add	r2,r3,r2
    9688:	11800017 	ldw	r6,0(r2)
    968c:	000f883a 	mov	r7,zero
    9690:	00090200 	call	9020 <__multadd>
    9694:	1025883a 	mov	r18,r2
    9698:	003fc706 	br	95b8 <__alt_mem_sram+0xf7e095b8>
    969c:	05000044 	movi	r20,1
    96a0:	9809883a 	mov	r4,r19
    96a4:	a00b883a 	mov	r5,r20
    96a8:	0008f500 	call	8f50 <_Balloc>
    96ac:	1023883a 	mov	r17,r2
    96b0:	00809c44 	movi	r2,625
    96b4:	88800515 	stw	r2,20(r17)
    96b8:	8d000415 	stw	r20,16(r17)
    96bc:	9c401215 	stw	r17,72(r19)
    96c0:	88000015 	stw	zero,0(r17)
    96c4:	003fc606 	br	95e0 <__alt_mem_sram+0xf7e095e0>

000096c8 <__lshift>:
    96c8:	defff904 	addi	sp,sp,-28
    96cc:	dd000415 	stw	r20,16(sp)
    96d0:	dcc00315 	stw	r19,12(sp)
    96d4:	3029d17a 	srai	r20,r6,5
    96d8:	2cc00417 	ldw	r19,16(r5)
    96dc:	28800217 	ldw	r2,8(r5)
    96e0:	dd400515 	stw	r21,20(sp)
    96e4:	a4e7883a 	add	r19,r20,r19
    96e8:	dc800215 	stw	r18,8(sp)
    96ec:	dc400115 	stw	r17,4(sp)
    96f0:	dc000015 	stw	r16,0(sp)
    96f4:	dfc00615 	stw	ra,24(sp)
    96f8:	9c000044 	addi	r16,r19,1
    96fc:	2823883a 	mov	r17,r5
    9700:	302b883a 	mov	r21,r6
    9704:	2025883a 	mov	r18,r4
    9708:	29400117 	ldw	r5,4(r5)
    970c:	1400030e 	bge	r2,r16,971c <__lshift+0x54>
    9710:	1085883a 	add	r2,r2,r2
    9714:	29400044 	addi	r5,r5,1
    9718:	143ffd16 	blt	r2,r16,9710 <__alt_mem_sram+0xf7e09710>
    971c:	9009883a 	mov	r4,r18
    9720:	0008f500 	call	8f50 <_Balloc>
    9724:	11c00504 	addi	r7,r2,20
    9728:	0500090e 	bge	zero,r20,9750 <__lshift+0x88>
    972c:	3811883a 	mov	r8,r7
    9730:	0007883a 	mov	r3,zero
    9734:	40000015 	stw	zero,0(r8)
    9738:	18c00044 	addi	r3,r3,1
    973c:	42000104 	addi	r8,r8,4
    9740:	1d3ffc1e 	bne	r3,r20,9734 <__alt_mem_sram+0xf7e09734>
    9744:	18c7883a 	add	r3,r3,r3
    9748:	18c7883a 	add	r3,r3,r3
    974c:	38cf883a 	add	r7,r7,r3
    9750:	89000417 	ldw	r4,16(r17)
    9754:	88c00504 	addi	r3,r17,20
    9758:	a98007cc 	andi	r6,r21,31
    975c:	2109883a 	add	r4,r4,r4
    9760:	2109883a 	add	r4,r4,r4
    9764:	1909883a 	add	r4,r3,r4
    9768:	30002326 	beq	r6,zero,97f8 <__lshift+0x130>
    976c:	01400804 	movi	r5,32
    9770:	298bc83a 	sub	r5,r5,r6
    9774:	0013883a 	mov	r9,zero
    9778:	1a000017 	ldw	r8,0(r3)
    977c:	3815883a 	mov	r10,r7
    9780:	39c00104 	addi	r7,r7,4
    9784:	4190983a 	sll	r8,r8,r6
    9788:	18c00104 	addi	r3,r3,4
    978c:	4a10b03a 	or	r8,r9,r8
    9790:	3a3fff15 	stw	r8,-4(r7)
    9794:	1a3fff17 	ldw	r8,-4(r3)
    9798:	4152d83a 	srl	r9,r8,r5
    979c:	193ff636 	bltu	r3,r4,9778 <__alt_mem_sram+0xf7e09778>
    97a0:	52400115 	stw	r9,4(r10)
    97a4:	48000126 	beq	r9,zero,97ac <__lshift+0xe4>
    97a8:	9c000084 	addi	r16,r19,2
    97ac:	89000117 	ldw	r4,4(r17)
    97b0:	90c01317 	ldw	r3,76(r18)
    97b4:	843fffc4 	addi	r16,r16,-1
    97b8:	2109883a 	add	r4,r4,r4
    97bc:	2109883a 	add	r4,r4,r4
    97c0:	1907883a 	add	r3,r3,r4
    97c4:	19000017 	ldw	r4,0(r3)
    97c8:	14000415 	stw	r16,16(r2)
    97cc:	89000015 	stw	r4,0(r17)
    97d0:	1c400015 	stw	r17,0(r3)
    97d4:	dfc00617 	ldw	ra,24(sp)
    97d8:	dd400517 	ldw	r21,20(sp)
    97dc:	dd000417 	ldw	r20,16(sp)
    97e0:	dcc00317 	ldw	r19,12(sp)
    97e4:	dc800217 	ldw	r18,8(sp)
    97e8:	dc400117 	ldw	r17,4(sp)
    97ec:	dc000017 	ldw	r16,0(sp)
    97f0:	dec00704 	addi	sp,sp,28
    97f4:	f800283a 	ret
    97f8:	19400017 	ldw	r5,0(r3)
    97fc:	39c00104 	addi	r7,r7,4
    9800:	18c00104 	addi	r3,r3,4
    9804:	397fff15 	stw	r5,-4(r7)
    9808:	193ffb36 	bltu	r3,r4,97f8 <__alt_mem_sram+0xf7e097f8>
    980c:	003fe706 	br	97ac <__alt_mem_sram+0xf7e097ac>

00009810 <__mcmp>:
    9810:	20800417 	ldw	r2,16(r4)
    9814:	28c00417 	ldw	r3,16(r5)
    9818:	10c5c83a 	sub	r2,r2,r3
    981c:	1000111e 	bne	r2,zero,9864 <__mcmp+0x54>
    9820:	18c7883a 	add	r3,r3,r3
    9824:	18c7883a 	add	r3,r3,r3
    9828:	21000504 	addi	r4,r4,20
    982c:	29400504 	addi	r5,r5,20
    9830:	20c5883a 	add	r2,r4,r3
    9834:	28cb883a 	add	r5,r5,r3
    9838:	00000106 	br	9840 <__mcmp+0x30>
    983c:	20800a2e 	bgeu	r4,r2,9868 <__mcmp+0x58>
    9840:	10bfff04 	addi	r2,r2,-4
    9844:	297fff04 	addi	r5,r5,-4
    9848:	11800017 	ldw	r6,0(r2)
    984c:	28c00017 	ldw	r3,0(r5)
    9850:	30fffa26 	beq	r6,r3,983c <__alt_mem_sram+0xf7e0983c>
    9854:	30c00236 	bltu	r6,r3,9860 <__mcmp+0x50>
    9858:	00800044 	movi	r2,1
    985c:	f800283a 	ret
    9860:	00bfffc4 	movi	r2,-1
    9864:	f800283a 	ret
    9868:	0005883a 	mov	r2,zero
    986c:	f800283a 	ret

00009870 <__mdiff>:
    9870:	defffb04 	addi	sp,sp,-20
    9874:	dc000015 	stw	r16,0(sp)
    9878:	2821883a 	mov	r16,r5
    987c:	dcc00315 	stw	r19,12(sp)
    9880:	300b883a 	mov	r5,r6
    9884:	2027883a 	mov	r19,r4
    9888:	8009883a 	mov	r4,r16
    988c:	dc800215 	stw	r18,8(sp)
    9890:	dfc00415 	stw	ra,16(sp)
    9894:	dc400115 	stw	r17,4(sp)
    9898:	3025883a 	mov	r18,r6
    989c:	00098100 	call	9810 <__mcmp>
    98a0:	10005226 	beq	r2,zero,99ec <__mdiff+0x17c>
    98a4:	10004c16 	blt	r2,zero,99d8 <__mdiff+0x168>
    98a8:	0023883a 	mov	r17,zero
    98ac:	81400117 	ldw	r5,4(r16)
    98b0:	9809883a 	mov	r4,r19
    98b4:	0008f500 	call	8f50 <_Balloc>
    98b8:	83400417 	ldw	r13,16(r16)
    98bc:	93800417 	ldw	r14,16(r18)
    98c0:	81000504 	addi	r4,r16,20
    98c4:	6b59883a 	add	r12,r13,r13
    98c8:	739d883a 	add	r14,r14,r14
    98cc:	6319883a 	add	r12,r12,r12
    98d0:	91800504 	addi	r6,r18,20
    98d4:	739d883a 	add	r14,r14,r14
    98d8:	14400315 	stw	r17,12(r2)
    98dc:	2319883a 	add	r12,r4,r12
    98e0:	339d883a 	add	r14,r6,r14
    98e4:	12400504 	addi	r9,r2,20
    98e8:	0007883a 	mov	r3,zero
    98ec:	22000017 	ldw	r8,0(r4)
    98f0:	32800017 	ldw	r10,0(r6)
    98f4:	4ac00104 	addi	r11,r9,4
    98f8:	41ffffcc 	andi	r7,r8,65535
    98fc:	38c7883a 	add	r3,r7,r3
    9900:	51ffffcc 	andi	r7,r10,65535
    9904:	19cfc83a 	sub	r7,r3,r7
    9908:	4010d43a 	srli	r8,r8,16
    990c:	5014d43a 	srli	r10,r10,16
    9910:	3807d43a 	srai	r3,r7,16
    9914:	39ffffcc 	andi	r7,r7,65535
    9918:	4291c83a 	sub	r8,r8,r10
    991c:	40c7883a 	add	r3,r8,r3
    9920:	1810943a 	slli	r8,r3,16
    9924:	31800104 	addi	r6,r6,4
    9928:	21000104 	addi	r4,r4,4
    992c:	41ceb03a 	or	r7,r8,r7
    9930:	49c00015 	stw	r7,0(r9)
    9934:	1807d43a 	srai	r3,r3,16
    9938:	580b883a 	mov	r5,r11
    993c:	5813883a 	mov	r9,r11
    9940:	33bfea36 	bltu	r6,r14,98ec <__alt_mem_sram+0xf7e098ec>
    9944:	2011883a 	mov	r8,r4
    9948:	2300152e 	bgeu	r4,r12,99a0 <__mdiff+0x130>
    994c:	21400017 	ldw	r5,0(r4)
    9950:	4a400104 	addi	r9,r9,4
    9954:	21000104 	addi	r4,r4,4
    9958:	29ffffcc 	andi	r7,r5,65535
    995c:	38c7883a 	add	r3,r7,r3
    9960:	280ad43a 	srli	r5,r5,16
    9964:	180dd43a 	srai	r6,r3,16
    9968:	19ffffcc 	andi	r7,r3,65535
    996c:	3147883a 	add	r3,r6,r5
    9970:	180a943a 	slli	r5,r3,16
    9974:	1807d43a 	srai	r3,r3,16
    9978:	29ceb03a 	or	r7,r5,r7
    997c:	49ffff15 	stw	r7,-4(r9)
    9980:	233ff236 	bltu	r4,r12,994c <__alt_mem_sram+0xf7e0994c>
    9984:	0206303a 	nor	r3,zero,r8
    9988:	1b07883a 	add	r3,r3,r12
    998c:	1806d0ba 	srli	r3,r3,2
    9990:	18c00044 	addi	r3,r3,1
    9994:	18c7883a 	add	r3,r3,r3
    9998:	18c7883a 	add	r3,r3,r3
    999c:	58cb883a 	add	r5,r11,r3
    99a0:	28ffff04 	addi	r3,r5,-4
    99a4:	3800041e 	bne	r7,zero,99b8 <__mdiff+0x148>
    99a8:	18ffff04 	addi	r3,r3,-4
    99ac:	19000017 	ldw	r4,0(r3)
    99b0:	6b7fffc4 	addi	r13,r13,-1
    99b4:	203ffc26 	beq	r4,zero,99a8 <__alt_mem_sram+0xf7e099a8>
    99b8:	13400415 	stw	r13,16(r2)
    99bc:	dfc00417 	ldw	ra,16(sp)
    99c0:	dcc00317 	ldw	r19,12(sp)
    99c4:	dc800217 	ldw	r18,8(sp)
    99c8:	dc400117 	ldw	r17,4(sp)
    99cc:	dc000017 	ldw	r16,0(sp)
    99d0:	dec00504 	addi	sp,sp,20
    99d4:	f800283a 	ret
    99d8:	8005883a 	mov	r2,r16
    99dc:	04400044 	movi	r17,1
    99e0:	9021883a 	mov	r16,r18
    99e4:	1025883a 	mov	r18,r2
    99e8:	003fb006 	br	98ac <__alt_mem_sram+0xf7e098ac>
    99ec:	9809883a 	mov	r4,r19
    99f0:	000b883a 	mov	r5,zero
    99f4:	0008f500 	call	8f50 <_Balloc>
    99f8:	00c00044 	movi	r3,1
    99fc:	10c00415 	stw	r3,16(r2)
    9a00:	10000515 	stw	zero,20(r2)
    9a04:	003fed06 	br	99bc <__alt_mem_sram+0xf7e099bc>

00009a08 <__ulp>:
    9a08:	295ffc2c 	andhi	r5,r5,32752
    9a0c:	00bf3034 	movhi	r2,64704
    9a10:	2887883a 	add	r3,r5,r2
    9a14:	00c0020e 	bge	zero,r3,9a20 <__ulp+0x18>
    9a18:	0005883a 	mov	r2,zero
    9a1c:	f800283a 	ret
    9a20:	00c7c83a 	sub	r3,zero,r3
    9a24:	180bd53a 	srai	r5,r3,20
    9a28:	008004c4 	movi	r2,19
    9a2c:	11400a0e 	bge	r2,r5,9a58 <__ulp+0x50>
    9a30:	00800c84 	movi	r2,50
    9a34:	0007883a 	mov	r3,zero
    9a38:	11400516 	blt	r2,r5,9a50 <__ulp+0x48>
    9a3c:	00800cc4 	movi	r2,51
    9a40:	114bc83a 	sub	r5,r2,r5
    9a44:	00800044 	movi	r2,1
    9a48:	1144983a 	sll	r2,r2,r5
    9a4c:	f800283a 	ret
    9a50:	00800044 	movi	r2,1
    9a54:	f800283a 	ret
    9a58:	00800234 	movhi	r2,8
    9a5c:	1147d83a 	sra	r3,r2,r5
    9a60:	0005883a 	mov	r2,zero
    9a64:	f800283a 	ret

00009a68 <__b2d>:
    9a68:	defffa04 	addi	sp,sp,-24
    9a6c:	dc000015 	stw	r16,0(sp)
    9a70:	24000417 	ldw	r16,16(r4)
    9a74:	dc400115 	stw	r17,4(sp)
    9a78:	24400504 	addi	r17,r4,20
    9a7c:	8421883a 	add	r16,r16,r16
    9a80:	8421883a 	add	r16,r16,r16
    9a84:	8c21883a 	add	r16,r17,r16
    9a88:	dc800215 	stw	r18,8(sp)
    9a8c:	84bfff17 	ldw	r18,-4(r16)
    9a90:	dd000415 	stw	r20,16(sp)
    9a94:	dcc00315 	stw	r19,12(sp)
    9a98:	9009883a 	mov	r4,r18
    9a9c:	2829883a 	mov	r20,r5
    9aa0:	dfc00515 	stw	ra,20(sp)
    9aa4:	00092380 	call	9238 <__hi0bits>
    9aa8:	00c00804 	movi	r3,32
    9aac:	1887c83a 	sub	r3,r3,r2
    9ab0:	a0c00015 	stw	r3,0(r20)
    9ab4:	00c00284 	movi	r3,10
    9ab8:	84ffff04 	addi	r19,r16,-4
    9abc:	18801216 	blt	r3,r2,9b08 <__b2d+0xa0>
    9ac0:	014002c4 	movi	r5,11
    9ac4:	2889c83a 	sub	r4,r5,r2
    9ac8:	9106d83a 	srl	r3,r18,r4
    9acc:	18cffc34 	orhi	r3,r3,16368
    9ad0:	8cc0282e 	bgeu	r17,r19,9b74 <__b2d+0x10c>
    9ad4:	817ffe17 	ldw	r5,-8(r16)
    9ad8:	290ad83a 	srl	r5,r5,r4
    9adc:	10800544 	addi	r2,r2,21
    9ae0:	9084983a 	sll	r2,r18,r2
    9ae4:	2884b03a 	or	r2,r5,r2
    9ae8:	dfc00517 	ldw	ra,20(sp)
    9aec:	dd000417 	ldw	r20,16(sp)
    9af0:	dcc00317 	ldw	r19,12(sp)
    9af4:	dc800217 	ldw	r18,8(sp)
    9af8:	dc400117 	ldw	r17,4(sp)
    9afc:	dc000017 	ldw	r16,0(sp)
    9b00:	dec00604 	addi	sp,sp,24
    9b04:	f800283a 	ret
    9b08:	113ffd44 	addi	r4,r2,-11
    9b0c:	8cc00f2e 	bgeu	r17,r19,9b4c <__b2d+0xe4>
    9b10:	81bffe04 	addi	r6,r16,-8
    9b14:	817ffe17 	ldw	r5,-8(r16)
    9b18:	20001326 	beq	r4,zero,9b68 <__b2d+0x100>
    9b1c:	00c00ac4 	movi	r3,43
    9b20:	1885c83a 	sub	r2,r3,r2
    9b24:	2886d83a 	srl	r3,r5,r2
    9b28:	9124983a 	sll	r18,r18,r4
    9b2c:	90e4b03a 	or	r18,r18,r3
    9b30:	90cffc34 	orhi	r3,r18,16368
    9b34:	8980112e 	bgeu	r17,r6,9b7c <__b2d+0x114>
    9b38:	81bffd17 	ldw	r6,-12(r16)
    9b3c:	308cd83a 	srl	r6,r6,r2
    9b40:	2904983a 	sll	r2,r5,r4
    9b44:	1184b03a 	or	r2,r2,r6
    9b48:	003fe706 	br	9ae8 <__alt_mem_sram+0xf7e09ae8>
    9b4c:	20000526 	beq	r4,zero,9b64 <__b2d+0xfc>
    9b50:	9124983a 	sll	r18,r18,r4
    9b54:	000d883a 	mov	r6,zero
    9b58:	000b883a 	mov	r5,zero
    9b5c:	90cffc34 	orhi	r3,r18,16368
    9b60:	003ff706 	br	9b40 <__alt_mem_sram+0xf7e09b40>
    9b64:	000b883a 	mov	r5,zero
    9b68:	90cffc34 	orhi	r3,r18,16368
    9b6c:	2805883a 	mov	r2,r5
    9b70:	003fdd06 	br	9ae8 <__alt_mem_sram+0xf7e09ae8>
    9b74:	000b883a 	mov	r5,zero
    9b78:	003fd806 	br	9adc <__alt_mem_sram+0xf7e09adc>
    9b7c:	000d883a 	mov	r6,zero
    9b80:	003fef06 	br	9b40 <__alt_mem_sram+0xf7e09b40>

00009b84 <__d2b>:
    9b84:	defff704 	addi	sp,sp,-36
    9b88:	dc000215 	stw	r16,8(sp)
    9b8c:	3021883a 	mov	r16,r6
    9b90:	dc400315 	stw	r17,12(sp)
    9b94:	8022907a 	slli	r17,r16,1
    9b98:	dd400715 	stw	r21,28(sp)
    9b9c:	282b883a 	mov	r21,r5
    9ba0:	01400044 	movi	r5,1
    9ba4:	dd000615 	stw	r20,24(sp)
    9ba8:	dcc00515 	stw	r19,20(sp)
    9bac:	dc800415 	stw	r18,16(sp)
    9bb0:	dfc00815 	stw	ra,32(sp)
    9bb4:	3829883a 	mov	r20,r7
    9bb8:	dc800917 	ldw	r18,36(sp)
    9bbc:	8822d57a 	srli	r17,r17,21
    9bc0:	0008f500 	call	8f50 <_Balloc>
    9bc4:	1027883a 	mov	r19,r2
    9bc8:	00800434 	movhi	r2,16
    9bcc:	10bfffc4 	addi	r2,r2,-1
    9bd0:	808c703a 	and	r6,r16,r2
    9bd4:	88000126 	beq	r17,zero,9bdc <__d2b+0x58>
    9bd8:	31800434 	orhi	r6,r6,16
    9bdc:	d9800015 	stw	r6,0(sp)
    9be0:	a8001f26 	beq	r21,zero,9c60 <__d2b+0xdc>
    9be4:	d9000104 	addi	r4,sp,4
    9be8:	dd400115 	stw	r21,4(sp)
    9bec:	00092a00 	call	92a0 <__lo0bits>
    9bf0:	d8c00017 	ldw	r3,0(sp)
    9bf4:	1000291e 	bne	r2,zero,9c9c <__d2b+0x118>
    9bf8:	d9000117 	ldw	r4,4(sp)
    9bfc:	99000515 	stw	r4,20(r19)
    9c00:	1820c03a 	cmpne	r16,r3,zero
    9c04:	84000044 	addi	r16,r16,1
    9c08:	98c00615 	stw	r3,24(r19)
    9c0c:	9c000415 	stw	r16,16(r19)
    9c10:	88001b1e 	bne	r17,zero,9c80 <__d2b+0xfc>
    9c14:	800690ba 	slli	r3,r16,2
    9c18:	10bef384 	addi	r2,r2,-1074
    9c1c:	a0800015 	stw	r2,0(r20)
    9c20:	98c5883a 	add	r2,r19,r3
    9c24:	11000417 	ldw	r4,16(r2)
    9c28:	8020917a 	slli	r16,r16,5
    9c2c:	00092380 	call	9238 <__hi0bits>
    9c30:	8085c83a 	sub	r2,r16,r2
    9c34:	90800015 	stw	r2,0(r18)
    9c38:	9805883a 	mov	r2,r19
    9c3c:	dfc00817 	ldw	ra,32(sp)
    9c40:	dd400717 	ldw	r21,28(sp)
    9c44:	dd000617 	ldw	r20,24(sp)
    9c48:	dcc00517 	ldw	r19,20(sp)
    9c4c:	dc800417 	ldw	r18,16(sp)
    9c50:	dc400317 	ldw	r17,12(sp)
    9c54:	dc000217 	ldw	r16,8(sp)
    9c58:	dec00904 	addi	sp,sp,36
    9c5c:	f800283a 	ret
    9c60:	d809883a 	mov	r4,sp
    9c64:	00092a00 	call	92a0 <__lo0bits>
    9c68:	d8c00017 	ldw	r3,0(sp)
    9c6c:	04000044 	movi	r16,1
    9c70:	9c000415 	stw	r16,16(r19)
    9c74:	98c00515 	stw	r3,20(r19)
    9c78:	10800804 	addi	r2,r2,32
    9c7c:	883fe526 	beq	r17,zero,9c14 <__alt_mem_sram+0xf7e09c14>
    9c80:	8c7ef344 	addi	r17,r17,-1075
    9c84:	88a3883a 	add	r17,r17,r2
    9c88:	00c00d44 	movi	r3,53
    9c8c:	a4400015 	stw	r17,0(r20)
    9c90:	1885c83a 	sub	r2,r3,r2
    9c94:	90800015 	stw	r2,0(r18)
    9c98:	003fe706 	br	9c38 <__alt_mem_sram+0xf7e09c38>
    9c9c:	01000804 	movi	r4,32
    9ca0:	2089c83a 	sub	r4,r4,r2
    9ca4:	1908983a 	sll	r4,r3,r4
    9ca8:	d9400117 	ldw	r5,4(sp)
    9cac:	1886d83a 	srl	r3,r3,r2
    9cb0:	2148b03a 	or	r4,r4,r5
    9cb4:	99000515 	stw	r4,20(r19)
    9cb8:	d8c00015 	stw	r3,0(sp)
    9cbc:	003fd006 	br	9c00 <__alt_mem_sram+0xf7e09c00>

00009cc0 <__ratio>:
    9cc0:	defff904 	addi	sp,sp,-28
    9cc4:	dc400315 	stw	r17,12(sp)
    9cc8:	2823883a 	mov	r17,r5
    9ccc:	d9400104 	addi	r5,sp,4
    9cd0:	dfc00615 	stw	ra,24(sp)
    9cd4:	dcc00515 	stw	r19,20(sp)
    9cd8:	dc800415 	stw	r18,16(sp)
    9cdc:	2027883a 	mov	r19,r4
    9ce0:	dc000215 	stw	r16,8(sp)
    9ce4:	0009a680 	call	9a68 <__b2d>
    9ce8:	8809883a 	mov	r4,r17
    9cec:	d80b883a 	mov	r5,sp
    9cf0:	1025883a 	mov	r18,r2
    9cf4:	1821883a 	mov	r16,r3
    9cf8:	0009a680 	call	9a68 <__b2d>
    9cfc:	8a400417 	ldw	r9,16(r17)
    9d00:	9a000417 	ldw	r8,16(r19)
    9d04:	100d883a 	mov	r6,r2
    9d08:	d8800017 	ldw	r2,0(sp)
    9d0c:	4251c83a 	sub	r8,r8,r9
    9d10:	4012917a 	slli	r9,r8,5
    9d14:	da000117 	ldw	r8,4(sp)
    9d18:	4091c83a 	sub	r8,r8,r2
    9d1c:	4251883a 	add	r8,r8,r9
    9d20:	02000d0e 	bge	zero,r8,9d58 <__ratio+0x98>
    9d24:	4010953a 	slli	r8,r8,20
    9d28:	4421883a 	add	r16,r8,r16
    9d2c:	9009883a 	mov	r4,r18
    9d30:	800b883a 	mov	r5,r16
    9d34:	180f883a 	mov	r7,r3
    9d38:	000da080 	call	da08 <__divdf3>
    9d3c:	dfc00617 	ldw	ra,24(sp)
    9d40:	dcc00517 	ldw	r19,20(sp)
    9d44:	dc800417 	ldw	r18,16(sp)
    9d48:	dc400317 	ldw	r17,12(sp)
    9d4c:	dc000217 	ldw	r16,8(sp)
    9d50:	dec00704 	addi	sp,sp,28
    9d54:	f800283a 	ret
    9d58:	4010953a 	slli	r8,r8,20
    9d5c:	1a07c83a 	sub	r3,r3,r8
    9d60:	003ff206 	br	9d2c <__alt_mem_sram+0xf7e09d2c>

00009d64 <_mprec_log10>:
    9d64:	defffe04 	addi	sp,sp,-8
    9d68:	dc000015 	stw	r16,0(sp)
    9d6c:	dfc00115 	stw	ra,4(sp)
    9d70:	008005c4 	movi	r2,23
    9d74:	2021883a 	mov	r16,r4
    9d78:	11000d0e 	bge	r2,r4,9db0 <_mprec_log10+0x4c>
    9d7c:	0005883a 	mov	r2,zero
    9d80:	00cffc34 	movhi	r3,16368
    9d84:	843fffc4 	addi	r16,r16,-1
    9d88:	1009883a 	mov	r4,r2
    9d8c:	180b883a 	mov	r5,r3
    9d90:	000d883a 	mov	r6,zero
    9d94:	01d00934 	movhi	r7,16420
    9d98:	000e5180 	call	e518 <__muldf3>
    9d9c:	803ff91e 	bne	r16,zero,9d84 <__alt_mem_sram+0xf7e09d84>
    9da0:	dfc00117 	ldw	ra,4(sp)
    9da4:	dc000017 	ldw	r16,0(sp)
    9da8:	dec00204 	addi	sp,sp,8
    9dac:	f800283a 	ret
    9db0:	202090fa 	slli	r16,r4,3
    9db4:	00800074 	movhi	r2,1
    9db8:	108a5104 	addi	r2,r2,10564
    9dbc:	1421883a 	add	r16,r2,r16
    9dc0:	80800017 	ldw	r2,0(r16)
    9dc4:	80c00117 	ldw	r3,4(r16)
    9dc8:	dfc00117 	ldw	ra,4(sp)
    9dcc:	dc000017 	ldw	r16,0(sp)
    9dd0:	dec00204 	addi	sp,sp,8
    9dd4:	f800283a 	ret

00009dd8 <__copybits>:
    9dd8:	297fffc4 	addi	r5,r5,-1
    9ddc:	280fd17a 	srai	r7,r5,5
    9de0:	30c00417 	ldw	r3,16(r6)
    9de4:	30800504 	addi	r2,r6,20
    9de8:	39c00044 	addi	r7,r7,1
    9dec:	18c7883a 	add	r3,r3,r3
    9df0:	39cf883a 	add	r7,r7,r7
    9df4:	18c7883a 	add	r3,r3,r3
    9df8:	39cf883a 	add	r7,r7,r7
    9dfc:	10c7883a 	add	r3,r2,r3
    9e00:	21cf883a 	add	r7,r4,r7
    9e04:	10c00d2e 	bgeu	r2,r3,9e3c <__copybits+0x64>
    9e08:	200b883a 	mov	r5,r4
    9e0c:	12000017 	ldw	r8,0(r2)
    9e10:	29400104 	addi	r5,r5,4
    9e14:	10800104 	addi	r2,r2,4
    9e18:	2a3fff15 	stw	r8,-4(r5)
    9e1c:	10fffb36 	bltu	r2,r3,9e0c <__alt_mem_sram+0xf7e09e0c>
    9e20:	1985c83a 	sub	r2,r3,r6
    9e24:	10bffac4 	addi	r2,r2,-21
    9e28:	1004d0ba 	srli	r2,r2,2
    9e2c:	10800044 	addi	r2,r2,1
    9e30:	1085883a 	add	r2,r2,r2
    9e34:	1085883a 	add	r2,r2,r2
    9e38:	2089883a 	add	r4,r4,r2
    9e3c:	21c0032e 	bgeu	r4,r7,9e4c <__copybits+0x74>
    9e40:	20000015 	stw	zero,0(r4)
    9e44:	21000104 	addi	r4,r4,4
    9e48:	21fffd36 	bltu	r4,r7,9e40 <__alt_mem_sram+0xf7e09e40>
    9e4c:	f800283a 	ret

00009e50 <__any_on>:
    9e50:	20c00417 	ldw	r3,16(r4)
    9e54:	2805d17a 	srai	r2,r5,5
    9e58:	21000504 	addi	r4,r4,20
    9e5c:	18800d0e 	bge	r3,r2,9e94 <__any_on+0x44>
    9e60:	18c7883a 	add	r3,r3,r3
    9e64:	18c7883a 	add	r3,r3,r3
    9e68:	20c7883a 	add	r3,r4,r3
    9e6c:	20c0192e 	bgeu	r4,r3,9ed4 <__any_on+0x84>
    9e70:	18bfff17 	ldw	r2,-4(r3)
    9e74:	18ffff04 	addi	r3,r3,-4
    9e78:	1000041e 	bne	r2,zero,9e8c <__any_on+0x3c>
    9e7c:	20c0142e 	bgeu	r4,r3,9ed0 <__any_on+0x80>
    9e80:	18ffff04 	addi	r3,r3,-4
    9e84:	19400017 	ldw	r5,0(r3)
    9e88:	283ffc26 	beq	r5,zero,9e7c <__alt_mem_sram+0xf7e09e7c>
    9e8c:	00800044 	movi	r2,1
    9e90:	f800283a 	ret
    9e94:	10c00a0e 	bge	r2,r3,9ec0 <__any_on+0x70>
    9e98:	1085883a 	add	r2,r2,r2
    9e9c:	1085883a 	add	r2,r2,r2
    9ea0:	294007cc 	andi	r5,r5,31
    9ea4:	2087883a 	add	r3,r4,r2
    9ea8:	283ff026 	beq	r5,zero,9e6c <__alt_mem_sram+0xf7e09e6c>
    9eac:	19800017 	ldw	r6,0(r3)
    9eb0:	3144d83a 	srl	r2,r6,r5
    9eb4:	114a983a 	sll	r5,r2,r5
    9eb8:	29bff41e 	bne	r5,r6,9e8c <__alt_mem_sram+0xf7e09e8c>
    9ebc:	003feb06 	br	9e6c <__alt_mem_sram+0xf7e09e6c>
    9ec0:	1085883a 	add	r2,r2,r2
    9ec4:	1085883a 	add	r2,r2,r2
    9ec8:	2087883a 	add	r3,r4,r2
    9ecc:	003fe706 	br	9e6c <__alt_mem_sram+0xf7e09e6c>
    9ed0:	f800283a 	ret
    9ed4:	0005883a 	mov	r2,zero
    9ed8:	f800283a 	ret

00009edc <_realloc_r>:
    9edc:	defff604 	addi	sp,sp,-40
    9ee0:	dcc00315 	stw	r19,12(sp)
    9ee4:	dc400115 	stw	r17,4(sp)
    9ee8:	dfc00915 	stw	ra,36(sp)
    9eec:	df000815 	stw	fp,32(sp)
    9ef0:	ddc00715 	stw	r23,28(sp)
    9ef4:	dd800615 	stw	r22,24(sp)
    9ef8:	dd400515 	stw	r21,20(sp)
    9efc:	dd000415 	stw	r20,16(sp)
    9f00:	dc800215 	stw	r18,8(sp)
    9f04:	dc000015 	stw	r16,0(sp)
    9f08:	2827883a 	mov	r19,r5
    9f0c:	3023883a 	mov	r17,r6
    9f10:	2800bf26 	beq	r5,zero,a210 <_realloc_r+0x334>
    9f14:	2025883a 	mov	r18,r4
    9f18:	000fd2c0 	call	fd2c <__malloc_lock>
    9f1c:	98ffff17 	ldw	r3,-4(r19)
    9f20:	01bfff04 	movi	r6,-4
    9f24:	890002c4 	addi	r4,r17,11
    9f28:	01c00584 	movi	r7,22
    9f2c:	9d7ffe04 	addi	r21,r19,-8
    9f30:	19a0703a 	and	r16,r3,r6
    9f34:	39003f2e 	bgeu	r7,r4,a034 <_realloc_r+0x158>
    9f38:	053ffe04 	movi	r20,-8
    9f3c:	2528703a 	and	r20,r4,r20
    9f40:	a00f883a 	mov	r7,r20
    9f44:	a0008216 	blt	r20,zero,a150 <_realloc_r+0x274>
    9f48:	a4408136 	bltu	r20,r17,a150 <_realloc_r+0x274>
    9f4c:	81c03c0e 	bge	r16,r7,a040 <_realloc_r+0x164>
    9f50:	07000074 	movhi	fp,1
    9f54:	e70bfd04 	addi	fp,fp,12276
    9f58:	e1000217 	ldw	r4,8(fp)
    9f5c:	ac05883a 	add	r2,r21,r16
    9f60:	2080bf26 	beq	r4,r2,a260 <_realloc_r+0x384>
    9f64:	11000117 	ldw	r4,4(r2)
    9f68:	023fff84 	movi	r8,-2
    9f6c:	2210703a 	and	r8,r4,r8
    9f70:	1211883a 	add	r8,r2,r8
    9f74:	41400117 	ldw	r5,4(r8)
    9f78:	2940004c 	andi	r5,r5,1
    9f7c:	28004a1e 	bne	r5,zero,a0a8 <_realloc_r+0x1cc>
    9f80:	017fff04 	movi	r5,-4
    9f84:	2148703a 	and	r4,r4,r5
    9f88:	2409883a 	add	r4,r4,r16
    9f8c:	21c0ad0e 	bge	r4,r7,a244 <_realloc_r+0x368>
    9f90:	18c0004c 	andi	r3,r3,1
    9f94:	18007f1e 	bne	r3,zero,a194 <_realloc_r+0x2b8>
    9f98:	9dfffe17 	ldw	r23,-8(r19)
    9f9c:	adefc83a 	sub	r23,r21,r23
    9fa0:	bd800117 	ldw	r22,4(r23)
    9fa4:	b14a703a 	and	r5,r22,r5
    9fa8:	216d883a 	add	r22,r4,r5
    9fac:	b1c04516 	blt	r22,r7,a0c4 <_realloc_r+0x1e8>
    9fb0:	10c00317 	ldw	r3,12(r2)
    9fb4:	10800217 	ldw	r2,8(r2)
    9fb8:	81bfff04 	addi	r6,r16,-4
    9fbc:	bc400204 	addi	r17,r23,8
    9fc0:	10c00315 	stw	r3,12(r2)
    9fc4:	18800215 	stw	r2,8(r3)
    9fc8:	b9400217 	ldw	r5,8(r23)
    9fcc:	b8c00317 	ldw	r3,12(r23)
    9fd0:	00800904 	movi	r2,36
    9fd4:	28c00315 	stw	r3,12(r5)
    9fd8:	19400215 	stw	r5,8(r3)
    9fdc:	1180ef36 	bltu	r2,r6,a39c <_realloc_r+0x4c0>
    9fe0:	008004c4 	movi	r2,19
    9fe4:	1180da2e 	bgeu	r2,r6,a350 <_realloc_r+0x474>
    9fe8:	98800017 	ldw	r2,0(r19)
    9fec:	b8800215 	stw	r2,8(r23)
    9ff0:	98800117 	ldw	r2,4(r19)
    9ff4:	b8800315 	stw	r2,12(r23)
    9ff8:	008006c4 	movi	r2,27
    9ffc:	1180fc2e 	bgeu	r2,r6,a3f0 <_realloc_r+0x514>
    a000:	98800217 	ldw	r2,8(r19)
    a004:	b8800415 	stw	r2,16(r23)
    a008:	98800317 	ldw	r2,12(r19)
    a00c:	b8800515 	stw	r2,20(r23)
    a010:	00800904 	movi	r2,36
    a014:	3080421e 	bne	r6,r2,a120 <_realloc_r+0x244>
    a018:	98800417 	ldw	r2,16(r19)
    a01c:	9cc00604 	addi	r19,r19,24
    a020:	b8c00804 	addi	r3,r23,32
    a024:	b8800615 	stw	r2,24(r23)
    a028:	98bfff17 	ldw	r2,-4(r19)
    a02c:	b8800715 	stw	r2,28(r23)
    a030:	00003d06 	br	a128 <_realloc_r+0x24c>
    a034:	01c00404 	movi	r7,16
    a038:	3829883a 	mov	r20,r7
    a03c:	003fc206 	br	9f48 <__alt_mem_sram+0xf7e09f48>
    a040:	9823883a 	mov	r17,r19
    a044:	850fc83a 	sub	r7,r16,r20
    a048:	008003c4 	movi	r2,15
    a04c:	18c0004c 	andi	r3,r3,1
    a050:	11c04336 	bltu	r2,r7,a160 <_realloc_r+0x284>
    a054:	1c06b03a 	or	r3,r3,r16
    a058:	a8c00115 	stw	r3,4(r21)
    a05c:	ac21883a 	add	r16,r21,r16
    a060:	80c00117 	ldw	r3,4(r16)
    a064:	18c00054 	ori	r3,r3,1
    a068:	80c00115 	stw	r3,4(r16)
    a06c:	9009883a 	mov	r4,r18
    a070:	000fd4c0 	call	fd4c <__malloc_unlock>
    a074:	8805883a 	mov	r2,r17
    a078:	dfc00917 	ldw	ra,36(sp)
    a07c:	df000817 	ldw	fp,32(sp)
    a080:	ddc00717 	ldw	r23,28(sp)
    a084:	dd800617 	ldw	r22,24(sp)
    a088:	dd400517 	ldw	r21,20(sp)
    a08c:	dd000417 	ldw	r20,16(sp)
    a090:	dcc00317 	ldw	r19,12(sp)
    a094:	dc800217 	ldw	r18,8(sp)
    a098:	dc400117 	ldw	r17,4(sp)
    a09c:	dc000017 	ldw	r16,0(sp)
    a0a0:	dec00a04 	addi	sp,sp,40
    a0a4:	f800283a 	ret
    a0a8:	18c0004c 	andi	r3,r3,1
    a0ac:	1800391e 	bne	r3,zero,a194 <_realloc_r+0x2b8>
    a0b0:	9dfffe17 	ldw	r23,-8(r19)
    a0b4:	00bfff04 	movi	r2,-4
    a0b8:	adefc83a 	sub	r23,r21,r23
    a0bc:	b9400117 	ldw	r5,4(r23)
    a0c0:	288a703a 	and	r5,r5,r2
    a0c4:	2c2d883a 	add	r22,r5,r16
    a0c8:	b1c03216 	blt	r22,r7,a194 <_realloc_r+0x2b8>
    a0cc:	b8800317 	ldw	r2,12(r23)
    a0d0:	b8c00217 	ldw	r3,8(r23)
    a0d4:	81bfff04 	addi	r6,r16,-4
    a0d8:	01000904 	movi	r4,36
    a0dc:	18800315 	stw	r2,12(r3)
    a0e0:	10c00215 	stw	r3,8(r2)
    a0e4:	bc400204 	addi	r17,r23,8
    a0e8:	2180ac36 	bltu	r4,r6,a39c <_realloc_r+0x4c0>
    a0ec:	008004c4 	movi	r2,19
    a0f0:	1180972e 	bgeu	r2,r6,a350 <_realloc_r+0x474>
    a0f4:	98800017 	ldw	r2,0(r19)
    a0f8:	b8800215 	stw	r2,8(r23)
    a0fc:	98800117 	ldw	r2,4(r19)
    a100:	b8800315 	stw	r2,12(r23)
    a104:	008006c4 	movi	r2,27
    a108:	1180b92e 	bgeu	r2,r6,a3f0 <_realloc_r+0x514>
    a10c:	98800217 	ldw	r2,8(r19)
    a110:	b8800415 	stw	r2,16(r23)
    a114:	98800317 	ldw	r2,12(r19)
    a118:	b8800515 	stw	r2,20(r23)
    a11c:	313fbe26 	beq	r6,r4,a018 <__alt_mem_sram+0xf7e0a018>
    a120:	b8c00604 	addi	r3,r23,24
    a124:	9cc00404 	addi	r19,r19,16
    a128:	98800017 	ldw	r2,0(r19)
    a12c:	b021883a 	mov	r16,r22
    a130:	b82b883a 	mov	r21,r23
    a134:	18800015 	stw	r2,0(r3)
    a138:	98800117 	ldw	r2,4(r19)
    a13c:	18800115 	stw	r2,4(r3)
    a140:	98800217 	ldw	r2,8(r19)
    a144:	18800215 	stw	r2,8(r3)
    a148:	b8c00117 	ldw	r3,4(r23)
    a14c:	003fbd06 	br	a044 <__alt_mem_sram+0xf7e0a044>
    a150:	00800304 	movi	r2,12
    a154:	90800015 	stw	r2,0(r18)
    a158:	0005883a 	mov	r2,zero
    a15c:	003fc606 	br	a078 <__alt_mem_sram+0xf7e0a078>
    a160:	1d06b03a 	or	r3,r3,r20
    a164:	ad0b883a 	add	r5,r21,r20
    a168:	a8c00115 	stw	r3,4(r21)
    a16c:	38800054 	ori	r2,r7,1
    a170:	28800115 	stw	r2,4(r5)
    a174:	29cf883a 	add	r7,r5,r7
    a178:	38800117 	ldw	r2,4(r7)
    a17c:	9009883a 	mov	r4,r18
    a180:	29400204 	addi	r5,r5,8
    a184:	10800054 	ori	r2,r2,1
    a188:	38800115 	stw	r2,4(r7)
    a18c:	000776c0 	call	776c <_free_r>
    a190:	003fb606 	br	a06c <__alt_mem_sram+0xf7e0a06c>
    a194:	880b883a 	mov	r5,r17
    a198:	9009883a 	mov	r4,r18
    a19c:	00083080 	call	8308 <_malloc_r>
    a1a0:	1023883a 	mov	r17,r2
    a1a4:	1000aa26 	beq	r2,zero,a450 <_realloc_r+0x574>
    a1a8:	98ffff17 	ldw	r3,-4(r19)
    a1ac:	113ffe04 	addi	r4,r2,-8
    a1b0:	00bfff84 	movi	r2,-2
    a1b4:	1884703a 	and	r2,r3,r2
    a1b8:	a885883a 	add	r2,r21,r2
    a1bc:	20808626 	beq	r4,r2,a3d8 <_realloc_r+0x4fc>
    a1c0:	81bfff04 	addi	r6,r16,-4
    a1c4:	00800904 	movi	r2,36
    a1c8:	11807036 	bltu	r2,r6,a38c <_realloc_r+0x4b0>
    a1cc:	00c004c4 	movi	r3,19
    a1d0:	19805636 	bltu	r3,r6,a32c <_realloc_r+0x450>
    a1d4:	8805883a 	mov	r2,r17
    a1d8:	9807883a 	mov	r3,r19
    a1dc:	19000017 	ldw	r4,0(r3)
    a1e0:	11000015 	stw	r4,0(r2)
    a1e4:	19000117 	ldw	r4,4(r3)
    a1e8:	11000115 	stw	r4,4(r2)
    a1ec:	18c00217 	ldw	r3,8(r3)
    a1f0:	10c00215 	stw	r3,8(r2)
    a1f4:	980b883a 	mov	r5,r19
    a1f8:	9009883a 	mov	r4,r18
    a1fc:	000776c0 	call	776c <_free_r>
    a200:	9009883a 	mov	r4,r18
    a204:	000fd4c0 	call	fd4c <__malloc_unlock>
    a208:	8805883a 	mov	r2,r17
    a20c:	003f9a06 	br	a078 <__alt_mem_sram+0xf7e0a078>
    a210:	300b883a 	mov	r5,r6
    a214:	dfc00917 	ldw	ra,36(sp)
    a218:	df000817 	ldw	fp,32(sp)
    a21c:	ddc00717 	ldw	r23,28(sp)
    a220:	dd800617 	ldw	r22,24(sp)
    a224:	dd400517 	ldw	r21,20(sp)
    a228:	dd000417 	ldw	r20,16(sp)
    a22c:	dcc00317 	ldw	r19,12(sp)
    a230:	dc800217 	ldw	r18,8(sp)
    a234:	dc400117 	ldw	r17,4(sp)
    a238:	dc000017 	ldw	r16,0(sp)
    a23c:	dec00a04 	addi	sp,sp,40
    a240:	00083081 	jmpi	8308 <_malloc_r>
    a244:	11400317 	ldw	r5,12(r2)
    a248:	10800217 	ldw	r2,8(r2)
    a24c:	9823883a 	mov	r17,r19
    a250:	2021883a 	mov	r16,r4
    a254:	11400315 	stw	r5,12(r2)
    a258:	28800215 	stw	r2,8(r5)
    a25c:	003f7906 	br	a044 <__alt_mem_sram+0xf7e0a044>
    a260:	21000117 	ldw	r4,4(r4)
    a264:	00bfff04 	movi	r2,-4
    a268:	a1800404 	addi	r6,r20,16
    a26c:	2088703a 	and	r4,r4,r2
    a270:	2409883a 	add	r4,r4,r16
    a274:	2180380e 	bge	r4,r6,a358 <_realloc_r+0x47c>
    a278:	18c0004c 	andi	r3,r3,1
    a27c:	183fc51e 	bne	r3,zero,a194 <__alt_mem_sram+0xf7e0a194>
    a280:	9dfffe17 	ldw	r23,-8(r19)
    a284:	adefc83a 	sub	r23,r21,r23
    a288:	b9400117 	ldw	r5,4(r23)
    a28c:	288a703a 	and	r5,r5,r2
    a290:	216d883a 	add	r22,r4,r5
    a294:	b1bf8b16 	blt	r22,r6,a0c4 <__alt_mem_sram+0xf7e0a0c4>
    a298:	b8800317 	ldw	r2,12(r23)
    a29c:	b8c00217 	ldw	r3,8(r23)
    a2a0:	81bfff04 	addi	r6,r16,-4
    a2a4:	01000904 	movi	r4,36
    a2a8:	18800315 	stw	r2,12(r3)
    a2ac:	10c00215 	stw	r3,8(r2)
    a2b0:	bc400204 	addi	r17,r23,8
    a2b4:	21805a36 	bltu	r4,r6,a420 <_realloc_r+0x544>
    a2b8:	008004c4 	movi	r2,19
    a2bc:	1180562e 	bgeu	r2,r6,a418 <_realloc_r+0x53c>
    a2c0:	98800017 	ldw	r2,0(r19)
    a2c4:	b8800215 	stw	r2,8(r23)
    a2c8:	98800117 	ldw	r2,4(r19)
    a2cc:	b8800315 	stw	r2,12(r23)
    a2d0:	008006c4 	movi	r2,27
    a2d4:	11805636 	bltu	r2,r6,a430 <_realloc_r+0x554>
    a2d8:	b8800404 	addi	r2,r23,16
    a2dc:	9cc00204 	addi	r19,r19,8
    a2e0:	98c00017 	ldw	r3,0(r19)
    a2e4:	10c00015 	stw	r3,0(r2)
    a2e8:	98c00117 	ldw	r3,4(r19)
    a2ec:	10c00115 	stw	r3,4(r2)
    a2f0:	98c00217 	ldw	r3,8(r19)
    a2f4:	10c00215 	stw	r3,8(r2)
    a2f8:	bd07883a 	add	r3,r23,r20
    a2fc:	b505c83a 	sub	r2,r22,r20
    a300:	e0c00215 	stw	r3,8(fp)
    a304:	10800054 	ori	r2,r2,1
    a308:	18800115 	stw	r2,4(r3)
    a30c:	b8800117 	ldw	r2,4(r23)
    a310:	9009883a 	mov	r4,r18
    a314:	1080004c 	andi	r2,r2,1
    a318:	a0a8b03a 	or	r20,r20,r2
    a31c:	bd000115 	stw	r20,4(r23)
    a320:	000fd4c0 	call	fd4c <__malloc_unlock>
    a324:	8805883a 	mov	r2,r17
    a328:	003f5306 	br	a078 <__alt_mem_sram+0xf7e0a078>
    a32c:	98c00017 	ldw	r3,0(r19)
    a330:	88c00015 	stw	r3,0(r17)
    a334:	98c00117 	ldw	r3,4(r19)
    a338:	88c00115 	stw	r3,4(r17)
    a33c:	00c006c4 	movi	r3,27
    a340:	19801d36 	bltu	r3,r6,a3b8 <_realloc_r+0x4dc>
    a344:	88800204 	addi	r2,r17,8
    a348:	98c00204 	addi	r3,r19,8
    a34c:	003fa306 	br	a1dc <__alt_mem_sram+0xf7e0a1dc>
    a350:	8807883a 	mov	r3,r17
    a354:	003f7406 	br	a128 <__alt_mem_sram+0xf7e0a128>
    a358:	ad2b883a 	add	r21,r21,r20
    a35c:	2505c83a 	sub	r2,r4,r20
    a360:	e5400215 	stw	r21,8(fp)
    a364:	10800054 	ori	r2,r2,1
    a368:	a8800115 	stw	r2,4(r21)
    a36c:	98bfff17 	ldw	r2,-4(r19)
    a370:	9009883a 	mov	r4,r18
    a374:	1080004c 	andi	r2,r2,1
    a378:	a0a8b03a 	or	r20,r20,r2
    a37c:	9d3fff15 	stw	r20,-4(r19)
    a380:	000fd4c0 	call	fd4c <__malloc_unlock>
    a384:	9805883a 	mov	r2,r19
    a388:	003f3b06 	br	a078 <__alt_mem_sram+0xf7e0a078>
    a38c:	8809883a 	mov	r4,r17
    a390:	980b883a 	mov	r5,r19
    a394:	0008cd00 	call	8cd0 <memmove>
    a398:	003f9606 	br	a1f4 <__alt_mem_sram+0xf7e0a1f4>
    a39c:	8809883a 	mov	r4,r17
    a3a0:	980b883a 	mov	r5,r19
    a3a4:	0008cd00 	call	8cd0 <memmove>
    a3a8:	b8c00117 	ldw	r3,4(r23)
    a3ac:	b021883a 	mov	r16,r22
    a3b0:	b82b883a 	mov	r21,r23
    a3b4:	003f2306 	br	a044 <__alt_mem_sram+0xf7e0a044>
    a3b8:	98c00217 	ldw	r3,8(r19)
    a3bc:	88c00215 	stw	r3,8(r17)
    a3c0:	98c00317 	ldw	r3,12(r19)
    a3c4:	88c00315 	stw	r3,12(r17)
    a3c8:	30800c26 	beq	r6,r2,a3fc <_realloc_r+0x520>
    a3cc:	88800404 	addi	r2,r17,16
    a3d0:	98c00404 	addi	r3,r19,16
    a3d4:	003f8106 	br	a1dc <__alt_mem_sram+0xf7e0a1dc>
    a3d8:	893fff17 	ldw	r4,-4(r17)
    a3dc:	00bfff04 	movi	r2,-4
    a3e0:	9823883a 	mov	r17,r19
    a3e4:	2084703a 	and	r2,r4,r2
    a3e8:	80a1883a 	add	r16,r16,r2
    a3ec:	003f1506 	br	a044 <__alt_mem_sram+0xf7e0a044>
    a3f0:	b8c00404 	addi	r3,r23,16
    a3f4:	9cc00204 	addi	r19,r19,8
    a3f8:	003f4b06 	br	a128 <__alt_mem_sram+0xf7e0a128>
    a3fc:	99000417 	ldw	r4,16(r19)
    a400:	88800604 	addi	r2,r17,24
    a404:	98c00604 	addi	r3,r19,24
    a408:	89000415 	stw	r4,16(r17)
    a40c:	99000517 	ldw	r4,20(r19)
    a410:	89000515 	stw	r4,20(r17)
    a414:	003f7106 	br	a1dc <__alt_mem_sram+0xf7e0a1dc>
    a418:	8805883a 	mov	r2,r17
    a41c:	003fb006 	br	a2e0 <__alt_mem_sram+0xf7e0a2e0>
    a420:	8809883a 	mov	r4,r17
    a424:	980b883a 	mov	r5,r19
    a428:	0008cd00 	call	8cd0 <memmove>
    a42c:	003fb206 	br	a2f8 <__alt_mem_sram+0xf7e0a2f8>
    a430:	98800217 	ldw	r2,8(r19)
    a434:	b8800415 	stw	r2,16(r23)
    a438:	98800317 	ldw	r2,12(r19)
    a43c:	b8800515 	stw	r2,20(r23)
    a440:	31000726 	beq	r6,r4,a460 <_realloc_r+0x584>
    a444:	b8800604 	addi	r2,r23,24
    a448:	9cc00404 	addi	r19,r19,16
    a44c:	003fa406 	br	a2e0 <__alt_mem_sram+0xf7e0a2e0>
    a450:	9009883a 	mov	r4,r18
    a454:	000fd4c0 	call	fd4c <__malloc_unlock>
    a458:	0005883a 	mov	r2,zero
    a45c:	003f0606 	br	a078 <__alt_mem_sram+0xf7e0a078>
    a460:	98c00417 	ldw	r3,16(r19)
    a464:	9cc00604 	addi	r19,r19,24
    a468:	b8800804 	addi	r2,r23,32
    a46c:	b8c00615 	stw	r3,24(r23)
    a470:	98ffff17 	ldw	r3,-4(r19)
    a474:	b8c00715 	stw	r3,28(r23)
    a478:	003f9906 	br	a2e0 <__alt_mem_sram+0xf7e0a2e0>

0000a47c <__fpclassifyd>:
    a47c:	00a00034 	movhi	r2,32768
    a480:	10bfffc4 	addi	r2,r2,-1
    a484:	2884703a 	and	r2,r5,r2
    a488:	10000726 	beq	r2,zero,a4a8 <__fpclassifyd+0x2c>
    a48c:	00fffc34 	movhi	r3,65520
    a490:	019ff834 	movhi	r6,32736
    a494:	28c7883a 	add	r3,r5,r3
    a498:	31bfffc4 	addi	r6,r6,-1
    a49c:	30c00536 	bltu	r6,r3,a4b4 <__fpclassifyd+0x38>
    a4a0:	00800104 	movi	r2,4
    a4a4:	f800283a 	ret
    a4a8:	2000021e 	bne	r4,zero,a4b4 <__fpclassifyd+0x38>
    a4ac:	00800084 	movi	r2,2
    a4b0:	f800283a 	ret
    a4b4:	00dffc34 	movhi	r3,32752
    a4b8:	019ff834 	movhi	r6,32736
    a4bc:	28cb883a 	add	r5,r5,r3
    a4c0:	31bfffc4 	addi	r6,r6,-1
    a4c4:	317ff62e 	bgeu	r6,r5,a4a0 <__alt_mem_sram+0xf7e0a4a0>
    a4c8:	01400434 	movhi	r5,16
    a4cc:	297fffc4 	addi	r5,r5,-1
    a4d0:	28800236 	bltu	r5,r2,a4dc <__fpclassifyd+0x60>
    a4d4:	008000c4 	movi	r2,3
    a4d8:	f800283a 	ret
    a4dc:	10c00226 	beq	r2,r3,a4e8 <__fpclassifyd+0x6c>
    a4e0:	0005883a 	mov	r2,zero
    a4e4:	f800283a 	ret
    a4e8:	2005003a 	cmpeq	r2,r4,zero
    a4ec:	f800283a 	ret

0000a4f0 <_sbrk_r>:
    a4f0:	defffd04 	addi	sp,sp,-12
    a4f4:	dc000015 	stw	r16,0(sp)
    a4f8:	04000074 	movhi	r16,1
    a4fc:	dc400115 	stw	r17,4(sp)
    a500:	84185304 	addi	r16,r16,24908
    a504:	2023883a 	mov	r17,r4
    a508:	2809883a 	mov	r4,r5
    a50c:	dfc00215 	stw	ra,8(sp)
    a510:	80000015 	stw	zero,0(r16)
    a514:	000ff180 	call	ff18 <sbrk>
    a518:	00ffffc4 	movi	r3,-1
    a51c:	10c00526 	beq	r2,r3,a534 <_sbrk_r+0x44>
    a520:	dfc00217 	ldw	ra,8(sp)
    a524:	dc400117 	ldw	r17,4(sp)
    a528:	dc000017 	ldw	r16,0(sp)
    a52c:	dec00304 	addi	sp,sp,12
    a530:	f800283a 	ret
    a534:	80c00017 	ldw	r3,0(r16)
    a538:	183ff926 	beq	r3,zero,a520 <__alt_mem_sram+0xf7e0a520>
    a53c:	88c00015 	stw	r3,0(r17)
    a540:	003ff706 	br	a520 <__alt_mem_sram+0xf7e0a520>

0000a544 <__sread>:
    a544:	defffe04 	addi	sp,sp,-8
    a548:	dc000015 	stw	r16,0(sp)
    a54c:	2821883a 	mov	r16,r5
    a550:	2940038f 	ldh	r5,14(r5)
    a554:	dfc00115 	stw	ra,4(sp)
    a558:	000c1240 	call	c124 <_read_r>
    a55c:	10000716 	blt	r2,zero,a57c <__sread+0x38>
    a560:	80c01417 	ldw	r3,80(r16)
    a564:	1887883a 	add	r3,r3,r2
    a568:	80c01415 	stw	r3,80(r16)
    a56c:	dfc00117 	ldw	ra,4(sp)
    a570:	dc000017 	ldw	r16,0(sp)
    a574:	dec00204 	addi	sp,sp,8
    a578:	f800283a 	ret
    a57c:	80c0030b 	ldhu	r3,12(r16)
    a580:	18fbffcc 	andi	r3,r3,61439
    a584:	80c0030d 	sth	r3,12(r16)
    a588:	dfc00117 	ldw	ra,4(sp)
    a58c:	dc000017 	ldw	r16,0(sp)
    a590:	dec00204 	addi	sp,sp,8
    a594:	f800283a 	ret

0000a598 <__seofread>:
    a598:	0005883a 	mov	r2,zero
    a59c:	f800283a 	ret

0000a5a0 <__swrite>:
    a5a0:	2880030b 	ldhu	r2,12(r5)
    a5a4:	defffb04 	addi	sp,sp,-20
    a5a8:	dcc00315 	stw	r19,12(sp)
    a5ac:	dc800215 	stw	r18,8(sp)
    a5b0:	dc400115 	stw	r17,4(sp)
    a5b4:	dc000015 	stw	r16,0(sp)
    a5b8:	dfc00415 	stw	ra,16(sp)
    a5bc:	10c0400c 	andi	r3,r2,256
    a5c0:	2821883a 	mov	r16,r5
    a5c4:	2027883a 	mov	r19,r4
    a5c8:	3025883a 	mov	r18,r6
    a5cc:	3823883a 	mov	r17,r7
    a5d0:	18000526 	beq	r3,zero,a5e8 <__swrite+0x48>
    a5d4:	2940038f 	ldh	r5,14(r5)
    a5d8:	000d883a 	mov	r6,zero
    a5dc:	01c00084 	movi	r7,2
    a5e0:	000c0c80 	call	c0c8 <_lseek_r>
    a5e4:	8080030b 	ldhu	r2,12(r16)
    a5e8:	8140038f 	ldh	r5,14(r16)
    a5ec:	10bbffcc 	andi	r2,r2,61439
    a5f0:	9809883a 	mov	r4,r19
    a5f4:	900d883a 	mov	r6,r18
    a5f8:	880f883a 	mov	r7,r17
    a5fc:	8080030d 	sth	r2,12(r16)
    a600:	dfc00417 	ldw	ra,16(sp)
    a604:	dcc00317 	ldw	r19,12(sp)
    a608:	dc800217 	ldw	r18,8(sp)
    a60c:	dc400117 	ldw	r17,4(sp)
    a610:	dc000017 	ldw	r16,0(sp)
    a614:	dec00504 	addi	sp,sp,20
    a618:	000bbb81 	jmpi	bbb8 <_write_r>

0000a61c <__sseek>:
    a61c:	defffe04 	addi	sp,sp,-8
    a620:	dc000015 	stw	r16,0(sp)
    a624:	2821883a 	mov	r16,r5
    a628:	2940038f 	ldh	r5,14(r5)
    a62c:	dfc00115 	stw	ra,4(sp)
    a630:	000c0c80 	call	c0c8 <_lseek_r>
    a634:	00ffffc4 	movi	r3,-1
    a638:	10c00826 	beq	r2,r3,a65c <__sseek+0x40>
    a63c:	80c0030b 	ldhu	r3,12(r16)
    a640:	80801415 	stw	r2,80(r16)
    a644:	18c40014 	ori	r3,r3,4096
    a648:	80c0030d 	sth	r3,12(r16)
    a64c:	dfc00117 	ldw	ra,4(sp)
    a650:	dc000017 	ldw	r16,0(sp)
    a654:	dec00204 	addi	sp,sp,8
    a658:	f800283a 	ret
    a65c:	80c0030b 	ldhu	r3,12(r16)
    a660:	18fbffcc 	andi	r3,r3,61439
    a664:	80c0030d 	sth	r3,12(r16)
    a668:	dfc00117 	ldw	ra,4(sp)
    a66c:	dc000017 	ldw	r16,0(sp)
    a670:	dec00204 	addi	sp,sp,8
    a674:	f800283a 	ret

0000a678 <__sclose>:
    a678:	2940038f 	ldh	r5,14(r5)
    a67c:	000bc141 	jmpi	bc14 <_close_r>

0000a680 <strcmp>:
    a680:	2144b03a 	or	r2,r4,r5
    a684:	108000cc 	andi	r2,r2,3
    a688:	1000171e 	bne	r2,zero,a6e8 <strcmp+0x68>
    a68c:	20800017 	ldw	r2,0(r4)
    a690:	28c00017 	ldw	r3,0(r5)
    a694:	10c0141e 	bne	r2,r3,a6e8 <strcmp+0x68>
    a698:	027fbff4 	movhi	r9,65279
    a69c:	4a7fbfc4 	addi	r9,r9,-257
    a6a0:	0086303a 	nor	r3,zero,r2
    a6a4:	02202074 	movhi	r8,32897
    a6a8:	1245883a 	add	r2,r2,r9
    a6ac:	42202004 	addi	r8,r8,-32640
    a6b0:	10c4703a 	and	r2,r2,r3
    a6b4:	1204703a 	and	r2,r2,r8
    a6b8:	10000226 	beq	r2,zero,a6c4 <strcmp+0x44>
    a6bc:	00001706 	br	a71c <strcmp+0x9c>
    a6c0:	1000161e 	bne	r2,zero,a71c <strcmp+0x9c>
    a6c4:	21000104 	addi	r4,r4,4
    a6c8:	20c00017 	ldw	r3,0(r4)
    a6cc:	29400104 	addi	r5,r5,4
    a6d0:	29800017 	ldw	r6,0(r5)
    a6d4:	1a4f883a 	add	r7,r3,r9
    a6d8:	00c4303a 	nor	r2,zero,r3
    a6dc:	3884703a 	and	r2,r7,r2
    a6e0:	1204703a 	and	r2,r2,r8
    a6e4:	19bff626 	beq	r3,r6,a6c0 <__alt_mem_sram+0xf7e0a6c0>
    a6e8:	20800007 	ldb	r2,0(r4)
    a6ec:	1000051e 	bne	r2,zero,a704 <strcmp+0x84>
    a6f0:	00000606 	br	a70c <strcmp+0x8c>
    a6f4:	21000044 	addi	r4,r4,1
    a6f8:	20800007 	ldb	r2,0(r4)
    a6fc:	29400044 	addi	r5,r5,1
    a700:	10000226 	beq	r2,zero,a70c <strcmp+0x8c>
    a704:	28c00007 	ldb	r3,0(r5)
    a708:	10fffa26 	beq	r2,r3,a6f4 <__alt_mem_sram+0xf7e0a6f4>
    a70c:	20800003 	ldbu	r2,0(r4)
    a710:	28c00003 	ldbu	r3,0(r5)
    a714:	10c5c83a 	sub	r2,r2,r3
    a718:	f800283a 	ret
    a71c:	0005883a 	mov	r2,zero
    a720:	f800283a 	ret

0000a724 <__sprint_r.part.0>:
    a724:	28801917 	ldw	r2,100(r5)
    a728:	defff604 	addi	sp,sp,-40
    a72c:	dd400515 	stw	r21,20(sp)
    a730:	dcc00315 	stw	r19,12(sp)
    a734:	dfc00915 	stw	ra,36(sp)
    a738:	df000815 	stw	fp,32(sp)
    a73c:	ddc00715 	stw	r23,28(sp)
    a740:	dd800615 	stw	r22,24(sp)
    a744:	dd000415 	stw	r20,16(sp)
    a748:	dc800215 	stw	r18,8(sp)
    a74c:	dc400115 	stw	r17,4(sp)
    a750:	dc000015 	stw	r16,0(sp)
    a754:	1088000c 	andi	r2,r2,8192
    a758:	2827883a 	mov	r19,r5
    a75c:	302b883a 	mov	r21,r6
    a760:	10002d26 	beq	r2,zero,a818 <__sprint_r.part.0+0xf4>
    a764:	30800217 	ldw	r2,8(r6)
    a768:	35800017 	ldw	r22,0(r6)
    a76c:	10002826 	beq	r2,zero,a810 <__sprint_r.part.0+0xec>
    a770:	2029883a 	mov	r20,r4
    a774:	b5c00104 	addi	r23,r22,4
    a778:	04bfffc4 	movi	r18,-1
    a77c:	bc400017 	ldw	r17,0(r23)
    a780:	b4000017 	ldw	r16,0(r22)
    a784:	0039883a 	mov	fp,zero
    a788:	8822d0ba 	srli	r17,r17,2
    a78c:	04400316 	blt	zero,r17,a79c <__sprint_r.part.0+0x78>
    a790:	00001706 	br	a7f0 <__sprint_r.part.0+0xcc>
    a794:	84000104 	addi	r16,r16,4
    a798:	8f001526 	beq	r17,fp,a7f0 <__sprint_r.part.0+0xcc>
    a79c:	81400017 	ldw	r5,0(r16)
    a7a0:	a009883a 	mov	r4,r20
    a7a4:	980d883a 	mov	r6,r19
    a7a8:	000be400 	call	be40 <_fputwc_r>
    a7ac:	e7000044 	addi	fp,fp,1
    a7b0:	14bff81e 	bne	r2,r18,a794 <__alt_mem_sram+0xf7e0a794>
    a7b4:	9005883a 	mov	r2,r18
    a7b8:	a8000215 	stw	zero,8(r21)
    a7bc:	a8000115 	stw	zero,4(r21)
    a7c0:	dfc00917 	ldw	ra,36(sp)
    a7c4:	df000817 	ldw	fp,32(sp)
    a7c8:	ddc00717 	ldw	r23,28(sp)
    a7cc:	dd800617 	ldw	r22,24(sp)
    a7d0:	dd400517 	ldw	r21,20(sp)
    a7d4:	dd000417 	ldw	r20,16(sp)
    a7d8:	dcc00317 	ldw	r19,12(sp)
    a7dc:	dc800217 	ldw	r18,8(sp)
    a7e0:	dc400117 	ldw	r17,4(sp)
    a7e4:	dc000017 	ldw	r16,0(sp)
    a7e8:	dec00a04 	addi	sp,sp,40
    a7ec:	f800283a 	ret
    a7f0:	a8c00217 	ldw	r3,8(r21)
    a7f4:	8c63883a 	add	r17,r17,r17
    a7f8:	8c63883a 	add	r17,r17,r17
    a7fc:	1c45c83a 	sub	r2,r3,r17
    a800:	a8800215 	stw	r2,8(r21)
    a804:	b5800204 	addi	r22,r22,8
    a808:	bdc00204 	addi	r23,r23,8
    a80c:	103fdb1e 	bne	r2,zero,a77c <__alt_mem_sram+0xf7e0a77c>
    a810:	0005883a 	mov	r2,zero
    a814:	003fe806 	br	a7b8 <__alt_mem_sram+0xf7e0a7b8>
    a818:	0007a5c0 	call	7a5c <__sfvwrite_r>
    a81c:	003fe606 	br	a7b8 <__alt_mem_sram+0xf7e0a7b8>

0000a820 <__sprint_r>:
    a820:	30c00217 	ldw	r3,8(r6)
    a824:	18000126 	beq	r3,zero,a82c <__sprint_r+0xc>
    a828:	000a7241 	jmpi	a724 <__sprint_r.part.0>
    a82c:	30000115 	stw	zero,4(r6)
    a830:	0005883a 	mov	r2,zero
    a834:	f800283a 	ret

0000a838 <___vfiprintf_internal_r>:
    a838:	defeca04 	addi	sp,sp,-1240
    a83c:	dd813215 	stw	r22,1224(sp)
    a840:	dd013015 	stw	r20,1216(sp)
    a844:	dfc13515 	stw	ra,1236(sp)
    a848:	df013415 	stw	fp,1232(sp)
    a84c:	ddc13315 	stw	r23,1228(sp)
    a850:	dd413115 	stw	r21,1220(sp)
    a854:	dcc12f15 	stw	r19,1212(sp)
    a858:	dc812e15 	stw	r18,1208(sp)
    a85c:	dc412d15 	stw	r17,1204(sp)
    a860:	dc012c15 	stw	r16,1200(sp)
    a864:	d9012015 	stw	r4,1152(sp)
    a868:	d9c12115 	stw	r7,1156(sp)
    a86c:	2829883a 	mov	r20,r5
    a870:	302d883a 	mov	r22,r6
    a874:	20000226 	beq	r4,zero,a880 <___vfiprintf_internal_r+0x48>
    a878:	20800e17 	ldw	r2,56(r4)
    a87c:	1001d326 	beq	r2,zero,afcc <___vfiprintf_internal_r+0x794>
    a880:	a0c0030b 	ldhu	r3,12(r20)
    a884:	1908000c 	andi	r4,r3,8192
    a888:	1805883a 	mov	r2,r3
    a88c:	2000071e 	bne	r4,zero,a8ac <___vfiprintf_internal_r+0x74>
    a890:	a1001917 	ldw	r4,100(r20)
    a894:	18880014 	ori	r2,r3,8192
    a898:	00f7ffc4 	movi	r3,-8193
    a89c:	20c8703a 	and	r4,r4,r3
    a8a0:	a080030d 	sth	r2,12(r20)
    a8a4:	1007883a 	mov	r3,r2
    a8a8:	a1001915 	stw	r4,100(r20)
    a8ac:	1100020c 	andi	r4,r2,8
    a8b0:	20018926 	beq	r4,zero,aed8 <___vfiprintf_internal_r+0x6a0>
    a8b4:	a1000417 	ldw	r4,16(r20)
    a8b8:	20018726 	beq	r4,zero,aed8 <___vfiprintf_internal_r+0x6a0>
    a8bc:	1080068c 	andi	r2,r2,26
    a8c0:	01000284 	movi	r4,10
    a8c4:	11018d26 	beq	r2,r4,aefc <___vfiprintf_internal_r+0x6c4>
    a8c8:	da810a04 	addi	r10,sp,1064
    a8cc:	dac109c4 	addi	r11,sp,1063
    a8d0:	07000074 	movhi	fp,1
    a8d4:	05c00074 	movhi	r23,1
    a8d8:	da811e15 	stw	r10,1144(sp)
    a8dc:	52d5c83a 	sub	r10,r10,r11
    a8e0:	e70a8704 	addi	fp,fp,10780
    a8e4:	bdca8304 	addi	r23,r23,10764
    a8e8:	dac11f15 	stw	r11,1148(sp)
    a8ec:	dec11a15 	stw	sp,1128(sp)
    a8f0:	d8011c15 	stw	zero,1136(sp)
    a8f4:	d8011b15 	stw	zero,1132(sp)
    a8f8:	d8012615 	stw	zero,1176(sp)
    a8fc:	d8012215 	stw	zero,1160(sp)
    a900:	da812715 	stw	r10,1180(sp)
    a904:	d811883a 	mov	r8,sp
    a908:	b021883a 	mov	r16,r22
    a90c:	80800007 	ldb	r2,0(r16)
    a910:	10039c26 	beq	r2,zero,b784 <___vfiprintf_internal_r+0xf4c>
    a914:	01000944 	movi	r4,37
    a918:	11039a26 	beq	r2,r4,b784 <___vfiprintf_internal_r+0xf4c>
    a91c:	8005883a 	mov	r2,r16
    a920:	00000106 	br	a928 <___vfiprintf_internal_r+0xf0>
    a924:	19000326 	beq	r3,r4,a934 <___vfiprintf_internal_r+0xfc>
    a928:	10800044 	addi	r2,r2,1
    a92c:	10c00007 	ldb	r3,0(r2)
    a930:	183ffc1e 	bne	r3,zero,a924 <__alt_mem_sram+0xf7e0a924>
    a934:	1425c83a 	sub	r18,r2,r16
    a938:	1023883a 	mov	r17,r2
    a93c:	90001026 	beq	r18,zero,a980 <___vfiprintf_internal_r+0x148>
    a940:	d8c11c17 	ldw	r3,1136(sp)
    a944:	d8811b17 	ldw	r2,1132(sp)
    a948:	44000015 	stw	r16,0(r8)
    a94c:	90c7883a 	add	r3,r18,r3
    a950:	10800044 	addi	r2,r2,1
    a954:	44800115 	stw	r18,4(r8)
    a958:	d8c11c15 	stw	r3,1136(sp)
    a95c:	d8811b15 	stw	r2,1132(sp)
    a960:	010001c4 	movi	r4,7
    a964:	2080750e 	bge	r4,r2,ab3c <___vfiprintf_internal_r+0x304>
    a968:	18039d1e 	bne	r3,zero,b7e0 <___vfiprintf_internal_r+0xfa8>
    a96c:	dac12217 	ldw	r11,1160(sp)
    a970:	d8011b15 	stw	zero,1132(sp)
    a974:	d811883a 	mov	r8,sp
    a978:	5c97883a 	add	r11,r11,r18
    a97c:	dac12215 	stw	r11,1160(sp)
    a980:	88800007 	ldb	r2,0(r17)
    a984:	1002e026 	beq	r2,zero,b508 <___vfiprintf_internal_r+0xcd0>
    a988:	88c00047 	ldb	r3,1(r17)
    a98c:	8c000044 	addi	r16,r17,1
    a990:	d8011d85 	stb	zero,1142(sp)
    a994:	000d883a 	mov	r6,zero
    a998:	027fffc4 	movi	r9,-1
    a99c:	0027883a 	mov	r19,zero
    a9a0:	002b883a 	mov	r21,zero
    a9a4:	01001604 	movi	r4,88
    a9a8:	01400244 	movi	r5,9
    a9ac:	03000a84 	movi	r12,42
    a9b0:	01c01b04 	movi	r7,108
    a9b4:	84000044 	addi	r16,r16,1
    a9b8:	18bff804 	addi	r2,r3,-32
    a9bc:	20825f36 	bltu	r4,r2,b33c <___vfiprintf_internal_r+0xb04>
    a9c0:	100490ba 	slli	r2,r2,2
    a9c4:	02800074 	movhi	r10,1
    a9c8:	52aa7604 	addi	r10,r10,-22056
    a9cc:	1285883a 	add	r2,r2,r10
    a9d0:	10800017 	ldw	r2,0(r2)
    a9d4:	1000683a 	jmp	r2
    a9d8:	0000b1ac 	andhi	zero,zero,710
    a9dc:	0000b33c 	xorhi	zero,zero,716
    a9e0:	0000b33c 	xorhi	zero,zero,716
    a9e4:	0000b330 	cmpltui	zero,zero,716
    a9e8:	0000b33c 	xorhi	zero,zero,716
    a9ec:	0000b33c 	xorhi	zero,zero,716
    a9f0:	0000b33c 	xorhi	zero,zero,716
    a9f4:	0000b33c 	xorhi	zero,zero,716
    a9f8:	0000b33c 	xorhi	zero,zero,716
    a9fc:	0000b33c 	xorhi	zero,zero,716
    aa00:	0000b308 	cmpgei	zero,zero,716
    aa04:	0000b324 	muli	zero,zero,716
    aa08:	0000b33c 	xorhi	zero,zero,716
    aa0c:	0000afdc 	xori	zero,zero,703
    aa10:	0000b13c 	xorhi	zero,zero,708
    aa14:	0000b33c 	xorhi	zero,zero,716
    aa18:	0000b0c0 	call	b0c <main+0x8b0>
    aa1c:	0000b0cc 	andi	zero,zero,707
    aa20:	0000b0cc 	andi	zero,zero,707
    aa24:	0000b0cc 	andi	zero,zero,707
    aa28:	0000b0cc 	andi	zero,zero,707
    aa2c:	0000b0cc 	andi	zero,zero,707
    aa30:	0000b0cc 	andi	zero,zero,707
    aa34:	0000b0cc 	andi	zero,zero,707
    aa38:	0000b0cc 	andi	zero,zero,707
    aa3c:	0000b0cc 	andi	zero,zero,707
    aa40:	0000b33c 	xorhi	zero,zero,716
    aa44:	0000b33c 	xorhi	zero,zero,716
    aa48:	0000b33c 	xorhi	zero,zero,716
    aa4c:	0000b33c 	xorhi	zero,zero,716
    aa50:	0000b33c 	xorhi	zero,zero,716
    aa54:	0000b33c 	xorhi	zero,zero,716
    aa58:	0000b33c 	xorhi	zero,zero,716
    aa5c:	0000b33c 	xorhi	zero,zero,716
    aa60:	0000b33c 	xorhi	zero,zero,716
    aa64:	0000b33c 	xorhi	zero,zero,716
    aa68:	0000b0f8 	rdprs	zero,zero,707
    aa6c:	0000b33c 	xorhi	zero,zero,716
    aa70:	0000b33c 	xorhi	zero,zero,716
    aa74:	0000b33c 	xorhi	zero,zero,716
    aa78:	0000b33c 	xorhi	zero,zero,716
    aa7c:	0000b33c 	xorhi	zero,zero,716
    aa80:	0000b33c 	xorhi	zero,zero,716
    aa84:	0000b33c 	xorhi	zero,zero,716
    aa88:	0000b33c 	xorhi	zero,zero,716
    aa8c:	0000b33c 	xorhi	zero,zero,716
    aa90:	0000b33c 	xorhi	zero,zero,716
    aa94:	0000ab8c 	andi	zero,zero,686
    aa98:	0000b33c 	xorhi	zero,zero,716
    aa9c:	0000b33c 	xorhi	zero,zero,716
    aaa0:	0000b33c 	xorhi	zero,zero,716
    aaa4:	0000b33c 	xorhi	zero,zero,716
    aaa8:	0000b33c 	xorhi	zero,zero,716
    aaac:	0000ab50 	cmplti	zero,zero,685
    aab0:	0000b33c 	xorhi	zero,zero,716
    aab4:	0000b33c 	xorhi	zero,zero,716
    aab8:	0000b038 	rdprs	zero,zero,704
    aabc:	0000b33c 	xorhi	zero,zero,716
    aac0:	0000b33c 	xorhi	zero,zero,716
    aac4:	0000b33c 	xorhi	zero,zero,716
    aac8:	0000b33c 	xorhi	zero,zero,716
    aacc:	0000b33c 	xorhi	zero,zero,716
    aad0:	0000b33c 	xorhi	zero,zero,716
    aad4:	0000b33c 	xorhi	zero,zero,716
    aad8:	0000b33c 	xorhi	zero,zero,716
    aadc:	0000b33c 	xorhi	zero,zero,716
    aae0:	0000b33c 	xorhi	zero,zero,716
    aae4:	0000b090 	cmplti	zero,zero,706
    aae8:	0000b228 	cmpgeui	zero,zero,712
    aaec:	0000b33c 	xorhi	zero,zero,716
    aaf0:	0000b33c 	xorhi	zero,zero,716
    aaf4:	0000b33c 	xorhi	zero,zero,716
    aaf8:	0000b2b0 	cmpltui	zero,zero,714
    aafc:	0000b228 	cmpgeui	zero,zero,712
    ab00:	0000b33c 	xorhi	zero,zero,716
    ab04:	0000b33c 	xorhi	zero,zero,716
    ab08:	0000b2bc 	xorhi	zero,zero,714
    ab0c:	0000b33c 	xorhi	zero,zero,716
    ab10:	0000b17c 	xorhi	zero,zero,709
    ab14:	0000ab90 	cmplti	zero,zero,686
    ab18:	0000b264 	muli	zero,zero,713
    ab1c:	0000b2a4 	muli	zero,zero,714
    ab20:	0000b33c 	xorhi	zero,zero,716
    ab24:	0000b1c8 	cmpgei	zero,zero,711
    ab28:	0000b33c 	xorhi	zero,zero,716
    ab2c:	0000ab54 	movui	zero,685
    ab30:	0000b33c 	xorhi	zero,zero,716
    ab34:	0000b33c 	xorhi	zero,zero,716
    ab38:	0000b2cc 	andi	zero,zero,715
    ab3c:	42000204 	addi	r8,r8,8
    ab40:	dac12217 	ldw	r11,1160(sp)
    ab44:	5c97883a 	add	r11,r11,r18
    ab48:	dac12215 	stw	r11,1160(sp)
    ab4c:	003f8c06 	br	a980 <__alt_mem_sram+0xf7e0a980>
    ab50:	ad400414 	ori	r21,r21,16
    ab54:	a880080c 	andi	r2,r21,32
    ab58:	10012f1e 	bne	r2,zero,b018 <___vfiprintf_internal_r+0x7e0>
    ab5c:	a880040c 	andi	r2,r21,16
    ab60:	1001ff1e 	bne	r2,zero,b360 <___vfiprintf_internal_r+0xb28>
    ab64:	a880100c 	andi	r2,r21,64
    ab68:	1001fd26 	beq	r2,zero,b360 <___vfiprintf_internal_r+0xb28>
    ab6c:	da812117 	ldw	r10,1156(sp)
    ab70:	002d883a 	mov	r22,zero
    ab74:	00800044 	movi	r2,1
    ab78:	5480000b 	ldhu	r18,0(r10)
    ab7c:	52800104 	addi	r10,r10,4
    ab80:	da812115 	stw	r10,1156(sp)
    ab84:	9009883a 	mov	r4,r18
    ab88:	00000a06 	br	abb4 <___vfiprintf_internal_r+0x37c>
    ab8c:	ad400414 	ori	r21,r21,16
    ab90:	a880080c 	andi	r2,r21,32
    ab94:	10011426 	beq	r2,zero,afe8 <___vfiprintf_internal_r+0x7b0>
    ab98:	da812117 	ldw	r10,1156(sp)
    ab9c:	0005883a 	mov	r2,zero
    aba0:	54800017 	ldw	r18,0(r10)
    aba4:	55800117 	ldw	r22,4(r10)
    aba8:	52800204 	addi	r10,r10,8
    abac:	da812115 	stw	r10,1156(sp)
    abb0:	9588b03a 	or	r4,r18,r22
    abb4:	d8011d85 	stb	zero,1142(sp)
    abb8:	4823883a 	mov	r17,r9
    abbc:	0019883a 	mov	r12,zero
    abc0:	48000216 	blt	r9,zero,abcc <___vfiprintf_internal_r+0x394>
    abc4:	00ffdfc4 	movi	r3,-129
    abc8:	a8ea703a 	and	r21,r21,r3
    abcc:	2002221e 	bne	r4,zero,b458 <___vfiprintf_internal_r+0xc20>
    abd0:	4802c726 	beq	r9,zero,b6f0 <___vfiprintf_internal_r+0xeb8>
    abd4:	10803fcc 	andi	r2,r2,255
    abd8:	00c00044 	movi	r3,1
    abdc:	10c24426 	beq	r2,r3,b4f0 <___vfiprintf_internal_r+0xcb8>
    abe0:	00c00084 	movi	r3,2
    abe4:	10c2cc26 	beq	r2,r3,b718 <___vfiprintf_internal_r+0xee0>
    abe8:	d8c10a04 	addi	r3,sp,1064
    abec:	9008d0fa 	srli	r4,r18,3
    abf0:	b00a977a 	slli	r5,r22,29
    abf4:	b02cd0fa 	srli	r22,r22,3
    abf8:	948001cc 	andi	r18,r18,7
    abfc:	90800c04 	addi	r2,r18,48
    ac00:	18ffffc4 	addi	r3,r3,-1
    ac04:	2924b03a 	or	r18,r5,r4
    ac08:	18800005 	stb	r2,0(r3)
    ac0c:	9588b03a 	or	r4,r18,r22
    ac10:	203ff61e 	bne	r4,zero,abec <__alt_mem_sram+0xf7e0abec>
    ac14:	a900004c 	andi	r4,r21,1
    ac18:	d8c12415 	stw	r3,1168(sp)
    ac1c:	2002fb1e 	bne	r4,zero,b80c <___vfiprintf_internal_r+0xfd4>
    ac20:	da811e17 	ldw	r10,1144(sp)
    ac24:	50e3c83a 	sub	r17,r10,r3
    ac28:	8825883a 	mov	r18,r17
    ac2c:	8a40010e 	bge	r17,r9,ac34 <___vfiprintf_internal_r+0x3fc>
    ac30:	4825883a 	mov	r18,r9
    ac34:	63003fcc 	andi	r12,r12,255
    ac38:	6300201c 	xori	r12,r12,128
    ac3c:	633fe004 	addi	r12,r12,-128
    ac40:	60000126 	beq	r12,zero,ac48 <___vfiprintf_internal_r+0x410>
    ac44:	94800044 	addi	r18,r18,1
    ac48:	ab80008c 	andi	r14,r21,2
    ac4c:	70000126 	beq	r14,zero,ac54 <___vfiprintf_internal_r+0x41c>
    ac50:	94800084 	addi	r18,r18,2
    ac54:	ad80210c 	andi	r22,r21,132
    ac58:	b001df1e 	bne	r22,zero,b3d8 <___vfiprintf_internal_r+0xba0>
    ac5c:	9c8fc83a 	sub	r7,r19,r18
    ac60:	01c1dd0e 	bge	zero,r7,b3d8 <___vfiprintf_internal_r+0xba0>
    ac64:	03000404 	movi	r12,16
    ac68:	d8811c17 	ldw	r2,1136(sp)
    ac6c:	61c3920e 	bge	r12,r7,bab8 <___vfiprintf_internal_r+0x1280>
    ac70:	02800074 	movhi	r10,1
    ac74:	528a8704 	addi	r10,r10,10780
    ac78:	dc012915 	stw	r16,1188(sp)
    ac7c:	d9811b17 	ldw	r6,1132(sp)
    ac80:	da812315 	stw	r10,1164(sp)
    ac84:	00c001c4 	movi	r3,7
    ac88:	da412515 	stw	r9,1172(sp)
    ac8c:	db812815 	stw	r14,1184(sp)
    ac90:	3821883a 	mov	r16,r7
    ac94:	00000506 	br	acac <___vfiprintf_internal_r+0x474>
    ac98:	31400084 	addi	r5,r6,2
    ac9c:	42000204 	addi	r8,r8,8
    aca0:	200d883a 	mov	r6,r4
    aca4:	843ffc04 	addi	r16,r16,-16
    aca8:	64000d0e 	bge	r12,r16,ace0 <___vfiprintf_internal_r+0x4a8>
    acac:	10800404 	addi	r2,r2,16
    acb0:	31000044 	addi	r4,r6,1
    acb4:	47000015 	stw	fp,0(r8)
    acb8:	43000115 	stw	r12,4(r8)
    acbc:	d8811c15 	stw	r2,1136(sp)
    acc0:	d9011b15 	stw	r4,1132(sp)
    acc4:	193ff40e 	bge	r3,r4,ac98 <__alt_mem_sram+0xf7e0ac98>
    acc8:	1001b51e 	bne	r2,zero,b3a0 <___vfiprintf_internal_r+0xb68>
    accc:	843ffc04 	addi	r16,r16,-16
    acd0:	000d883a 	mov	r6,zero
    acd4:	01400044 	movi	r5,1
    acd8:	d811883a 	mov	r8,sp
    acdc:	643ff316 	blt	r12,r16,acac <__alt_mem_sram+0xf7e0acac>
    ace0:	800f883a 	mov	r7,r16
    ace4:	da412517 	ldw	r9,1172(sp)
    ace8:	db812817 	ldw	r14,1184(sp)
    acec:	dc012917 	ldw	r16,1188(sp)
    acf0:	dac12317 	ldw	r11,1164(sp)
    acf4:	3887883a 	add	r3,r7,r2
    acf8:	41c00115 	stw	r7,4(r8)
    acfc:	42c00015 	stw	r11,0(r8)
    ad00:	d8c11c15 	stw	r3,1136(sp)
    ad04:	d9411b15 	stw	r5,1132(sp)
    ad08:	008001c4 	movi	r2,7
    ad0c:	11429316 	blt	r2,r5,b75c <___vfiprintf_internal_r+0xf24>
    ad10:	d9011d87 	ldb	r4,1142(sp)
    ad14:	42000204 	addi	r8,r8,8
    ad18:	28800044 	addi	r2,r5,1
    ad1c:	2001b31e 	bne	r4,zero,b3ec <___vfiprintf_internal_r+0xbb4>
    ad20:	70000c26 	beq	r14,zero,ad54 <___vfiprintf_internal_r+0x51c>
    ad24:	d9011d04 	addi	r4,sp,1140
    ad28:	18c00084 	addi	r3,r3,2
    ad2c:	41000015 	stw	r4,0(r8)
    ad30:	01000084 	movi	r4,2
    ad34:	41000115 	stw	r4,4(r8)
    ad38:	d8c11c15 	stw	r3,1136(sp)
    ad3c:	d8811b15 	stw	r2,1132(sp)
    ad40:	010001c4 	movi	r4,7
    ad44:	20826516 	blt	r4,r2,b6dc <___vfiprintf_internal_r+0xea4>
    ad48:	100b883a 	mov	r5,r2
    ad4c:	42000204 	addi	r8,r8,8
    ad50:	10800044 	addi	r2,r2,1
    ad54:	01002004 	movi	r4,128
    ad58:	b1021a26 	beq	r22,r4,b5c4 <___vfiprintf_internal_r+0xd8c>
    ad5c:	4c6dc83a 	sub	r22,r9,r17
    ad60:	0580230e 	bge	zero,r22,adf0 <___vfiprintf_internal_r+0x5b8>
    ad64:	01c00404 	movi	r7,16
    ad68:	3d83300e 	bge	r7,r22,ba2c <___vfiprintf_internal_r+0x11f4>
    ad6c:	00800074 	movhi	r2,1
    ad70:	108a8304 	addi	r2,r2,10764
    ad74:	d8812315 	stw	r2,1164(sp)
    ad78:	030001c4 	movi	r12,7
    ad7c:	00000506 	br	ad94 <___vfiprintf_internal_r+0x55c>
    ad80:	28800084 	addi	r2,r5,2
    ad84:	42000204 	addi	r8,r8,8
    ad88:	200b883a 	mov	r5,r4
    ad8c:	b5bffc04 	addi	r22,r22,-16
    ad90:	3d800d0e 	bge	r7,r22,adc8 <___vfiprintf_internal_r+0x590>
    ad94:	18c00404 	addi	r3,r3,16
    ad98:	29000044 	addi	r4,r5,1
    ad9c:	45c00015 	stw	r23,0(r8)
    ada0:	41c00115 	stw	r7,4(r8)
    ada4:	d8c11c15 	stw	r3,1136(sp)
    ada8:	d9011b15 	stw	r4,1132(sp)
    adac:	613ff40e 	bge	r12,r4,ad80 <__alt_mem_sram+0xf7e0ad80>
    adb0:	18019b1e 	bne	r3,zero,b420 <___vfiprintf_internal_r+0xbe8>
    adb4:	b5bffc04 	addi	r22,r22,-16
    adb8:	000b883a 	mov	r5,zero
    adbc:	00800044 	movi	r2,1
    adc0:	d811883a 	mov	r8,sp
    adc4:	3dbff316 	blt	r7,r22,ad94 <__alt_mem_sram+0xf7e0ad94>
    adc8:	da812317 	ldw	r10,1164(sp)
    adcc:	1d87883a 	add	r3,r3,r22
    add0:	45800115 	stw	r22,4(r8)
    add4:	42800015 	stw	r10,0(r8)
    add8:	d8c11c15 	stw	r3,1136(sp)
    addc:	d8811b15 	stw	r2,1132(sp)
    ade0:	010001c4 	movi	r4,7
    ade4:	2081dd16 	blt	r4,r2,b55c <___vfiprintf_internal_r+0xd24>
    ade8:	42000204 	addi	r8,r8,8
    adec:	10800044 	addi	r2,r2,1
    adf0:	da812417 	ldw	r10,1168(sp)
    adf4:	1c47883a 	add	r3,r3,r17
    adf8:	44400115 	stw	r17,4(r8)
    adfc:	42800015 	stw	r10,0(r8)
    ae00:	d8c11c15 	stw	r3,1136(sp)
    ae04:	d8811b15 	stw	r2,1132(sp)
    ae08:	010001c4 	movi	r4,7
    ae0c:	2081dc0e 	bge	r4,r2,b580 <___vfiprintf_internal_r+0xd48>
    ae10:	1802611e 	bne	r3,zero,b798 <___vfiprintf_internal_r+0xf60>
    ae14:	d8011b15 	stw	zero,1132(sp)
    ae18:	aac0010c 	andi	r11,r21,4
    ae1c:	58002726 	beq	r11,zero,aebc <___vfiprintf_internal_r+0x684>
    ae20:	9ca3c83a 	sub	r17,r19,r18
    ae24:	d811883a 	mov	r8,sp
    ae28:	0443510e 	bge	zero,r17,bb70 <___vfiprintf_internal_r+0x1338>
    ae2c:	01c00404 	movi	r7,16
    ae30:	3c43320e 	bge	r7,r17,bafc <___vfiprintf_internal_r+0x12c4>
    ae34:	00800074 	movhi	r2,1
    ae38:	108a8704 	addi	r2,r2,10780
    ae3c:	d9011b17 	ldw	r4,1132(sp)
    ae40:	d8812315 	stw	r2,1164(sp)
    ae44:	382d883a 	mov	r22,r7
    ae48:	054001c4 	movi	r21,7
    ae4c:	00000506 	br	ae64 <___vfiprintf_internal_r+0x62c>
    ae50:	21400084 	addi	r5,r4,2
    ae54:	42000204 	addi	r8,r8,8
    ae58:	1009883a 	mov	r4,r2
    ae5c:	8c7ffc04 	addi	r17,r17,-16
    ae60:	b4400d0e 	bge	r22,r17,ae98 <___vfiprintf_internal_r+0x660>
    ae64:	18c00404 	addi	r3,r3,16
    ae68:	20800044 	addi	r2,r4,1
    ae6c:	47000015 	stw	fp,0(r8)
    ae70:	45800115 	stw	r22,4(r8)
    ae74:	d8c11c15 	stw	r3,1136(sp)
    ae78:	d8811b15 	stw	r2,1132(sp)
    ae7c:	a8bff40e 	bge	r21,r2,ae50 <__alt_mem_sram+0xf7e0ae50>
    ae80:	1801ac1e 	bne	r3,zero,b534 <___vfiprintf_internal_r+0xcfc>
    ae84:	8c7ffc04 	addi	r17,r17,-16
    ae88:	0009883a 	mov	r4,zero
    ae8c:	01400044 	movi	r5,1
    ae90:	d811883a 	mov	r8,sp
    ae94:	b47ff316 	blt	r22,r17,ae64 <__alt_mem_sram+0xf7e0ae64>
    ae98:	da812317 	ldw	r10,1164(sp)
    ae9c:	1c47883a 	add	r3,r3,r17
    aea0:	44400115 	stw	r17,4(r8)
    aea4:	42800015 	stw	r10,0(r8)
    aea8:	d8c11c15 	stw	r3,1136(sp)
    aeac:	d9411b15 	stw	r5,1132(sp)
    aeb0:	008001c4 	movi	r2,7
    aeb4:	1141b70e 	bge	r2,r5,b594 <___vfiprintf_internal_r+0xd5c>
    aeb8:	1802cf1e 	bne	r3,zero,b9f8 <___vfiprintf_internal_r+0x11c0>
    aebc:	94c2ca16 	blt	r18,r19,b9e8 <___vfiprintf_internal_r+0x11b0>
    aec0:	dac12217 	ldw	r11,1160(sp)
    aec4:	5c97883a 	add	r11,r11,r18
    aec8:	dac12215 	stw	r11,1160(sp)
    aecc:	d8011b15 	stw	zero,1132(sp)
    aed0:	d811883a 	mov	r8,sp
    aed4:	003e8d06 	br	a90c <__alt_mem_sram+0xf7e0a90c>
    aed8:	d9012017 	ldw	r4,1152(sp)
    aedc:	a00b883a 	mov	r5,r20
    aee0:	00055f80 	call	55f8 <__swsetup_r>
    aee4:	10002c1e 	bne	r2,zero,af98 <___vfiprintf_internal_r+0x760>
    aee8:	a0c0030b 	ldhu	r3,12(r20)
    aeec:	01000284 	movi	r4,10
    aef0:	1805883a 	mov	r2,r3
    aef4:	1080068c 	andi	r2,r2,26
    aef8:	113e731e 	bne	r2,r4,a8c8 <__alt_mem_sram+0xf7e0a8c8>
    aefc:	a080038b 	ldhu	r2,14(r20)
    af00:	113fffcc 	andi	r4,r2,65535
    af04:	2120001c 	xori	r4,r4,32768
    af08:	21200004 	addi	r4,r4,-32768
    af0c:	203e6e16 	blt	r4,zero,a8c8 <__alt_mem_sram+0xf7e0a8c8>
    af10:	a3001917 	ldw	r12,100(r20)
    af14:	a2c00717 	ldw	r11,28(r20)
    af18:	a2800917 	ldw	r10,36(r20)
    af1c:	d9012017 	ldw	r4,1152(sp)
    af20:	d9c12117 	ldw	r7,1156(sp)
    af24:	02410004 	movi	r9,1024
    af28:	18ffff4c 	andi	r3,r3,65533
    af2c:	da4b883a 	add	r5,sp,r9
    af30:	b00d883a 	mov	r6,r22
    af34:	d8c1030d 	sth	r3,1036(sp)
    af38:	db011915 	stw	r12,1124(sp)
    af3c:	d881038d 	sth	r2,1038(sp)
    af40:	dac10715 	stw	r11,1052(sp)
    af44:	da810915 	stw	r10,1060(sp)
    af48:	dec10015 	stw	sp,1024(sp)
    af4c:	dec10415 	stw	sp,1040(sp)
    af50:	da410215 	stw	r9,1032(sp)
    af54:	da410515 	stw	r9,1044(sp)
    af58:	d8010615 	stw	zero,1048(sp)
    af5c:	000a8380 	call	a838 <___vfiprintf_internal_r>
    af60:	1021883a 	mov	r16,r2
    af64:	10000416 	blt	r2,zero,af78 <___vfiprintf_internal_r+0x740>
    af68:	d9012017 	ldw	r4,1152(sp)
    af6c:	d9410004 	addi	r5,sp,1024
    af70:	00070500 	call	7050 <_fflush_r>
    af74:	1002fc1e 	bne	r2,zero,bb68 <___vfiprintf_internal_r+0x1330>
    af78:	d881030b 	ldhu	r2,1036(sp)
    af7c:	1080100c 	andi	r2,r2,64
    af80:	10000326 	beq	r2,zero,af90 <___vfiprintf_internal_r+0x758>
    af84:	a080030b 	ldhu	r2,12(r20)
    af88:	10801014 	ori	r2,r2,64
    af8c:	a080030d 	sth	r2,12(r20)
    af90:	8005883a 	mov	r2,r16
    af94:	00000106 	br	af9c <___vfiprintf_internal_r+0x764>
    af98:	00bfffc4 	movi	r2,-1
    af9c:	dfc13517 	ldw	ra,1236(sp)
    afa0:	df013417 	ldw	fp,1232(sp)
    afa4:	ddc13317 	ldw	r23,1228(sp)
    afa8:	dd813217 	ldw	r22,1224(sp)
    afac:	dd413117 	ldw	r21,1220(sp)
    afb0:	dd013017 	ldw	r20,1216(sp)
    afb4:	dcc12f17 	ldw	r19,1212(sp)
    afb8:	dc812e17 	ldw	r18,1208(sp)
    afbc:	dc412d17 	ldw	r17,1204(sp)
    afc0:	dc012c17 	ldw	r16,1200(sp)
    afc4:	dec13604 	addi	sp,sp,1240
    afc8:	f800283a 	ret
    afcc:	00075f80 	call	75f8 <__sinit>
    afd0:	003e2b06 	br	a880 <__alt_mem_sram+0xf7e0a880>
    afd4:	04e7c83a 	sub	r19,zero,r19
    afd8:	d8812115 	stw	r2,1156(sp)
    afdc:	ad400114 	ori	r21,r21,4
    afe0:	80c00007 	ldb	r3,0(r16)
    afe4:	003e7306 	br	a9b4 <__alt_mem_sram+0xf7e0a9b4>
    afe8:	a880040c 	andi	r2,r21,16
    afec:	1000e41e 	bne	r2,zero,b380 <___vfiprintf_internal_r+0xb48>
    aff0:	a880100c 	andi	r2,r21,64
    aff4:	1000e226 	beq	r2,zero,b380 <___vfiprintf_internal_r+0xb48>
    aff8:	da812117 	ldw	r10,1156(sp)
    affc:	002d883a 	mov	r22,zero
    b000:	0005883a 	mov	r2,zero
    b004:	5480000b 	ldhu	r18,0(r10)
    b008:	52800104 	addi	r10,r10,4
    b00c:	da812115 	stw	r10,1156(sp)
    b010:	9009883a 	mov	r4,r18
    b014:	003ee706 	br	abb4 <__alt_mem_sram+0xf7e0abb4>
    b018:	da812117 	ldw	r10,1156(sp)
    b01c:	00800044 	movi	r2,1
    b020:	54800017 	ldw	r18,0(r10)
    b024:	55800117 	ldw	r22,4(r10)
    b028:	52800204 	addi	r10,r10,8
    b02c:	da812115 	stw	r10,1156(sp)
    b030:	9588b03a 	or	r4,r18,r22
    b034:	003edf06 	br	abb4 <__alt_mem_sram+0xf7e0abb4>
    b038:	02c00074 	movhi	r11,1
    b03c:	5aca1d04 	addi	r11,r11,10356
    b040:	d9811d85 	stb	r6,1142(sp)
    b044:	dac12615 	stw	r11,1176(sp)
    b048:	a900080c 	andi	r4,r21,32
    b04c:	d8812117 	ldw	r2,1156(sp)
    b050:	2000a526 	beq	r4,zero,b2e8 <___vfiprintf_internal_r+0xab0>
    b054:	da812117 	ldw	r10,1156(sp)
    b058:	14800017 	ldw	r18,0(r2)
    b05c:	15800117 	ldw	r22,4(r2)
    b060:	52800204 	addi	r10,r10,8
    b064:	da812115 	stw	r10,1156(sp)
    b068:	a880004c 	andi	r2,r21,1
    b06c:	1001d926 	beq	r2,zero,b7d4 <___vfiprintf_internal_r+0xf9c>
    b070:	9588b03a 	or	r4,r18,r22
    b074:	20024426 	beq	r4,zero,b988 <___vfiprintf_internal_r+0x1150>
    b078:	00800c04 	movi	r2,48
    b07c:	d8811d05 	stb	r2,1140(sp)
    b080:	d8c11d45 	stb	r3,1141(sp)
    b084:	ad400094 	ori	r21,r21,2
    b088:	00800084 	movi	r2,2
    b08c:	003ec906 	br	abb4 <__alt_mem_sram+0xf7e0abb4>
    b090:	da812117 	ldw	r10,1156(sp)
    b094:	04800044 	movi	r18,1
    b098:	dac10004 	addi	r11,sp,1024
    b09c:	50800017 	ldw	r2,0(r10)
    b0a0:	52800104 	addi	r10,r10,4
    b0a4:	d8011d85 	stb	zero,1142(sp)
    b0a8:	d8810005 	stb	r2,1024(sp)
    b0ac:	da812115 	stw	r10,1156(sp)
    b0b0:	9023883a 	mov	r17,r18
    b0b4:	dac12415 	stw	r11,1168(sp)
    b0b8:	0013883a 	mov	r9,zero
    b0bc:	003ee206 	br	ac48 <__alt_mem_sram+0xf7e0ac48>
    b0c0:	ad402014 	ori	r21,r21,128
    b0c4:	80c00007 	ldb	r3,0(r16)
    b0c8:	003e3a06 	br	a9b4 <__alt_mem_sram+0xf7e0a9b4>
    b0cc:	8015883a 	mov	r10,r16
    b0d0:	0027883a 	mov	r19,zero
    b0d4:	18bff404 	addi	r2,r3,-48
    b0d8:	50c00007 	ldb	r3,0(r10)
    b0dc:	9cc002a4 	muli	r19,r19,10
    b0e0:	84000044 	addi	r16,r16,1
    b0e4:	8015883a 	mov	r10,r16
    b0e8:	98a7883a 	add	r19,r19,r2
    b0ec:	18bff404 	addi	r2,r3,-48
    b0f0:	28bff92e 	bgeu	r5,r2,b0d8 <__alt_mem_sram+0xf7e0b0d8>
    b0f4:	003e3006 	br	a9b8 <__alt_mem_sram+0xf7e0a9b8>
    b0f8:	ad400414 	ori	r21,r21,16
    b0fc:	d9811d85 	stb	r6,1142(sp)
    b100:	a880080c 	andi	r2,r21,32
    b104:	d8c12117 	ldw	r3,1156(sp)
    b108:	10004b26 	beq	r2,zero,b238 <___vfiprintf_internal_r+0xa00>
    b10c:	da812117 	ldw	r10,1156(sp)
    b110:	18800117 	ldw	r2,4(r3)
    b114:	1c800017 	ldw	r18,0(r3)
    b118:	52800204 	addi	r10,r10,8
    b11c:	da812115 	stw	r10,1156(sp)
    b120:	102d883a 	mov	r22,r2
    b124:	1001f116 	blt	r2,zero,b8ec <___vfiprintf_internal_r+0x10b4>
    b128:	db011d83 	ldbu	r12,1142(sp)
    b12c:	4823883a 	mov	r17,r9
    b130:	00800044 	movi	r2,1
    b134:	9588b03a 	or	r4,r18,r22
    b138:	003ea106 	br	abc0 <__alt_mem_sram+0xf7e0abc0>
    b13c:	80c00007 	ldb	r3,0(r16)
    b140:	82800044 	addi	r10,r16,1
    b144:	1b027f26 	beq	r3,r12,bb44 <___vfiprintf_internal_r+0x130c>
    b148:	18bff404 	addi	r2,r3,-48
    b14c:	5021883a 	mov	r16,r10
    b150:	0013883a 	mov	r9,zero
    b154:	28be1836 	bltu	r5,r2,a9b8 <__alt_mem_sram+0xf7e0a9b8>
    b158:	80c00007 	ldb	r3,0(r16)
    b15c:	4a4002a4 	muli	r9,r9,10
    b160:	84000044 	addi	r16,r16,1
    b164:	1253883a 	add	r9,r2,r9
    b168:	18bff404 	addi	r2,r3,-48
    b16c:	28bffa2e 	bgeu	r5,r2,b158 <__alt_mem_sram+0xf7e0b158>
    b170:	483e110e 	bge	r9,zero,a9b8 <__alt_mem_sram+0xf7e0a9b8>
    b174:	027fffc4 	movi	r9,-1
    b178:	003e0f06 	br	a9b8 <__alt_mem_sram+0xf7e0a9b8>
    b17c:	d9811d85 	stb	r6,1142(sp)
    b180:	a880080c 	andi	r2,r21,32
    b184:	1001ee26 	beq	r2,zero,b940 <___vfiprintf_internal_r+0x1108>
    b188:	da812117 	ldw	r10,1156(sp)
    b18c:	dac12217 	ldw	r11,1160(sp)
    b190:	50800017 	ldw	r2,0(r10)
    b194:	5807d7fa 	srai	r3,r11,31
    b198:	52800104 	addi	r10,r10,4
    b19c:	da812115 	stw	r10,1156(sp)
    b1a0:	12c00015 	stw	r11,0(r2)
    b1a4:	10c00115 	stw	r3,4(r2)
    b1a8:	003dd806 	br	a90c <__alt_mem_sram+0xf7e0a90c>
    b1ac:	30803fcc 	andi	r2,r6,255
    b1b0:	1080201c 	xori	r2,r2,128
    b1b4:	10bfe004 	addi	r2,r2,-128
    b1b8:	1001df1e 	bne	r2,zero,b938 <___vfiprintf_internal_r+0x1100>
    b1bc:	01800804 	movi	r6,32
    b1c0:	80c00007 	ldb	r3,0(r16)
    b1c4:	003dfb06 	br	a9b4 <__alt_mem_sram+0xf7e0a9b4>
    b1c8:	da812117 	ldw	r10,1156(sp)
    b1cc:	dac12117 	ldw	r11,1156(sp)
    b1d0:	d8011d85 	stb	zero,1142(sp)
    b1d4:	52800017 	ldw	r10,0(r10)
    b1d8:	5d800104 	addi	r22,r11,4
    b1dc:	da812415 	stw	r10,1168(sp)
    b1e0:	50023b26 	beq	r10,zero,bad0 <___vfiprintf_internal_r+0x1298>
    b1e4:	d9012417 	ldw	r4,1168(sp)
    b1e8:	48021f16 	blt	r9,zero,ba68 <___vfiprintf_internal_r+0x1230>
    b1ec:	480d883a 	mov	r6,r9
    b1f0:	000b883a 	mov	r5,zero
    b1f4:	da012a15 	stw	r8,1192(sp)
    b1f8:	da412b15 	stw	r9,1196(sp)
    b1fc:	0008ab00 	call	8ab0 <memchr>
    b200:	da012a17 	ldw	r8,1192(sp)
    b204:	da412b17 	ldw	r9,1196(sp)
    b208:	10024726 	beq	r2,zero,bb28 <___vfiprintf_internal_r+0x12f0>
    b20c:	d8c12417 	ldw	r3,1168(sp)
    b210:	10e3c83a 	sub	r17,r2,r3
    b214:	4c41f616 	blt	r9,r17,b9f0 <___vfiprintf_internal_r+0x11b8>
    b218:	db011d83 	ldbu	r12,1142(sp)
    b21c:	dd812115 	stw	r22,1156(sp)
    b220:	0013883a 	mov	r9,zero
    b224:	003e8006 	br	ac28 <__alt_mem_sram+0xf7e0ac28>
    b228:	d9811d85 	stb	r6,1142(sp)
    b22c:	a880080c 	andi	r2,r21,32
    b230:	d8c12117 	ldw	r3,1156(sp)
    b234:	103fb51e 	bne	r2,zero,b10c <__alt_mem_sram+0xf7e0b10c>
    b238:	a880040c 	andi	r2,r21,16
    b23c:	10015e1e 	bne	r2,zero,b7b8 <___vfiprintf_internal_r+0xf80>
    b240:	a880100c 	andi	r2,r21,64
    b244:	10015c26 	beq	r2,zero,b7b8 <___vfiprintf_internal_r+0xf80>
    b248:	1c80000f 	ldh	r18,0(r3)
    b24c:	da812117 	ldw	r10,1156(sp)
    b250:	902dd7fa 	srai	r22,r18,31
    b254:	52800104 	addi	r10,r10,4
    b258:	da812115 	stw	r10,1156(sp)
    b25c:	b005883a 	mov	r2,r22
    b260:	003fb006 	br	b124 <__alt_mem_sram+0xf7e0b124>
    b264:	da812117 	ldw	r10,1156(sp)
    b268:	00800c04 	movi	r2,48
    b26c:	02c00074 	movhi	r11,1
    b270:	54800017 	ldw	r18,0(r10)
    b274:	d8811d05 	stb	r2,1140(sp)
    b278:	52800104 	addi	r10,r10,4
    b27c:	00801e04 	movi	r2,120
    b280:	5aca2204 	addi	r11,r11,10376
    b284:	d8811d45 	stb	r2,1141(sp)
    b288:	002d883a 	mov	r22,zero
    b28c:	ad400094 	ori	r21,r21,2
    b290:	da812115 	stw	r10,1156(sp)
    b294:	dac12615 	stw	r11,1176(sp)
    b298:	00800084 	movi	r2,2
    b29c:	9009883a 	mov	r4,r18
    b2a0:	003e4406 	br	abb4 <__alt_mem_sram+0xf7e0abb4>
    b2a4:	ad400814 	ori	r21,r21,32
    b2a8:	80c00007 	ldb	r3,0(r16)
    b2ac:	003dc106 	br	a9b4 <__alt_mem_sram+0xf7e0a9b4>
    b2b0:	ad401014 	ori	r21,r21,64
    b2b4:	80c00007 	ldb	r3,0(r16)
    b2b8:	003dbe06 	br	a9b4 <__alt_mem_sram+0xf7e0a9b4>
    b2bc:	80c00007 	ldb	r3,0(r16)
    b2c0:	19c1de26 	beq	r3,r7,ba3c <___vfiprintf_internal_r+0x1204>
    b2c4:	ad400414 	ori	r21,r21,16
    b2c8:	003dba06 	br	a9b4 <__alt_mem_sram+0xf7e0a9b4>
    b2cc:	00800074 	movhi	r2,1
    b2d0:	108a2204 	addi	r2,r2,10376
    b2d4:	d8812615 	stw	r2,1176(sp)
    b2d8:	d9811d85 	stb	r6,1142(sp)
    b2dc:	a900080c 	andi	r4,r21,32
    b2e0:	d8812117 	ldw	r2,1156(sp)
    b2e4:	203f5b1e 	bne	r4,zero,b054 <__alt_mem_sram+0xf7e0b054>
    b2e8:	a900040c 	andi	r4,r21,16
    b2ec:	2001a826 	beq	r4,zero,b990 <___vfiprintf_internal_r+0x1158>
    b2f0:	dac12117 	ldw	r11,1156(sp)
    b2f4:	14800017 	ldw	r18,0(r2)
    b2f8:	002d883a 	mov	r22,zero
    b2fc:	5ac00104 	addi	r11,r11,4
    b300:	dac12115 	stw	r11,1156(sp)
    b304:	003f5806 	br	b068 <__alt_mem_sram+0xf7e0b068>
    b308:	da812117 	ldw	r10,1156(sp)
    b30c:	54c00017 	ldw	r19,0(r10)
    b310:	50800104 	addi	r2,r10,4
    b314:	983f2f16 	blt	r19,zero,afd4 <__alt_mem_sram+0xf7e0afd4>
    b318:	d8812115 	stw	r2,1156(sp)
    b31c:	80c00007 	ldb	r3,0(r16)
    b320:	003da406 	br	a9b4 <__alt_mem_sram+0xf7e0a9b4>
    b324:	01800ac4 	movi	r6,43
    b328:	80c00007 	ldb	r3,0(r16)
    b32c:	003da106 	br	a9b4 <__alt_mem_sram+0xf7e0a9b4>
    b330:	ad400054 	ori	r21,r21,1
    b334:	80c00007 	ldb	r3,0(r16)
    b338:	003d9e06 	br	a9b4 <__alt_mem_sram+0xf7e0a9b4>
    b33c:	d9811d85 	stb	r6,1142(sp)
    b340:	18007126 	beq	r3,zero,b508 <___vfiprintf_internal_r+0xcd0>
    b344:	04800044 	movi	r18,1
    b348:	d8c10005 	stb	r3,1024(sp)
    b34c:	d8c10004 	addi	r3,sp,1024
    b350:	d8011d85 	stb	zero,1142(sp)
    b354:	9023883a 	mov	r17,r18
    b358:	d8c12415 	stw	r3,1168(sp)
    b35c:	003f5606 	br	b0b8 <__alt_mem_sram+0xf7e0b0b8>
    b360:	dac12117 	ldw	r11,1156(sp)
    b364:	002d883a 	mov	r22,zero
    b368:	00800044 	movi	r2,1
    b36c:	5c800017 	ldw	r18,0(r11)
    b370:	5ac00104 	addi	r11,r11,4
    b374:	dac12115 	stw	r11,1156(sp)
    b378:	9009883a 	mov	r4,r18
    b37c:	003e0d06 	br	abb4 <__alt_mem_sram+0xf7e0abb4>
    b380:	dac12117 	ldw	r11,1156(sp)
    b384:	002d883a 	mov	r22,zero
    b388:	0005883a 	mov	r2,zero
    b38c:	5c800017 	ldw	r18,0(r11)
    b390:	5ac00104 	addi	r11,r11,4
    b394:	dac12115 	stw	r11,1156(sp)
    b398:	9009883a 	mov	r4,r18
    b39c:	003e0506 	br	abb4 <__alt_mem_sram+0xf7e0abb4>
    b3a0:	d9012017 	ldw	r4,1152(sp)
    b3a4:	a00b883a 	mov	r5,r20
    b3a8:	d9811a04 	addi	r6,sp,1128
    b3ac:	d8c12a15 	stw	r3,1192(sp)
    b3b0:	db012b15 	stw	r12,1196(sp)
    b3b4:	000a7240 	call	a724 <__sprint_r.part.0>
    b3b8:	d8c12a17 	ldw	r3,1192(sp)
    b3bc:	db012b17 	ldw	r12,1196(sp)
    b3c0:	1000571e 	bne	r2,zero,b520 <___vfiprintf_internal_r+0xce8>
    b3c4:	d9811b17 	ldw	r6,1132(sp)
    b3c8:	d8811c17 	ldw	r2,1136(sp)
    b3cc:	d811883a 	mov	r8,sp
    b3d0:	31400044 	addi	r5,r6,1
    b3d4:	003e3306 	br	aca4 <__alt_mem_sram+0xf7e0aca4>
    b3d8:	d9411b17 	ldw	r5,1132(sp)
    b3dc:	d8c11c17 	ldw	r3,1136(sp)
    b3e0:	28800044 	addi	r2,r5,1
    b3e4:	d9011d87 	ldb	r4,1142(sp)
    b3e8:	203e4d26 	beq	r4,zero,ad20 <__alt_mem_sram+0xf7e0ad20>
    b3ec:	01000044 	movi	r4,1
    b3f0:	d9411d84 	addi	r5,sp,1142
    b3f4:	1907883a 	add	r3,r3,r4
    b3f8:	41400015 	stw	r5,0(r8)
    b3fc:	41000115 	stw	r4,4(r8)
    b400:	d8c11c15 	stw	r3,1136(sp)
    b404:	d8811b15 	stw	r2,1132(sp)
    b408:	014001c4 	movi	r5,7
    b40c:	2880aa16 	blt	r5,r2,b6b8 <___vfiprintf_internal_r+0xe80>
    b410:	100b883a 	mov	r5,r2
    b414:	42000204 	addi	r8,r8,8
    b418:	10800044 	addi	r2,r2,1
    b41c:	003e4006 	br	ad20 <__alt_mem_sram+0xf7e0ad20>
    b420:	d9012017 	ldw	r4,1152(sp)
    b424:	a00b883a 	mov	r5,r20
    b428:	d9811a04 	addi	r6,sp,1128
    b42c:	d9c12a15 	stw	r7,1192(sp)
    b430:	db012b15 	stw	r12,1196(sp)
    b434:	000a7240 	call	a724 <__sprint_r.part.0>
    b438:	d9c12a17 	ldw	r7,1192(sp)
    b43c:	db012b17 	ldw	r12,1196(sp)
    b440:	1000371e 	bne	r2,zero,b520 <___vfiprintf_internal_r+0xce8>
    b444:	d9411b17 	ldw	r5,1132(sp)
    b448:	d8c11c17 	ldw	r3,1136(sp)
    b44c:	d811883a 	mov	r8,sp
    b450:	28800044 	addi	r2,r5,1
    b454:	003e4d06 	br	ad8c <__alt_mem_sram+0xf7e0ad8c>
    b458:	10803fcc 	andi	r2,r2,255
    b45c:	00c00044 	movi	r3,1
    b460:	10fddf1e 	bne	r2,r3,abe0 <__alt_mem_sram+0xf7e0abe0>
    b464:	b000021e 	bne	r22,zero,b470 <___vfiprintf_internal_r+0xc38>
    b468:	00800244 	movi	r2,9
    b46c:	1480202e 	bgeu	r2,r18,b4f0 <___vfiprintf_internal_r+0xcb8>
    b470:	dc012515 	stw	r16,1172(sp)
    b474:	dc410a04 	addi	r17,sp,1064
    b478:	9021883a 	mov	r16,r18
    b47c:	da012415 	stw	r8,1168(sp)
    b480:	b025883a 	mov	r18,r22
    b484:	da412315 	stw	r9,1164(sp)
    b488:	602d883a 	mov	r22,r12
    b48c:	8009883a 	mov	r4,r16
    b490:	900b883a 	mov	r5,r18
    b494:	01800284 	movi	r6,10
    b498:	000f883a 	mov	r7,zero
    b49c:	000cab00 	call	cab0 <__umoddi3>
    b4a0:	10800c04 	addi	r2,r2,48
    b4a4:	8c7fffc4 	addi	r17,r17,-1
    b4a8:	8009883a 	mov	r4,r16
    b4ac:	900b883a 	mov	r5,r18
    b4b0:	01800284 	movi	r6,10
    b4b4:	000f883a 	mov	r7,zero
    b4b8:	88800005 	stb	r2,0(r17)
    b4bc:	000c4f00 	call	c4f0 <__udivdi3>
    b4c0:	1021883a 	mov	r16,r2
    b4c4:	10c4b03a 	or	r2,r2,r3
    b4c8:	1825883a 	mov	r18,r3
    b4cc:	103fef1e 	bne	r2,zero,b48c <__alt_mem_sram+0xf7e0b48c>
    b4d0:	da811e17 	ldw	r10,1144(sp)
    b4d4:	da012417 	ldw	r8,1168(sp)
    b4d8:	da412317 	ldw	r9,1164(sp)
    b4dc:	dc412415 	stw	r17,1168(sp)
    b4e0:	b019883a 	mov	r12,r22
    b4e4:	dc012517 	ldw	r16,1172(sp)
    b4e8:	5463c83a 	sub	r17,r10,r17
    b4ec:	003dce06 	br	ac28 <__alt_mem_sram+0xf7e0ac28>
    b4f0:	94800c04 	addi	r18,r18,48
    b4f4:	d8c109c4 	addi	r3,sp,1063
    b4f8:	dc8109c5 	stb	r18,1063(sp)
    b4fc:	dc412717 	ldw	r17,1180(sp)
    b500:	d8c12415 	stw	r3,1168(sp)
    b504:	003dc806 	br	ac28 <__alt_mem_sram+0xf7e0ac28>
    b508:	d8811c17 	ldw	r2,1136(sp)
    b50c:	10000426 	beq	r2,zero,b520 <___vfiprintf_internal_r+0xce8>
    b510:	d9012017 	ldw	r4,1152(sp)
    b514:	a00b883a 	mov	r5,r20
    b518:	d9811a04 	addi	r6,sp,1128
    b51c:	000a7240 	call	a724 <__sprint_r.part.0>
    b520:	a080030b 	ldhu	r2,12(r20)
    b524:	1080100c 	andi	r2,r2,64
    b528:	103e9b1e 	bne	r2,zero,af98 <__alt_mem_sram+0xf7e0af98>
    b52c:	d8812217 	ldw	r2,1160(sp)
    b530:	003e9a06 	br	af9c <__alt_mem_sram+0xf7e0af9c>
    b534:	d9012017 	ldw	r4,1152(sp)
    b538:	a00b883a 	mov	r5,r20
    b53c:	d9811a04 	addi	r6,sp,1128
    b540:	000a7240 	call	a724 <__sprint_r.part.0>
    b544:	103ff61e 	bne	r2,zero,b520 <__alt_mem_sram+0xf7e0b520>
    b548:	d9011b17 	ldw	r4,1132(sp)
    b54c:	d8c11c17 	ldw	r3,1136(sp)
    b550:	d811883a 	mov	r8,sp
    b554:	21400044 	addi	r5,r4,1
    b558:	003e4006 	br	ae5c <__alt_mem_sram+0xf7e0ae5c>
    b55c:	1800d61e 	bne	r3,zero,b8b8 <___vfiprintf_internal_r+0x1080>
    b560:	dac12417 	ldw	r11,1168(sp)
    b564:	00800044 	movi	r2,1
    b568:	dc400115 	stw	r17,4(sp)
    b56c:	dac00015 	stw	r11,0(sp)
    b570:	dc411c15 	stw	r17,1136(sp)
    b574:	d8811b15 	stw	r2,1132(sp)
    b578:	8807883a 	mov	r3,r17
    b57c:	d811883a 	mov	r8,sp
    b580:	42000204 	addi	r8,r8,8
    b584:	aac0010c 	andi	r11,r21,4
    b588:	58000226 	beq	r11,zero,b594 <___vfiprintf_internal_r+0xd5c>
    b58c:	9ca3c83a 	sub	r17,r19,r18
    b590:	047e2616 	blt	zero,r17,ae2c <__alt_mem_sram+0xf7e0ae2c>
    b594:	94c0010e 	bge	r18,r19,b59c <___vfiprintf_internal_r+0xd64>
    b598:	9825883a 	mov	r18,r19
    b59c:	da812217 	ldw	r10,1160(sp)
    b5a0:	5495883a 	add	r10,r10,r18
    b5a4:	da812215 	stw	r10,1160(sp)
    b5a8:	183e4826 	beq	r3,zero,aecc <__alt_mem_sram+0xf7e0aecc>
    b5ac:	d9012017 	ldw	r4,1152(sp)
    b5b0:	a00b883a 	mov	r5,r20
    b5b4:	d9811a04 	addi	r6,sp,1128
    b5b8:	000a7240 	call	a724 <__sprint_r.part.0>
    b5bc:	103e4326 	beq	r2,zero,aecc <__alt_mem_sram+0xf7e0aecc>
    b5c0:	003fd706 	br	b520 <__alt_mem_sram+0xf7e0b520>
    b5c4:	9cadc83a 	sub	r22,r19,r18
    b5c8:	05bde40e 	bge	zero,r22,ad5c <__alt_mem_sram+0xf7e0ad5c>
    b5cc:	03000404 	movi	r12,16
    b5d0:	6581500e 	bge	r12,r22,bb14 <___vfiprintf_internal_r+0x12dc>
    b5d4:	00800074 	movhi	r2,1
    b5d8:	108a8304 	addi	r2,r2,10764
    b5dc:	d8812315 	stw	r2,1164(sp)
    b5e0:	8005883a 	mov	r2,r16
    b5e4:	038001c4 	movi	r14,7
    b5e8:	b021883a 	mov	r16,r22
    b5ec:	da412515 	stw	r9,1172(sp)
    b5f0:	102d883a 	mov	r22,r2
    b5f4:	00000506 	br	b60c <___vfiprintf_internal_r+0xdd4>
    b5f8:	29000084 	addi	r4,r5,2
    b5fc:	42000204 	addi	r8,r8,8
    b600:	100b883a 	mov	r5,r2
    b604:	843ffc04 	addi	r16,r16,-16
    b608:	64000d0e 	bge	r12,r16,b640 <___vfiprintf_internal_r+0xe08>
    b60c:	18c00404 	addi	r3,r3,16
    b610:	28800044 	addi	r2,r5,1
    b614:	45c00015 	stw	r23,0(r8)
    b618:	43000115 	stw	r12,4(r8)
    b61c:	d8c11c15 	stw	r3,1136(sp)
    b620:	d8811b15 	stw	r2,1132(sp)
    b624:	70bff40e 	bge	r14,r2,b5f8 <__alt_mem_sram+0xf7e0b5f8>
    b628:	1800151e 	bne	r3,zero,b680 <___vfiprintf_internal_r+0xe48>
    b62c:	843ffc04 	addi	r16,r16,-16
    b630:	000b883a 	mov	r5,zero
    b634:	01000044 	movi	r4,1
    b638:	d811883a 	mov	r8,sp
    b63c:	643ff316 	blt	r12,r16,b60c <__alt_mem_sram+0xf7e0b60c>
    b640:	da412517 	ldw	r9,1172(sp)
    b644:	b005883a 	mov	r2,r22
    b648:	802d883a 	mov	r22,r16
    b64c:	1021883a 	mov	r16,r2
    b650:	da812317 	ldw	r10,1164(sp)
    b654:	1d87883a 	add	r3,r3,r22
    b658:	45800115 	stw	r22,4(r8)
    b65c:	42800015 	stw	r10,0(r8)
    b660:	d8c11c15 	stw	r3,1136(sp)
    b664:	d9011b15 	stw	r4,1132(sp)
    b668:	008001c4 	movi	r2,7
    b66c:	11008d16 	blt	r2,r4,b8a4 <___vfiprintf_internal_r+0x106c>
    b670:	42000204 	addi	r8,r8,8
    b674:	20800044 	addi	r2,r4,1
    b678:	200b883a 	mov	r5,r4
    b67c:	003db706 	br	ad5c <__alt_mem_sram+0xf7e0ad5c>
    b680:	d9012017 	ldw	r4,1152(sp)
    b684:	a00b883a 	mov	r5,r20
    b688:	d9811a04 	addi	r6,sp,1128
    b68c:	db012b15 	stw	r12,1196(sp)
    b690:	db812a15 	stw	r14,1192(sp)
    b694:	000a7240 	call	a724 <__sprint_r.part.0>
    b698:	db012b17 	ldw	r12,1196(sp)
    b69c:	db812a17 	ldw	r14,1192(sp)
    b6a0:	103f9f1e 	bne	r2,zero,b520 <__alt_mem_sram+0xf7e0b520>
    b6a4:	d9411b17 	ldw	r5,1132(sp)
    b6a8:	d8c11c17 	ldw	r3,1136(sp)
    b6ac:	d811883a 	mov	r8,sp
    b6b0:	29000044 	addi	r4,r5,1
    b6b4:	003fd306 	br	b604 <__alt_mem_sram+0xf7e0b604>
    b6b8:	18006c1e 	bne	r3,zero,b86c <___vfiprintf_internal_r+0x1034>
    b6bc:	70004f26 	beq	r14,zero,b7fc <___vfiprintf_internal_r+0xfc4>
    b6c0:	d8811d04 	addi	r2,sp,1140
    b6c4:	00c00084 	movi	r3,2
    b6c8:	d8800015 	stw	r2,0(sp)
    b6cc:	d8c00115 	stw	r3,4(sp)
    b6d0:	2005883a 	mov	r2,r4
    b6d4:	d811883a 	mov	r8,sp
    b6d8:	003d9b06 	br	ad48 <__alt_mem_sram+0xf7e0ad48>
    b6dc:	1800571e 	bne	r3,zero,b83c <___vfiprintf_internal_r+0x1004>
    b6e0:	000b883a 	mov	r5,zero
    b6e4:	00800044 	movi	r2,1
    b6e8:	d811883a 	mov	r8,sp
    b6ec:	003d9906 	br	ad54 <__alt_mem_sram+0xf7e0ad54>
    b6f0:	10803fcc 	andi	r2,r2,255
    b6f4:	1000251e 	bne	r2,zero,b78c <___vfiprintf_internal_r+0xf54>
    b6f8:	a880004c 	andi	r2,r21,1
    b6fc:	10007826 	beq	r2,zero,b8e0 <___vfiprintf_internal_r+0x10a8>
    b700:	00800c04 	movi	r2,48
    b704:	d8c109c4 	addi	r3,sp,1063
    b708:	d88109c5 	stb	r2,1063(sp)
    b70c:	dc412717 	ldw	r17,1180(sp)
    b710:	d8c12415 	stw	r3,1168(sp)
    b714:	003d4406 	br	ac28 <__alt_mem_sram+0xf7e0ac28>
    b718:	d9012617 	ldw	r4,1176(sp)
    b71c:	dc410a04 	addi	r17,sp,1064
    b720:	908003cc 	andi	r2,r18,15
    b724:	b006973a 	slli	r3,r22,28
    b728:	2085883a 	add	r2,r4,r2
    b72c:	9024d13a 	srli	r18,r18,4
    b730:	10800003 	ldbu	r2,0(r2)
    b734:	b02cd13a 	srli	r22,r22,4
    b738:	8c7fffc4 	addi	r17,r17,-1
    b73c:	1ca4b03a 	or	r18,r3,r18
    b740:	88800005 	stb	r2,0(r17)
    b744:	9584b03a 	or	r2,r18,r22
    b748:	103ff51e 	bne	r2,zero,b720 <__alt_mem_sram+0xf7e0b720>
    b74c:	dac11e17 	ldw	r11,1144(sp)
    b750:	dc412415 	stw	r17,1168(sp)
    b754:	5c63c83a 	sub	r17,r11,r17
    b758:	003d3306 	br	ac28 <__alt_mem_sram+0xf7e0ac28>
    b75c:	1800941e 	bne	r3,zero,b9b0 <___vfiprintf_internal_r+0x1178>
    b760:	d8811d87 	ldb	r2,1142(sp)
    b764:	10006b26 	beq	r2,zero,b914 <___vfiprintf_internal_r+0x10dc>
    b768:	00c00044 	movi	r3,1
    b76c:	d9011d84 	addi	r4,sp,1142
    b770:	1805883a 	mov	r2,r3
    b774:	d9000015 	stw	r4,0(sp)
    b778:	d8c00115 	stw	r3,4(sp)
    b77c:	d811883a 	mov	r8,sp
    b780:	003f2306 	br	b410 <__alt_mem_sram+0xf7e0b410>
    b784:	8023883a 	mov	r17,r16
    b788:	003c7d06 	br	a980 <__alt_mem_sram+0xf7e0a980>
    b78c:	da810a04 	addi	r10,sp,1064
    b790:	da812415 	stw	r10,1168(sp)
    b794:	003d2406 	br	ac28 <__alt_mem_sram+0xf7e0ac28>
    b798:	d9012017 	ldw	r4,1152(sp)
    b79c:	a00b883a 	mov	r5,r20
    b7a0:	d9811a04 	addi	r6,sp,1128
    b7a4:	000a7240 	call	a724 <__sprint_r.part.0>
    b7a8:	103f5d1e 	bne	r2,zero,b520 <__alt_mem_sram+0xf7e0b520>
    b7ac:	d8c11c17 	ldw	r3,1136(sp)
    b7b0:	d811883a 	mov	r8,sp
    b7b4:	003f7306 	br	b584 <__alt_mem_sram+0xf7e0b584>
    b7b8:	1c800017 	ldw	r18,0(r3)
    b7bc:	dac12117 	ldw	r11,1156(sp)
    b7c0:	902dd7fa 	srai	r22,r18,31
    b7c4:	5ac00104 	addi	r11,r11,4
    b7c8:	dac12115 	stw	r11,1156(sp)
    b7cc:	b005883a 	mov	r2,r22
    b7d0:	003e5406 	br	b124 <__alt_mem_sram+0xf7e0b124>
    b7d4:	00800084 	movi	r2,2
    b7d8:	9588b03a 	or	r4,r18,r22
    b7dc:	003cf506 	br	abb4 <__alt_mem_sram+0xf7e0abb4>
    b7e0:	d9012017 	ldw	r4,1152(sp)
    b7e4:	a00b883a 	mov	r5,r20
    b7e8:	d9811a04 	addi	r6,sp,1128
    b7ec:	000a7240 	call	a724 <__sprint_r.part.0>
    b7f0:	103f4b1e 	bne	r2,zero,b520 <__alt_mem_sram+0xf7e0b520>
    b7f4:	d811883a 	mov	r8,sp
    b7f8:	003cd106 	br	ab40 <__alt_mem_sram+0xf7e0ab40>
    b7fc:	000b883a 	mov	r5,zero
    b800:	2005883a 	mov	r2,r4
    b804:	d811883a 	mov	r8,sp
    b808:	003d5206 	br	ad54 <__alt_mem_sram+0xf7e0ad54>
    b80c:	10803fcc 	andi	r2,r2,255
    b810:	1080201c 	xori	r2,r2,128
    b814:	10bfe004 	addi	r2,r2,-128
    b818:	01000c04 	movi	r4,48
    b81c:	11008e26 	beq	r2,r4,ba58 <___vfiprintf_internal_r+0x1220>
    b820:	da812417 	ldw	r10,1168(sp)
    b824:	dac11e17 	ldw	r11,1144(sp)
    b828:	193fffc5 	stb	r4,-1(r3)
    b82c:	52bfffc4 	addi	r10,r10,-1
    b830:	da812415 	stw	r10,1168(sp)
    b834:	5aa3c83a 	sub	r17,r11,r10
    b838:	003cfb06 	br	ac28 <__alt_mem_sram+0xf7e0ac28>
    b83c:	d9012017 	ldw	r4,1152(sp)
    b840:	a00b883a 	mov	r5,r20
    b844:	d9811a04 	addi	r6,sp,1128
    b848:	da412b15 	stw	r9,1196(sp)
    b84c:	000a7240 	call	a724 <__sprint_r.part.0>
    b850:	da412b17 	ldw	r9,1196(sp)
    b854:	103f321e 	bne	r2,zero,b520 <__alt_mem_sram+0xf7e0b520>
    b858:	d9411b17 	ldw	r5,1132(sp)
    b85c:	d8c11c17 	ldw	r3,1136(sp)
    b860:	d811883a 	mov	r8,sp
    b864:	28800044 	addi	r2,r5,1
    b868:	003d3a06 	br	ad54 <__alt_mem_sram+0xf7e0ad54>
    b86c:	d9012017 	ldw	r4,1152(sp)
    b870:	a00b883a 	mov	r5,r20
    b874:	d9811a04 	addi	r6,sp,1128
    b878:	da412b15 	stw	r9,1196(sp)
    b87c:	db812a15 	stw	r14,1192(sp)
    b880:	000a7240 	call	a724 <__sprint_r.part.0>
    b884:	da412b17 	ldw	r9,1196(sp)
    b888:	db812a17 	ldw	r14,1192(sp)
    b88c:	103f241e 	bne	r2,zero,b520 <__alt_mem_sram+0xf7e0b520>
    b890:	d9411b17 	ldw	r5,1132(sp)
    b894:	d8c11c17 	ldw	r3,1136(sp)
    b898:	d811883a 	mov	r8,sp
    b89c:	28800044 	addi	r2,r5,1
    b8a0:	003d1f06 	br	ad20 <__alt_mem_sram+0xf7e0ad20>
    b8a4:	1800781e 	bne	r3,zero,ba88 <___vfiprintf_internal_r+0x1250>
    b8a8:	000b883a 	mov	r5,zero
    b8ac:	00800044 	movi	r2,1
    b8b0:	d811883a 	mov	r8,sp
    b8b4:	003d2906 	br	ad5c <__alt_mem_sram+0xf7e0ad5c>
    b8b8:	d9012017 	ldw	r4,1152(sp)
    b8bc:	a00b883a 	mov	r5,r20
    b8c0:	d9811a04 	addi	r6,sp,1128
    b8c4:	000a7240 	call	a724 <__sprint_r.part.0>
    b8c8:	103f151e 	bne	r2,zero,b520 <__alt_mem_sram+0xf7e0b520>
    b8cc:	d8811b17 	ldw	r2,1132(sp)
    b8d0:	d8c11c17 	ldw	r3,1136(sp)
    b8d4:	d811883a 	mov	r8,sp
    b8d8:	10800044 	addi	r2,r2,1
    b8dc:	003d4406 	br	adf0 <__alt_mem_sram+0xf7e0adf0>
    b8e0:	dac10a04 	addi	r11,sp,1064
    b8e4:	dac12415 	stw	r11,1168(sp)
    b8e8:	003ccf06 	br	ac28 <__alt_mem_sram+0xf7e0ac28>
    b8ec:	04a5c83a 	sub	r18,zero,r18
    b8f0:	9004c03a 	cmpne	r2,r18,zero
    b8f4:	05adc83a 	sub	r22,zero,r22
    b8f8:	b0adc83a 	sub	r22,r22,r2
    b8fc:	03000b44 	movi	r12,45
    b900:	db011d85 	stb	r12,1142(sp)
    b904:	4823883a 	mov	r17,r9
    b908:	00800044 	movi	r2,1
    b90c:	9588b03a 	or	r4,r18,r22
    b910:	003cab06 	br	abc0 <__alt_mem_sram+0xf7e0abc0>
    b914:	000b883a 	mov	r5,zero
    b918:	00800044 	movi	r2,1
    b91c:	d811883a 	mov	r8,sp
    b920:	703d0c26 	beq	r14,zero,ad54 <__alt_mem_sram+0xf7e0ad54>
    b924:	00c00084 	movi	r3,2
    b928:	d9011d04 	addi	r4,sp,1140
    b92c:	d9000015 	stw	r4,0(sp)
    b930:	d8c00115 	stw	r3,4(sp)
    b934:	003d0406 	br	ad48 <__alt_mem_sram+0xf7e0ad48>
    b938:	80c00007 	ldb	r3,0(r16)
    b93c:	003c1d06 	br	a9b4 <__alt_mem_sram+0xf7e0a9b4>
    b940:	a880040c 	andi	r2,r21,16
    b944:	1000091e 	bne	r2,zero,b96c <___vfiprintf_internal_r+0x1134>
    b948:	aac0100c 	andi	r11,r21,64
    b94c:	58000726 	beq	r11,zero,b96c <___vfiprintf_internal_r+0x1134>
    b950:	da812117 	ldw	r10,1156(sp)
    b954:	dac12217 	ldw	r11,1160(sp)
    b958:	50800017 	ldw	r2,0(r10)
    b95c:	52800104 	addi	r10,r10,4
    b960:	da812115 	stw	r10,1156(sp)
    b964:	12c0000d 	sth	r11,0(r2)
    b968:	003be806 	br	a90c <__alt_mem_sram+0xf7e0a90c>
    b96c:	da812117 	ldw	r10,1156(sp)
    b970:	dac12217 	ldw	r11,1160(sp)
    b974:	50800017 	ldw	r2,0(r10)
    b978:	52800104 	addi	r10,r10,4
    b97c:	da812115 	stw	r10,1156(sp)
    b980:	12c00015 	stw	r11,0(r2)
    b984:	003be106 	br	a90c <__alt_mem_sram+0xf7e0a90c>
    b988:	00800084 	movi	r2,2
    b98c:	003c8906 	br	abb4 <__alt_mem_sram+0xf7e0abb4>
    b990:	a900100c 	andi	r4,r21,64
    b994:	20001f26 	beq	r4,zero,ba14 <___vfiprintf_internal_r+0x11dc>
    b998:	da812117 	ldw	r10,1156(sp)
    b99c:	1480000b 	ldhu	r18,0(r2)
    b9a0:	002d883a 	mov	r22,zero
    b9a4:	52800104 	addi	r10,r10,4
    b9a8:	da812115 	stw	r10,1156(sp)
    b9ac:	003dae06 	br	b068 <__alt_mem_sram+0xf7e0b068>
    b9b0:	d9012017 	ldw	r4,1152(sp)
    b9b4:	a00b883a 	mov	r5,r20
    b9b8:	d9811a04 	addi	r6,sp,1128
    b9bc:	da412b15 	stw	r9,1196(sp)
    b9c0:	db812a15 	stw	r14,1192(sp)
    b9c4:	000a7240 	call	a724 <__sprint_r.part.0>
    b9c8:	da412b17 	ldw	r9,1196(sp)
    b9cc:	db812a17 	ldw	r14,1192(sp)
    b9d0:	103ed31e 	bne	r2,zero,b520 <__alt_mem_sram+0xf7e0b520>
    b9d4:	d9411b17 	ldw	r5,1132(sp)
    b9d8:	d8c11c17 	ldw	r3,1136(sp)
    b9dc:	d811883a 	mov	r8,sp
    b9e0:	28800044 	addi	r2,r5,1
    b9e4:	003e7f06 	br	b3e4 <__alt_mem_sram+0xf7e0b3e4>
    b9e8:	9825883a 	mov	r18,r19
    b9ec:	003d3406 	br	aec0 <__alt_mem_sram+0xf7e0aec0>
    b9f0:	4823883a 	mov	r17,r9
    b9f4:	003e0806 	br	b218 <__alt_mem_sram+0xf7e0b218>
    b9f8:	d9012017 	ldw	r4,1152(sp)
    b9fc:	a00b883a 	mov	r5,r20
    ba00:	d9811a04 	addi	r6,sp,1128
    ba04:	000a7240 	call	a724 <__sprint_r.part.0>
    ba08:	103ec51e 	bne	r2,zero,b520 <__alt_mem_sram+0xf7e0b520>
    ba0c:	d8c11c17 	ldw	r3,1136(sp)
    ba10:	003ee006 	br	b594 <__alt_mem_sram+0xf7e0b594>
    ba14:	dac12117 	ldw	r11,1156(sp)
    ba18:	14800017 	ldw	r18,0(r2)
    ba1c:	002d883a 	mov	r22,zero
    ba20:	5ac00104 	addi	r11,r11,4
    ba24:	dac12115 	stw	r11,1156(sp)
    ba28:	003d8f06 	br	b068 <__alt_mem_sram+0xf7e0b068>
    ba2c:	02c00074 	movhi	r11,1
    ba30:	5aca8304 	addi	r11,r11,10764
    ba34:	dac12315 	stw	r11,1164(sp)
    ba38:	003ce306 	br	adc8 <__alt_mem_sram+0xf7e0adc8>
    ba3c:	80c00043 	ldbu	r3,1(r16)
    ba40:	ad400814 	ori	r21,r21,32
    ba44:	84000044 	addi	r16,r16,1
    ba48:	18c03fcc 	andi	r3,r3,255
    ba4c:	18c0201c 	xori	r3,r3,128
    ba50:	18ffe004 	addi	r3,r3,-128
    ba54:	003bd706 	br	a9b4 <__alt_mem_sram+0xf7e0a9b4>
    ba58:	dac11e17 	ldw	r11,1144(sp)
    ba5c:	d8c12417 	ldw	r3,1168(sp)
    ba60:	58e3c83a 	sub	r17,r11,r3
    ba64:	003c7006 	br	ac28 <__alt_mem_sram+0xf7e0ac28>
    ba68:	da012a15 	stw	r8,1192(sp)
    ba6c:	00035400 	call	3540 <strlen>
    ba70:	1023883a 	mov	r17,r2
    ba74:	db011d83 	ldbu	r12,1142(sp)
    ba78:	dd812115 	stw	r22,1156(sp)
    ba7c:	0013883a 	mov	r9,zero
    ba80:	da012a17 	ldw	r8,1192(sp)
    ba84:	003c6806 	br	ac28 <__alt_mem_sram+0xf7e0ac28>
    ba88:	d9012017 	ldw	r4,1152(sp)
    ba8c:	a00b883a 	mov	r5,r20
    ba90:	d9811a04 	addi	r6,sp,1128
    ba94:	da412b15 	stw	r9,1196(sp)
    ba98:	000a7240 	call	a724 <__sprint_r.part.0>
    ba9c:	da412b17 	ldw	r9,1196(sp)
    baa0:	103e9f1e 	bne	r2,zero,b520 <__alt_mem_sram+0xf7e0b520>
    baa4:	d9411b17 	ldw	r5,1132(sp)
    baa8:	d8c11c17 	ldw	r3,1136(sp)
    baac:	d811883a 	mov	r8,sp
    bab0:	28800044 	addi	r2,r5,1
    bab4:	003ca906 	br	ad5c <__alt_mem_sram+0xf7e0ad5c>
    bab8:	d9411b17 	ldw	r5,1132(sp)
    babc:	01000074 	movhi	r4,1
    bac0:	210a8704 	addi	r4,r4,10780
    bac4:	d9012315 	stw	r4,1164(sp)
    bac8:	29400044 	addi	r5,r5,1
    bacc:	003c8806 	br	acf0 <__alt_mem_sram+0xf7e0acf0>
    bad0:	00800184 	movi	r2,6
    bad4:	1240012e 	bgeu	r2,r9,badc <___vfiprintf_internal_r+0x12a4>
    bad8:	1013883a 	mov	r9,r2
    badc:	4823883a 	mov	r17,r9
    bae0:	4825883a 	mov	r18,r9
    bae4:	48001516 	blt	r9,zero,bb3c <___vfiprintf_internal_r+0x1304>
    bae8:	00800074 	movhi	r2,1
    baec:	108a2704 	addi	r2,r2,10396
    baf0:	dd812115 	stw	r22,1156(sp)
    baf4:	d8812415 	stw	r2,1168(sp)
    baf8:	003d6f06 	br	b0b8 <__alt_mem_sram+0xf7e0b0b8>
    bafc:	d9411b17 	ldw	r5,1132(sp)
    bb00:	02c00074 	movhi	r11,1
    bb04:	5aca8704 	addi	r11,r11,10780
    bb08:	dac12315 	stw	r11,1164(sp)
    bb0c:	29400044 	addi	r5,r5,1
    bb10:	003ce106 	br	ae98 <__alt_mem_sram+0xf7e0ae98>
    bb14:	01000074 	movhi	r4,1
    bb18:	210a8304 	addi	r4,r4,10764
    bb1c:	d9012315 	stw	r4,1164(sp)
    bb20:	1009883a 	mov	r4,r2
    bb24:	003eca06 	br	b650 <__alt_mem_sram+0xf7e0b650>
    bb28:	4823883a 	mov	r17,r9
    bb2c:	db011d83 	ldbu	r12,1142(sp)
    bb30:	dd812115 	stw	r22,1156(sp)
    bb34:	0013883a 	mov	r9,zero
    bb38:	003c3b06 	br	ac28 <__alt_mem_sram+0xf7e0ac28>
    bb3c:	0025883a 	mov	r18,zero
    bb40:	003fe906 	br	bae8 <__alt_mem_sram+0xf7e0bae8>
    bb44:	dac12117 	ldw	r11,1156(sp)
    bb48:	8005883a 	mov	r2,r16
    bb4c:	5021883a 	mov	r16,r10
    bb50:	5a400017 	ldw	r9,0(r11)
    bb54:	58c00104 	addi	r3,r11,4
    bb58:	d8c12115 	stw	r3,1156(sp)
    bb5c:	48000a16 	blt	r9,zero,bb88 <___vfiprintf_internal_r+0x1350>
    bb60:	10c00047 	ldb	r3,1(r2)
    bb64:	003b9306 	br	a9b4 <__alt_mem_sram+0xf7e0a9b4>
    bb68:	043fffc4 	movi	r16,-1
    bb6c:	003d0206 	br	af78 <__alt_mem_sram+0xf7e0af78>
    bb70:	94c0010e 	bge	r18,r19,bb78 <___vfiprintf_internal_r+0x1340>
    bb74:	9825883a 	mov	r18,r19
    bb78:	da812217 	ldw	r10,1160(sp)
    bb7c:	5495883a 	add	r10,r10,r18
    bb80:	da812215 	stw	r10,1160(sp)
    bb84:	003cd106 	br	aecc <__alt_mem_sram+0xf7e0aecc>
    bb88:	027fffc4 	movi	r9,-1
    bb8c:	10c00047 	ldb	r3,1(r2)
    bb90:	003b8806 	br	a9b4 <__alt_mem_sram+0xf7e0a9b4>

0000bb94 <__vfiprintf_internal>:
    bb94:	2007883a 	mov	r3,r4
    bb98:	01000074 	movhi	r4,1
    bb9c:	21118204 	addi	r4,r4,17928
    bba0:	21000017 	ldw	r4,0(r4)
    bba4:	2805883a 	mov	r2,r5
    bba8:	300f883a 	mov	r7,r6
    bbac:	180b883a 	mov	r5,r3
    bbb0:	100d883a 	mov	r6,r2
    bbb4:	000a8381 	jmpi	a838 <___vfiprintf_internal_r>

0000bbb8 <_write_r>:
    bbb8:	defffd04 	addi	sp,sp,-12
    bbbc:	dc000015 	stw	r16,0(sp)
    bbc0:	04000074 	movhi	r16,1
    bbc4:	dc400115 	stw	r17,4(sp)
    bbc8:	84185304 	addi	r16,r16,24908
    bbcc:	2023883a 	mov	r17,r4
    bbd0:	2809883a 	mov	r4,r5
    bbd4:	300b883a 	mov	r5,r6
    bbd8:	380d883a 	mov	r6,r7
    bbdc:	dfc00215 	stw	ra,8(sp)
    bbe0:	80000015 	stw	zero,0(r16)
    bbe4:	00100480 	call	10048 <write>
    bbe8:	00ffffc4 	movi	r3,-1
    bbec:	10c00526 	beq	r2,r3,bc04 <_write_r+0x4c>
    bbf0:	dfc00217 	ldw	ra,8(sp)
    bbf4:	dc400117 	ldw	r17,4(sp)
    bbf8:	dc000017 	ldw	r16,0(sp)
    bbfc:	dec00304 	addi	sp,sp,12
    bc00:	f800283a 	ret
    bc04:	80c00017 	ldw	r3,0(r16)
    bc08:	183ff926 	beq	r3,zero,bbf0 <__alt_mem_sram+0xf7e0bbf0>
    bc0c:	88c00015 	stw	r3,0(r17)
    bc10:	003ff706 	br	bbf0 <__alt_mem_sram+0xf7e0bbf0>

0000bc14 <_close_r>:
    bc14:	defffd04 	addi	sp,sp,-12
    bc18:	dc000015 	stw	r16,0(sp)
    bc1c:	04000074 	movhi	r16,1
    bc20:	dc400115 	stw	r17,4(sp)
    bc24:	84185304 	addi	r16,r16,24908
    bc28:	2023883a 	mov	r17,r4
    bc2c:	2809883a 	mov	r4,r5
    bc30:	dfc00215 	stw	ra,8(sp)
    bc34:	80000015 	stw	zero,0(r16)
    bc38:	000f7bc0 	call	f7bc <close>
    bc3c:	00ffffc4 	movi	r3,-1
    bc40:	10c00526 	beq	r2,r3,bc58 <_close_r+0x44>
    bc44:	dfc00217 	ldw	ra,8(sp)
    bc48:	dc400117 	ldw	r17,4(sp)
    bc4c:	dc000017 	ldw	r16,0(sp)
    bc50:	dec00304 	addi	sp,sp,12
    bc54:	f800283a 	ret
    bc58:	80c00017 	ldw	r3,0(r16)
    bc5c:	183ff926 	beq	r3,zero,bc44 <__alt_mem_sram+0xf7e0bc44>
    bc60:	88c00015 	stw	r3,0(r17)
    bc64:	003ff706 	br	bc44 <__alt_mem_sram+0xf7e0bc44>

0000bc68 <_calloc_r>:
    bc68:	298b383a 	mul	r5,r5,r6
    bc6c:	defffe04 	addi	sp,sp,-8
    bc70:	dc000015 	stw	r16,0(sp)
    bc74:	dfc00115 	stw	ra,4(sp)
    bc78:	00083080 	call	8308 <_malloc_r>
    bc7c:	1021883a 	mov	r16,r2
    bc80:	10002826 	beq	r2,zero,bd24 <_calloc_r+0xbc>
    bc84:	11bfff17 	ldw	r6,-4(r2)
    bc88:	00bfff04 	movi	r2,-4
    bc8c:	00c00904 	movi	r3,36
    bc90:	308c703a 	and	r6,r6,r2
    bc94:	308d883a 	add	r6,r6,r2
    bc98:	19801436 	bltu	r3,r6,bcec <_calloc_r+0x84>
    bc9c:	008004c4 	movi	r2,19
    bca0:	11800936 	bltu	r2,r6,bcc8 <_calloc_r+0x60>
    bca4:	8005883a 	mov	r2,r16
    bca8:	10000015 	stw	zero,0(r2)
    bcac:	10000115 	stw	zero,4(r2)
    bcb0:	10000215 	stw	zero,8(r2)
    bcb4:	8005883a 	mov	r2,r16
    bcb8:	dfc00117 	ldw	ra,4(sp)
    bcbc:	dc000017 	ldw	r16,0(sp)
    bcc0:	dec00204 	addi	sp,sp,8
    bcc4:	f800283a 	ret
    bcc8:	80000015 	stw	zero,0(r16)
    bccc:	80000115 	stw	zero,4(r16)
    bcd0:	008006c4 	movi	r2,27
    bcd4:	11800d2e 	bgeu	r2,r6,bd0c <_calloc_r+0xa4>
    bcd8:	80000215 	stw	zero,8(r16)
    bcdc:	80000315 	stw	zero,12(r16)
    bce0:	30c00c26 	beq	r6,r3,bd14 <_calloc_r+0xac>
    bce4:	80800404 	addi	r2,r16,16
    bce8:	003fef06 	br	bca8 <__alt_mem_sram+0xf7e0bca8>
    bcec:	8009883a 	mov	r4,r16
    bcf0:	000b883a 	mov	r5,zero
    bcf4:	0008e2c0 	call	8e2c <memset>
    bcf8:	8005883a 	mov	r2,r16
    bcfc:	dfc00117 	ldw	ra,4(sp)
    bd00:	dc000017 	ldw	r16,0(sp)
    bd04:	dec00204 	addi	sp,sp,8
    bd08:	f800283a 	ret
    bd0c:	80800204 	addi	r2,r16,8
    bd10:	003fe506 	br	bca8 <__alt_mem_sram+0xf7e0bca8>
    bd14:	80000415 	stw	zero,16(r16)
    bd18:	80800604 	addi	r2,r16,24
    bd1c:	80000515 	stw	zero,20(r16)
    bd20:	003fe106 	br	bca8 <__alt_mem_sram+0xf7e0bca8>
    bd24:	0005883a 	mov	r2,zero
    bd28:	003fe306 	br	bcb8 <__alt_mem_sram+0xf7e0bcb8>

0000bd2c <_fclose_r>:
    bd2c:	28003226 	beq	r5,zero,bdf8 <_fclose_r+0xcc>
    bd30:	defffc04 	addi	sp,sp,-16
    bd34:	dc400115 	stw	r17,4(sp)
    bd38:	2023883a 	mov	r17,r4
    bd3c:	dc000015 	stw	r16,0(sp)
    bd40:	dfc00315 	stw	ra,12(sp)
    bd44:	dc800215 	stw	r18,8(sp)
    bd48:	2821883a 	mov	r16,r5
    bd4c:	00076080 	call	7608 <__sfp_lock_acquire>
    bd50:	88000226 	beq	r17,zero,bd5c <_fclose_r+0x30>
    bd54:	88800e17 	ldw	r2,56(r17)
    bd58:	10002926 	beq	r2,zero,be00 <_fclose_r+0xd4>
    bd5c:	8080030f 	ldh	r2,12(r16)
    bd60:	10002226 	beq	r2,zero,bdec <_fclose_r+0xc0>
    bd64:	8809883a 	mov	r4,r17
    bd68:	800b883a 	mov	r5,r16
    bd6c:	00070500 	call	7050 <_fflush_r>
    bd70:	1025883a 	mov	r18,r2
    bd74:	80800b17 	ldw	r2,44(r16)
    bd78:	10000426 	beq	r2,zero,bd8c <_fclose_r+0x60>
    bd7c:	81400717 	ldw	r5,28(r16)
    bd80:	8809883a 	mov	r4,r17
    bd84:	103ee83a 	callr	r2
    bd88:	10002616 	blt	r2,zero,be24 <_fclose_r+0xf8>
    bd8c:	8080030b 	ldhu	r2,12(r16)
    bd90:	1080200c 	andi	r2,r2,128
    bd94:	10001f1e 	bne	r2,zero,be14 <_fclose_r+0xe8>
    bd98:	81400c17 	ldw	r5,48(r16)
    bd9c:	28000526 	beq	r5,zero,bdb4 <_fclose_r+0x88>
    bda0:	80801004 	addi	r2,r16,64
    bda4:	28800226 	beq	r5,r2,bdb0 <_fclose_r+0x84>
    bda8:	8809883a 	mov	r4,r17
    bdac:	000776c0 	call	776c <_free_r>
    bdb0:	80000c15 	stw	zero,48(r16)
    bdb4:	81401117 	ldw	r5,68(r16)
    bdb8:	28000326 	beq	r5,zero,bdc8 <_fclose_r+0x9c>
    bdbc:	8809883a 	mov	r4,r17
    bdc0:	000776c0 	call	776c <_free_r>
    bdc4:	80001115 	stw	zero,68(r16)
    bdc8:	8000030d 	sth	zero,12(r16)
    bdcc:	000760c0 	call	760c <__sfp_lock_release>
    bdd0:	9005883a 	mov	r2,r18
    bdd4:	dfc00317 	ldw	ra,12(sp)
    bdd8:	dc800217 	ldw	r18,8(sp)
    bddc:	dc400117 	ldw	r17,4(sp)
    bde0:	dc000017 	ldw	r16,0(sp)
    bde4:	dec00404 	addi	sp,sp,16
    bde8:	f800283a 	ret
    bdec:	000760c0 	call	760c <__sfp_lock_release>
    bdf0:	0005883a 	mov	r2,zero
    bdf4:	003ff706 	br	bdd4 <__alt_mem_sram+0xf7e0bdd4>
    bdf8:	0005883a 	mov	r2,zero
    bdfc:	f800283a 	ret
    be00:	8809883a 	mov	r4,r17
    be04:	00075f80 	call	75f8 <__sinit>
    be08:	8080030f 	ldh	r2,12(r16)
    be0c:	103fd51e 	bne	r2,zero,bd64 <__alt_mem_sram+0xf7e0bd64>
    be10:	003ff606 	br	bdec <__alt_mem_sram+0xf7e0bdec>
    be14:	81400417 	ldw	r5,16(r16)
    be18:	8809883a 	mov	r4,r17
    be1c:	000776c0 	call	776c <_free_r>
    be20:	003fdd06 	br	bd98 <__alt_mem_sram+0xf7e0bd98>
    be24:	04bfffc4 	movi	r18,-1
    be28:	003fd806 	br	bd8c <__alt_mem_sram+0xf7e0bd8c>

0000be2c <fclose>:
    be2c:	00800074 	movhi	r2,1
    be30:	10918204 	addi	r2,r2,17928
    be34:	200b883a 	mov	r5,r4
    be38:	11000017 	ldw	r4,0(r2)
    be3c:	000bd2c1 	jmpi	bd2c <_fclose_r>

0000be40 <_fputwc_r>:
    be40:	3080030b 	ldhu	r2,12(r6)
    be44:	defff804 	addi	sp,sp,-32
    be48:	dcc00415 	stw	r19,16(sp)
    be4c:	dc800315 	stw	r18,12(sp)
    be50:	dc000115 	stw	r16,4(sp)
    be54:	dfc00715 	stw	ra,28(sp)
    be58:	dd400615 	stw	r21,24(sp)
    be5c:	dd000515 	stw	r20,20(sp)
    be60:	dc400215 	stw	r17,8(sp)
    be64:	10c8000c 	andi	r3,r2,8192
    be68:	3021883a 	mov	r16,r6
    be6c:	2027883a 	mov	r19,r4
    be70:	2825883a 	mov	r18,r5
    be74:	1800051e 	bne	r3,zero,be8c <_fputwc_r+0x4c>
    be78:	30c01917 	ldw	r3,100(r6)
    be7c:	10880014 	ori	r2,r2,8192
    be80:	3080030d 	sth	r2,12(r6)
    be84:	18880014 	ori	r2,r3,8192
    be88:	30801915 	stw	r2,100(r6)
    be8c:	00080f80 	call	80f8 <__locale_mb_cur_max>
    be90:	00c00044 	movi	r3,1
    be94:	10c03e26 	beq	r2,r3,bf90 <_fputwc_r+0x150>
    be98:	9809883a 	mov	r4,r19
    be9c:	d80b883a 	mov	r5,sp
    bea0:	900d883a 	mov	r6,r18
    bea4:	81c01704 	addi	r7,r16,92
    bea8:	000c2f00 	call	c2f0 <_wcrtomb_r>
    beac:	1029883a 	mov	r20,r2
    beb0:	00bfffc4 	movi	r2,-1
    beb4:	a0802026 	beq	r20,r2,bf38 <_fputwc_r+0xf8>
    beb8:	d9400003 	ldbu	r5,0(sp)
    bebc:	a0001c26 	beq	r20,zero,bf30 <_fputwc_r+0xf0>
    bec0:	0023883a 	mov	r17,zero
    bec4:	05400284 	movi	r21,10
    bec8:	00000906 	br	bef0 <_fputwc_r+0xb0>
    becc:	80800017 	ldw	r2,0(r16)
    bed0:	11400005 	stb	r5,0(r2)
    bed4:	80c00017 	ldw	r3,0(r16)
    bed8:	18c00044 	addi	r3,r3,1
    bedc:	80c00015 	stw	r3,0(r16)
    bee0:	8c400044 	addi	r17,r17,1
    bee4:	dc45883a 	add	r2,sp,r17
    bee8:	8d00112e 	bgeu	r17,r20,bf30 <_fputwc_r+0xf0>
    beec:	11400003 	ldbu	r5,0(r2)
    bef0:	80c00217 	ldw	r3,8(r16)
    bef4:	18ffffc4 	addi	r3,r3,-1
    bef8:	80c00215 	stw	r3,8(r16)
    befc:	183ff30e 	bge	r3,zero,becc <__alt_mem_sram+0xf7e0becc>
    bf00:	80800617 	ldw	r2,24(r16)
    bf04:	18801916 	blt	r3,r2,bf6c <_fputwc_r+0x12c>
    bf08:	80800017 	ldw	r2,0(r16)
    bf0c:	11400005 	stb	r5,0(r2)
    bf10:	80800017 	ldw	r2,0(r16)
    bf14:	10c00003 	ldbu	r3,0(r2)
    bf18:	10800044 	addi	r2,r2,1
    bf1c:	1d402326 	beq	r3,r21,bfac <_fputwc_r+0x16c>
    bf20:	80800015 	stw	r2,0(r16)
    bf24:	8c400044 	addi	r17,r17,1
    bf28:	dc45883a 	add	r2,sp,r17
    bf2c:	8d3fef36 	bltu	r17,r20,beec <__alt_mem_sram+0xf7e0beec>
    bf30:	9005883a 	mov	r2,r18
    bf34:	00000406 	br	bf48 <_fputwc_r+0x108>
    bf38:	80c0030b 	ldhu	r3,12(r16)
    bf3c:	a005883a 	mov	r2,r20
    bf40:	18c01014 	ori	r3,r3,64
    bf44:	80c0030d 	sth	r3,12(r16)
    bf48:	dfc00717 	ldw	ra,28(sp)
    bf4c:	dd400617 	ldw	r21,24(sp)
    bf50:	dd000517 	ldw	r20,20(sp)
    bf54:	dcc00417 	ldw	r19,16(sp)
    bf58:	dc800317 	ldw	r18,12(sp)
    bf5c:	dc400217 	ldw	r17,8(sp)
    bf60:	dc000117 	ldw	r16,4(sp)
    bf64:	dec00804 	addi	sp,sp,32
    bf68:	f800283a 	ret
    bf6c:	9809883a 	mov	r4,r19
    bf70:	29403fcc 	andi	r5,r5,255
    bf74:	800d883a 	mov	r6,r16
    bf78:	000c1800 	call	c180 <__swbuf_r>
    bf7c:	10bfffe0 	cmpeqi	r2,r2,-1
    bf80:	10803fcc 	andi	r2,r2,255
    bf84:	103fd626 	beq	r2,zero,bee0 <__alt_mem_sram+0xf7e0bee0>
    bf88:	00bfffc4 	movi	r2,-1
    bf8c:	003fee06 	br	bf48 <__alt_mem_sram+0xf7e0bf48>
    bf90:	90ffffc4 	addi	r3,r18,-1
    bf94:	01003f84 	movi	r4,254
    bf98:	20ffbf36 	bltu	r4,r3,be98 <__alt_mem_sram+0xf7e0be98>
    bf9c:	900b883a 	mov	r5,r18
    bfa0:	dc800005 	stb	r18,0(sp)
    bfa4:	1029883a 	mov	r20,r2
    bfa8:	003fc506 	br	bec0 <__alt_mem_sram+0xf7e0bec0>
    bfac:	9809883a 	mov	r4,r19
    bfb0:	a80b883a 	mov	r5,r21
    bfb4:	800d883a 	mov	r6,r16
    bfb8:	000c1800 	call	c180 <__swbuf_r>
    bfbc:	10bfffe0 	cmpeqi	r2,r2,-1
    bfc0:	003fef06 	br	bf80 <__alt_mem_sram+0xf7e0bf80>

0000bfc4 <fputwc>:
    bfc4:	defffc04 	addi	sp,sp,-16
    bfc8:	dc000115 	stw	r16,4(sp)
    bfcc:	04000074 	movhi	r16,1
    bfd0:	84118204 	addi	r16,r16,17928
    bfd4:	dc400215 	stw	r17,8(sp)
    bfd8:	2023883a 	mov	r17,r4
    bfdc:	81000017 	ldw	r4,0(r16)
    bfe0:	dfc00315 	stw	ra,12(sp)
    bfe4:	280d883a 	mov	r6,r5
    bfe8:	20000626 	beq	r4,zero,c004 <fputwc+0x40>
    bfec:	20800e17 	ldw	r2,56(r4)
    bff0:	1000041e 	bne	r2,zero,c004 <fputwc+0x40>
    bff4:	d9400015 	stw	r5,0(sp)
    bff8:	00075f80 	call	75f8 <__sinit>
    bffc:	81000017 	ldw	r4,0(r16)
    c000:	d9800017 	ldw	r6,0(sp)
    c004:	880b883a 	mov	r5,r17
    c008:	dfc00317 	ldw	ra,12(sp)
    c00c:	dc400217 	ldw	r17,8(sp)
    c010:	dc000117 	ldw	r16,4(sp)
    c014:	dec00404 	addi	sp,sp,16
    c018:	000be401 	jmpi	be40 <_fputwc_r>

0000c01c <_fstat_r>:
    c01c:	defffd04 	addi	sp,sp,-12
    c020:	dc000015 	stw	r16,0(sp)
    c024:	04000074 	movhi	r16,1
    c028:	dc400115 	stw	r17,4(sp)
    c02c:	84185304 	addi	r16,r16,24908
    c030:	2023883a 	mov	r17,r4
    c034:	2809883a 	mov	r4,r5
    c038:	300b883a 	mov	r5,r6
    c03c:	dfc00215 	stw	ra,8(sp)
    c040:	80000015 	stw	zero,0(r16)
    c044:	000f9080 	call	f908 <fstat>
    c048:	00ffffc4 	movi	r3,-1
    c04c:	10c00526 	beq	r2,r3,c064 <_fstat_r+0x48>
    c050:	dfc00217 	ldw	ra,8(sp)
    c054:	dc400117 	ldw	r17,4(sp)
    c058:	dc000017 	ldw	r16,0(sp)
    c05c:	dec00304 	addi	sp,sp,12
    c060:	f800283a 	ret
    c064:	80c00017 	ldw	r3,0(r16)
    c068:	183ff926 	beq	r3,zero,c050 <__alt_mem_sram+0xf7e0c050>
    c06c:	88c00015 	stw	r3,0(r17)
    c070:	003ff706 	br	c050 <__alt_mem_sram+0xf7e0c050>

0000c074 <_isatty_r>:
    c074:	defffd04 	addi	sp,sp,-12
    c078:	dc000015 	stw	r16,0(sp)
    c07c:	04000074 	movhi	r16,1
    c080:	dc400115 	stw	r17,4(sp)
    c084:	84185304 	addi	r16,r16,24908
    c088:	2023883a 	mov	r17,r4
    c08c:	2809883a 	mov	r4,r5
    c090:	dfc00215 	stw	ra,8(sp)
    c094:	80000015 	stw	zero,0(r16)
    c098:	000fa080 	call	fa08 <isatty>
    c09c:	00ffffc4 	movi	r3,-1
    c0a0:	10c00526 	beq	r2,r3,c0b8 <_isatty_r+0x44>
    c0a4:	dfc00217 	ldw	ra,8(sp)
    c0a8:	dc400117 	ldw	r17,4(sp)
    c0ac:	dc000017 	ldw	r16,0(sp)
    c0b0:	dec00304 	addi	sp,sp,12
    c0b4:	f800283a 	ret
    c0b8:	80c00017 	ldw	r3,0(r16)
    c0bc:	183ff926 	beq	r3,zero,c0a4 <__alt_mem_sram+0xf7e0c0a4>
    c0c0:	88c00015 	stw	r3,0(r17)
    c0c4:	003ff706 	br	c0a4 <__alt_mem_sram+0xf7e0c0a4>

0000c0c8 <_lseek_r>:
    c0c8:	defffd04 	addi	sp,sp,-12
    c0cc:	dc000015 	stw	r16,0(sp)
    c0d0:	04000074 	movhi	r16,1
    c0d4:	dc400115 	stw	r17,4(sp)
    c0d8:	84185304 	addi	r16,r16,24908
    c0dc:	2023883a 	mov	r17,r4
    c0e0:	2809883a 	mov	r4,r5
    c0e4:	300b883a 	mov	r5,r6
    c0e8:	380d883a 	mov	r6,r7
    c0ec:	dfc00215 	stw	ra,8(sp)
    c0f0:	80000015 	stw	zero,0(r16)
    c0f4:	000fbe00 	call	fbe0 <lseek>
    c0f8:	00ffffc4 	movi	r3,-1
    c0fc:	10c00526 	beq	r2,r3,c114 <_lseek_r+0x4c>
    c100:	dfc00217 	ldw	ra,8(sp)
    c104:	dc400117 	ldw	r17,4(sp)
    c108:	dc000017 	ldw	r16,0(sp)
    c10c:	dec00304 	addi	sp,sp,12
    c110:	f800283a 	ret
    c114:	80c00017 	ldw	r3,0(r16)
    c118:	183ff926 	beq	r3,zero,c100 <__alt_mem_sram+0xf7e0c100>
    c11c:	88c00015 	stw	r3,0(r17)
    c120:	003ff706 	br	c100 <__alt_mem_sram+0xf7e0c100>

0000c124 <_read_r>:
    c124:	defffd04 	addi	sp,sp,-12
    c128:	dc000015 	stw	r16,0(sp)
    c12c:	04000074 	movhi	r16,1
    c130:	dc400115 	stw	r17,4(sp)
    c134:	84185304 	addi	r16,r16,24908
    c138:	2023883a 	mov	r17,r4
    c13c:	2809883a 	mov	r4,r5
    c140:	300b883a 	mov	r5,r6
    c144:	380d883a 	mov	r6,r7
    c148:	dfc00215 	stw	ra,8(sp)
    c14c:	80000015 	stw	zero,0(r16)
    c150:	000fdbc0 	call	fdbc <read>
    c154:	00ffffc4 	movi	r3,-1
    c158:	10c00526 	beq	r2,r3,c170 <_read_r+0x4c>
    c15c:	dfc00217 	ldw	ra,8(sp)
    c160:	dc400117 	ldw	r17,4(sp)
    c164:	dc000017 	ldw	r16,0(sp)
    c168:	dec00304 	addi	sp,sp,12
    c16c:	f800283a 	ret
    c170:	80c00017 	ldw	r3,0(r16)
    c174:	183ff926 	beq	r3,zero,c15c <__alt_mem_sram+0xf7e0c15c>
    c178:	88c00015 	stw	r3,0(r17)
    c17c:	003ff706 	br	c15c <__alt_mem_sram+0xf7e0c15c>

0000c180 <__swbuf_r>:
    c180:	defffc04 	addi	sp,sp,-16
    c184:	dc800215 	stw	r18,8(sp)
    c188:	dc400115 	stw	r17,4(sp)
    c18c:	dc000015 	stw	r16,0(sp)
    c190:	dfc00315 	stw	ra,12(sp)
    c194:	2025883a 	mov	r18,r4
    c198:	2823883a 	mov	r17,r5
    c19c:	3021883a 	mov	r16,r6
    c1a0:	20000226 	beq	r4,zero,c1ac <__swbuf_r+0x2c>
    c1a4:	20800e17 	ldw	r2,56(r4)
    c1a8:	10004126 	beq	r2,zero,c2b0 <__swbuf_r+0x130>
    c1ac:	80c00617 	ldw	r3,24(r16)
    c1b0:	8180030b 	ldhu	r6,12(r16)
    c1b4:	80c00215 	stw	r3,8(r16)
    c1b8:	30c0020c 	andi	r3,r6,8
    c1bc:	18003526 	beq	r3,zero,c294 <__swbuf_r+0x114>
    c1c0:	80c00417 	ldw	r3,16(r16)
    c1c4:	18003326 	beq	r3,zero,c294 <__swbuf_r+0x114>
    c1c8:	3088000c 	andi	r2,r6,8192
    c1cc:	8c403fcc 	andi	r17,r17,255
    c1d0:	10001726 	beq	r2,zero,c230 <__swbuf_r+0xb0>
    c1d4:	80800017 	ldw	r2,0(r16)
    c1d8:	81000517 	ldw	r4,20(r16)
    c1dc:	10c7c83a 	sub	r3,r2,r3
    c1e0:	19001d0e 	bge	r3,r4,c258 <__swbuf_r+0xd8>
    c1e4:	18c00044 	addi	r3,r3,1
    c1e8:	81400217 	ldw	r5,8(r16)
    c1ec:	11000044 	addi	r4,r2,1
    c1f0:	81000015 	stw	r4,0(r16)
    c1f4:	297fffc4 	addi	r5,r5,-1
    c1f8:	81400215 	stw	r5,8(r16)
    c1fc:	14400005 	stb	r17,0(r2)
    c200:	80800517 	ldw	r2,20(r16)
    c204:	10c01d26 	beq	r2,r3,c27c <__swbuf_r+0xfc>
    c208:	8080030b 	ldhu	r2,12(r16)
    c20c:	1080004c 	andi	r2,r2,1
    c210:	1000181e 	bne	r2,zero,c274 <__swbuf_r+0xf4>
    c214:	8805883a 	mov	r2,r17
    c218:	dfc00317 	ldw	ra,12(sp)
    c21c:	dc800217 	ldw	r18,8(sp)
    c220:	dc400117 	ldw	r17,4(sp)
    c224:	dc000017 	ldw	r16,0(sp)
    c228:	dec00404 	addi	sp,sp,16
    c22c:	f800283a 	ret
    c230:	81001917 	ldw	r4,100(r16)
    c234:	00b7ffc4 	movi	r2,-8193
    c238:	31880014 	ori	r6,r6,8192
    c23c:	2084703a 	and	r2,r4,r2
    c240:	80801915 	stw	r2,100(r16)
    c244:	80800017 	ldw	r2,0(r16)
    c248:	81000517 	ldw	r4,20(r16)
    c24c:	8180030d 	sth	r6,12(r16)
    c250:	10c7c83a 	sub	r3,r2,r3
    c254:	193fe316 	blt	r3,r4,c1e4 <__alt_mem_sram+0xf7e0c1e4>
    c258:	9009883a 	mov	r4,r18
    c25c:	800b883a 	mov	r5,r16
    c260:	00070500 	call	7050 <_fflush_r>
    c264:	1000091e 	bne	r2,zero,c28c <__swbuf_r+0x10c>
    c268:	80800017 	ldw	r2,0(r16)
    c26c:	00c00044 	movi	r3,1
    c270:	003fdd06 	br	c1e8 <__alt_mem_sram+0xf7e0c1e8>
    c274:	00800284 	movi	r2,10
    c278:	88bfe61e 	bne	r17,r2,c214 <__alt_mem_sram+0xf7e0c214>
    c27c:	9009883a 	mov	r4,r18
    c280:	800b883a 	mov	r5,r16
    c284:	00070500 	call	7050 <_fflush_r>
    c288:	103fe226 	beq	r2,zero,c214 <__alt_mem_sram+0xf7e0c214>
    c28c:	00bfffc4 	movi	r2,-1
    c290:	003fe106 	br	c218 <__alt_mem_sram+0xf7e0c218>
    c294:	9009883a 	mov	r4,r18
    c298:	800b883a 	mov	r5,r16
    c29c:	00055f80 	call	55f8 <__swsetup_r>
    c2a0:	1000051e 	bne	r2,zero,c2b8 <__swbuf_r+0x138>
    c2a4:	8180030b 	ldhu	r6,12(r16)
    c2a8:	80c00417 	ldw	r3,16(r16)
    c2ac:	003fc606 	br	c1c8 <__alt_mem_sram+0xf7e0c1c8>
    c2b0:	00075f80 	call	75f8 <__sinit>
    c2b4:	003fbd06 	br	c1ac <__alt_mem_sram+0xf7e0c1ac>
    c2b8:	80c0030b 	ldhu	r3,12(r16)
    c2bc:	00bfffc4 	movi	r2,-1
    c2c0:	18c01014 	ori	r3,r3,64
    c2c4:	80c0030d 	sth	r3,12(r16)
    c2c8:	00c00244 	movi	r3,9
    c2cc:	90c00015 	stw	r3,0(r18)
    c2d0:	003fd106 	br	c218 <__alt_mem_sram+0xf7e0c218>

0000c2d4 <__swbuf>:
    c2d4:	00c00074 	movhi	r3,1
    c2d8:	18d18204 	addi	r3,r3,17928
    c2dc:	2005883a 	mov	r2,r4
    c2e0:	19000017 	ldw	r4,0(r3)
    c2e4:	280d883a 	mov	r6,r5
    c2e8:	100b883a 	mov	r5,r2
    c2ec:	000c1801 	jmpi	c180 <__swbuf_r>

0000c2f0 <_wcrtomb_r>:
    c2f0:	defff604 	addi	sp,sp,-40
    c2f4:	00800074 	movhi	r2,1
    c2f8:	dc800815 	stw	r18,32(sp)
    c2fc:	dc400715 	stw	r17,28(sp)
    c300:	dc000615 	stw	r16,24(sp)
    c304:	10918604 	addi	r2,r2,17944
    c308:	dfc00915 	stw	ra,36(sp)
    c30c:	2021883a 	mov	r16,r4
    c310:	3823883a 	mov	r17,r7
    c314:	14800017 	ldw	r18,0(r2)
    c318:	28001426 	beq	r5,zero,c36c <_wcrtomb_r+0x7c>
    c31c:	d9400415 	stw	r5,16(sp)
    c320:	d9800515 	stw	r6,20(sp)
    c324:	00080ec0 	call	80ec <__locale_charset>
    c328:	d9400417 	ldw	r5,16(sp)
    c32c:	d9800517 	ldw	r6,20(sp)
    c330:	8009883a 	mov	r4,r16
    c334:	dc400015 	stw	r17,0(sp)
    c338:	100f883a 	mov	r7,r2
    c33c:	903ee83a 	callr	r18
    c340:	00ffffc4 	movi	r3,-1
    c344:	10c0031e 	bne	r2,r3,c354 <_wcrtomb_r+0x64>
    c348:	88000015 	stw	zero,0(r17)
    c34c:	00c02284 	movi	r3,138
    c350:	80c00015 	stw	r3,0(r16)
    c354:	dfc00917 	ldw	ra,36(sp)
    c358:	dc800817 	ldw	r18,32(sp)
    c35c:	dc400717 	ldw	r17,28(sp)
    c360:	dc000617 	ldw	r16,24(sp)
    c364:	dec00a04 	addi	sp,sp,40
    c368:	f800283a 	ret
    c36c:	00080ec0 	call	80ec <__locale_charset>
    c370:	8009883a 	mov	r4,r16
    c374:	dc400015 	stw	r17,0(sp)
    c378:	d9400104 	addi	r5,sp,4
    c37c:	000d883a 	mov	r6,zero
    c380:	100f883a 	mov	r7,r2
    c384:	903ee83a 	callr	r18
    c388:	003fed06 	br	c340 <__alt_mem_sram+0xf7e0c340>

0000c38c <wcrtomb>:
    c38c:	defff504 	addi	sp,sp,-44
    c390:	dc400515 	stw	r17,20(sp)
    c394:	dc000415 	stw	r16,16(sp)
    c398:	dfc00a15 	stw	ra,40(sp)
    c39c:	dd400915 	stw	r21,36(sp)
    c3a0:	dd000815 	stw	r20,32(sp)
    c3a4:	dcc00715 	stw	r19,28(sp)
    c3a8:	dc800615 	stw	r18,24(sp)
    c3ac:	2021883a 	mov	r16,r4
    c3b0:	3023883a 	mov	r17,r6
    c3b4:	20001d26 	beq	r4,zero,c42c <wcrtomb+0xa0>
    c3b8:	04800074 	movhi	r18,1
    c3bc:	94918204 	addi	r18,r18,17928
    c3c0:	00800074 	movhi	r2,1
    c3c4:	95400017 	ldw	r21,0(r18)
    c3c8:	10918604 	addi	r2,r2,17944
    c3cc:	15000017 	ldw	r20,0(r2)
    c3d0:	2827883a 	mov	r19,r5
    c3d4:	00080ec0 	call	80ec <__locale_charset>
    c3d8:	a809883a 	mov	r4,r21
    c3dc:	dc400015 	stw	r17,0(sp)
    c3e0:	800b883a 	mov	r5,r16
    c3e4:	980d883a 	mov	r6,r19
    c3e8:	100f883a 	mov	r7,r2
    c3ec:	a03ee83a 	callr	r20
    c3f0:	00ffffc4 	movi	r3,-1
    c3f4:	10c0041e 	bne	r2,r3,c408 <wcrtomb+0x7c>
    c3f8:	90c00017 	ldw	r3,0(r18)
    c3fc:	01002284 	movi	r4,138
    c400:	88000015 	stw	zero,0(r17)
    c404:	19000015 	stw	r4,0(r3)
    c408:	dfc00a17 	ldw	ra,40(sp)
    c40c:	dd400917 	ldw	r21,36(sp)
    c410:	dd000817 	ldw	r20,32(sp)
    c414:	dcc00717 	ldw	r19,28(sp)
    c418:	dc800617 	ldw	r18,24(sp)
    c41c:	dc400517 	ldw	r17,20(sp)
    c420:	dc000417 	ldw	r16,16(sp)
    c424:	dec00b04 	addi	sp,sp,44
    c428:	f800283a 	ret
    c42c:	04800074 	movhi	r18,1
    c430:	94918204 	addi	r18,r18,17928
    c434:	00800074 	movhi	r2,1
    c438:	94c00017 	ldw	r19,0(r18)
    c43c:	10918604 	addi	r2,r2,17944
    c440:	14000017 	ldw	r16,0(r2)
    c444:	00080ec0 	call	80ec <__locale_charset>
    c448:	9809883a 	mov	r4,r19
    c44c:	dc400015 	stw	r17,0(sp)
    c450:	d9400104 	addi	r5,sp,4
    c454:	000d883a 	mov	r6,zero
    c458:	100f883a 	mov	r7,r2
    c45c:	803ee83a 	callr	r16
    c460:	003fe306 	br	c3f0 <__alt_mem_sram+0xf7e0c3f0>

0000c464 <__ascii_wctomb>:
    c464:	28000526 	beq	r5,zero,c47c <__ascii_wctomb+0x18>
    c468:	00803fc4 	movi	r2,255
    c46c:	11800536 	bltu	r2,r6,c484 <__ascii_wctomb+0x20>
    c470:	29800005 	stb	r6,0(r5)
    c474:	00800044 	movi	r2,1
    c478:	f800283a 	ret
    c47c:	0005883a 	mov	r2,zero
    c480:	f800283a 	ret
    c484:	00802284 	movi	r2,138
    c488:	20800015 	stw	r2,0(r4)
    c48c:	00bfffc4 	movi	r2,-1
    c490:	f800283a 	ret

0000c494 <_wctomb_r>:
    c494:	00800074 	movhi	r2,1
    c498:	defff904 	addi	sp,sp,-28
    c49c:	10918604 	addi	r2,r2,17944
    c4a0:	dfc00615 	stw	ra,24(sp)
    c4a4:	dc400515 	stw	r17,20(sp)
    c4a8:	dc000415 	stw	r16,16(sp)
    c4ac:	3823883a 	mov	r17,r7
    c4b0:	14000017 	ldw	r16,0(r2)
    c4b4:	d9000115 	stw	r4,4(sp)
    c4b8:	d9400215 	stw	r5,8(sp)
    c4bc:	d9800315 	stw	r6,12(sp)
    c4c0:	00080ec0 	call	80ec <__locale_charset>
    c4c4:	d9000117 	ldw	r4,4(sp)
    c4c8:	d9400217 	ldw	r5,8(sp)
    c4cc:	d9800317 	ldw	r6,12(sp)
    c4d0:	dc400015 	stw	r17,0(sp)
    c4d4:	100f883a 	mov	r7,r2
    c4d8:	803ee83a 	callr	r16
    c4dc:	dfc00617 	ldw	ra,24(sp)
    c4e0:	dc400517 	ldw	r17,20(sp)
    c4e4:	dc000417 	ldw	r16,16(sp)
    c4e8:	dec00704 	addi	sp,sp,28
    c4ec:	f800283a 	ret

0000c4f0 <__udivdi3>:
    c4f0:	defff504 	addi	sp,sp,-44
    c4f4:	dcc00415 	stw	r19,16(sp)
    c4f8:	dc000115 	stw	r16,4(sp)
    c4fc:	dfc00a15 	stw	ra,40(sp)
    c500:	df000915 	stw	fp,36(sp)
    c504:	ddc00815 	stw	r23,32(sp)
    c508:	dd800715 	stw	r22,28(sp)
    c50c:	dd400615 	stw	r21,24(sp)
    c510:	dd000515 	stw	r20,20(sp)
    c514:	dc800315 	stw	r18,12(sp)
    c518:	dc400215 	stw	r17,8(sp)
    c51c:	2027883a 	mov	r19,r4
    c520:	2821883a 	mov	r16,r5
    c524:	3800421e 	bne	r7,zero,c630 <__udivdi3+0x140>
    c528:	3025883a 	mov	r18,r6
    c52c:	2023883a 	mov	r17,r4
    c530:	2980542e 	bgeu	r5,r6,c684 <__udivdi3+0x194>
    c534:	00bfffd4 	movui	r2,65535
    c538:	282d883a 	mov	r22,r5
    c53c:	1180a836 	bltu	r2,r6,c7e0 <__udivdi3+0x2f0>
    c540:	00803fc4 	movi	r2,255
    c544:	1181422e 	bgeu	r2,r6,ca50 <__udivdi3+0x560>
    c548:	00800204 	movi	r2,8
    c54c:	1007883a 	mov	r3,r2
    c550:	3084d83a 	srl	r2,r6,r2
    c554:	01000074 	movhi	r4,1
    c558:	210a8b04 	addi	r4,r4,10796
    c55c:	2085883a 	add	r2,r4,r2
    c560:	10800003 	ldbu	r2,0(r2)
    c564:	10c7883a 	add	r3,r2,r3
    c568:	00800804 	movi	r2,32
    c56c:	10c5c83a 	sub	r2,r2,r3
    c570:	10000526 	beq	r2,zero,c588 <__udivdi3+0x98>
    c574:	80a0983a 	sll	r16,r16,r2
    c578:	98c6d83a 	srl	r3,r19,r3
    c57c:	30a4983a 	sll	r18,r6,r2
    c580:	98a2983a 	sll	r17,r19,r2
    c584:	80ecb03a 	or	r22,r16,r3
    c588:	902ad43a 	srli	r21,r18,16
    c58c:	b009883a 	mov	r4,r22
    c590:	953fffcc 	andi	r20,r18,65535
    c594:	a80b883a 	mov	r5,r21
    c598:	000d1640 	call	d164 <__umodsi3>
    c59c:	b009883a 	mov	r4,r22
    c5a0:	a80b883a 	mov	r5,r21
    c5a4:	1027883a 	mov	r19,r2
    c5a8:	000d15c0 	call	d15c <__udivsi3>
    c5ac:	1021883a 	mov	r16,r2
    c5b0:	8806d43a 	srli	r3,r17,16
    c5b4:	9804943a 	slli	r2,r19,16
    c5b8:	8527383a 	mul	r19,r16,r20
    c5bc:	10c4b03a 	or	r2,r2,r3
    c5c0:	14c0052e 	bgeu	r2,r19,c5d8 <__udivdi3+0xe8>
    c5c4:	1485883a 	add	r2,r2,r18
    c5c8:	80ffffc4 	addi	r3,r16,-1
    c5cc:	14800136 	bltu	r2,r18,c5d4 <__udivdi3+0xe4>
    c5d0:	14c13436 	bltu	r2,r19,caa4 <__udivdi3+0x5b4>
    c5d4:	1821883a 	mov	r16,r3
    c5d8:	14e7c83a 	sub	r19,r2,r19
    c5dc:	9809883a 	mov	r4,r19
    c5e0:	a80b883a 	mov	r5,r21
    c5e4:	000d1640 	call	d164 <__umodsi3>
    c5e8:	102d883a 	mov	r22,r2
    c5ec:	9809883a 	mov	r4,r19
    c5f0:	a80b883a 	mov	r5,r21
    c5f4:	000d15c0 	call	d15c <__udivsi3>
    c5f8:	b02c943a 	slli	r22,r22,16
    c5fc:	1529383a 	mul	r20,r2,r20
    c600:	8c7fffcc 	andi	r17,r17,65535
    c604:	b462b03a 	or	r17,r22,r17
    c608:	8d00052e 	bgeu	r17,r20,c620 <__udivdi3+0x130>
    c60c:	8ca3883a 	add	r17,r17,r18
    c610:	10ffffc4 	addi	r3,r2,-1
    c614:	8c80f636 	bltu	r17,r18,c9f0 <__udivdi3+0x500>
    c618:	8d00f52e 	bgeu	r17,r20,c9f0 <__udivdi3+0x500>
    c61c:	10bfff84 	addi	r2,r2,-2
    c620:	8020943a 	slli	r16,r16,16
    c624:	0007883a 	mov	r3,zero
    c628:	1404b03a 	or	r2,r2,r16
    c62c:	00005b06 	br	c79c <__udivdi3+0x2ac>
    c630:	29c05836 	bltu	r5,r7,c794 <__udivdi3+0x2a4>
    c634:	00bfffd4 	movui	r2,65535
    c638:	11c0642e 	bgeu	r2,r7,c7cc <__udivdi3+0x2dc>
    c63c:	00804034 	movhi	r2,256
    c640:	10bfffc4 	addi	r2,r2,-1
    c644:	11c0f32e 	bgeu	r2,r7,ca14 <__udivdi3+0x524>
    c648:	00c00604 	movi	r3,24
    c64c:	180b883a 	mov	r5,r3
    c650:	38c6d83a 	srl	r3,r7,r3
    c654:	00800074 	movhi	r2,1
    c658:	108a8b04 	addi	r2,r2,10796
    c65c:	10c7883a 	add	r3,r2,r3
    c660:	18c00003 	ldbu	r3,0(r3)
    c664:	01000804 	movi	r4,32
    c668:	1947883a 	add	r3,r3,r5
    c66c:	20e5c83a 	sub	r18,r4,r3
    c670:	9000661e 	bne	r18,zero,c80c <__udivdi3+0x31c>
    c674:	3c00f936 	bltu	r7,r16,ca5c <__udivdi3+0x56c>
    c678:	9985403a 	cmpgeu	r2,r19,r6
    c67c:	0007883a 	mov	r3,zero
    c680:	00004606 	br	c79c <__udivdi3+0x2ac>
    c684:	3000041e 	bne	r6,zero,c698 <__udivdi3+0x1a8>
    c688:	01000044 	movi	r4,1
    c68c:	000b883a 	mov	r5,zero
    c690:	000d15c0 	call	d15c <__udivsi3>
    c694:	1025883a 	mov	r18,r2
    c698:	00bfffd4 	movui	r2,65535
    c69c:	1480562e 	bgeu	r2,r18,c7f8 <__udivdi3+0x308>
    c6a0:	00804034 	movhi	r2,256
    c6a4:	10bfffc4 	addi	r2,r2,-1
    c6a8:	1480e32e 	bgeu	r2,r18,ca38 <__udivdi3+0x548>
    c6ac:	00800604 	movi	r2,24
    c6b0:	1007883a 	mov	r3,r2
    c6b4:	9084d83a 	srl	r2,r18,r2
    c6b8:	01000074 	movhi	r4,1
    c6bc:	210a8b04 	addi	r4,r4,10796
    c6c0:	2085883a 	add	r2,r4,r2
    c6c4:	10800003 	ldbu	r2,0(r2)
    c6c8:	10c5883a 	add	r2,r2,r3
    c6cc:	00c00804 	movi	r3,32
    c6d0:	1887c83a 	sub	r3,r3,r2
    c6d4:	1800911e 	bne	r3,zero,c91c <__udivdi3+0x42c>
    c6d8:	9028d43a 	srli	r20,r18,16
    c6dc:	84a1c83a 	sub	r16,r16,r18
    c6e0:	957fffcc 	andi	r21,r18,65535
    c6e4:	00c00044 	movi	r3,1
    c6e8:	8009883a 	mov	r4,r16
    c6ec:	a00b883a 	mov	r5,r20
    c6f0:	d8c00015 	stw	r3,0(sp)
    c6f4:	000d1640 	call	d164 <__umodsi3>
    c6f8:	8009883a 	mov	r4,r16
    c6fc:	a00b883a 	mov	r5,r20
    c700:	1027883a 	mov	r19,r2
    c704:	000d15c0 	call	d15c <__udivsi3>
    c708:	1021883a 	mov	r16,r2
    c70c:	880cd43a 	srli	r6,r17,16
    c710:	9804943a 	slli	r2,r19,16
    c714:	8567383a 	mul	r19,r16,r21
    c718:	d8c00017 	ldw	r3,0(sp)
    c71c:	1188b03a 	or	r4,r2,r6
    c720:	24c0052e 	bgeu	r4,r19,c738 <__udivdi3+0x248>
    c724:	2489883a 	add	r4,r4,r18
    c728:	80bfffc4 	addi	r2,r16,-1
    c72c:	24800136 	bltu	r4,r18,c734 <__udivdi3+0x244>
    c730:	24c0d936 	bltu	r4,r19,ca98 <__udivdi3+0x5a8>
    c734:	1021883a 	mov	r16,r2
    c738:	24e7c83a 	sub	r19,r4,r19
    c73c:	9809883a 	mov	r4,r19
    c740:	a00b883a 	mov	r5,r20
    c744:	d8c00015 	stw	r3,0(sp)
    c748:	000d1640 	call	d164 <__umodsi3>
    c74c:	102d883a 	mov	r22,r2
    c750:	9809883a 	mov	r4,r19
    c754:	a00b883a 	mov	r5,r20
    c758:	000d15c0 	call	d15c <__udivsi3>
    c75c:	b02c943a 	slli	r22,r22,16
    c760:	156b383a 	mul	r21,r2,r21
    c764:	8c7fffcc 	andi	r17,r17,65535
    c768:	b462b03a 	or	r17,r22,r17
    c76c:	d8c00017 	ldw	r3,0(sp)
    c770:	8d40052e 	bgeu	r17,r21,c788 <__udivdi3+0x298>
    c774:	8ca3883a 	add	r17,r17,r18
    c778:	113fffc4 	addi	r4,r2,-1
    c77c:	8c809a36 	bltu	r17,r18,c9e8 <__udivdi3+0x4f8>
    c780:	8d40992e 	bgeu	r17,r21,c9e8 <__udivdi3+0x4f8>
    c784:	10bfff84 	addi	r2,r2,-2
    c788:	8020943a 	slli	r16,r16,16
    c78c:	1404b03a 	or	r2,r2,r16
    c790:	00000206 	br	c79c <__udivdi3+0x2ac>
    c794:	0007883a 	mov	r3,zero
    c798:	0005883a 	mov	r2,zero
    c79c:	dfc00a17 	ldw	ra,40(sp)
    c7a0:	df000917 	ldw	fp,36(sp)
    c7a4:	ddc00817 	ldw	r23,32(sp)
    c7a8:	dd800717 	ldw	r22,28(sp)
    c7ac:	dd400617 	ldw	r21,24(sp)
    c7b0:	dd000517 	ldw	r20,20(sp)
    c7b4:	dcc00417 	ldw	r19,16(sp)
    c7b8:	dc800317 	ldw	r18,12(sp)
    c7bc:	dc400217 	ldw	r17,8(sp)
    c7c0:	dc000117 	ldw	r16,4(sp)
    c7c4:	dec00b04 	addi	sp,sp,44
    c7c8:	f800283a 	ret
    c7cc:	00803fc4 	movi	r2,255
    c7d0:	11c0932e 	bgeu	r2,r7,ca20 <__udivdi3+0x530>
    c7d4:	00c00204 	movi	r3,8
    c7d8:	180b883a 	mov	r5,r3
    c7dc:	003f9c06 	br	c650 <__alt_mem_sram+0xf7e0c650>
    c7e0:	00804034 	movhi	r2,256
    c7e4:	10bfffc4 	addi	r2,r2,-1
    c7e8:	1180902e 	bgeu	r2,r6,ca2c <__udivdi3+0x53c>
    c7ec:	00800604 	movi	r2,24
    c7f0:	1007883a 	mov	r3,r2
    c7f4:	003f5606 	br	c550 <__alt_mem_sram+0xf7e0c550>
    c7f8:	00803fc4 	movi	r2,255
    c7fc:	1480912e 	bgeu	r2,r18,ca44 <__udivdi3+0x554>
    c800:	00800204 	movi	r2,8
    c804:	1007883a 	mov	r3,r2
    c808:	003faa06 	br	c6b4 <__alt_mem_sram+0xf7e0c6b4>
    c80c:	30eed83a 	srl	r23,r6,r3
    c810:	3c8e983a 	sll	r7,r7,r18
    c814:	80f8d83a 	srl	fp,r16,r3
    c818:	98c6d83a 	srl	r3,r19,r3
    c81c:	3deeb03a 	or	r23,r7,r23
    c820:	b828d43a 	srli	r20,r23,16
    c824:	84a0983a 	sll	r16,r16,r18
    c828:	e009883a 	mov	r4,fp
    c82c:	a00b883a 	mov	r5,r20
    c830:	80e2b03a 	or	r17,r16,r3
    c834:	34aa983a 	sll	r21,r6,r18
    c838:	000d1640 	call	d164 <__umodsi3>
    c83c:	e009883a 	mov	r4,fp
    c840:	a00b883a 	mov	r5,r20
    c844:	102d883a 	mov	r22,r2
    c848:	000d15c0 	call	d15c <__udivsi3>
    c84c:	1021883a 	mov	r16,r2
    c850:	bf3fffcc 	andi	fp,r23,65535
    c854:	b004943a 	slli	r2,r22,16
    c858:	8808d43a 	srli	r4,r17,16
    c85c:	872d383a 	mul	r22,r16,fp
    c860:	1104b03a 	or	r2,r2,r4
    c864:	1580042e 	bgeu	r2,r22,c878 <__udivdi3+0x388>
    c868:	15c5883a 	add	r2,r2,r23
    c86c:	80ffffc4 	addi	r3,r16,-1
    c870:	15c0812e 	bgeu	r2,r23,ca78 <__udivdi3+0x588>
    c874:	1821883a 	mov	r16,r3
    c878:	15adc83a 	sub	r22,r2,r22
    c87c:	b009883a 	mov	r4,r22
    c880:	a00b883a 	mov	r5,r20
    c884:	000d1640 	call	d164 <__umodsi3>
    c888:	a00b883a 	mov	r5,r20
    c88c:	b009883a 	mov	r4,r22
    c890:	d8800015 	stw	r2,0(sp)
    c894:	000d15c0 	call	d15c <__udivsi3>
    c898:	d8c00017 	ldw	r3,0(sp)
    c89c:	170b383a 	mul	r5,r2,fp
    c8a0:	8c7fffcc 	andi	r17,r17,65535
    c8a4:	1806943a 	slli	r3,r3,16
    c8a8:	1c46b03a 	or	r3,r3,r17
    c8ac:	1940042e 	bgeu	r3,r5,c8c0 <__udivdi3+0x3d0>
    c8b0:	1dc7883a 	add	r3,r3,r23
    c8b4:	113fffc4 	addi	r4,r2,-1
    c8b8:	1dc06b2e 	bgeu	r3,r23,ca68 <__udivdi3+0x578>
    c8bc:	2005883a 	mov	r2,r4
    c8c0:	8020943a 	slli	r16,r16,16
    c8c4:	a9ffffcc 	andi	r7,r21,65535
    c8c8:	a82ad43a 	srli	r21,r21,16
    c8cc:	1404b03a 	or	r2,r2,r16
    c8d0:	113fffcc 	andi	r4,r2,65535
    c8d4:	100cd43a 	srli	r6,r2,16
    c8d8:	21d3383a 	mul	r9,r4,r7
    c8dc:	2549383a 	mul	r4,r4,r21
    c8e0:	31cf383a 	mul	r7,r6,r7
    c8e4:	4810d43a 	srli	r8,r9,16
    c8e8:	1947c83a 	sub	r3,r3,r5
    c8ec:	3909883a 	add	r4,r7,r4
    c8f0:	2209883a 	add	r4,r4,r8
    c8f4:	354d383a 	mul	r6,r6,r21
    c8f8:	21c0022e 	bgeu	r4,r7,c904 <__udivdi3+0x414>
    c8fc:	01400074 	movhi	r5,1
    c900:	314d883a 	add	r6,r6,r5
    c904:	202ad43a 	srli	r21,r4,16
    c908:	354d883a 	add	r6,r6,r21
    c90c:	19803f36 	bltu	r3,r6,ca0c <__udivdi3+0x51c>
    c910:	19803926 	beq	r3,r6,c9f8 <__udivdi3+0x508>
    c914:	0007883a 	mov	r3,zero
    c918:	003fa006 	br	c79c <__alt_mem_sram+0xf7e0c79c>
    c91c:	90e4983a 	sll	r18,r18,r3
    c920:	80aad83a 	srl	r21,r16,r2
    c924:	80e0983a 	sll	r16,r16,r3
    c928:	9028d43a 	srli	r20,r18,16
    c92c:	9884d83a 	srl	r2,r19,r2
    c930:	a809883a 	mov	r4,r21
    c934:	a00b883a 	mov	r5,r20
    c938:	80acb03a 	or	r22,r16,r2
    c93c:	98e2983a 	sll	r17,r19,r3
    c940:	000d1640 	call	d164 <__umodsi3>
    c944:	a809883a 	mov	r4,r21
    c948:	a00b883a 	mov	r5,r20
    c94c:	1021883a 	mov	r16,r2
    c950:	000d15c0 	call	d15c <__udivsi3>
    c954:	957fffcc 	andi	r21,r18,65535
    c958:	8020943a 	slli	r16,r16,16
    c95c:	b00ad43a 	srli	r5,r22,16
    c960:	1567383a 	mul	r19,r2,r21
    c964:	102f883a 	mov	r23,r2
    c968:	8148b03a 	or	r4,r16,r5
    c96c:	24c0062e 	bgeu	r4,r19,c988 <__udivdi3+0x498>
    c970:	2489883a 	add	r4,r4,r18
    c974:	10bfffc4 	addi	r2,r2,-1
    c978:	24804536 	bltu	r4,r18,ca90 <__udivdi3+0x5a0>
    c97c:	24c0442e 	bgeu	r4,r19,ca90 <__udivdi3+0x5a0>
    c980:	bdffff84 	addi	r23,r23,-2
    c984:	2489883a 	add	r4,r4,r18
    c988:	24e7c83a 	sub	r19,r4,r19
    c98c:	9809883a 	mov	r4,r19
    c990:	a00b883a 	mov	r5,r20
    c994:	000d1640 	call	d164 <__umodsi3>
    c998:	1021883a 	mov	r16,r2
    c99c:	9809883a 	mov	r4,r19
    c9a0:	a00b883a 	mov	r5,r20
    c9a4:	000d15c0 	call	d15c <__udivsi3>
    c9a8:	8020943a 	slli	r16,r16,16
    c9ac:	1007883a 	mov	r3,r2
    c9b0:	1545383a 	mul	r2,r2,r21
    c9b4:	b13fffcc 	andi	r4,r22,65535
    c9b8:	8108b03a 	or	r4,r16,r4
    c9bc:	2080062e 	bgeu	r4,r2,c9d8 <__udivdi3+0x4e8>
    c9c0:	2489883a 	add	r4,r4,r18
    c9c4:	197fffc4 	addi	r5,r3,-1
    c9c8:	24802f36 	bltu	r4,r18,ca88 <__udivdi3+0x598>
    c9cc:	20802e2e 	bgeu	r4,r2,ca88 <__udivdi3+0x598>
    c9d0:	18ffff84 	addi	r3,r3,-2
    c9d4:	2489883a 	add	r4,r4,r18
    c9d8:	b82e943a 	slli	r23,r23,16
    c9dc:	20a1c83a 	sub	r16,r4,r2
    c9e0:	1dc6b03a 	or	r3,r3,r23
    c9e4:	003f4006 	br	c6e8 <__alt_mem_sram+0xf7e0c6e8>
    c9e8:	2005883a 	mov	r2,r4
    c9ec:	003f6606 	br	c788 <__alt_mem_sram+0xf7e0c788>
    c9f0:	1805883a 	mov	r2,r3
    c9f4:	003f0a06 	br	c620 <__alt_mem_sram+0xf7e0c620>
    c9f8:	2006943a 	slli	r3,r4,16
    c9fc:	9c88983a 	sll	r4,r19,r18
    ca00:	4a7fffcc 	andi	r9,r9,65535
    ca04:	1a47883a 	add	r3,r3,r9
    ca08:	20ffc22e 	bgeu	r4,r3,c914 <__alt_mem_sram+0xf7e0c914>
    ca0c:	10bfffc4 	addi	r2,r2,-1
    ca10:	003fc006 	br	c914 <__alt_mem_sram+0xf7e0c914>
    ca14:	00c00404 	movi	r3,16
    ca18:	180b883a 	mov	r5,r3
    ca1c:	003f0c06 	br	c650 <__alt_mem_sram+0xf7e0c650>
    ca20:	0007883a 	mov	r3,zero
    ca24:	000b883a 	mov	r5,zero
    ca28:	003f0906 	br	c650 <__alt_mem_sram+0xf7e0c650>
    ca2c:	00800404 	movi	r2,16
    ca30:	1007883a 	mov	r3,r2
    ca34:	003ec606 	br	c550 <__alt_mem_sram+0xf7e0c550>
    ca38:	00800404 	movi	r2,16
    ca3c:	1007883a 	mov	r3,r2
    ca40:	003f1c06 	br	c6b4 <__alt_mem_sram+0xf7e0c6b4>
    ca44:	0005883a 	mov	r2,zero
    ca48:	0007883a 	mov	r3,zero
    ca4c:	003f1906 	br	c6b4 <__alt_mem_sram+0xf7e0c6b4>
    ca50:	0005883a 	mov	r2,zero
    ca54:	0007883a 	mov	r3,zero
    ca58:	003ebd06 	br	c550 <__alt_mem_sram+0xf7e0c550>
    ca5c:	0007883a 	mov	r3,zero
    ca60:	00800044 	movi	r2,1
    ca64:	003f4d06 	br	c79c <__alt_mem_sram+0xf7e0c79c>
    ca68:	197f942e 	bgeu	r3,r5,c8bc <__alt_mem_sram+0xf7e0c8bc>
    ca6c:	10bfff84 	addi	r2,r2,-2
    ca70:	1dc7883a 	add	r3,r3,r23
    ca74:	003f9206 	br	c8c0 <__alt_mem_sram+0xf7e0c8c0>
    ca78:	15bf7e2e 	bgeu	r2,r22,c874 <__alt_mem_sram+0xf7e0c874>
    ca7c:	843fff84 	addi	r16,r16,-2
    ca80:	15c5883a 	add	r2,r2,r23
    ca84:	003f7c06 	br	c878 <__alt_mem_sram+0xf7e0c878>
    ca88:	2807883a 	mov	r3,r5
    ca8c:	003fd206 	br	c9d8 <__alt_mem_sram+0xf7e0c9d8>
    ca90:	102f883a 	mov	r23,r2
    ca94:	003fbc06 	br	c988 <__alt_mem_sram+0xf7e0c988>
    ca98:	843fff84 	addi	r16,r16,-2
    ca9c:	2489883a 	add	r4,r4,r18
    caa0:	003f2506 	br	c738 <__alt_mem_sram+0xf7e0c738>
    caa4:	843fff84 	addi	r16,r16,-2
    caa8:	1485883a 	add	r2,r2,r18
    caac:	003eca06 	br	c5d8 <__alt_mem_sram+0xf7e0c5d8>

0000cab0 <__umoddi3>:
    cab0:	defff404 	addi	sp,sp,-48
    cab4:	ddc00915 	stw	r23,36(sp)
    cab8:	dc400315 	stw	r17,12(sp)
    cabc:	dc000215 	stw	r16,8(sp)
    cac0:	dfc00b15 	stw	ra,44(sp)
    cac4:	df000a15 	stw	fp,40(sp)
    cac8:	dd800815 	stw	r22,32(sp)
    cacc:	dd400715 	stw	r21,28(sp)
    cad0:	dd000615 	stw	r20,24(sp)
    cad4:	dcc00515 	stw	r19,20(sp)
    cad8:	dc800415 	stw	r18,16(sp)
    cadc:	2021883a 	mov	r16,r4
    cae0:	2823883a 	mov	r17,r5
    cae4:	282f883a 	mov	r23,r5
    cae8:	3800381e 	bne	r7,zero,cbcc <__umoddi3+0x11c>
    caec:	3027883a 	mov	r19,r6
    caf0:	2029883a 	mov	r20,r4
    caf4:	29804e2e 	bgeu	r5,r6,cc30 <__umoddi3+0x180>
    caf8:	00bfffd4 	movui	r2,65535
    cafc:	11809c36 	bltu	r2,r6,cd70 <__umoddi3+0x2c0>
    cb00:	00803fc4 	movi	r2,255
    cb04:	11813b2e 	bgeu	r2,r6,cff4 <__umoddi3+0x544>
    cb08:	01400204 	movi	r5,8
    cb0c:	2805883a 	mov	r2,r5
    cb10:	314ad83a 	srl	r5,r6,r5
    cb14:	00c00074 	movhi	r3,1
    cb18:	18ca8b04 	addi	r3,r3,10796
    cb1c:	194b883a 	add	r5,r3,r5
    cb20:	29000003 	ldbu	r4,0(r5)
    cb24:	2089883a 	add	r4,r4,r2
    cb28:	00800804 	movi	r2,32
    cb2c:	1105c83a 	sub	r2,r2,r4
    cb30:	1000ec26 	beq	r2,zero,cee4 <__umoddi3+0x434>
    cb34:	88a2983a 	sll	r17,r17,r2
    cb38:	8108d83a 	srl	r4,r16,r4
    cb3c:	30a6983a 	sll	r19,r6,r2
    cb40:	80a8983a 	sll	r20,r16,r2
    cb44:	1025883a 	mov	r18,r2
    cb48:	892eb03a 	or	r23,r17,r4
    cb4c:	982cd43a 	srli	r22,r19,16
    cb50:	b809883a 	mov	r4,r23
    cb54:	9d7fffcc 	andi	r21,r19,65535
    cb58:	b00b883a 	mov	r5,r22
    cb5c:	000d1640 	call	d164 <__umodsi3>
    cb60:	b809883a 	mov	r4,r23
    cb64:	b00b883a 	mov	r5,r22
    cb68:	1021883a 	mov	r16,r2
    cb6c:	000d15c0 	call	d15c <__udivsi3>
    cb70:	8020943a 	slli	r16,r16,16
    cb74:	a00cd43a 	srli	r6,r20,16
    cb78:	1545383a 	mul	r2,r2,r21
    cb7c:	8188b03a 	or	r4,r16,r6
    cb80:	2080042e 	bgeu	r4,r2,cb94 <__umoddi3+0xe4>
    cb84:	24c9883a 	add	r4,r4,r19
    cb88:	24c00236 	bltu	r4,r19,cb94 <__umoddi3+0xe4>
    cb8c:	2080012e 	bgeu	r4,r2,cb94 <__umoddi3+0xe4>
    cb90:	24c9883a 	add	r4,r4,r19
    cb94:	20a3c83a 	sub	r17,r4,r2
    cb98:	8809883a 	mov	r4,r17
    cb9c:	b00b883a 	mov	r5,r22
    cba0:	000d1640 	call	d164 <__umodsi3>
    cba4:	8809883a 	mov	r4,r17
    cba8:	b00b883a 	mov	r5,r22
    cbac:	1021883a 	mov	r16,r2
    cbb0:	000d15c0 	call	d15c <__udivsi3>
    cbb4:	8006943a 	slli	r3,r16,16
    cbb8:	1545383a 	mul	r2,r2,r21
    cbbc:	a13fffcc 	andi	r4,r20,65535
    cbc0:	1906b03a 	or	r3,r3,r4
    cbc4:	1880532e 	bgeu	r3,r2,cd14 <__umoddi3+0x264>
    cbc8:	00004e06 	br	cd04 <__umoddi3+0x254>
    cbcc:	29c05536 	bltu	r5,r7,cd24 <__umoddi3+0x274>
    cbd0:	00bfffd4 	movui	r2,65535
    cbd4:	11c0612e 	bgeu	r2,r7,cd5c <__umoddi3+0x2ac>
    cbd8:	00804034 	movhi	r2,256
    cbdc:	10bfffc4 	addi	r2,r2,-1
    cbe0:	11c0f82e 	bgeu	r2,r7,cfc4 <__umoddi3+0x514>
    cbe4:	01400604 	movi	r5,24
    cbe8:	282b883a 	mov	r21,r5
    cbec:	394ad83a 	srl	r5,r7,r5
    cbf0:	00c00074 	movhi	r3,1
    cbf4:	18ca8b04 	addi	r3,r3,10796
    cbf8:	194b883a 	add	r5,r3,r5
    cbfc:	28800003 	ldbu	r2,0(r5)
    cc00:	00c00804 	movi	r3,32
    cc04:	156b883a 	add	r21,r2,r21
    cc08:	1d69c83a 	sub	r20,r3,r21
    cc0c:	a000631e 	bne	r20,zero,cd9c <__umoddi3+0x2ec>
    cc10:	3c400136 	bltu	r7,r17,cc18 <__umoddi3+0x168>
    cc14:	81810436 	bltu	r16,r6,d028 <__umoddi3+0x578>
    cc18:	8185c83a 	sub	r2,r16,r6
    cc1c:	89e3c83a 	sub	r17,r17,r7
    cc20:	8087803a 	cmpltu	r3,r16,r2
    cc24:	88efc83a 	sub	r23,r17,r3
    cc28:	b807883a 	mov	r3,r23
    cc2c:	00003f06 	br	cd2c <__umoddi3+0x27c>
    cc30:	3000041e 	bne	r6,zero,cc44 <__umoddi3+0x194>
    cc34:	01000044 	movi	r4,1
    cc38:	000b883a 	mov	r5,zero
    cc3c:	000d15c0 	call	d15c <__udivsi3>
    cc40:	1027883a 	mov	r19,r2
    cc44:	00bfffd4 	movui	r2,65535
    cc48:	14c04f2e 	bgeu	r2,r19,cd88 <__umoddi3+0x2d8>
    cc4c:	00804034 	movhi	r2,256
    cc50:	10bfffc4 	addi	r2,r2,-1
    cc54:	14c0e42e 	bgeu	r2,r19,cfe8 <__umoddi3+0x538>
    cc58:	00800604 	movi	r2,24
    cc5c:	1007883a 	mov	r3,r2
    cc60:	9884d83a 	srl	r2,r19,r2
    cc64:	01000074 	movhi	r4,1
    cc68:	210a8b04 	addi	r4,r4,10796
    cc6c:	2085883a 	add	r2,r4,r2
    cc70:	11000003 	ldbu	r4,0(r2)
    cc74:	00800804 	movi	r2,32
    cc78:	20c7883a 	add	r3,r4,r3
    cc7c:	10c5c83a 	sub	r2,r2,r3
    cc80:	10009a1e 	bne	r2,zero,ceec <__umoddi3+0x43c>
    cc84:	982cd43a 	srli	r22,r19,16
    cc88:	8ce3c83a 	sub	r17,r17,r19
    cc8c:	9c3fffcc 	andi	r16,r19,65535
    cc90:	0025883a 	mov	r18,zero
    cc94:	8809883a 	mov	r4,r17
    cc98:	b00b883a 	mov	r5,r22
    cc9c:	000d1640 	call	d164 <__umodsi3>
    cca0:	8809883a 	mov	r4,r17
    cca4:	b00b883a 	mov	r5,r22
    cca8:	102b883a 	mov	r21,r2
    ccac:	000d15c0 	call	d15c <__udivsi3>
    ccb0:	a806943a 	slli	r3,r21,16
    ccb4:	a008d43a 	srli	r4,r20,16
    ccb8:	1405383a 	mul	r2,r2,r16
    ccbc:	190cb03a 	or	r6,r3,r4
    ccc0:	3080032e 	bgeu	r6,r2,ccd0 <__umoddi3+0x220>
    ccc4:	34cd883a 	add	r6,r6,r19
    ccc8:	34c00136 	bltu	r6,r19,ccd0 <__umoddi3+0x220>
    cccc:	3080d436 	bltu	r6,r2,d020 <__umoddi3+0x570>
    ccd0:	30abc83a 	sub	r21,r6,r2
    ccd4:	a809883a 	mov	r4,r21
    ccd8:	b00b883a 	mov	r5,r22
    ccdc:	000d1640 	call	d164 <__umodsi3>
    cce0:	1023883a 	mov	r17,r2
    cce4:	a809883a 	mov	r4,r21
    cce8:	b00b883a 	mov	r5,r22
    ccec:	000d15c0 	call	d15c <__udivsi3>
    ccf0:	8822943a 	slli	r17,r17,16
    ccf4:	1405383a 	mul	r2,r2,r16
    ccf8:	a13fffcc 	andi	r4,r20,65535
    ccfc:	8906b03a 	or	r3,r17,r4
    cd00:	1880042e 	bgeu	r3,r2,cd14 <__umoddi3+0x264>
    cd04:	1cc7883a 	add	r3,r3,r19
    cd08:	1cc00236 	bltu	r3,r19,cd14 <__umoddi3+0x264>
    cd0c:	1880012e 	bgeu	r3,r2,cd14 <__umoddi3+0x264>
    cd10:	1cc7883a 	add	r3,r3,r19
    cd14:	1887c83a 	sub	r3,r3,r2
    cd18:	1c84d83a 	srl	r2,r3,r18
    cd1c:	0007883a 	mov	r3,zero
    cd20:	00000206 	br	cd2c <__umoddi3+0x27c>
    cd24:	2005883a 	mov	r2,r4
    cd28:	2807883a 	mov	r3,r5
    cd2c:	dfc00b17 	ldw	ra,44(sp)
    cd30:	df000a17 	ldw	fp,40(sp)
    cd34:	ddc00917 	ldw	r23,36(sp)
    cd38:	dd800817 	ldw	r22,32(sp)
    cd3c:	dd400717 	ldw	r21,28(sp)
    cd40:	dd000617 	ldw	r20,24(sp)
    cd44:	dcc00517 	ldw	r19,20(sp)
    cd48:	dc800417 	ldw	r18,16(sp)
    cd4c:	dc400317 	ldw	r17,12(sp)
    cd50:	dc000217 	ldw	r16,8(sp)
    cd54:	dec00c04 	addi	sp,sp,48
    cd58:	f800283a 	ret
    cd5c:	00803fc4 	movi	r2,255
    cd60:	11c0952e 	bgeu	r2,r7,cfb8 <__umoddi3+0x508>
    cd64:	01400204 	movi	r5,8
    cd68:	282b883a 	mov	r21,r5
    cd6c:	003f9f06 	br	cbec <__alt_mem_sram+0xf7e0cbec>
    cd70:	00804034 	movhi	r2,256
    cd74:	10bfffc4 	addi	r2,r2,-1
    cd78:	1180952e 	bgeu	r2,r6,cfd0 <__umoddi3+0x520>
    cd7c:	01400604 	movi	r5,24
    cd80:	2805883a 	mov	r2,r5
    cd84:	003f6206 	br	cb10 <__alt_mem_sram+0xf7e0cb10>
    cd88:	00803fc4 	movi	r2,255
    cd8c:	14c0932e 	bgeu	r2,r19,cfdc <__umoddi3+0x52c>
    cd90:	00800204 	movi	r2,8
    cd94:	1007883a 	mov	r3,r2
    cd98:	003fb106 	br	cc60 <__alt_mem_sram+0xf7e0cc60>
    cd9c:	3548d83a 	srl	r4,r6,r21
    cda0:	3d0e983a 	sll	r7,r7,r20
    cda4:	8d10983a 	sll	r8,r17,r20
    cda8:	8d6cd83a 	srl	r22,r17,r21
    cdac:	3922b03a 	or	r17,r7,r4
    cdb0:	882ed43a 	srli	r23,r17,16
    cdb4:	8564d83a 	srl	r18,r16,r21
    cdb8:	b009883a 	mov	r4,r22
    cdbc:	b80b883a 	mov	r5,r23
    cdc0:	44a4b03a 	or	r18,r8,r18
    cdc4:	3526983a 	sll	r19,r6,r20
    cdc8:	000d1640 	call	d164 <__umodsi3>
    cdcc:	b009883a 	mov	r4,r22
    cdd0:	b80b883a 	mov	r5,r23
    cdd4:	1039883a 	mov	fp,r2
    cdd8:	000d15c0 	call	d15c <__udivsi3>
    cddc:	102d883a 	mov	r22,r2
    cde0:	8a3fffcc 	andi	r8,r17,65535
    cde4:	e004943a 	slli	r2,fp,16
    cde8:	900cd43a 	srli	r6,r18,16
    cdec:	b239383a 	mul	fp,r22,r8
    cdf0:	8520983a 	sll	r16,r16,r20
    cdf4:	118ab03a 	or	r5,r2,r6
    cdf8:	2f00042e 	bgeu	r5,fp,ce0c <__umoddi3+0x35c>
    cdfc:	2c4b883a 	add	r5,r5,r17
    ce00:	b0bfffc4 	addi	r2,r22,-1
    ce04:	2c40822e 	bgeu	r5,r17,d010 <__umoddi3+0x560>
    ce08:	102d883a 	mov	r22,r2
    ce0c:	2f39c83a 	sub	fp,r5,fp
    ce10:	e009883a 	mov	r4,fp
    ce14:	b80b883a 	mov	r5,r23
    ce18:	da000115 	stw	r8,4(sp)
    ce1c:	000d1640 	call	d164 <__umodsi3>
    ce20:	e009883a 	mov	r4,fp
    ce24:	b80b883a 	mov	r5,r23
    ce28:	d8800015 	stw	r2,0(sp)
    ce2c:	000d15c0 	call	d15c <__udivsi3>
    ce30:	d9800017 	ldw	r6,0(sp)
    ce34:	da000117 	ldw	r8,4(sp)
    ce38:	94bfffcc 	andi	r18,r18,65535
    ce3c:	300c943a 	slli	r6,r6,16
    ce40:	1209383a 	mul	r4,r2,r8
    ce44:	3490b03a 	or	r8,r6,r18
    ce48:	4100042e 	bgeu	r8,r4,ce5c <__umoddi3+0x3ac>
    ce4c:	4451883a 	add	r8,r8,r17
    ce50:	10ffffc4 	addi	r3,r2,-1
    ce54:	44406a2e 	bgeu	r8,r17,d000 <__umoddi3+0x550>
    ce58:	1805883a 	mov	r2,r3
    ce5c:	b012943a 	slli	r9,r22,16
    ce60:	9abfffcc 	andi	r10,r19,65535
    ce64:	980ed43a 	srli	r7,r19,16
    ce68:	124ab03a 	or	r5,r2,r9
    ce6c:	2a7fffcc 	andi	r9,r5,65535
    ce70:	280ad43a 	srli	r5,r5,16
    ce74:	4a8d383a 	mul	r6,r9,r10
    ce78:	49d3383a 	mul	r9,r9,r7
    ce7c:	2a95383a 	mul	r10,r5,r10
    ce80:	3004d43a 	srli	r2,r6,16
    ce84:	4111c83a 	sub	r8,r8,r4
    ce88:	5253883a 	add	r9,r10,r9
    ce8c:	4893883a 	add	r9,r9,r2
    ce90:	29cb383a 	mul	r5,r5,r7
    ce94:	4a80022e 	bgeu	r9,r10,cea0 <__umoddi3+0x3f0>
    ce98:	00800074 	movhi	r2,1
    ce9c:	288b883a 	add	r5,r5,r2
    cea0:	4808d43a 	srli	r4,r9,16
    cea4:	4812943a 	slli	r9,r9,16
    cea8:	31bfffcc 	andi	r6,r6,65535
    ceac:	290b883a 	add	r5,r5,r4
    ceb0:	498d883a 	add	r6,r9,r6
    ceb4:	41403a36 	bltu	r8,r5,cfa0 <__umoddi3+0x4f0>
    ceb8:	41405d26 	beq	r8,r5,d030 <__umoddi3+0x580>
    cebc:	4149c83a 	sub	r4,r8,r5
    cec0:	300f883a 	mov	r7,r6
    cec4:	81cfc83a 	sub	r7,r16,r7
    cec8:	81c7803a 	cmpltu	r3,r16,r7
    cecc:	20c7c83a 	sub	r3,r4,r3
    ced0:	1d44983a 	sll	r2,r3,r21
    ced4:	3d0ed83a 	srl	r7,r7,r20
    ced8:	1d06d83a 	srl	r3,r3,r20
    cedc:	11c4b03a 	or	r2,r2,r7
    cee0:	003f9206 	br	cd2c <__alt_mem_sram+0xf7e0cd2c>
    cee4:	0025883a 	mov	r18,zero
    cee8:	003f1806 	br	cb4c <__alt_mem_sram+0xf7e0cb4c>
    ceec:	98a6983a 	sll	r19,r19,r2
    cef0:	88e8d83a 	srl	r20,r17,r3
    cef4:	80c6d83a 	srl	r3,r16,r3
    cef8:	982cd43a 	srli	r22,r19,16
    cefc:	88a2983a 	sll	r17,r17,r2
    cf00:	a009883a 	mov	r4,r20
    cf04:	b00b883a 	mov	r5,r22
    cf08:	88eab03a 	or	r21,r17,r3
    cf0c:	1025883a 	mov	r18,r2
    cf10:	000d1640 	call	d164 <__umodsi3>
    cf14:	a009883a 	mov	r4,r20
    cf18:	b00b883a 	mov	r5,r22
    cf1c:	1023883a 	mov	r17,r2
    cf20:	000d15c0 	call	d15c <__udivsi3>
    cf24:	9f3fffcc 	andi	fp,r19,65535
    cf28:	8822943a 	slli	r17,r17,16
    cf2c:	a80ad43a 	srli	r5,r21,16
    cf30:	1705383a 	mul	r2,r2,fp
    cf34:	84a8983a 	sll	r20,r16,r18
    cf38:	8948b03a 	or	r4,r17,r5
    cf3c:	2080042e 	bgeu	r4,r2,cf50 <__umoddi3+0x4a0>
    cf40:	24c9883a 	add	r4,r4,r19
    cf44:	24c00236 	bltu	r4,r19,cf50 <__umoddi3+0x4a0>
    cf48:	2080012e 	bgeu	r4,r2,cf50 <__umoddi3+0x4a0>
    cf4c:	24c9883a 	add	r4,r4,r19
    cf50:	20afc83a 	sub	r23,r4,r2
    cf54:	b809883a 	mov	r4,r23
    cf58:	b00b883a 	mov	r5,r22
    cf5c:	000d1640 	call	d164 <__umodsi3>
    cf60:	1023883a 	mov	r17,r2
    cf64:	b809883a 	mov	r4,r23
    cf68:	b00b883a 	mov	r5,r22
    cf6c:	000d15c0 	call	d15c <__udivsi3>
    cf70:	8822943a 	slli	r17,r17,16
    cf74:	1705383a 	mul	r2,r2,fp
    cf78:	a93fffcc 	andi	r4,r21,65535
    cf7c:	8908b03a 	or	r4,r17,r4
    cf80:	2080042e 	bgeu	r4,r2,cf94 <__umoddi3+0x4e4>
    cf84:	24c9883a 	add	r4,r4,r19
    cf88:	24c00236 	bltu	r4,r19,cf94 <__umoddi3+0x4e4>
    cf8c:	2080012e 	bgeu	r4,r2,cf94 <__umoddi3+0x4e4>
    cf90:	24c9883a 	add	r4,r4,r19
    cf94:	20a3c83a 	sub	r17,r4,r2
    cf98:	e021883a 	mov	r16,fp
    cf9c:	003f3d06 	br	cc94 <__alt_mem_sram+0xf7e0cc94>
    cfa0:	34cfc83a 	sub	r7,r6,r19
    cfa4:	2c4bc83a 	sub	r5,r5,r17
    cfa8:	31cd803a 	cmpltu	r6,r6,r7
    cfac:	298dc83a 	sub	r6,r5,r6
    cfb0:	4189c83a 	sub	r4,r8,r6
    cfb4:	003fc306 	br	cec4 <__alt_mem_sram+0xf7e0cec4>
    cfb8:	000b883a 	mov	r5,zero
    cfbc:	002b883a 	mov	r21,zero
    cfc0:	003f0a06 	br	cbec <__alt_mem_sram+0xf7e0cbec>
    cfc4:	01400404 	movi	r5,16
    cfc8:	282b883a 	mov	r21,r5
    cfcc:	003f0706 	br	cbec <__alt_mem_sram+0xf7e0cbec>
    cfd0:	01400404 	movi	r5,16
    cfd4:	2805883a 	mov	r2,r5
    cfd8:	003ecd06 	br	cb10 <__alt_mem_sram+0xf7e0cb10>
    cfdc:	0005883a 	mov	r2,zero
    cfe0:	0007883a 	mov	r3,zero
    cfe4:	003f1e06 	br	cc60 <__alt_mem_sram+0xf7e0cc60>
    cfe8:	00800404 	movi	r2,16
    cfec:	1007883a 	mov	r3,r2
    cff0:	003f1b06 	br	cc60 <__alt_mem_sram+0xf7e0cc60>
    cff4:	000b883a 	mov	r5,zero
    cff8:	0005883a 	mov	r2,zero
    cffc:	003ec406 	br	cb10 <__alt_mem_sram+0xf7e0cb10>
    d000:	413f952e 	bgeu	r8,r4,ce58 <__alt_mem_sram+0xf7e0ce58>
    d004:	10bfff84 	addi	r2,r2,-2
    d008:	4451883a 	add	r8,r8,r17
    d00c:	003f9306 	br	ce5c <__alt_mem_sram+0xf7e0ce5c>
    d010:	2f3f7d2e 	bgeu	r5,fp,ce08 <__alt_mem_sram+0xf7e0ce08>
    d014:	b5bfff84 	addi	r22,r22,-2
    d018:	2c4b883a 	add	r5,r5,r17
    d01c:	003f7b06 	br	ce0c <__alt_mem_sram+0xf7e0ce0c>
    d020:	34cd883a 	add	r6,r6,r19
    d024:	003f2a06 	br	ccd0 <__alt_mem_sram+0xf7e0ccd0>
    d028:	8005883a 	mov	r2,r16
    d02c:	003efe06 	br	cc28 <__alt_mem_sram+0xf7e0cc28>
    d030:	81bfdb36 	bltu	r16,r6,cfa0 <__alt_mem_sram+0xf7e0cfa0>
    d034:	300f883a 	mov	r7,r6
    d038:	0009883a 	mov	r4,zero
    d03c:	003fa106 	br	cec4 <__alt_mem_sram+0xf7e0cec4>

0000d040 <udivmodsi4>:
    d040:	2900182e 	bgeu	r5,r4,d0a4 <udivmodsi4+0x64>
    d044:	28001716 	blt	r5,zero,d0a4 <udivmodsi4+0x64>
    d048:	00800804 	movi	r2,32
    d04c:	00c00044 	movi	r3,1
    d050:	00000206 	br	d05c <udivmodsi4+0x1c>
    d054:	10001126 	beq	r2,zero,d09c <udivmodsi4+0x5c>
    d058:	28000516 	blt	r5,zero,d070 <udivmodsi4+0x30>
    d05c:	294b883a 	add	r5,r5,r5
    d060:	10bfffc4 	addi	r2,r2,-1
    d064:	18c7883a 	add	r3,r3,r3
    d068:	293ffa36 	bltu	r5,r4,d054 <__alt_mem_sram+0xf7e0d054>
    d06c:	18000b26 	beq	r3,zero,d09c <udivmodsi4+0x5c>
    d070:	0005883a 	mov	r2,zero
    d074:	21400236 	bltu	r4,r5,d080 <udivmodsi4+0x40>
    d078:	2149c83a 	sub	r4,r4,r5
    d07c:	10c4b03a 	or	r2,r2,r3
    d080:	1806d07a 	srli	r3,r3,1
    d084:	280ad07a 	srli	r5,r5,1
    d088:	183ffa1e 	bne	r3,zero,d074 <__alt_mem_sram+0xf7e0d074>
    d08c:	3000011e 	bne	r6,zero,d094 <udivmodsi4+0x54>
    d090:	f800283a 	ret
    d094:	2005883a 	mov	r2,r4
    d098:	f800283a 	ret
    d09c:	0005883a 	mov	r2,zero
    d0a0:	003ffa06 	br	d08c <__alt_mem_sram+0xf7e0d08c>
    d0a4:	00c00044 	movi	r3,1
    d0a8:	003ff106 	br	d070 <__alt_mem_sram+0xf7e0d070>

0000d0ac <__divsi3>:
    d0ac:	defffe04 	addi	sp,sp,-8
    d0b0:	dfc00115 	stw	ra,4(sp)
    d0b4:	dc000015 	stw	r16,0(sp)
    d0b8:	20000b16 	blt	r4,zero,d0e8 <__divsi3+0x3c>
    d0bc:	0021883a 	mov	r16,zero
    d0c0:	28000c16 	blt	r5,zero,d0f4 <__divsi3+0x48>
    d0c4:	000d883a 	mov	r6,zero
    d0c8:	000d0400 	call	d040 <udivmodsi4>
    d0cc:	0407c83a 	sub	r3,zero,r16
    d0d0:	1884f03a 	xor	r2,r3,r2
    d0d4:	1405883a 	add	r2,r2,r16
    d0d8:	dfc00117 	ldw	ra,4(sp)
    d0dc:	dc000017 	ldw	r16,0(sp)
    d0e0:	dec00204 	addi	sp,sp,8
    d0e4:	f800283a 	ret
    d0e8:	0109c83a 	sub	r4,zero,r4
    d0ec:	04000044 	movi	r16,1
    d0f0:	283ff40e 	bge	r5,zero,d0c4 <__alt_mem_sram+0xf7e0d0c4>
    d0f4:	014bc83a 	sub	r5,zero,r5
    d0f8:	8400005c 	xori	r16,r16,1
    d0fc:	003ff106 	br	d0c4 <__alt_mem_sram+0xf7e0d0c4>

0000d100 <__modsi3>:
    d100:	defffd04 	addi	sp,sp,-12
    d104:	dfc00215 	stw	ra,8(sp)
    d108:	dc400115 	stw	r17,4(sp)
    d10c:	dc000015 	stw	r16,0(sp)
    d110:	20000c16 	blt	r4,zero,d144 <__modsi3+0x44>
    d114:	0023883a 	mov	r17,zero
    d118:	0021883a 	mov	r16,zero
    d11c:	28000d16 	blt	r5,zero,d154 <__modsi3+0x54>
    d120:	01800044 	movi	r6,1
    d124:	000d0400 	call	d040 <udivmodsi4>
    d128:	1404f03a 	xor	r2,r2,r16
    d12c:	8885883a 	add	r2,r17,r2
    d130:	dfc00217 	ldw	ra,8(sp)
    d134:	dc400117 	ldw	r17,4(sp)
    d138:	dc000017 	ldw	r16,0(sp)
    d13c:	dec00304 	addi	sp,sp,12
    d140:	f800283a 	ret
    d144:	0109c83a 	sub	r4,zero,r4
    d148:	04400044 	movi	r17,1
    d14c:	043fffc4 	movi	r16,-1
    d150:	283ff30e 	bge	r5,zero,d120 <__alt_mem_sram+0xf7e0d120>
    d154:	014bc83a 	sub	r5,zero,r5
    d158:	003ff106 	br	d120 <__alt_mem_sram+0xf7e0d120>

0000d15c <__udivsi3>:
    d15c:	000d883a 	mov	r6,zero
    d160:	000d0401 	jmpi	d040 <udivmodsi4>

0000d164 <__umodsi3>:
    d164:	01800044 	movi	r6,1
    d168:	000d0401 	jmpi	d040 <udivmodsi4>

0000d16c <__adddf3>:
    d16c:	02000434 	movhi	r8,16
    d170:	423fffc4 	addi	r8,r8,-1
    d174:	defffb04 	addi	sp,sp,-20
    d178:	2a12703a 	and	r9,r5,r8
    d17c:	2806d7fa 	srli	r3,r5,31
    d180:	3a10703a 	and	r8,r7,r8
    d184:	3804d53a 	srli	r2,r7,20
    d188:	3014d77a 	srli	r10,r6,29
    d18c:	dc000015 	stw	r16,0(sp)
    d190:	481290fa 	slli	r9,r9,3
    d194:	2820d53a 	srli	r16,r5,20
    d198:	401090fa 	slli	r8,r8,3
    d19c:	200ad77a 	srli	r5,r4,29
    d1a0:	380ed7fa 	srli	r7,r7,31
    d1a4:	dc800215 	stw	r18,8(sp)
    d1a8:	dc400115 	stw	r17,4(sp)
    d1ac:	dfc00415 	stw	ra,16(sp)
    d1b0:	dcc00315 	stw	r19,12(sp)
    d1b4:	1c803fcc 	andi	r18,r3,255
    d1b8:	8401ffcc 	andi	r16,r16,2047
    d1bc:	494ab03a 	or	r5,r9,r5
    d1c0:	202290fa 	slli	r17,r4,3
    d1c4:	1081ffcc 	andi	r2,r2,2047
    d1c8:	4290b03a 	or	r8,r8,r10
    d1cc:	300c90fa 	slli	r6,r6,3
    d1d0:	91c07026 	beq	r18,r7,d394 <__adddf3+0x228>
    d1d4:	8087c83a 	sub	r3,r16,r2
    d1d8:	00c0b30e 	bge	zero,r3,d4a8 <__adddf3+0x33c>
    d1dc:	10002a1e 	bne	r2,zero,d288 <__adddf3+0x11c>
    d1e0:	4184b03a 	or	r2,r8,r6
    d1e4:	1000991e 	bne	r2,zero,d44c <__adddf3+0x2e0>
    d1e8:	888001cc 	andi	r2,r17,7
    d1ec:	10005b26 	beq	r2,zero,d35c <__adddf3+0x1f0>
    d1f0:	88c003cc 	andi	r3,r17,15
    d1f4:	00800104 	movi	r2,4
    d1f8:	18805826 	beq	r3,r2,d35c <__adddf3+0x1f0>
    d1fc:	89800104 	addi	r6,r17,4
    d200:	3463803a 	cmpltu	r17,r6,r17
    d204:	2c4b883a 	add	r5,r5,r17
    d208:	2880202c 	andhi	r2,r5,128
    d20c:	9007883a 	mov	r3,r18
    d210:	3023883a 	mov	r17,r6
    d214:	10005426 	beq	r2,zero,d368 <__adddf3+0x1fc>
    d218:	84000044 	addi	r16,r16,1
    d21c:	0081ffc4 	movi	r2,2047
    d220:	8080c126 	beq	r16,r2,d528 <__adddf3+0x3bc>
    d224:	013fe034 	movhi	r4,65408
    d228:	213fffc4 	addi	r4,r4,-1
    d22c:	290a703a 	and	r5,r5,r4
    d230:	2804977a 	slli	r2,r5,29
    d234:	280a927a 	slli	r5,r5,9
    d238:	8822d0fa 	srli	r17,r17,3
    d23c:	8401ffcc 	andi	r16,r16,2047
    d240:	2808d33a 	srli	r4,r5,12
    d244:	1444b03a 	or	r2,r2,r17
    d248:	8401ffcc 	andi	r16,r16,2047
    d24c:	800a953a 	slli	r5,r16,20
    d250:	18c03fcc 	andi	r3,r3,255
    d254:	04000434 	movhi	r16,16
    d258:	180697fa 	slli	r3,r3,31
    d25c:	843fffc4 	addi	r16,r16,-1
    d260:	2420703a 	and	r16,r4,r16
    d264:	8160b03a 	or	r16,r16,r5
    d268:	80c6b03a 	or	r3,r16,r3
    d26c:	dfc00417 	ldw	ra,16(sp)
    d270:	dcc00317 	ldw	r19,12(sp)
    d274:	dc800217 	ldw	r18,8(sp)
    d278:	dc400117 	ldw	r17,4(sp)
    d27c:	dc000017 	ldw	r16,0(sp)
    d280:	dec00504 	addi	sp,sp,20
    d284:	f800283a 	ret
    d288:	0081ffc4 	movi	r2,2047
    d28c:	80bfd626 	beq	r16,r2,d1e8 <__alt_mem_sram+0xf7e0d1e8>
    d290:	42002034 	orhi	r8,r8,128
    d294:	00800e04 	movi	r2,56
    d298:	10c0a616 	blt	r2,r3,d534 <__adddf3+0x3c8>
    d29c:	008007c4 	movi	r2,31
    d2a0:	10c0c916 	blt	r2,r3,d5c8 <__adddf3+0x45c>
    d2a4:	00800804 	movi	r2,32
    d2a8:	10c5c83a 	sub	r2,r2,r3
    d2ac:	408e983a 	sll	r7,r8,r2
    d2b0:	30c8d83a 	srl	r4,r6,r3
    d2b4:	3084983a 	sll	r2,r6,r2
    d2b8:	40c6d83a 	srl	r3,r8,r3
    d2bc:	390cb03a 	or	r6,r7,r4
    d2c0:	1004c03a 	cmpne	r2,r2,zero
    d2c4:	308cb03a 	or	r6,r6,r2
    d2c8:	898dc83a 	sub	r6,r17,r6
    d2cc:	89a3803a 	cmpltu	r17,r17,r6
    d2d0:	28cbc83a 	sub	r5,r5,r3
    d2d4:	2c4bc83a 	sub	r5,r5,r17
    d2d8:	3023883a 	mov	r17,r6
    d2dc:	2880202c 	andhi	r2,r5,128
    d2e0:	10006d26 	beq	r2,zero,d498 <__adddf3+0x32c>
    d2e4:	04c02034 	movhi	r19,128
    d2e8:	9cffffc4 	addi	r19,r19,-1
    d2ec:	2ce6703a 	and	r19,r5,r19
    d2f0:	98007e26 	beq	r19,zero,d4ec <__adddf3+0x380>
    d2f4:	9809883a 	mov	r4,r19
    d2f8:	000f7080 	call	f708 <__clzsi2>
    d2fc:	10fffe04 	addi	r3,r2,-8
    d300:	010007c4 	movi	r4,31
    d304:	20c07f16 	blt	r4,r3,d504 <__adddf3+0x398>
    d308:	01400a04 	movi	r5,40
    d30c:	2885c83a 	sub	r2,r5,r2
    d310:	888ad83a 	srl	r5,r17,r2
    d314:	98e6983a 	sll	r19,r19,r3
    d318:	88e2983a 	sll	r17,r17,r3
    d31c:	2ce6b03a 	or	r19,r5,r19
    d320:	1c007c16 	blt	r3,r16,d514 <__adddf3+0x3a8>
    d324:	1c21c83a 	sub	r16,r3,r16
    d328:	81400044 	addi	r5,r16,1
    d32c:	00c007c4 	movi	r3,31
    d330:	19409816 	blt	r3,r5,d594 <__adddf3+0x428>
    d334:	1c21c83a 	sub	r16,r3,r16
    d338:	8c08983a 	sll	r4,r17,r16
    d33c:	8946d83a 	srl	r3,r17,r5
    d340:	9c20983a 	sll	r16,r19,r16
    d344:	2008c03a 	cmpne	r4,r4,zero
    d348:	994ad83a 	srl	r5,r19,r5
    d34c:	1c06b03a 	or	r3,r3,r16
    d350:	1922b03a 	or	r17,r3,r4
    d354:	0021883a 	mov	r16,zero
    d358:	003fa306 	br	d1e8 <__alt_mem_sram+0xf7e0d1e8>
    d35c:	2880202c 	andhi	r2,r5,128
    d360:	9007883a 	mov	r3,r18
    d364:	103fac1e 	bne	r2,zero,d218 <__alt_mem_sram+0xf7e0d218>
    d368:	2804977a 	slli	r2,r5,29
    d36c:	8822d0fa 	srli	r17,r17,3
    d370:	0101ffc4 	movi	r4,2047
    d374:	280ad0fa 	srli	r5,r5,3
    d378:	1444b03a 	or	r2,r2,r17
    d37c:	81002c26 	beq	r16,r4,d430 <__adddf3+0x2c4>
    d380:	8120703a 	and	r16,r16,r4
    d384:	01000434 	movhi	r4,16
    d388:	213fffc4 	addi	r4,r4,-1
    d38c:	2908703a 	and	r4,r5,r4
    d390:	003fad06 	br	d248 <__alt_mem_sram+0xf7e0d248>
    d394:	8089c83a 	sub	r4,r16,r2
    d398:	01006a0e 	bge	zero,r4,d544 <__adddf3+0x3d8>
    d39c:	10003326 	beq	r2,zero,d46c <__adddf3+0x300>
    d3a0:	0081ffc4 	movi	r2,2047
    d3a4:	80bf9026 	beq	r16,r2,d1e8 <__alt_mem_sram+0xf7e0d1e8>
    d3a8:	42002034 	orhi	r8,r8,128
    d3ac:	00800e04 	movi	r2,56
    d3b0:	1100b116 	blt	r2,r4,d678 <__adddf3+0x50c>
    d3b4:	008007c4 	movi	r2,31
    d3b8:	1100e216 	blt	r2,r4,d744 <__adddf3+0x5d8>
    d3bc:	00800804 	movi	r2,32
    d3c0:	1105c83a 	sub	r2,r2,r4
    d3c4:	4092983a 	sll	r9,r8,r2
    d3c8:	310ed83a 	srl	r7,r6,r4
    d3cc:	3084983a 	sll	r2,r6,r2
    d3d0:	4110d83a 	srl	r8,r8,r4
    d3d4:	49ccb03a 	or	r6,r9,r7
    d3d8:	1004c03a 	cmpne	r2,r2,zero
    d3dc:	308cb03a 	or	r6,r6,r2
    d3e0:	344d883a 	add	r6,r6,r17
    d3e4:	3463803a 	cmpltu	r17,r6,r17
    d3e8:	414b883a 	add	r5,r8,r5
    d3ec:	2c4b883a 	add	r5,r5,r17
    d3f0:	3023883a 	mov	r17,r6
    d3f4:	2880202c 	andhi	r2,r5,128
    d3f8:	10002726 	beq	r2,zero,d498 <__adddf3+0x32c>
    d3fc:	84000044 	addi	r16,r16,1
    d400:	0081ffc4 	movi	r2,2047
    d404:	8080ae26 	beq	r16,r2,d6c0 <__adddf3+0x554>
    d408:	00bfe034 	movhi	r2,65408
    d40c:	10bfffc4 	addi	r2,r2,-1
    d410:	288a703a 	and	r5,r5,r2
    d414:	880cd07a 	srli	r6,r17,1
    d418:	280897fa 	slli	r4,r5,31
    d41c:	88c0004c 	andi	r3,r17,1
    d420:	30e2b03a 	or	r17,r6,r3
    d424:	280ad07a 	srli	r5,r5,1
    d428:	8922b03a 	or	r17,r17,r4
    d42c:	003f6e06 	br	d1e8 <__alt_mem_sram+0xf7e0d1e8>
    d430:	1148b03a 	or	r4,r2,r5
    d434:	20003c26 	beq	r4,zero,d528 <__adddf3+0x3bc>
    d438:	29000234 	orhi	r4,r5,8
    d43c:	01400434 	movhi	r5,16
    d440:	297fffc4 	addi	r5,r5,-1
    d444:	2148703a 	and	r4,r4,r5
    d448:	003f7f06 	br	d248 <__alt_mem_sram+0xf7e0d248>
    d44c:	18ffffc4 	addi	r3,r3,-1
    d450:	18004d1e 	bne	r3,zero,d588 <__adddf3+0x41c>
    d454:	898dc83a 	sub	r6,r17,r6
    d458:	89a3803a 	cmpltu	r17,r17,r6
    d45c:	2a0bc83a 	sub	r5,r5,r8
    d460:	2c4bc83a 	sub	r5,r5,r17
    d464:	3023883a 	mov	r17,r6
    d468:	003f9c06 	br	d2dc <__alt_mem_sram+0xf7e0d2dc>
    d46c:	4184b03a 	or	r2,r8,r6
    d470:	103f5d26 	beq	r2,zero,d1e8 <__alt_mem_sram+0xf7e0d1e8>
    d474:	213fffc4 	addi	r4,r4,-1
    d478:	203fd926 	beq	r4,zero,d3e0 <__alt_mem_sram+0xf7e0d3e0>
    d47c:	0081ffc4 	movi	r2,2047
    d480:	80bfca1e 	bne	r16,r2,d3ac <__alt_mem_sram+0xf7e0d3ac>
    d484:	003f5806 	br	d1e8 <__alt_mem_sram+0xf7e0d1e8>
    d488:	10c8b03a 	or	r4,r2,r3
    d48c:	20008b26 	beq	r4,zero,d6bc <__adddf3+0x550>
    d490:	100b883a 	mov	r5,r2
    d494:	1823883a 	mov	r17,r3
    d498:	888001cc 	andi	r2,r17,7
    d49c:	103f541e 	bne	r2,zero,d1f0 <__alt_mem_sram+0xf7e0d1f0>
    d4a0:	9007883a 	mov	r3,r18
    d4a4:	003fb006 	br	d368 <__alt_mem_sram+0xf7e0d368>
    d4a8:	1800531e 	bne	r3,zero,d5f8 <__adddf3+0x48c>
    d4ac:	80800044 	addi	r2,r16,1
    d4b0:	1081ffcc 	andi	r2,r2,2047
    d4b4:	00c00044 	movi	r3,1
    d4b8:	1880990e 	bge	r3,r2,d720 <__adddf3+0x5b4>
    d4bc:	8985c83a 	sub	r2,r17,r6
    d4c0:	8887803a 	cmpltu	r3,r17,r2
    d4c4:	2a27c83a 	sub	r19,r5,r8
    d4c8:	98e7c83a 	sub	r19,r19,r3
    d4cc:	98c0202c 	andhi	r3,r19,128
    d4d0:	18006226 	beq	r3,zero,d65c <__adddf3+0x4f0>
    d4d4:	3463c83a 	sub	r17,r6,r17
    d4d8:	4151c83a 	sub	r8,r8,r5
    d4dc:	344d803a 	cmpltu	r6,r6,r17
    d4e0:	41a7c83a 	sub	r19,r8,r6
    d4e4:	3825883a 	mov	r18,r7
    d4e8:	983f821e 	bne	r19,zero,d2f4 <__alt_mem_sram+0xf7e0d2f4>
    d4ec:	8809883a 	mov	r4,r17
    d4f0:	000f7080 	call	f708 <__clzsi2>
    d4f4:	10800804 	addi	r2,r2,32
    d4f8:	10fffe04 	addi	r3,r2,-8
    d4fc:	010007c4 	movi	r4,31
    d500:	20ff810e 	bge	r4,r3,d308 <__alt_mem_sram+0xf7e0d308>
    d504:	14fff604 	addi	r19,r2,-40
    d508:	8ce6983a 	sll	r19,r17,r19
    d50c:	0023883a 	mov	r17,zero
    d510:	1c3f840e 	bge	r3,r16,d324 <__alt_mem_sram+0xf7e0d324>
    d514:	017fe034 	movhi	r5,65408
    d518:	297fffc4 	addi	r5,r5,-1
    d51c:	80e1c83a 	sub	r16,r16,r3
    d520:	994a703a 	and	r5,r19,r5
    d524:	003f3006 	br	d1e8 <__alt_mem_sram+0xf7e0d1e8>
    d528:	0009883a 	mov	r4,zero
    d52c:	0005883a 	mov	r2,zero
    d530:	003f4506 	br	d248 <__alt_mem_sram+0xf7e0d248>
    d534:	418cb03a 	or	r6,r8,r6
    d538:	300cc03a 	cmpne	r6,r6,zero
    d53c:	0007883a 	mov	r3,zero
    d540:	003f6106 	br	d2c8 <__alt_mem_sram+0xf7e0d2c8>
    d544:	2000921e 	bne	r4,zero,d790 <__adddf3+0x624>
    d548:	80800044 	addi	r2,r16,1
    d54c:	11c1ffcc 	andi	r7,r2,2047
    d550:	01000044 	movi	r4,1
    d554:	21c0610e 	bge	r4,r7,d6dc <__adddf3+0x570>
    d558:	0101ffc4 	movi	r4,2047
    d55c:	1100a326 	beq	r2,r4,d7ec <__adddf3+0x680>
    d560:	344d883a 	add	r6,r6,r17
    d564:	3463803a 	cmpltu	r17,r6,r17
    d568:	414b883a 	add	r5,r8,r5
    d56c:	2c4b883a 	add	r5,r5,r17
    d570:	282297fa 	slli	r17,r5,31
    d574:	300cd07a 	srli	r6,r6,1
    d578:	280ad07a 	srli	r5,r5,1
    d57c:	1021883a 	mov	r16,r2
    d580:	89a2b03a 	or	r17,r17,r6
    d584:	003f1806 	br	d1e8 <__alt_mem_sram+0xf7e0d1e8>
    d588:	0081ffc4 	movi	r2,2047
    d58c:	80bf411e 	bne	r16,r2,d294 <__alt_mem_sram+0xf7e0d294>
    d590:	003f1506 	br	d1e8 <__alt_mem_sram+0xf7e0d1e8>
    d594:	80bff844 	addi	r2,r16,-31
    d598:	00c00804 	movi	r3,32
    d59c:	9884d83a 	srl	r2,r19,r2
    d5a0:	28c04a26 	beq	r5,r3,d6cc <__adddf3+0x560>
    d5a4:	00c00fc4 	movi	r3,63
    d5a8:	1c21c83a 	sub	r16,r3,r16
    d5ac:	9c26983a 	sll	r19,r19,r16
    d5b0:	9c62b03a 	or	r17,r19,r17
    d5b4:	8822c03a 	cmpne	r17,r17,zero
    d5b8:	88a2b03a 	or	r17,r17,r2
    d5bc:	000b883a 	mov	r5,zero
    d5c0:	0021883a 	mov	r16,zero
    d5c4:	003fb406 	br	d498 <__alt_mem_sram+0xf7e0d498>
    d5c8:	18bff804 	addi	r2,r3,-32
    d5cc:	01000804 	movi	r4,32
    d5d0:	4084d83a 	srl	r2,r8,r2
    d5d4:	19003f26 	beq	r3,r4,d6d4 <__adddf3+0x568>
    d5d8:	01001004 	movi	r4,64
    d5dc:	20c7c83a 	sub	r3,r4,r3
    d5e0:	40d0983a 	sll	r8,r8,r3
    d5e4:	418cb03a 	or	r6,r8,r6
    d5e8:	300cc03a 	cmpne	r6,r6,zero
    d5ec:	308cb03a 	or	r6,r6,r2
    d5f0:	0007883a 	mov	r3,zero
    d5f4:	003f3406 	br	d2c8 <__alt_mem_sram+0xf7e0d2c8>
    d5f8:	80002326 	beq	r16,zero,d688 <__adddf3+0x51c>
    d5fc:	0101ffc4 	movi	r4,2047
    d600:	11005e26 	beq	r2,r4,d77c <__adddf3+0x610>
    d604:	00c7c83a 	sub	r3,zero,r3
    d608:	29402034 	orhi	r5,r5,128
    d60c:	01000e04 	movi	r4,56
    d610:	20c07216 	blt	r4,r3,d7dc <__adddf3+0x670>
    d614:	010007c4 	movi	r4,31
    d618:	20c0ce16 	blt	r4,r3,d954 <__adddf3+0x7e8>
    d61c:	01000804 	movi	r4,32
    d620:	20c9c83a 	sub	r4,r4,r3
    d624:	2914983a 	sll	r10,r5,r4
    d628:	88d2d83a 	srl	r9,r17,r3
    d62c:	8908983a 	sll	r4,r17,r4
    d630:	28c6d83a 	srl	r3,r5,r3
    d634:	5262b03a 	or	r17,r10,r9
    d638:	2008c03a 	cmpne	r4,r4,zero
    d63c:	8922b03a 	or	r17,r17,r4
    d640:	3463c83a 	sub	r17,r6,r17
    d644:	40c7c83a 	sub	r3,r8,r3
    d648:	344d803a 	cmpltu	r6,r6,r17
    d64c:	198bc83a 	sub	r5,r3,r6
    d650:	1021883a 	mov	r16,r2
    d654:	3825883a 	mov	r18,r7
    d658:	003f2006 	br	d2dc <__alt_mem_sram+0xf7e0d2dc>
    d65c:	9886b03a 	or	r3,r19,r2
    d660:	1800141e 	bne	r3,zero,d6b4 <__adddf3+0x548>
    d664:	0007883a 	mov	r3,zero
    d668:	000b883a 	mov	r5,zero
    d66c:	0023883a 	mov	r17,zero
    d670:	0021883a 	mov	r16,zero
    d674:	003f3c06 	br	d368 <__alt_mem_sram+0xf7e0d368>
    d678:	418cb03a 	or	r6,r8,r6
    d67c:	300cc03a 	cmpne	r6,r6,zero
    d680:	0011883a 	mov	r8,zero
    d684:	003f5606 	br	d3e0 <__alt_mem_sram+0xf7e0d3e0>
    d688:	2c48b03a 	or	r4,r5,r17
    d68c:	20003b26 	beq	r4,zero,d77c <__adddf3+0x610>
    d690:	00c6303a 	nor	r3,zero,r3
    d694:	1800371e 	bne	r3,zero,d774 <__adddf3+0x608>
    d698:	3463c83a 	sub	r17,r6,r17
    d69c:	414bc83a 	sub	r5,r8,r5
    d6a0:	344d803a 	cmpltu	r6,r6,r17
    d6a4:	298bc83a 	sub	r5,r5,r6
    d6a8:	1021883a 	mov	r16,r2
    d6ac:	3825883a 	mov	r18,r7
    d6b0:	003f0a06 	br	d2dc <__alt_mem_sram+0xf7e0d2dc>
    d6b4:	1023883a 	mov	r17,r2
    d6b8:	003f0d06 	br	d2f0 <__alt_mem_sram+0xf7e0d2f0>
    d6bc:	0007883a 	mov	r3,zero
    d6c0:	000b883a 	mov	r5,zero
    d6c4:	0023883a 	mov	r17,zero
    d6c8:	003f2706 	br	d368 <__alt_mem_sram+0xf7e0d368>
    d6cc:	0027883a 	mov	r19,zero
    d6d0:	003fb706 	br	d5b0 <__alt_mem_sram+0xf7e0d5b0>
    d6d4:	0011883a 	mov	r8,zero
    d6d8:	003fc206 	br	d5e4 <__alt_mem_sram+0xf7e0d5e4>
    d6dc:	2c44b03a 	or	r2,r5,r17
    d6e0:	8000871e 	bne	r16,zero,d900 <__adddf3+0x794>
    d6e4:	1000b126 	beq	r2,zero,d9ac <__adddf3+0x840>
    d6e8:	4184b03a 	or	r2,r8,r6
    d6ec:	103ebe26 	beq	r2,zero,d1e8 <__alt_mem_sram+0xf7e0d1e8>
    d6f0:	3445883a 	add	r2,r6,r17
    d6f4:	1463803a 	cmpltu	r17,r2,r17
    d6f8:	414b883a 	add	r5,r8,r5
    d6fc:	2c4b883a 	add	r5,r5,r17
    d700:	28c0202c 	andhi	r3,r5,128
    d704:	1023883a 	mov	r17,r2
    d708:	183f6326 	beq	r3,zero,d498 <__alt_mem_sram+0xf7e0d498>
    d70c:	00bfe034 	movhi	r2,65408
    d710:	10bfffc4 	addi	r2,r2,-1
    d714:	2021883a 	mov	r16,r4
    d718:	288a703a 	and	r5,r5,r2
    d71c:	003eb206 	br	d1e8 <__alt_mem_sram+0xf7e0d1e8>
    d720:	2c44b03a 	or	r2,r5,r17
    d724:	8000251e 	bne	r16,zero,d7bc <__adddf3+0x650>
    d728:	10004b1e 	bne	r2,zero,d858 <__adddf3+0x6ec>
    d72c:	4184b03a 	or	r2,r8,r6
    d730:	103fe226 	beq	r2,zero,d6bc <__alt_mem_sram+0xf7e0d6bc>
    d734:	400b883a 	mov	r5,r8
    d738:	3023883a 	mov	r17,r6
    d73c:	3825883a 	mov	r18,r7
    d740:	003ea906 	br	d1e8 <__alt_mem_sram+0xf7e0d1e8>
    d744:	20bff804 	addi	r2,r4,-32
    d748:	01c00804 	movi	r7,32
    d74c:	4084d83a 	srl	r2,r8,r2
    d750:	21c07e26 	beq	r4,r7,d94c <__adddf3+0x7e0>
    d754:	01c01004 	movi	r7,64
    d758:	3909c83a 	sub	r4,r7,r4
    d75c:	4110983a 	sll	r8,r8,r4
    d760:	418cb03a 	or	r6,r8,r6
    d764:	300cc03a 	cmpne	r6,r6,zero
    d768:	308cb03a 	or	r6,r6,r2
    d76c:	0011883a 	mov	r8,zero
    d770:	003f1b06 	br	d3e0 <__alt_mem_sram+0xf7e0d3e0>
    d774:	0101ffc4 	movi	r4,2047
    d778:	113fa41e 	bne	r2,r4,d60c <__alt_mem_sram+0xf7e0d60c>
    d77c:	400b883a 	mov	r5,r8
    d780:	3023883a 	mov	r17,r6
    d784:	1021883a 	mov	r16,r2
    d788:	3825883a 	mov	r18,r7
    d78c:	003e9606 	br	d1e8 <__alt_mem_sram+0xf7e0d1e8>
    d790:	80001a1e 	bne	r16,zero,d7fc <__adddf3+0x690>
    d794:	2c4eb03a 	or	r7,r5,r17
    d798:	38005526 	beq	r7,zero,d8f0 <__adddf3+0x784>
    d79c:	0108303a 	nor	r4,zero,r4
    d7a0:	2000511e 	bne	r4,zero,d8e8 <__adddf3+0x77c>
    d7a4:	89a3883a 	add	r17,r17,r6
    d7a8:	414b883a 	add	r5,r8,r5
    d7ac:	898d803a 	cmpltu	r6,r17,r6
    d7b0:	298b883a 	add	r5,r5,r6
    d7b4:	1021883a 	mov	r16,r2
    d7b8:	003f0e06 	br	d3f4 <__alt_mem_sram+0xf7e0d3f4>
    d7bc:	1000341e 	bne	r2,zero,d890 <__adddf3+0x724>
    d7c0:	4184b03a 	or	r2,r8,r6
    d7c4:	10006f26 	beq	r2,zero,d984 <__adddf3+0x818>
    d7c8:	400b883a 	mov	r5,r8
    d7cc:	3023883a 	mov	r17,r6
    d7d0:	3825883a 	mov	r18,r7
    d7d4:	0401ffc4 	movi	r16,2047
    d7d8:	003e8306 	br	d1e8 <__alt_mem_sram+0xf7e0d1e8>
    d7dc:	2c62b03a 	or	r17,r5,r17
    d7e0:	8822c03a 	cmpne	r17,r17,zero
    d7e4:	0007883a 	mov	r3,zero
    d7e8:	003f9506 	br	d640 <__alt_mem_sram+0xf7e0d640>
    d7ec:	1021883a 	mov	r16,r2
    d7f0:	000b883a 	mov	r5,zero
    d7f4:	0023883a 	mov	r17,zero
    d7f8:	003edb06 	br	d368 <__alt_mem_sram+0xf7e0d368>
    d7fc:	01c1ffc4 	movi	r7,2047
    d800:	11c03b26 	beq	r2,r7,d8f0 <__adddf3+0x784>
    d804:	0109c83a 	sub	r4,zero,r4
    d808:	29402034 	orhi	r5,r5,128
    d80c:	01c00e04 	movi	r7,56
    d810:	39006216 	blt	r7,r4,d99c <__adddf3+0x830>
    d814:	01c007c4 	movi	r7,31
    d818:	39006b16 	blt	r7,r4,d9c8 <__adddf3+0x85c>
    d81c:	01c00804 	movi	r7,32
    d820:	390fc83a 	sub	r7,r7,r4
    d824:	29d4983a 	sll	r10,r5,r7
    d828:	8912d83a 	srl	r9,r17,r4
    d82c:	89ce983a 	sll	r7,r17,r7
    d830:	2908d83a 	srl	r4,r5,r4
    d834:	5262b03a 	or	r17,r10,r9
    d838:	380ac03a 	cmpne	r5,r7,zero
    d83c:	8962b03a 	or	r17,r17,r5
    d840:	89a3883a 	add	r17,r17,r6
    d844:	2211883a 	add	r8,r4,r8
    d848:	898d803a 	cmpltu	r6,r17,r6
    d84c:	418b883a 	add	r5,r8,r6
    d850:	1021883a 	mov	r16,r2
    d854:	003ee706 	br	d3f4 <__alt_mem_sram+0xf7e0d3f4>
    d858:	4184b03a 	or	r2,r8,r6
    d85c:	103e6226 	beq	r2,zero,d1e8 <__alt_mem_sram+0xf7e0d1e8>
    d860:	8987c83a 	sub	r3,r17,r6
    d864:	88c9803a 	cmpltu	r4,r17,r3
    d868:	2a05c83a 	sub	r2,r5,r8
    d86c:	1105c83a 	sub	r2,r2,r4
    d870:	1100202c 	andhi	r4,r2,128
    d874:	203f0426 	beq	r4,zero,d488 <__alt_mem_sram+0xf7e0d488>
    d878:	3463c83a 	sub	r17,r6,r17
    d87c:	414bc83a 	sub	r5,r8,r5
    d880:	344d803a 	cmpltu	r6,r6,r17
    d884:	298bc83a 	sub	r5,r5,r6
    d888:	3825883a 	mov	r18,r7
    d88c:	003e5606 	br	d1e8 <__alt_mem_sram+0xf7e0d1e8>
    d890:	4184b03a 	or	r2,r8,r6
    d894:	10002b26 	beq	r2,zero,d944 <__adddf3+0x7d8>
    d898:	2804d0fa 	srli	r2,r5,3
    d89c:	8822d0fa 	srli	r17,r17,3
    d8a0:	280a977a 	slli	r5,r5,29
    d8a4:	10c0022c 	andhi	r3,r2,8
    d8a8:	2c62b03a 	or	r17,r5,r17
    d8ac:	18000826 	beq	r3,zero,d8d0 <__adddf3+0x764>
    d8b0:	4008d0fa 	srli	r4,r8,3
    d8b4:	20c0022c 	andhi	r3,r4,8
    d8b8:	1800051e 	bne	r3,zero,d8d0 <__adddf3+0x764>
    d8bc:	300cd0fa 	srli	r6,r6,3
    d8c0:	4010977a 	slli	r8,r8,29
    d8c4:	2005883a 	mov	r2,r4
    d8c8:	3825883a 	mov	r18,r7
    d8cc:	41a2b03a 	or	r17,r8,r6
    d8d0:	880ad77a 	srli	r5,r17,29
    d8d4:	100490fa 	slli	r2,r2,3
    d8d8:	882290fa 	slli	r17,r17,3
    d8dc:	0401ffc4 	movi	r16,2047
    d8e0:	288ab03a 	or	r5,r5,r2
    d8e4:	003e4006 	br	d1e8 <__alt_mem_sram+0xf7e0d1e8>
    d8e8:	01c1ffc4 	movi	r7,2047
    d8ec:	11ffc71e 	bne	r2,r7,d80c <__alt_mem_sram+0xf7e0d80c>
    d8f0:	400b883a 	mov	r5,r8
    d8f4:	3023883a 	mov	r17,r6
    d8f8:	1021883a 	mov	r16,r2
    d8fc:	003e3a06 	br	d1e8 <__alt_mem_sram+0xf7e0d1e8>
    d900:	10002d26 	beq	r2,zero,d9b8 <__adddf3+0x84c>
    d904:	4184b03a 	or	r2,r8,r6
    d908:	10000e26 	beq	r2,zero,d944 <__adddf3+0x7d8>
    d90c:	2804d0fa 	srli	r2,r5,3
    d910:	8822d0fa 	srli	r17,r17,3
    d914:	280a977a 	slli	r5,r5,29
    d918:	10c0022c 	andhi	r3,r2,8
    d91c:	2c62b03a 	or	r17,r5,r17
    d920:	183feb26 	beq	r3,zero,d8d0 <__alt_mem_sram+0xf7e0d8d0>
    d924:	4008d0fa 	srli	r4,r8,3
    d928:	20c0022c 	andhi	r3,r4,8
    d92c:	183fe81e 	bne	r3,zero,d8d0 <__alt_mem_sram+0xf7e0d8d0>
    d930:	300cd0fa 	srli	r6,r6,3
    d934:	4010977a 	slli	r8,r8,29
    d938:	2005883a 	mov	r2,r4
    d93c:	41a2b03a 	or	r17,r8,r6
    d940:	003fe306 	br	d8d0 <__alt_mem_sram+0xf7e0d8d0>
    d944:	0401ffc4 	movi	r16,2047
    d948:	003e2706 	br	d1e8 <__alt_mem_sram+0xf7e0d1e8>
    d94c:	0011883a 	mov	r8,zero
    d950:	003f8306 	br	d760 <__alt_mem_sram+0xf7e0d760>
    d954:	193ff804 	addi	r4,r3,-32
    d958:	02400804 	movi	r9,32
    d95c:	2908d83a 	srl	r4,r5,r4
    d960:	1a402526 	beq	r3,r9,d9f8 <__adddf3+0x88c>
    d964:	02401004 	movi	r9,64
    d968:	48c7c83a 	sub	r3,r9,r3
    d96c:	28ca983a 	sll	r5,r5,r3
    d970:	2c62b03a 	or	r17,r5,r17
    d974:	8822c03a 	cmpne	r17,r17,zero
    d978:	8922b03a 	or	r17,r17,r4
    d97c:	0007883a 	mov	r3,zero
    d980:	003f2f06 	br	d640 <__alt_mem_sram+0xf7e0d640>
    d984:	01402034 	movhi	r5,128
    d988:	0007883a 	mov	r3,zero
    d98c:	297fffc4 	addi	r5,r5,-1
    d990:	047ffe04 	movi	r17,-8
    d994:	0401ffc4 	movi	r16,2047
    d998:	003e7306 	br	d368 <__alt_mem_sram+0xf7e0d368>
    d99c:	2c62b03a 	or	r17,r5,r17
    d9a0:	8822c03a 	cmpne	r17,r17,zero
    d9a4:	0009883a 	mov	r4,zero
    d9a8:	003fa506 	br	d840 <__alt_mem_sram+0xf7e0d840>
    d9ac:	400b883a 	mov	r5,r8
    d9b0:	3023883a 	mov	r17,r6
    d9b4:	003e0c06 	br	d1e8 <__alt_mem_sram+0xf7e0d1e8>
    d9b8:	400b883a 	mov	r5,r8
    d9bc:	3023883a 	mov	r17,r6
    d9c0:	0401ffc4 	movi	r16,2047
    d9c4:	003e0806 	br	d1e8 <__alt_mem_sram+0xf7e0d1e8>
    d9c8:	21fff804 	addi	r7,r4,-32
    d9cc:	02400804 	movi	r9,32
    d9d0:	29ced83a 	srl	r7,r5,r7
    d9d4:	22400a26 	beq	r4,r9,da00 <__adddf3+0x894>
    d9d8:	02401004 	movi	r9,64
    d9dc:	4909c83a 	sub	r4,r9,r4
    d9e0:	290a983a 	sll	r5,r5,r4
    d9e4:	2c62b03a 	or	r17,r5,r17
    d9e8:	8822c03a 	cmpne	r17,r17,zero
    d9ec:	89e2b03a 	or	r17,r17,r7
    d9f0:	0009883a 	mov	r4,zero
    d9f4:	003f9206 	br	d840 <__alt_mem_sram+0xf7e0d840>
    d9f8:	000b883a 	mov	r5,zero
    d9fc:	003fdc06 	br	d970 <__alt_mem_sram+0xf7e0d970>
    da00:	000b883a 	mov	r5,zero
    da04:	003ff706 	br	d9e4 <__alt_mem_sram+0xf7e0d9e4>

0000da08 <__divdf3>:
    da08:	defff204 	addi	sp,sp,-56
    da0c:	dd000815 	stw	r20,32(sp)
    da10:	2828d53a 	srli	r20,r5,20
    da14:	dd800a15 	stw	r22,40(sp)
    da18:	282cd7fa 	srli	r22,r5,31
    da1c:	dc000415 	stw	r16,16(sp)
    da20:	04000434 	movhi	r16,16
    da24:	df000c15 	stw	fp,48(sp)
    da28:	dcc00715 	stw	r19,28(sp)
    da2c:	dc800615 	stw	r18,24(sp)
    da30:	dc400515 	stw	r17,20(sp)
    da34:	843fffc4 	addi	r16,r16,-1
    da38:	dfc00d15 	stw	ra,52(sp)
    da3c:	ddc00b15 	stw	r23,44(sp)
    da40:	dd400915 	stw	r21,36(sp)
    da44:	a501ffcc 	andi	r20,r20,2047
    da48:	2025883a 	mov	r18,r4
    da4c:	2027883a 	mov	r19,r4
    da50:	2c22703a 	and	r17,r5,r16
    da54:	b7003fcc 	andi	fp,r22,255
    da58:	a0005e26 	beq	r20,zero,dbd4 <__divdf3+0x1cc>
    da5c:	0081ffc4 	movi	r2,2047
    da60:	a0803526 	beq	r20,r2,db38 <__divdf3+0x130>
    da64:	8c000434 	orhi	r16,r17,16
    da68:	2004d77a 	srli	r2,r4,29
    da6c:	802090fa 	slli	r16,r16,3
    da70:	202690fa 	slli	r19,r4,3
    da74:	a53f0044 	addi	r20,r20,-1023
    da78:	80a2b03a 	or	r17,r16,r2
    da7c:	0025883a 	mov	r18,zero
    da80:	0011883a 	mov	r8,zero
    da84:	380ad53a 	srli	r5,r7,20
    da88:	382ed7fa 	srli	r23,r7,31
    da8c:	04000434 	movhi	r16,16
    da90:	843fffc4 	addi	r16,r16,-1
    da94:	2941ffcc 	andi	r5,r5,2047
    da98:	302b883a 	mov	r21,r6
    da9c:	3c20703a 	and	r16,r7,r16
    daa0:	ba403fcc 	andi	r9,r23,255
    daa4:	28006726 	beq	r5,zero,dc44 <__divdf3+0x23c>
    daa8:	0081ffc4 	movi	r2,2047
    daac:	28805f26 	beq	r5,r2,dc2c <__divdf3+0x224>
    dab0:	84000434 	orhi	r16,r16,16
    dab4:	3004d77a 	srli	r2,r6,29
    dab8:	802090fa 	slli	r16,r16,3
    dabc:	302a90fa 	slli	r21,r6,3
    dac0:	297f0044 	addi	r5,r5,-1023
    dac4:	80a0b03a 	or	r16,r16,r2
    dac8:	000f883a 	mov	r7,zero
    dacc:	3c86b03a 	or	r3,r7,r18
    dad0:	180690ba 	slli	r3,r3,2
    dad4:	00800074 	movhi	r2,1
    dad8:	10b6be04 	addi	r2,r2,-9480
    dadc:	1887883a 	add	r3,r3,r2
    dae0:	18c00017 	ldw	r3,0(r3)
    dae4:	b5c8f03a 	xor	r4,r22,r23
    dae8:	200d883a 	mov	r6,r4
    daec:	24803fcc 	andi	r18,r4,255
    daf0:	a169c83a 	sub	r20,r20,r5
    daf4:	1800683a 	jmp	r3
    daf8:	0000dd40 	call	dd4 <main+0xb78>
    dafc:	0000db70 	cmpltui	zero,zero,877
    db00:	0000dd04 	movi	zero,884
    db04:	0000db54 	movui	zero,877
    db08:	0000dd04 	movi	zero,884
    db0c:	0000dcd8 	cmpnei	zero,zero,883
    db10:	0000dd04 	movi	zero,884
    db14:	0000db54 	movui	zero,877
    db18:	0000db70 	cmpltui	zero,zero,877
    db1c:	0000db70 	cmpltui	zero,zero,877
    db20:	0000dcd8 	cmpnei	zero,zero,883
    db24:	0000db54 	movui	zero,877
    db28:	0000db64 	muli	zero,zero,877
    db2c:	0000db64 	muli	zero,zero,877
    db30:	0000db64 	muli	zero,zero,877
    db34:	0000dd14 	movui	zero,884
    db38:	8904b03a 	or	r2,r17,r4
    db3c:	1000631e 	bne	r2,zero,dccc <__divdf3+0x2c4>
    db40:	04800204 	movi	r18,8
    db44:	0023883a 	mov	r17,zero
    db48:	0027883a 	mov	r19,zero
    db4c:	02000084 	movi	r8,2
    db50:	003fcc06 	br	da84 <__alt_mem_sram+0xf7e0da84>
    db54:	8023883a 	mov	r17,r16
    db58:	a827883a 	mov	r19,r21
    db5c:	4839883a 	mov	fp,r9
    db60:	3811883a 	mov	r8,r7
    db64:	00800084 	movi	r2,2
    db68:	40812a1e 	bne	r8,r2,e014 <__divdf3+0x60c>
    db6c:	e025883a 	mov	r18,fp
    db70:	9180004c 	andi	r6,r18,1
    db74:	0101ffc4 	movi	r4,2047
    db78:	000b883a 	mov	r5,zero
    db7c:	0027883a 	mov	r19,zero
    db80:	2008953a 	slli	r4,r4,20
    db84:	30c03fcc 	andi	r3,r6,255
    db88:	04000434 	movhi	r16,16
    db8c:	180697fa 	slli	r3,r3,31
    db90:	843fffc4 	addi	r16,r16,-1
    db94:	2c20703a 	and	r16,r5,r16
    db98:	8120b03a 	or	r16,r16,r4
    db9c:	80c6b03a 	or	r3,r16,r3
    dba0:	9805883a 	mov	r2,r19
    dba4:	dfc00d17 	ldw	ra,52(sp)
    dba8:	df000c17 	ldw	fp,48(sp)
    dbac:	ddc00b17 	ldw	r23,44(sp)
    dbb0:	dd800a17 	ldw	r22,40(sp)
    dbb4:	dd400917 	ldw	r21,36(sp)
    dbb8:	dd000817 	ldw	r20,32(sp)
    dbbc:	dcc00717 	ldw	r19,28(sp)
    dbc0:	dc800617 	ldw	r18,24(sp)
    dbc4:	dc400517 	ldw	r17,20(sp)
    dbc8:	dc000417 	ldw	r16,16(sp)
    dbcc:	dec00e04 	addi	sp,sp,56
    dbd0:	f800283a 	ret
    dbd4:	8904b03a 	or	r2,r17,r4
    dbd8:	10003726 	beq	r2,zero,dcb8 <__divdf3+0x2b0>
    dbdc:	88011c26 	beq	r17,zero,e050 <__divdf3+0x648>
    dbe0:	8809883a 	mov	r4,r17
    dbe4:	d9800315 	stw	r6,12(sp)
    dbe8:	d9c00115 	stw	r7,4(sp)
    dbec:	000f7080 	call	f708 <__clzsi2>
    dbf0:	d9800317 	ldw	r6,12(sp)
    dbf4:	d9c00117 	ldw	r7,4(sp)
    dbf8:	1007883a 	mov	r3,r2
    dbfc:	01000a04 	movi	r4,40
    dc00:	1cfffe04 	addi	r19,r3,-8
    dc04:	20c9c83a 	sub	r4,r4,r3
    dc08:	8cca983a 	sll	r5,r17,r19
    dc0c:	9108d83a 	srl	r4,r18,r4
    dc10:	94e6983a 	sll	r19,r18,r19
    dc14:	2162b03a 	or	r17,r4,r5
    dc18:	053f0344 	movi	r20,-1011
    dc1c:	a0e9c83a 	sub	r20,r20,r3
    dc20:	0025883a 	mov	r18,zero
    dc24:	0011883a 	mov	r8,zero
    dc28:	003f9606 	br	da84 <__alt_mem_sram+0xf7e0da84>
    dc2c:	8184b03a 	or	r2,r16,r6
    dc30:	10001f1e 	bne	r2,zero,dcb0 <__divdf3+0x2a8>
    dc34:	0021883a 	mov	r16,zero
    dc38:	002b883a 	mov	r21,zero
    dc3c:	01c00084 	movi	r7,2
    dc40:	003fa206 	br	dacc <__alt_mem_sram+0xf7e0dacc>
    dc44:	8184b03a 	or	r2,r16,r6
    dc48:	10001526 	beq	r2,zero,dca0 <__divdf3+0x298>
    dc4c:	80010c26 	beq	r16,zero,e080 <__divdf3+0x678>
    dc50:	8009883a 	mov	r4,r16
    dc54:	d9800315 	stw	r6,12(sp)
    dc58:	da000215 	stw	r8,8(sp)
    dc5c:	da400015 	stw	r9,0(sp)
    dc60:	000f7080 	call	f708 <__clzsi2>
    dc64:	d9800317 	ldw	r6,12(sp)
    dc68:	da000217 	ldw	r8,8(sp)
    dc6c:	da400017 	ldw	r9,0(sp)
    dc70:	1007883a 	mov	r3,r2
    dc74:	01000a04 	movi	r4,40
    dc78:	1d7ffe04 	addi	r21,r3,-8
    dc7c:	20c9c83a 	sub	r4,r4,r3
    dc80:	8560983a 	sll	r16,r16,r21
    dc84:	3108d83a 	srl	r4,r6,r4
    dc88:	356a983a 	sll	r21,r6,r21
    dc8c:	2420b03a 	or	r16,r4,r16
    dc90:	017f0344 	movi	r5,-1011
    dc94:	28cbc83a 	sub	r5,r5,r3
    dc98:	000f883a 	mov	r7,zero
    dc9c:	003f8b06 	br	dacc <__alt_mem_sram+0xf7e0dacc>
    dca0:	0021883a 	mov	r16,zero
    dca4:	002b883a 	mov	r21,zero
    dca8:	01c00044 	movi	r7,1
    dcac:	003f8706 	br	dacc <__alt_mem_sram+0xf7e0dacc>
    dcb0:	01c000c4 	movi	r7,3
    dcb4:	003f8506 	br	dacc <__alt_mem_sram+0xf7e0dacc>
    dcb8:	04800104 	movi	r18,4
    dcbc:	0023883a 	mov	r17,zero
    dcc0:	0027883a 	mov	r19,zero
    dcc4:	02000044 	movi	r8,1
    dcc8:	003f6e06 	br	da84 <__alt_mem_sram+0xf7e0da84>
    dccc:	04800304 	movi	r18,12
    dcd0:	020000c4 	movi	r8,3
    dcd4:	003f6b06 	br	da84 <__alt_mem_sram+0xf7e0da84>
    dcd8:	01400434 	movhi	r5,16
    dcdc:	000d883a 	mov	r6,zero
    dce0:	297fffc4 	addi	r5,r5,-1
    dce4:	04ffffc4 	movi	r19,-1
    dce8:	0101ffc4 	movi	r4,2047
    dcec:	003fa406 	br	db80 <__alt_mem_sram+0xf7e0db80>
    dcf0:	043f0084 	movi	r16,-1022
    dcf4:	8521c83a 	sub	r16,r16,r20
    dcf8:	00800e04 	movi	r2,56
    dcfc:	1401200e 	bge	r2,r16,e180 <__divdf3+0x778>
    dd00:	9180004c 	andi	r6,r18,1
    dd04:	0009883a 	mov	r4,zero
    dd08:	000b883a 	mov	r5,zero
    dd0c:	0027883a 	mov	r19,zero
    dd10:	003f9b06 	br	db80 <__alt_mem_sram+0xf7e0db80>
    dd14:	8880022c 	andhi	r2,r17,8
    dd18:	1000c726 	beq	r2,zero,e038 <__divdf3+0x630>
    dd1c:	8080022c 	andhi	r2,r16,8
    dd20:	1000c51e 	bne	r2,zero,e038 <__divdf3+0x630>
    dd24:	00800434 	movhi	r2,16
    dd28:	81400234 	orhi	r5,r16,8
    dd2c:	10bfffc4 	addi	r2,r2,-1
    dd30:	b80d883a 	mov	r6,r23
    dd34:	288a703a 	and	r5,r5,r2
    dd38:	a827883a 	mov	r19,r21
    dd3c:	003fea06 	br	dce8 <__alt_mem_sram+0xf7e0dce8>
    dd40:	8440ea36 	bltu	r16,r17,e0ec <__divdf3+0x6e4>
    dd44:	8c00e826 	beq	r17,r16,e0e8 <__divdf3+0x6e0>
    dd48:	a53fffc4 	addi	r20,r20,-1
    dd4c:	882d883a 	mov	r22,r17
    dd50:	000d883a 	mov	r6,zero
    dd54:	a804d63a 	srli	r2,r21,24
    dd58:	8020923a 	slli	r16,r16,8
    dd5c:	b009883a 	mov	r4,r22
    dd60:	d9800315 	stw	r6,12(sp)
    dd64:	1420b03a 	or	r16,r2,r16
    dd68:	802ed43a 	srli	r23,r16,16
    dd6c:	873fffcc 	andi	fp,r16,65535
    dd70:	a82a923a 	slli	r21,r21,8
    dd74:	b80b883a 	mov	r5,r23
    dd78:	000d15c0 	call	d15c <__udivsi3>
    dd7c:	b009883a 	mov	r4,r22
    dd80:	b80b883a 	mov	r5,r23
    dd84:	1023883a 	mov	r17,r2
    dd88:	000d1640 	call	d164 <__umodsi3>
    dd8c:	1004943a 	slli	r2,r2,16
    dd90:	9808d43a 	srli	r4,r19,16
    dd94:	8f2d383a 	mul	r22,r17,fp
    dd98:	d9800317 	ldw	r6,12(sp)
    dd9c:	1106b03a 	or	r3,r2,r4
    dda0:	1d80062e 	bgeu	r3,r22,ddbc <__divdf3+0x3b4>
    dda4:	1c07883a 	add	r3,r3,r16
    dda8:	88bfffc4 	addi	r2,r17,-1
    ddac:	1c00dc36 	bltu	r3,r16,e120 <__divdf3+0x718>
    ddb0:	1d80db2e 	bgeu	r3,r22,e120 <__divdf3+0x718>
    ddb4:	8c7fff84 	addi	r17,r17,-2
    ddb8:	1c07883a 	add	r3,r3,r16
    ddbc:	1dadc83a 	sub	r22,r3,r22
    ddc0:	b009883a 	mov	r4,r22
    ddc4:	b80b883a 	mov	r5,r23
    ddc8:	d9800315 	stw	r6,12(sp)
    ddcc:	000d15c0 	call	d15c <__udivsi3>
    ddd0:	b009883a 	mov	r4,r22
    ddd4:	b80b883a 	mov	r5,r23
    ddd8:	d8800015 	stw	r2,0(sp)
    dddc:	000d1640 	call	d164 <__umodsi3>
    dde0:	da400017 	ldw	r9,0(sp)
    dde4:	1004943a 	slli	r2,r2,16
    dde8:	9cffffcc 	andi	r19,r19,65535
    ddec:	4f07383a 	mul	r3,r9,fp
    ddf0:	14c8b03a 	or	r4,r2,r19
    ddf4:	d9800317 	ldw	r6,12(sp)
    ddf8:	20c0062e 	bgeu	r4,r3,de14 <__divdf3+0x40c>
    ddfc:	2409883a 	add	r4,r4,r16
    de00:	48bfffc4 	addi	r2,r9,-1
    de04:	2400c436 	bltu	r4,r16,e118 <__divdf3+0x710>
    de08:	20c0c32e 	bgeu	r4,r3,e118 <__divdf3+0x710>
    de0c:	4a7fff84 	addi	r9,r9,-2
    de10:	2409883a 	add	r4,r4,r16
    de14:	8822943a 	slli	r17,r17,16
    de18:	a80ed43a 	srli	r7,r21,16
    de1c:	aa3fffcc 	andi	r8,r21,65535
    de20:	4c62b03a 	or	r17,r9,r17
    de24:	8816d43a 	srli	r11,r17,16
    de28:	897fffcc 	andi	r5,r17,65535
    de2c:	2a15383a 	mul	r10,r5,r8
    de30:	5a19383a 	mul	r12,r11,r8
    de34:	29cb383a 	mul	r5,r5,r7
    de38:	5012d43a 	srli	r9,r10,16
    de3c:	20c5c83a 	sub	r2,r4,r3
    de40:	614b883a 	add	r5,r12,r5
    de44:	2a4b883a 	add	r5,r5,r9
    de48:	59c7383a 	mul	r3,r11,r7
    de4c:	2b00022e 	bgeu	r5,r12,de58 <__divdf3+0x450>
    de50:	01000074 	movhi	r4,1
    de54:	1907883a 	add	r3,r3,r4
    de58:	2808d43a 	srli	r4,r5,16
    de5c:	280a943a 	slli	r5,r5,16
    de60:	54ffffcc 	andi	r19,r10,65535
    de64:	1907883a 	add	r3,r3,r4
    de68:	2ccb883a 	add	r5,r5,r19
    de6c:	10c09336 	bltu	r2,r3,e0bc <__divdf3+0x6b4>
    de70:	10c0ad26 	beq	r2,r3,e128 <__divdf3+0x720>
    de74:	10c7c83a 	sub	r3,r2,r3
    de78:	3167c83a 	sub	r19,r6,r5
    de7c:	34ed803a 	cmpltu	r22,r6,r19
    de80:	1dadc83a 	sub	r22,r3,r22
    de84:	b400b226 	beq	r22,r16,e150 <__divdf3+0x748>
    de88:	b009883a 	mov	r4,r22
    de8c:	b80b883a 	mov	r5,r23
    de90:	d9c00115 	stw	r7,4(sp)
    de94:	da000215 	stw	r8,8(sp)
    de98:	000d15c0 	call	d15c <__udivsi3>
    de9c:	b009883a 	mov	r4,r22
    dea0:	b80b883a 	mov	r5,r23
    dea4:	d8800315 	stw	r2,12(sp)
    dea8:	000d1640 	call	d164 <__umodsi3>
    deac:	d9800317 	ldw	r6,12(sp)
    deb0:	1004943a 	slli	r2,r2,16
    deb4:	9808d43a 	srli	r4,r19,16
    deb8:	372d383a 	mul	r22,r6,fp
    debc:	d9c00117 	ldw	r7,4(sp)
    dec0:	1106b03a 	or	r3,r2,r4
    dec4:	da000217 	ldw	r8,8(sp)
    dec8:	1d80062e 	bgeu	r3,r22,dee4 <__divdf3+0x4dc>
    decc:	1c07883a 	add	r3,r3,r16
    ded0:	30bfffc4 	addi	r2,r6,-1
    ded4:	1c00a036 	bltu	r3,r16,e158 <__divdf3+0x750>
    ded8:	1d809f2e 	bgeu	r3,r22,e158 <__divdf3+0x750>
    dedc:	31bfff84 	addi	r6,r6,-2
    dee0:	1c07883a 	add	r3,r3,r16
    dee4:	1dadc83a 	sub	r22,r3,r22
    dee8:	b009883a 	mov	r4,r22
    deec:	b80b883a 	mov	r5,r23
    def0:	d9800315 	stw	r6,12(sp)
    def4:	d9c00115 	stw	r7,4(sp)
    def8:	da000215 	stw	r8,8(sp)
    defc:	000d15c0 	call	d15c <__udivsi3>
    df00:	b009883a 	mov	r4,r22
    df04:	b80b883a 	mov	r5,r23
    df08:	d8800015 	stw	r2,0(sp)
    df0c:	000d1640 	call	d164 <__umodsi3>
    df10:	da400017 	ldw	r9,0(sp)
    df14:	1004943a 	slli	r2,r2,16
    df18:	993fffcc 	andi	r4,r19,65535
    df1c:	4f39383a 	mul	fp,r9,fp
    df20:	1106b03a 	or	r3,r2,r4
    df24:	d9800317 	ldw	r6,12(sp)
    df28:	d9c00117 	ldw	r7,4(sp)
    df2c:	da000217 	ldw	r8,8(sp)
    df30:	1f00062e 	bgeu	r3,fp,df4c <__divdf3+0x544>
    df34:	1c07883a 	add	r3,r3,r16
    df38:	48bfffc4 	addi	r2,r9,-1
    df3c:	1c008836 	bltu	r3,r16,e160 <__divdf3+0x758>
    df40:	1f00872e 	bgeu	r3,fp,e160 <__divdf3+0x758>
    df44:	4a7fff84 	addi	r9,r9,-2
    df48:	1c07883a 	add	r3,r3,r16
    df4c:	3008943a 	slli	r4,r6,16
    df50:	1f07c83a 	sub	r3,r3,fp
    df54:	4926b03a 	or	r19,r9,r4
    df58:	993fffcc 	andi	r4,r19,65535
    df5c:	980cd43a 	srli	r6,r19,16
    df60:	220b383a 	mul	r5,r4,r8
    df64:	21c5383a 	mul	r2,r4,r7
    df68:	3211383a 	mul	r8,r6,r8
    df6c:	2808d43a 	srli	r4,r5,16
    df70:	31cf383a 	mul	r7,r6,r7
    df74:	4085883a 	add	r2,r8,r2
    df78:	1105883a 	add	r2,r2,r4
    df7c:	1200022e 	bgeu	r2,r8,df88 <__divdf3+0x580>
    df80:	01000074 	movhi	r4,1
    df84:	390f883a 	add	r7,r7,r4
    df88:	1008d43a 	srli	r4,r2,16
    df8c:	1004943a 	slli	r2,r2,16
    df90:	297fffcc 	andi	r5,r5,65535
    df94:	390f883a 	add	r7,r7,r4
    df98:	1145883a 	add	r2,r2,r5
    df9c:	19c06536 	bltu	r3,r7,e134 <__divdf3+0x72c>
    dfa0:	19c09f26 	beq	r3,r7,e220 <__divdf3+0x818>
    dfa4:	9cc00054 	ori	r19,r19,1
    dfa8:	a100ffc4 	addi	r4,r20,1023
    dfac:	013f500e 	bge	zero,r4,dcf0 <__alt_mem_sram+0xf7e0dcf0>
    dfb0:	988001cc 	andi	r2,r19,7
    dfb4:	10000726 	beq	r2,zero,dfd4 <__divdf3+0x5cc>
    dfb8:	98c003cc 	andi	r3,r19,15
    dfbc:	00800104 	movi	r2,4
    dfc0:	18800426 	beq	r3,r2,dfd4 <__divdf3+0x5cc>
    dfc4:	9885883a 	add	r2,r19,r2
    dfc8:	14e1803a 	cmpltu	r16,r2,r19
    dfcc:	8c23883a 	add	r17,r17,r16
    dfd0:	1027883a 	mov	r19,r2
    dfd4:	8880402c 	andhi	r2,r17,256
    dfd8:	10000426 	beq	r2,zero,dfec <__divdf3+0x5e4>
    dfdc:	00bfc034 	movhi	r2,65280
    dfe0:	10bfffc4 	addi	r2,r2,-1
    dfe4:	a1010004 	addi	r4,r20,1024
    dfe8:	88a2703a 	and	r17,r17,r2
    dfec:	0081ff84 	movi	r2,2046
    dff0:	113edf16 	blt	r2,r4,db70 <__alt_mem_sram+0xf7e0db70>
    dff4:	9826d0fa 	srli	r19,r19,3
    dff8:	8804977a 	slli	r2,r17,29
    dffc:	8820927a 	slli	r16,r17,9
    e000:	2101ffcc 	andi	r4,r4,2047
    e004:	14e6b03a 	or	r19,r2,r19
    e008:	800ad33a 	srli	r5,r16,12
    e00c:	9180004c 	andi	r6,r18,1
    e010:	003edb06 	br	db80 <__alt_mem_sram+0xf7e0db80>
    e014:	008000c4 	movi	r2,3
    e018:	4080a826 	beq	r8,r2,e2bc <__divdf3+0x8b4>
    e01c:	00800044 	movi	r2,1
    e020:	4080551e 	bne	r8,r2,e178 <__divdf3+0x770>
    e024:	e00d883a 	mov	r6,fp
    e028:	0009883a 	mov	r4,zero
    e02c:	000b883a 	mov	r5,zero
    e030:	0027883a 	mov	r19,zero
    e034:	003ed206 	br	db80 <__alt_mem_sram+0xf7e0db80>
    e038:	00800434 	movhi	r2,16
    e03c:	89400234 	orhi	r5,r17,8
    e040:	10bfffc4 	addi	r2,r2,-1
    e044:	b00d883a 	mov	r6,r22
    e048:	288a703a 	and	r5,r5,r2
    e04c:	003f2606 	br	dce8 <__alt_mem_sram+0xf7e0dce8>
    e050:	d9800315 	stw	r6,12(sp)
    e054:	d9c00115 	stw	r7,4(sp)
    e058:	000f7080 	call	f708 <__clzsi2>
    e05c:	10c00804 	addi	r3,r2,32
    e060:	010009c4 	movi	r4,39
    e064:	d9800317 	ldw	r6,12(sp)
    e068:	d9c00117 	ldw	r7,4(sp)
    e06c:	20fee30e 	bge	r4,r3,dbfc <__alt_mem_sram+0xf7e0dbfc>
    e070:	117ffe04 	addi	r5,r2,-8
    e074:	9162983a 	sll	r17,r18,r5
    e078:	0027883a 	mov	r19,zero
    e07c:	003ee606 	br	dc18 <__alt_mem_sram+0xf7e0dc18>
    e080:	3009883a 	mov	r4,r6
    e084:	d9800315 	stw	r6,12(sp)
    e088:	da000215 	stw	r8,8(sp)
    e08c:	da400015 	stw	r9,0(sp)
    e090:	000f7080 	call	f708 <__clzsi2>
    e094:	10c00804 	addi	r3,r2,32
    e098:	010009c4 	movi	r4,39
    e09c:	d9800317 	ldw	r6,12(sp)
    e0a0:	da000217 	ldw	r8,8(sp)
    e0a4:	da400017 	ldw	r9,0(sp)
    e0a8:	20fef20e 	bge	r4,r3,dc74 <__alt_mem_sram+0xf7e0dc74>
    e0ac:	10bffe04 	addi	r2,r2,-8
    e0b0:	a8a0983a 	sll	r16,r21,r2
    e0b4:	002b883a 	mov	r21,zero
    e0b8:	003ef506 	br	dc90 <__alt_mem_sram+0xf7e0dc90>
    e0bc:	354d883a 	add	r6,r6,r21
    e0c0:	3549803a 	cmpltu	r4,r6,r21
    e0c4:	2409883a 	add	r4,r4,r16
    e0c8:	2089883a 	add	r4,r4,r2
    e0cc:	88bfffc4 	addi	r2,r17,-1
    e0d0:	81000c2e 	bgeu	r16,r4,e104 <__divdf3+0x6fc>
    e0d4:	20c04436 	bltu	r4,r3,e1e8 <__divdf3+0x7e0>
    e0d8:	19006f26 	beq	r3,r4,e298 <__divdf3+0x890>
    e0dc:	20c7c83a 	sub	r3,r4,r3
    e0e0:	1023883a 	mov	r17,r2
    e0e4:	003f6406 	br	de78 <__alt_mem_sram+0xf7e0de78>
    e0e8:	9d7f1736 	bltu	r19,r21,dd48 <__alt_mem_sram+0xf7e0dd48>
    e0ec:	9806d07a 	srli	r3,r19,1
    e0f0:	880497fa 	slli	r2,r17,31
    e0f4:	980c97fa 	slli	r6,r19,31
    e0f8:	882cd07a 	srli	r22,r17,1
    e0fc:	18a6b03a 	or	r19,r3,r2
    e100:	003f1406 	br	dd54 <__alt_mem_sram+0xf7e0dd54>
    e104:	243ff51e 	bne	r4,r16,e0dc <__alt_mem_sram+0xf7e0e0dc>
    e108:	357ff22e 	bgeu	r6,r21,e0d4 <__alt_mem_sram+0xf7e0e0d4>
    e10c:	80c7c83a 	sub	r3,r16,r3
    e110:	1023883a 	mov	r17,r2
    e114:	003f5806 	br	de78 <__alt_mem_sram+0xf7e0de78>
    e118:	1013883a 	mov	r9,r2
    e11c:	003f3d06 	br	de14 <__alt_mem_sram+0xf7e0de14>
    e120:	1023883a 	mov	r17,r2
    e124:	003f2506 	br	ddbc <__alt_mem_sram+0xf7e0ddbc>
    e128:	317fe436 	bltu	r6,r5,e0bc <__alt_mem_sram+0xf7e0e0bc>
    e12c:	0007883a 	mov	r3,zero
    e130:	003f5106 	br	de78 <__alt_mem_sram+0xf7e0de78>
    e134:	1c07883a 	add	r3,r3,r16
    e138:	993fffc4 	addi	r4,r19,-1
    e13c:	1c000a2e 	bgeu	r3,r16,e168 <__divdf3+0x760>
    e140:	2027883a 	mov	r19,r4
    e144:	19ff971e 	bne	r3,r7,dfa4 <__alt_mem_sram+0xf7e0dfa4>
    e148:	a8bf961e 	bne	r21,r2,dfa4 <__alt_mem_sram+0xf7e0dfa4>
    e14c:	003f9606 	br	dfa8 <__alt_mem_sram+0xf7e0dfa8>
    e150:	04ffffc4 	movi	r19,-1
    e154:	003f9406 	br	dfa8 <__alt_mem_sram+0xf7e0dfa8>
    e158:	100d883a 	mov	r6,r2
    e15c:	003f6106 	br	dee4 <__alt_mem_sram+0xf7e0dee4>
    e160:	1013883a 	mov	r9,r2
    e164:	003f7906 	br	df4c <__alt_mem_sram+0xf7e0df4c>
    e168:	19c02636 	bltu	r3,r7,e204 <__divdf3+0x7fc>
    e16c:	38c04d26 	beq	r7,r3,e2a4 <__divdf3+0x89c>
    e170:	2027883a 	mov	r19,r4
    e174:	003f8b06 	br	dfa4 <__alt_mem_sram+0xf7e0dfa4>
    e178:	e025883a 	mov	r18,fp
    e17c:	003f8a06 	br	dfa8 <__alt_mem_sram+0xf7e0dfa8>
    e180:	008007c4 	movi	r2,31
    e184:	14002a16 	blt	r2,r16,e230 <__divdf3+0x828>
    e188:	a5010784 	addi	r20,r20,1054
    e18c:	8d04983a 	sll	r2,r17,r20
    e190:	9c06d83a 	srl	r3,r19,r16
    e194:	9d28983a 	sll	r20,r19,r20
    e198:	8c20d83a 	srl	r16,r17,r16
    e19c:	1886b03a 	or	r3,r3,r2
    e1a0:	a004c03a 	cmpne	r2,r20,zero
    e1a4:	1884b03a 	or	r2,r3,r2
    e1a8:	10c001cc 	andi	r3,r2,7
    e1ac:	18000726 	beq	r3,zero,e1cc <__divdf3+0x7c4>
    e1b0:	110003cc 	andi	r4,r2,15
    e1b4:	00c00104 	movi	r3,4
    e1b8:	20c00426 	beq	r4,r3,e1cc <__divdf3+0x7c4>
    e1bc:	10c00104 	addi	r3,r2,4
    e1c0:	1885803a 	cmpltu	r2,r3,r2
    e1c4:	80a1883a 	add	r16,r16,r2
    e1c8:	1805883a 	mov	r2,r3
    e1cc:	80c0202c 	andhi	r3,r16,128
    e1d0:	18002d26 	beq	r3,zero,e288 <__divdf3+0x880>
    e1d4:	9180004c 	andi	r6,r18,1
    e1d8:	01000044 	movi	r4,1
    e1dc:	000b883a 	mov	r5,zero
    e1e0:	0027883a 	mov	r19,zero
    e1e4:	003e6606 	br	db80 <__alt_mem_sram+0xf7e0db80>
    e1e8:	354d883a 	add	r6,r6,r21
    e1ec:	356d803a 	cmpltu	r22,r6,r21
    e1f0:	b42d883a 	add	r22,r22,r16
    e1f4:	b12d883a 	add	r22,r22,r4
    e1f8:	8c7fff84 	addi	r17,r17,-2
    e1fc:	b0c7c83a 	sub	r3,r22,r3
    e200:	003f1d06 	br	de78 <__alt_mem_sram+0xf7e0de78>
    e204:	ad4b883a 	add	r5,r21,r21
    e208:	2d6b803a 	cmpltu	r21,r5,r21
    e20c:	ac2b883a 	add	r21,r21,r16
    e210:	1d47883a 	add	r3,r3,r21
    e214:	993fff84 	addi	r4,r19,-2
    e218:	282b883a 	mov	r21,r5
    e21c:	003fc806 	br	e140 <__alt_mem_sram+0xf7e0e140>
    e220:	103fc41e 	bne	r2,zero,e134 <__alt_mem_sram+0xf7e0e134>
    e224:	002b883a 	mov	r21,zero
    e228:	a8bf5e1e 	bne	r21,r2,dfa4 <__alt_mem_sram+0xf7e0dfa4>
    e22c:	003f5e06 	br	dfa8 <__alt_mem_sram+0xf7e0dfa8>
    e230:	00bef884 	movi	r2,-1054
    e234:	1505c83a 	sub	r2,r2,r20
    e238:	00c00804 	movi	r3,32
    e23c:	8884d83a 	srl	r2,r17,r2
    e240:	80c01c26 	beq	r16,r3,e2b4 <__divdf3+0x8ac>
    e244:	a0c10f84 	addi	r3,r20,1086
    e248:	88c6983a 	sll	r3,r17,r3
    e24c:	1cc6b03a 	or	r3,r3,r19
    e250:	1806c03a 	cmpne	r3,r3,zero
    e254:	1884b03a 	or	r2,r3,r2
    e258:	140001cc 	andi	r16,r2,7
    e25c:	8000061e 	bne	r16,zero,e278 <__divdf3+0x870>
    e260:	000b883a 	mov	r5,zero
    e264:	1004d0fa 	srli	r2,r2,3
    e268:	9180004c 	andi	r6,r18,1
    e26c:	0009883a 	mov	r4,zero
    e270:	1426b03a 	or	r19,r2,r16
    e274:	003e4206 	br	db80 <__alt_mem_sram+0xf7e0db80>
    e278:	110003cc 	andi	r4,r2,15
    e27c:	00c00104 	movi	r3,4
    e280:	0021883a 	mov	r16,zero
    e284:	20ffcd1e 	bne	r4,r3,e1bc <__alt_mem_sram+0xf7e0e1bc>
    e288:	800a927a 	slli	r5,r16,9
    e28c:	8020977a 	slli	r16,r16,29
    e290:	280ad33a 	srli	r5,r5,12
    e294:	003ff306 	br	e264 <__alt_mem_sram+0xf7e0e264>
    e298:	317fd336 	bltu	r6,r5,e1e8 <__alt_mem_sram+0xf7e0e1e8>
    e29c:	1023883a 	mov	r17,r2
    e2a0:	003fa206 	br	e12c <__alt_mem_sram+0xf7e0e12c>
    e2a4:	a8bfd736 	bltu	r21,r2,e204 <__alt_mem_sram+0xf7e0e204>
    e2a8:	2027883a 	mov	r19,r4
    e2ac:	a8bf3d1e 	bne	r21,r2,dfa4 <__alt_mem_sram+0xf7e0dfa4>
    e2b0:	003f3d06 	br	dfa8 <__alt_mem_sram+0xf7e0dfa8>
    e2b4:	0007883a 	mov	r3,zero
    e2b8:	003fe406 	br	e24c <__alt_mem_sram+0xf7e0e24c>
    e2bc:	00800434 	movhi	r2,16
    e2c0:	89400234 	orhi	r5,r17,8
    e2c4:	10bfffc4 	addi	r2,r2,-1
    e2c8:	e00d883a 	mov	r6,fp
    e2cc:	288a703a 	and	r5,r5,r2
    e2d0:	003e8506 	br	dce8 <__alt_mem_sram+0xf7e0dce8>

0000e2d4 <__eqdf2>:
    e2d4:	2804d53a 	srli	r2,r5,20
    e2d8:	3806d53a 	srli	r3,r7,20
    e2dc:	02000434 	movhi	r8,16
    e2e0:	423fffc4 	addi	r8,r8,-1
    e2e4:	1081ffcc 	andi	r2,r2,2047
    e2e8:	0241ffc4 	movi	r9,2047
    e2ec:	2a14703a 	and	r10,r5,r8
    e2f0:	18c1ffcc 	andi	r3,r3,2047
    e2f4:	3a10703a 	and	r8,r7,r8
    e2f8:	280ad7fa 	srli	r5,r5,31
    e2fc:	380ed7fa 	srli	r7,r7,31
    e300:	12400f26 	beq	r2,r9,e340 <__eqdf2+0x6c>
    e304:	0241ffc4 	movi	r9,2047
    e308:	1a400326 	beq	r3,r9,e318 <__eqdf2+0x44>
    e30c:	10c00526 	beq	r2,r3,e324 <__eqdf2+0x50>
    e310:	00800044 	movi	r2,1
    e314:	f800283a 	ret
    e318:	4192b03a 	or	r9,r8,r6
    e31c:	483ffc1e 	bne	r9,zero,e310 <__alt_mem_sram+0xf7e0e310>
    e320:	10fffb1e 	bne	r2,r3,e310 <__alt_mem_sram+0xf7e0e310>
    e324:	523ffa1e 	bne	r10,r8,e310 <__alt_mem_sram+0xf7e0e310>
    e328:	21bff91e 	bne	r4,r6,e310 <__alt_mem_sram+0xf7e0e310>
    e32c:	29c00826 	beq	r5,r7,e350 <__eqdf2+0x7c>
    e330:	103ff71e 	bne	r2,zero,e310 <__alt_mem_sram+0xf7e0e310>
    e334:	5104b03a 	or	r2,r10,r4
    e338:	1004c03a 	cmpne	r2,r2,zero
    e33c:	f800283a 	ret
    e340:	5112b03a 	or	r9,r10,r4
    e344:	483fef26 	beq	r9,zero,e304 <__alt_mem_sram+0xf7e0e304>
    e348:	00800044 	movi	r2,1
    e34c:	f800283a 	ret
    e350:	0005883a 	mov	r2,zero
    e354:	f800283a 	ret

0000e358 <__gedf2>:
    e358:	2804d53a 	srli	r2,r5,20
    e35c:	3806d53a 	srli	r3,r7,20
    e360:	02000434 	movhi	r8,16
    e364:	423fffc4 	addi	r8,r8,-1
    e368:	0241ffc4 	movi	r9,2047
    e36c:	1081ffcc 	andi	r2,r2,2047
    e370:	2a14703a 	and	r10,r5,r8
    e374:	1a46703a 	and	r3,r3,r9
    e378:	3a10703a 	and	r8,r7,r8
    e37c:	280ad7fa 	srli	r5,r5,31
    e380:	380ed7fa 	srli	r7,r7,31
    e384:	12400b26 	beq	r2,r9,e3b4 <__gedf2+0x5c>
    e388:	1a401626 	beq	r3,r9,e3e4 <__gedf2+0x8c>
    e38c:	10000c1e 	bne	r2,zero,e3c0 <__gedf2+0x68>
    e390:	5112b03a 	or	r9,r10,r4
    e394:	4813003a 	cmpeq	r9,r9,zero
    e398:	4817883a 	mov	r11,r9
    e39c:	18000c1e 	bne	r3,zero,e3d0 <__gedf2+0x78>
    e3a0:	4198b03a 	or	r12,r8,r6
    e3a4:	60000a1e 	bne	r12,zero,e3d0 <__gedf2+0x78>
    e3a8:	48001326 	beq	r9,zero,e3f8 <__gedf2+0xa0>
    e3ac:	0005883a 	mov	r2,zero
    e3b0:	f800283a 	ret
    e3b4:	5112b03a 	or	r9,r10,r4
    e3b8:	4800191e 	bne	r9,zero,e420 <__gedf2+0xc8>
    e3bc:	18800926 	beq	r3,r2,e3e4 <__gedf2+0x8c>
    e3c0:	18000b1e 	bne	r3,zero,e3f0 <__gedf2+0x98>
    e3c4:	4192b03a 	or	r9,r8,r6
    e3c8:	0017883a 	mov	r11,zero
    e3cc:	48000a26 	beq	r9,zero,e3f8 <__gedf2+0xa0>
    e3d0:	39c03fcc 	andi	r7,r7,255
    e3d4:	58000726 	beq	r11,zero,e3f4 <__gedf2+0x9c>
    e3d8:	3800081e 	bne	r7,zero,e3fc <__gedf2+0xa4>
    e3dc:	00bfffc4 	movi	r2,-1
    e3e0:	f800283a 	ret
    e3e4:	4192b03a 	or	r9,r8,r6
    e3e8:	48000d1e 	bne	r9,zero,e420 <__gedf2+0xc8>
    e3ec:	103fe826 	beq	r2,zero,e390 <__alt_mem_sram+0xf7e0e390>
    e3f0:	39c03fcc 	andi	r7,r7,255
    e3f4:	29c00326 	beq	r5,r7,e404 <__gedf2+0xac>
    e3f8:	283ff81e 	bne	r5,zero,e3dc <__alt_mem_sram+0xf7e0e3dc>
    e3fc:	00800044 	movi	r2,1
    e400:	f800283a 	ret
    e404:	18bffc16 	blt	r3,r2,e3f8 <__alt_mem_sram+0xf7e0e3f8>
    e408:	10c00316 	blt	r2,r3,e418 <__gedf2+0xc0>
    e40c:	42bffa36 	bltu	r8,r10,e3f8 <__alt_mem_sram+0xf7e0e3f8>
    e410:	52000526 	beq	r10,r8,e428 <__gedf2+0xd0>
    e414:	523fe52e 	bgeu	r10,r8,e3ac <__alt_mem_sram+0xf7e0e3ac>
    e418:	283ff026 	beq	r5,zero,e3dc <__alt_mem_sram+0xf7e0e3dc>
    e41c:	003ff706 	br	e3fc <__alt_mem_sram+0xf7e0e3fc>
    e420:	00bfff84 	movi	r2,-2
    e424:	f800283a 	ret
    e428:	313ff336 	bltu	r6,r4,e3f8 <__alt_mem_sram+0xf7e0e3f8>
    e42c:	21bfdf2e 	bgeu	r4,r6,e3ac <__alt_mem_sram+0xf7e0e3ac>
    e430:	283fea26 	beq	r5,zero,e3dc <__alt_mem_sram+0xf7e0e3dc>
    e434:	003ff106 	br	e3fc <__alt_mem_sram+0xf7e0e3fc>

0000e438 <__ledf2>:
    e438:	2804d53a 	srli	r2,r5,20
    e43c:	3810d53a 	srli	r8,r7,20
    e440:	00c00434 	movhi	r3,16
    e444:	18ffffc4 	addi	r3,r3,-1
    e448:	0241ffc4 	movi	r9,2047
    e44c:	1081ffcc 	andi	r2,r2,2047
    e450:	28d4703a 	and	r10,r5,r3
    e454:	4250703a 	and	r8,r8,r9
    e458:	38c6703a 	and	r3,r7,r3
    e45c:	280ad7fa 	srli	r5,r5,31
    e460:	380ed7fa 	srli	r7,r7,31
    e464:	12400b26 	beq	r2,r9,e494 <__ledf2+0x5c>
    e468:	42401926 	beq	r8,r9,e4d0 <__ledf2+0x98>
    e46c:	10000c1e 	bne	r2,zero,e4a0 <__ledf2+0x68>
    e470:	5112b03a 	or	r9,r10,r4
    e474:	4813003a 	cmpeq	r9,r9,zero
    e478:	4817883a 	mov	r11,r9
    e47c:	40000f26 	beq	r8,zero,e4bc <__ledf2+0x84>
    e480:	39c03fcc 	andi	r7,r7,255
    e484:	58001826 	beq	r11,zero,e4e8 <__ledf2+0xb0>
    e488:	38000a1e 	bne	r7,zero,e4b4 <__ledf2+0x7c>
    e48c:	00bfffc4 	movi	r2,-1
    e490:	f800283a 	ret
    e494:	5112b03a 	or	r9,r10,r4
    e498:	48000f1e 	bne	r9,zero,e4d8 <__ledf2+0xa0>
    e49c:	40800c26 	beq	r8,r2,e4d0 <__ledf2+0x98>
    e4a0:	4000101e 	bne	r8,zero,e4e4 <__ledf2+0xac>
    e4a4:	1992b03a 	or	r9,r3,r6
    e4a8:	0017883a 	mov	r11,zero
    e4ac:	483ff41e 	bne	r9,zero,e480 <__alt_mem_sram+0xf7e0e480>
    e4b0:	283ff61e 	bne	r5,zero,e48c <__alt_mem_sram+0xf7e0e48c>
    e4b4:	00800044 	movi	r2,1
    e4b8:	f800283a 	ret
    e4bc:	1998b03a 	or	r12,r3,r6
    e4c0:	603fef1e 	bne	r12,zero,e480 <__alt_mem_sram+0xf7e0e480>
    e4c4:	483ffa26 	beq	r9,zero,e4b0 <__alt_mem_sram+0xf7e0e4b0>
    e4c8:	0005883a 	mov	r2,zero
    e4cc:	f800283a 	ret
    e4d0:	1992b03a 	or	r9,r3,r6
    e4d4:	48000226 	beq	r9,zero,e4e0 <__ledf2+0xa8>
    e4d8:	00800084 	movi	r2,2
    e4dc:	f800283a 	ret
    e4e0:	103fe326 	beq	r2,zero,e470 <__alt_mem_sram+0xf7e0e470>
    e4e4:	39c03fcc 	andi	r7,r7,255
    e4e8:	29fff11e 	bne	r5,r7,e4b0 <__alt_mem_sram+0xf7e0e4b0>
    e4ec:	40bff016 	blt	r8,r2,e4b0 <__alt_mem_sram+0xf7e0e4b0>
    e4f0:	12000316 	blt	r2,r8,e500 <__ledf2+0xc8>
    e4f4:	1abfee36 	bltu	r3,r10,e4b0 <__alt_mem_sram+0xf7e0e4b0>
    e4f8:	50c00326 	beq	r10,r3,e508 <__ledf2+0xd0>
    e4fc:	50fff22e 	bgeu	r10,r3,e4c8 <__alt_mem_sram+0xf7e0e4c8>
    e500:	283fe226 	beq	r5,zero,e48c <__alt_mem_sram+0xf7e0e48c>
    e504:	003feb06 	br	e4b4 <__alt_mem_sram+0xf7e0e4b4>
    e508:	313fe936 	bltu	r6,r4,e4b0 <__alt_mem_sram+0xf7e0e4b0>
    e50c:	21bfee2e 	bgeu	r4,r6,e4c8 <__alt_mem_sram+0xf7e0e4c8>
    e510:	283fde26 	beq	r5,zero,e48c <__alt_mem_sram+0xf7e0e48c>
    e514:	003fe706 	br	e4b4 <__alt_mem_sram+0xf7e0e4b4>

0000e518 <__muldf3>:
    e518:	defff204 	addi	sp,sp,-56
    e51c:	2804d53a 	srli	r2,r5,20
    e520:	dd800a15 	stw	r22,40(sp)
    e524:	282cd7fa 	srli	r22,r5,31
    e528:	dc000415 	stw	r16,16(sp)
    e52c:	04000434 	movhi	r16,16
    e530:	df000c15 	stw	fp,48(sp)
    e534:	dd000815 	stw	r20,32(sp)
    e538:	dcc00715 	stw	r19,28(sp)
    e53c:	dc800615 	stw	r18,24(sp)
    e540:	dc400515 	stw	r17,20(sp)
    e544:	843fffc4 	addi	r16,r16,-1
    e548:	dfc00d15 	stw	ra,52(sp)
    e54c:	ddc00b15 	stw	r23,44(sp)
    e550:	dd400915 	stw	r21,36(sp)
    e554:	1501ffcc 	andi	r20,r2,2047
    e558:	2023883a 	mov	r17,r4
    e55c:	2025883a 	mov	r18,r4
    e560:	2c20703a 	and	r16,r5,r16
    e564:	b027883a 	mov	r19,r22
    e568:	b7003fcc 	andi	fp,r22,255
    e56c:	a0005926 	beq	r20,zero,e6d4 <__muldf3+0x1bc>
    e570:	0081ffc4 	movi	r2,2047
    e574:	a0803426 	beq	r20,r2,e648 <__muldf3+0x130>
    e578:	84000434 	orhi	r16,r16,16
    e57c:	2004d77a 	srli	r2,r4,29
    e580:	802090fa 	slli	r16,r16,3
    e584:	202490fa 	slli	r18,r4,3
    e588:	a53f0044 	addi	r20,r20,-1023
    e58c:	80a0b03a 	or	r16,r16,r2
    e590:	002b883a 	mov	r21,zero
    e594:	0015883a 	mov	r10,zero
    e598:	3812d53a 	srli	r9,r7,20
    e59c:	3806d7fa 	srli	r3,r7,31
    e5a0:	02000434 	movhi	r8,16
    e5a4:	423fffc4 	addi	r8,r8,-1
    e5a8:	4941ffcc 	andi	r5,r9,2047
    e5ac:	302f883a 	mov	r23,r6
    e5b0:	3a22703a 	and	r17,r7,r8
    e5b4:	1ac03fcc 	andi	r11,r3,255
    e5b8:	28006226 	beq	r5,zero,e744 <__muldf3+0x22c>
    e5bc:	0081ffc4 	movi	r2,2047
    e5c0:	28805a26 	beq	r5,r2,e72c <__muldf3+0x214>
    e5c4:	8a000434 	orhi	r8,r17,16
    e5c8:	3004d77a 	srli	r2,r6,29
    e5cc:	401090fa 	slli	r8,r8,3
    e5d0:	302e90fa 	slli	r23,r6,3
    e5d4:	297f0044 	addi	r5,r5,-1023
    e5d8:	40a2b03a 	or	r17,r8,r2
    e5dc:	0013883a 	mov	r9,zero
    e5e0:	4d4cb03a 	or	r6,r9,r21
    e5e4:	300c90ba 	slli	r6,r6,2
    e5e8:	02000074 	movhi	r8,1
    e5ec:	42398204 	addi	r8,r8,-6648
    e5f0:	320d883a 	add	r6,r6,r8
    e5f4:	31800017 	ldw	r6,0(r6)
    e5f8:	a14b883a 	add	r5,r20,r5
    e5fc:	1dacf03a 	xor	r22,r3,r22
    e600:	2b000044 	addi	r12,r5,1
    e604:	3000683a 	jmp	r6
    e608:	0000e844 	movi	zero,929
    e60c:	0000e830 	cmpltui	zero,zero,928
    e610:	0000e830 	cmpltui	zero,zero,928
    e614:	0000e81c 	xori	zero,zero,928
    e618:	0000e664 	muli	zero,zero,921
    e61c:	0000e664 	muli	zero,zero,921
    e620:	0000e804 	movi	zero,928
    e624:	0000e81c 	xori	zero,zero,928
    e628:	0000e664 	muli	zero,zero,921
    e62c:	0000e804 	movi	zero,928
    e630:	0000e664 	muli	zero,zero,921
    e634:	0000e81c 	xori	zero,zero,928
    e638:	0000e668 	cmpgeui	zero,zero,921
    e63c:	0000e668 	cmpgeui	zero,zero,921
    e640:	0000e668 	cmpgeui	zero,zero,921
    e644:	0000ea40 	call	ea4 <main+0xc48>
    e648:	8104b03a 	or	r2,r16,r4
    e64c:	10006a1e 	bne	r2,zero,e7f8 <__muldf3+0x2e0>
    e650:	05400204 	movi	r21,8
    e654:	0021883a 	mov	r16,zero
    e658:	0025883a 	mov	r18,zero
    e65c:	02800084 	movi	r10,2
    e660:	003fcd06 	br	e598 <__alt_mem_sram+0xf7e0e598>
    e664:	b039883a 	mov	fp,r22
    e668:	00800084 	movi	r2,2
    e66c:	50804e1e 	bne	r10,r2,e7a8 <__muldf3+0x290>
    e670:	e4c0004c 	andi	r19,fp,1
    e674:	0101ffc4 	movi	r4,2047
    e678:	0021883a 	mov	r16,zero
    e67c:	0025883a 	mov	r18,zero
    e680:	2008953a 	slli	r4,r4,20
    e684:	98c03fcc 	andi	r3,r19,255
    e688:	01400434 	movhi	r5,16
    e68c:	297fffc4 	addi	r5,r5,-1
    e690:	180697fa 	slli	r3,r3,31
    e694:	8160703a 	and	r16,r16,r5
    e698:	8120b03a 	or	r16,r16,r4
    e69c:	80c6b03a 	or	r3,r16,r3
    e6a0:	9005883a 	mov	r2,r18
    e6a4:	dfc00d17 	ldw	ra,52(sp)
    e6a8:	df000c17 	ldw	fp,48(sp)
    e6ac:	ddc00b17 	ldw	r23,44(sp)
    e6b0:	dd800a17 	ldw	r22,40(sp)
    e6b4:	dd400917 	ldw	r21,36(sp)
    e6b8:	dd000817 	ldw	r20,32(sp)
    e6bc:	dcc00717 	ldw	r19,28(sp)
    e6c0:	dc800617 	ldw	r18,24(sp)
    e6c4:	dc400517 	ldw	r17,20(sp)
    e6c8:	dc000417 	ldw	r16,16(sp)
    e6cc:	dec00e04 	addi	sp,sp,56
    e6d0:	f800283a 	ret
    e6d4:	8104b03a 	or	r2,r16,r4
    e6d8:	10004226 	beq	r2,zero,e7e4 <__muldf3+0x2cc>
    e6dc:	8000f926 	beq	r16,zero,eac4 <__muldf3+0x5ac>
    e6e0:	8009883a 	mov	r4,r16
    e6e4:	d9800315 	stw	r6,12(sp)
    e6e8:	d9c00015 	stw	r7,0(sp)
    e6ec:	000f7080 	call	f708 <__clzsi2>
    e6f0:	d9800317 	ldw	r6,12(sp)
    e6f4:	d9c00017 	ldw	r7,0(sp)
    e6f8:	1007883a 	mov	r3,r2
    e6fc:	01000a04 	movi	r4,40
    e700:	18bffe04 	addi	r2,r3,-8
    e704:	20c9c83a 	sub	r4,r4,r3
    e708:	80a0983a 	sll	r16,r16,r2
    e70c:	8908d83a 	srl	r4,r17,r4
    e710:	88a4983a 	sll	r18,r17,r2
    e714:	2420b03a 	or	r16,r4,r16
    e718:	017f0344 	movi	r5,-1011
    e71c:	28e9c83a 	sub	r20,r5,r3
    e720:	002b883a 	mov	r21,zero
    e724:	0015883a 	mov	r10,zero
    e728:	003f9b06 	br	e598 <__alt_mem_sram+0xf7e0e598>
    e72c:	8984b03a 	or	r2,r17,r6
    e730:	10002a1e 	bne	r2,zero,e7dc <__muldf3+0x2c4>
    e734:	0023883a 	mov	r17,zero
    e738:	002f883a 	mov	r23,zero
    e73c:	02400084 	movi	r9,2
    e740:	003fa706 	br	e5e0 <__alt_mem_sram+0xf7e0e5e0>
    e744:	8984b03a 	or	r2,r17,r6
    e748:	10002026 	beq	r2,zero,e7cc <__muldf3+0x2b4>
    e74c:	8800cc26 	beq	r17,zero,ea80 <__muldf3+0x568>
    e750:	8809883a 	mov	r4,r17
    e754:	d8c00215 	stw	r3,8(sp)
    e758:	d9800315 	stw	r6,12(sp)
    e75c:	da800015 	stw	r10,0(sp)
    e760:	dac00115 	stw	r11,4(sp)
    e764:	000f7080 	call	f708 <__clzsi2>
    e768:	d8c00217 	ldw	r3,8(sp)
    e76c:	d9800317 	ldw	r6,12(sp)
    e770:	da800017 	ldw	r10,0(sp)
    e774:	dac00117 	ldw	r11,4(sp)
    e778:	1009883a 	mov	r4,r2
    e77c:	01400a04 	movi	r5,40
    e780:	25fffe04 	addi	r23,r4,-8
    e784:	290bc83a 	sub	r5,r5,r4
    e788:	8dd0983a 	sll	r8,r17,r23
    e78c:	314ad83a 	srl	r5,r6,r5
    e790:	35ee983a 	sll	r23,r6,r23
    e794:	2a22b03a 	or	r17,r5,r8
    e798:	017f0344 	movi	r5,-1011
    e79c:	290bc83a 	sub	r5,r5,r4
    e7a0:	0013883a 	mov	r9,zero
    e7a4:	003f8e06 	br	e5e0 <__alt_mem_sram+0xf7e0e5e0>
    e7a8:	008000c4 	movi	r2,3
    e7ac:	50811d26 	beq	r10,r2,ec24 <__muldf3+0x70c>
    e7b0:	00800044 	movi	r2,1
    e7b4:	5080e01e 	bne	r10,r2,eb38 <__muldf3+0x620>
    e7b8:	e0a6703a 	and	r19,fp,r2
    e7bc:	0009883a 	mov	r4,zero
    e7c0:	0021883a 	mov	r16,zero
    e7c4:	0025883a 	mov	r18,zero
    e7c8:	003fad06 	br	e680 <__alt_mem_sram+0xf7e0e680>
    e7cc:	0023883a 	mov	r17,zero
    e7d0:	002f883a 	mov	r23,zero
    e7d4:	02400044 	movi	r9,1
    e7d8:	003f8106 	br	e5e0 <__alt_mem_sram+0xf7e0e5e0>
    e7dc:	024000c4 	movi	r9,3
    e7e0:	003f7f06 	br	e5e0 <__alt_mem_sram+0xf7e0e5e0>
    e7e4:	05400104 	movi	r21,4
    e7e8:	0021883a 	mov	r16,zero
    e7ec:	0025883a 	mov	r18,zero
    e7f0:	02800044 	movi	r10,1
    e7f4:	003f6806 	br	e598 <__alt_mem_sram+0xf7e0e598>
    e7f8:	05400304 	movi	r21,12
    e7fc:	028000c4 	movi	r10,3
    e800:	003f6506 	br	e598 <__alt_mem_sram+0xf7e0e598>
    e804:	04000434 	movhi	r16,16
    e808:	0027883a 	mov	r19,zero
    e80c:	843fffc4 	addi	r16,r16,-1
    e810:	04bfffc4 	movi	r18,-1
    e814:	0101ffc4 	movi	r4,2047
    e818:	003f9906 	br	e680 <__alt_mem_sram+0xf7e0e680>
    e81c:	8821883a 	mov	r16,r17
    e820:	b825883a 	mov	r18,r23
    e824:	5839883a 	mov	fp,r11
    e828:	4815883a 	mov	r10,r9
    e82c:	003f8e06 	br	e668 <__alt_mem_sram+0xf7e0e668>
    e830:	8821883a 	mov	r16,r17
    e834:	b825883a 	mov	r18,r23
    e838:	b039883a 	mov	fp,r22
    e83c:	4815883a 	mov	r10,r9
    e840:	003f8906 	br	e668 <__alt_mem_sram+0xf7e0e668>
    e844:	b80cd43a 	srli	r6,r23,16
    e848:	9006d43a 	srli	r3,r18,16
    e84c:	90bfffcc 	andi	r2,r18,65535
    e850:	bdffffcc 	andi	r23,r23,65535
    e854:	b891383a 	mul	r8,r23,r2
    e858:	b8c9383a 	mul	r4,r23,r3
    e85c:	309b383a 	mul	r13,r6,r2
    e860:	400ed43a 	srli	r7,r8,16
    e864:	30df383a 	mul	r15,r6,r3
    e868:	235b883a 	add	r13,r4,r13
    e86c:	69db883a 	add	r13,r13,r7
    e870:	6900022e 	bgeu	r13,r4,e87c <__muldf3+0x364>
    e874:	01000074 	movhi	r4,1
    e878:	791f883a 	add	r15,r15,r4
    e87c:	8828d43a 	srli	r20,r17,16
    e880:	8c7fffcc 	andi	r17,r17,65535
    e884:	888f383a 	mul	r7,r17,r2
    e888:	88d3383a 	mul	r9,r17,r3
    e88c:	a0a5383a 	mul	r18,r20,r2
    e890:	3816d43a 	srli	r11,r7,16
    e894:	6814943a 	slli	r10,r13,16
    e898:	4ca5883a 	add	r18,r9,r18
    e89c:	423fffcc 	andi	r8,r8,65535
    e8a0:	92e5883a 	add	r18,r18,r11
    e8a4:	6808d43a 	srli	r4,r13,16
    e8a8:	5215883a 	add	r10,r10,r8
    e8ac:	a0c7383a 	mul	r3,r20,r3
    e8b0:	9240022e 	bgeu	r18,r9,e8bc <__muldf3+0x3a4>
    e8b4:	00800074 	movhi	r2,1
    e8b8:	1887883a 	add	r3,r3,r2
    e8bc:	802ad43a 	srli	r21,r16,16
    e8c0:	80bfffcc 	andi	r2,r16,65535
    e8c4:	b893383a 	mul	r9,r23,r2
    e8c8:	3091383a 	mul	r8,r6,r2
    e8cc:	bd6f383a 	mul	r23,r23,r21
    e8d0:	9026943a 	slli	r19,r18,16
    e8d4:	481ad43a 	srli	r13,r9,16
    e8d8:	9024d43a 	srli	r18,r18,16
    e8dc:	39ffffcc 	andi	r7,r7,65535
    e8e0:	ba11883a 	add	r8,r23,r8
    e8e4:	99e7883a 	add	r19,r19,r7
    e8e8:	4351883a 	add	r8,r8,r13
    e8ec:	1c97883a 	add	r11,r3,r18
    e8f0:	354d383a 	mul	r6,r6,r21
    e8f4:	9925883a 	add	r18,r19,r4
    e8f8:	45c0022e 	bgeu	r8,r23,e904 <__muldf3+0x3ec>
    e8fc:	00c00074 	movhi	r3,1
    e900:	30cd883a 	add	r6,r6,r3
    e904:	8889383a 	mul	r4,r17,r2
    e908:	8d63383a 	mul	r17,r17,r21
    e90c:	a085383a 	mul	r2,r20,r2
    e910:	200ed43a 	srli	r7,r4,16
    e914:	401cd43a 	srli	r14,r8,16
    e918:	401a943a 	slli	r13,r8,16
    e91c:	8885883a 	add	r2,r17,r2
    e920:	4a3fffcc 	andi	r8,r9,65535
    e924:	11c5883a 	add	r2,r2,r7
    e928:	339d883a 	add	r14,r6,r14
    e92c:	6a11883a 	add	r8,r13,r8
    e930:	a561383a 	mul	r16,r20,r21
    e934:	1440022e 	bgeu	r2,r17,e940 <__muldf3+0x428>
    e938:	00c00074 	movhi	r3,1
    e93c:	80e1883a 	add	r16,r16,r3
    e940:	1006943a 	slli	r3,r2,16
    e944:	213fffcc 	andi	r4,r4,65535
    e948:	93db883a 	add	r13,r18,r15
    e94c:	1909883a 	add	r4,r3,r4
    e950:	22c7883a 	add	r3,r4,r11
    e954:	6cd3803a 	cmpltu	r9,r13,r19
    e958:	6a09883a 	add	r4,r13,r8
    e95c:	1a5b883a 	add	r13,r3,r9
    e960:	2211803a 	cmpltu	r8,r4,r8
    e964:	734d883a 	add	r6,r14,r13
    e968:	100ed43a 	srli	r7,r2,16
    e96c:	6a53803a 	cmpltu	r9,r13,r9
    e970:	3205883a 	add	r2,r6,r8
    e974:	1ac7803a 	cmpltu	r3,r3,r11
    e978:	1211803a 	cmpltu	r8,r2,r8
    e97c:	48c6b03a 	or	r3,r9,r3
    e980:	338d803a 	cmpltu	r6,r6,r14
    e984:	19c7883a 	add	r3,r3,r7
    e988:	418cb03a 	or	r6,r8,r6
    e98c:	1987883a 	add	r3,r3,r6
    e990:	2024927a 	slli	r18,r4,9
    e994:	1c07883a 	add	r3,r3,r16
    e998:	1806927a 	slli	r3,r3,9
    e99c:	1020d5fa 	srli	r16,r2,23
    e9a0:	2008d5fa 	srli	r4,r4,23
    e9a4:	9294b03a 	or	r10,r18,r10
    e9a8:	1004927a 	slli	r2,r2,9
    e9ac:	5024c03a 	cmpne	r18,r10,zero
    e9b0:	1c20b03a 	or	r16,r3,r16
    e9b4:	9108b03a 	or	r4,r18,r4
    e9b8:	80c0402c 	andhi	r3,r16,256
    e9bc:	20a4b03a 	or	r18,r4,r2
    e9c0:	18000726 	beq	r3,zero,e9e0 <__muldf3+0x4c8>
    e9c4:	9006d07a 	srli	r3,r18,1
    e9c8:	800897fa 	slli	r4,r16,31
    e9cc:	9080004c 	andi	r2,r18,1
    e9d0:	8020d07a 	srli	r16,r16,1
    e9d4:	10c4b03a 	or	r2,r2,r3
    e9d8:	1124b03a 	or	r18,r2,r4
    e9dc:	600b883a 	mov	r5,r12
    e9e0:	2900ffc4 	addi	r4,r5,1023
    e9e4:	01004b0e 	bge	zero,r4,eb14 <__muldf3+0x5fc>
    e9e8:	908001cc 	andi	r2,r18,7
    e9ec:	10000726 	beq	r2,zero,ea0c <__muldf3+0x4f4>
    e9f0:	90c003cc 	andi	r3,r18,15
    e9f4:	00800104 	movi	r2,4
    e9f8:	18800426 	beq	r3,r2,ea0c <__muldf3+0x4f4>
    e9fc:	9087883a 	add	r3,r18,r2
    ea00:	1c85803a 	cmpltu	r2,r3,r18
    ea04:	80a1883a 	add	r16,r16,r2
    ea08:	1825883a 	mov	r18,r3
    ea0c:	8080402c 	andhi	r2,r16,256
    ea10:	10000426 	beq	r2,zero,ea24 <__muldf3+0x50c>
    ea14:	00bfc034 	movhi	r2,65280
    ea18:	10bfffc4 	addi	r2,r2,-1
    ea1c:	29010004 	addi	r4,r5,1024
    ea20:	80a0703a 	and	r16,r16,r2
    ea24:	0081ff84 	movi	r2,2046
    ea28:	1100320e 	bge	r2,r4,eaf4 <__muldf3+0x5dc>
    ea2c:	b4c0004c 	andi	r19,r22,1
    ea30:	0101ffc4 	movi	r4,2047
    ea34:	0021883a 	mov	r16,zero
    ea38:	0025883a 	mov	r18,zero
    ea3c:	003f1006 	br	e680 <__alt_mem_sram+0xf7e0e680>
    ea40:	8080022c 	andhi	r2,r16,8
    ea44:	10000926 	beq	r2,zero,ea6c <__muldf3+0x554>
    ea48:	8880022c 	andhi	r2,r17,8
    ea4c:	1000071e 	bne	r2,zero,ea6c <__muldf3+0x554>
    ea50:	00800434 	movhi	r2,16
    ea54:	8c000234 	orhi	r16,r17,8
    ea58:	10bfffc4 	addi	r2,r2,-1
    ea5c:	1827883a 	mov	r19,r3
    ea60:	80a0703a 	and	r16,r16,r2
    ea64:	b825883a 	mov	r18,r23
    ea68:	003f6a06 	br	e814 <__alt_mem_sram+0xf7e0e814>
    ea6c:	00800434 	movhi	r2,16
    ea70:	84000234 	orhi	r16,r16,8
    ea74:	10bfffc4 	addi	r2,r2,-1
    ea78:	80a0703a 	and	r16,r16,r2
    ea7c:	003f6506 	br	e814 <__alt_mem_sram+0xf7e0e814>
    ea80:	3009883a 	mov	r4,r6
    ea84:	d8c00215 	stw	r3,8(sp)
    ea88:	d9800315 	stw	r6,12(sp)
    ea8c:	da800015 	stw	r10,0(sp)
    ea90:	dac00115 	stw	r11,4(sp)
    ea94:	000f7080 	call	f708 <__clzsi2>
    ea98:	11000804 	addi	r4,r2,32
    ea9c:	014009c4 	movi	r5,39
    eaa0:	d8c00217 	ldw	r3,8(sp)
    eaa4:	d9800317 	ldw	r6,12(sp)
    eaa8:	da800017 	ldw	r10,0(sp)
    eaac:	dac00117 	ldw	r11,4(sp)
    eab0:	293f320e 	bge	r5,r4,e77c <__alt_mem_sram+0xf7e0e77c>
    eab4:	10bffe04 	addi	r2,r2,-8
    eab8:	b8a2983a 	sll	r17,r23,r2
    eabc:	002f883a 	mov	r23,zero
    eac0:	003f3506 	br	e798 <__alt_mem_sram+0xf7e0e798>
    eac4:	d9800315 	stw	r6,12(sp)
    eac8:	d9c00015 	stw	r7,0(sp)
    eacc:	000f7080 	call	f708 <__clzsi2>
    ead0:	10c00804 	addi	r3,r2,32
    ead4:	010009c4 	movi	r4,39
    ead8:	d9800317 	ldw	r6,12(sp)
    eadc:	d9c00017 	ldw	r7,0(sp)
    eae0:	20ff060e 	bge	r4,r3,e6fc <__alt_mem_sram+0xf7e0e6fc>
    eae4:	10bffe04 	addi	r2,r2,-8
    eae8:	88a0983a 	sll	r16,r17,r2
    eaec:	0025883a 	mov	r18,zero
    eaf0:	003f0906 	br	e718 <__alt_mem_sram+0xf7e0e718>
    eaf4:	9004d0fa 	srli	r2,r18,3
    eaf8:	8024977a 	slli	r18,r16,29
    eafc:	8020927a 	slli	r16,r16,9
    eb00:	2101ffcc 	andi	r4,r4,2047
    eb04:	90a4b03a 	or	r18,r18,r2
    eb08:	8020d33a 	srli	r16,r16,12
    eb0c:	b4c0004c 	andi	r19,r22,1
    eb10:	003edb06 	br	e680 <__alt_mem_sram+0xf7e0e680>
    eb14:	00ff0084 	movi	r3,-1022
    eb18:	1947c83a 	sub	r3,r3,r5
    eb1c:	00800e04 	movi	r2,56
    eb20:	10c0080e 	bge	r2,r3,eb44 <__muldf3+0x62c>
    eb24:	b4c0004c 	andi	r19,r22,1
    eb28:	0009883a 	mov	r4,zero
    eb2c:	0021883a 	mov	r16,zero
    eb30:	0025883a 	mov	r18,zero
    eb34:	003ed206 	br	e680 <__alt_mem_sram+0xf7e0e680>
    eb38:	600b883a 	mov	r5,r12
    eb3c:	e02d883a 	mov	r22,fp
    eb40:	003fa706 	br	e9e0 <__alt_mem_sram+0xf7e0e9e0>
    eb44:	008007c4 	movi	r2,31
    eb48:	10c01816 	blt	r2,r3,ebac <__muldf3+0x694>
    eb4c:	29410784 	addi	r5,r5,1054
    eb50:	8144983a 	sll	r2,r16,r5
    eb54:	90c8d83a 	srl	r4,r18,r3
    eb58:	914a983a 	sll	r5,r18,r5
    eb5c:	80c6d83a 	srl	r3,r16,r3
    eb60:	2088b03a 	or	r4,r4,r2
    eb64:	2804c03a 	cmpne	r2,r5,zero
    eb68:	2084b03a 	or	r2,r4,r2
    eb6c:	110001cc 	andi	r4,r2,7
    eb70:	20000726 	beq	r4,zero,eb90 <__muldf3+0x678>
    eb74:	114003cc 	andi	r5,r2,15
    eb78:	01000104 	movi	r4,4
    eb7c:	29000426 	beq	r5,r4,eb90 <__muldf3+0x678>
    eb80:	11000104 	addi	r4,r2,4
    eb84:	2085803a 	cmpltu	r2,r4,r2
    eb88:	1887883a 	add	r3,r3,r2
    eb8c:	2005883a 	mov	r2,r4
    eb90:	1900202c 	andhi	r4,r3,128
    eb94:	20001826 	beq	r4,zero,ebf8 <__muldf3+0x6e0>
    eb98:	b4c0004c 	andi	r19,r22,1
    eb9c:	01000044 	movi	r4,1
    eba0:	0021883a 	mov	r16,zero
    eba4:	0025883a 	mov	r18,zero
    eba8:	003eb506 	br	e680 <__alt_mem_sram+0xf7e0e680>
    ebac:	00bef884 	movi	r2,-1054
    ebb0:	1145c83a 	sub	r2,r2,r5
    ebb4:	8088d83a 	srl	r4,r16,r2
    ebb8:	00800804 	movi	r2,32
    ebbc:	18801726 	beq	r3,r2,ec1c <__muldf3+0x704>
    ebc0:	28810f84 	addi	r2,r5,1086
    ebc4:	8084983a 	sll	r2,r16,r2
    ebc8:	1484b03a 	or	r2,r2,r18
    ebcc:	1004c03a 	cmpne	r2,r2,zero
    ebd0:	1104b03a 	or	r2,r2,r4
    ebd4:	10c001cc 	andi	r3,r2,7
    ebd8:	18000b1e 	bne	r3,zero,ec08 <__muldf3+0x6f0>
    ebdc:	0021883a 	mov	r16,zero
    ebe0:	1004d0fa 	srli	r2,r2,3
    ebe4:	b4c0004c 	andi	r19,r22,1
    ebe8:	0009883a 	mov	r4,zero
    ebec:	10e4b03a 	or	r18,r2,r3
    ebf0:	003ea306 	br	e680 <__alt_mem_sram+0xf7e0e680>
    ebf4:	0007883a 	mov	r3,zero
    ebf8:	1820927a 	slli	r16,r3,9
    ebfc:	1806977a 	slli	r3,r3,29
    ec00:	8020d33a 	srli	r16,r16,12
    ec04:	003ff606 	br	ebe0 <__alt_mem_sram+0xf7e0ebe0>
    ec08:	110003cc 	andi	r4,r2,15
    ec0c:	00c00104 	movi	r3,4
    ec10:	20fff826 	beq	r4,r3,ebf4 <__alt_mem_sram+0xf7e0ebf4>
    ec14:	0007883a 	mov	r3,zero
    ec18:	003fd906 	br	eb80 <__alt_mem_sram+0xf7e0eb80>
    ec1c:	0005883a 	mov	r2,zero
    ec20:	003fe906 	br	ebc8 <__alt_mem_sram+0xf7e0ebc8>
    ec24:	00800434 	movhi	r2,16
    ec28:	84000234 	orhi	r16,r16,8
    ec2c:	10bfffc4 	addi	r2,r2,-1
    ec30:	e4c0004c 	andi	r19,fp,1
    ec34:	80a0703a 	and	r16,r16,r2
    ec38:	003ef606 	br	e814 <__alt_mem_sram+0xf7e0e814>

0000ec3c <__subdf3>:
    ec3c:	00c00434 	movhi	r3,16
    ec40:	18ffffc4 	addi	r3,r3,-1
    ec44:	defffb04 	addi	sp,sp,-20
    ec48:	28d2703a 	and	r9,r5,r3
    ec4c:	3814d53a 	srli	r10,r7,20
    ec50:	38c6703a 	and	r3,r7,r3
    ec54:	3004d77a 	srli	r2,r6,29
    ec58:	dc800215 	stw	r18,8(sp)
    ec5c:	dc000015 	stw	r16,0(sp)
    ec60:	2824d7fa 	srli	r18,r5,31
    ec64:	2820d53a 	srli	r16,r5,20
    ec68:	481290fa 	slli	r9,r9,3
    ec6c:	200ad77a 	srli	r5,r4,29
    ec70:	180690fa 	slli	r3,r3,3
    ec74:	dc400115 	stw	r17,4(sp)
    ec78:	dfc00415 	stw	ra,16(sp)
    ec7c:	202290fa 	slli	r17,r4,3
    ec80:	dcc00315 	stw	r19,12(sp)
    ec84:	5281ffcc 	andi	r10,r10,2047
    ec88:	0101ffc4 	movi	r4,2047
    ec8c:	9011883a 	mov	r8,r18
    ec90:	8401ffcc 	andi	r16,r16,2047
    ec94:	94803fcc 	andi	r18,r18,255
    ec98:	494ab03a 	or	r5,r9,r5
    ec9c:	380ed7fa 	srli	r7,r7,31
    eca0:	1886b03a 	or	r3,r3,r2
    eca4:	300c90fa 	slli	r6,r6,3
    eca8:	51009026 	beq	r10,r4,eeec <__subdf3+0x2b0>
    ecac:	39c0005c 	xori	r7,r7,1
    ecb0:	8285c83a 	sub	r2,r16,r10
    ecb4:	91c06f26 	beq	r18,r7,ee74 <__subdf3+0x238>
    ecb8:	0080b10e 	bge	zero,r2,ef80 <__subdf3+0x344>
    ecbc:	50002a1e 	bne	r10,zero,ed68 <__subdf3+0x12c>
    ecc0:	1988b03a 	or	r4,r3,r6
    ecc4:	2000941e 	bne	r4,zero,ef18 <__subdf3+0x2dc>
    ecc8:	888001cc 	andi	r2,r17,7
    eccc:	10005b26 	beq	r2,zero,ee3c <__subdf3+0x200>
    ecd0:	88c003cc 	andi	r3,r17,15
    ecd4:	00800104 	movi	r2,4
    ecd8:	18805826 	beq	r3,r2,ee3c <__subdf3+0x200>
    ecdc:	88c00104 	addi	r3,r17,4
    ece0:	1c63803a 	cmpltu	r17,r3,r17
    ece4:	2c4b883a 	add	r5,r5,r17
    ece8:	2880202c 	andhi	r2,r5,128
    ecec:	9200004c 	andi	r8,r18,1
    ecf0:	1823883a 	mov	r17,r3
    ecf4:	10005426 	beq	r2,zero,ee48 <__subdf3+0x20c>
    ecf8:	84000044 	addi	r16,r16,1
    ecfc:	0081ffc4 	movi	r2,2047
    ed00:	8080bf26 	beq	r16,r2,f000 <__subdf3+0x3c4>
    ed04:	013fe034 	movhi	r4,65408
    ed08:	213fffc4 	addi	r4,r4,-1
    ed0c:	290a703a 	and	r5,r5,r4
    ed10:	2804977a 	slli	r2,r5,29
    ed14:	280a927a 	slli	r5,r5,9
    ed18:	8822d0fa 	srli	r17,r17,3
    ed1c:	8401ffcc 	andi	r16,r16,2047
    ed20:	2808d33a 	srli	r4,r5,12
    ed24:	1444b03a 	or	r2,r2,r17
    ed28:	8401ffcc 	andi	r16,r16,2047
    ed2c:	800a953a 	slli	r5,r16,20
    ed30:	40c03fcc 	andi	r3,r8,255
    ed34:	04000434 	movhi	r16,16
    ed38:	180697fa 	slli	r3,r3,31
    ed3c:	843fffc4 	addi	r16,r16,-1
    ed40:	2420703a 	and	r16,r4,r16
    ed44:	8160b03a 	or	r16,r16,r5
    ed48:	80c6b03a 	or	r3,r16,r3
    ed4c:	dfc00417 	ldw	ra,16(sp)
    ed50:	dcc00317 	ldw	r19,12(sp)
    ed54:	dc800217 	ldw	r18,8(sp)
    ed58:	dc400117 	ldw	r17,4(sp)
    ed5c:	dc000017 	ldw	r16,0(sp)
    ed60:	dec00504 	addi	sp,sp,20
    ed64:	f800283a 	ret
    ed68:	0101ffc4 	movi	r4,2047
    ed6c:	813fd626 	beq	r16,r4,ecc8 <__alt_mem_sram+0xf7e0ecc8>
    ed70:	18c02034 	orhi	r3,r3,128
    ed74:	01000e04 	movi	r4,56
    ed78:	2080a416 	blt	r4,r2,f00c <__subdf3+0x3d0>
    ed7c:	010007c4 	movi	r4,31
    ed80:	2080c716 	blt	r4,r2,f0a0 <__subdf3+0x464>
    ed84:	01000804 	movi	r4,32
    ed88:	2089c83a 	sub	r4,r4,r2
    ed8c:	1910983a 	sll	r8,r3,r4
    ed90:	308ed83a 	srl	r7,r6,r2
    ed94:	3108983a 	sll	r4,r6,r4
    ed98:	1884d83a 	srl	r2,r3,r2
    ed9c:	41ccb03a 	or	r6,r8,r7
    eda0:	2008c03a 	cmpne	r4,r4,zero
    eda4:	310cb03a 	or	r6,r6,r4
    eda8:	898dc83a 	sub	r6,r17,r6
    edac:	89a3803a 	cmpltu	r17,r17,r6
    edb0:	288bc83a 	sub	r5,r5,r2
    edb4:	2c4bc83a 	sub	r5,r5,r17
    edb8:	3023883a 	mov	r17,r6
    edbc:	2880202c 	andhi	r2,r5,128
    edc0:	10006b26 	beq	r2,zero,ef70 <__subdf3+0x334>
    edc4:	04c02034 	movhi	r19,128
    edc8:	9cffffc4 	addi	r19,r19,-1
    edcc:	2ce6703a 	and	r19,r5,r19
    edd0:	98007c26 	beq	r19,zero,efc4 <__subdf3+0x388>
    edd4:	9809883a 	mov	r4,r19
    edd8:	000f7080 	call	f708 <__clzsi2>
    eddc:	10fffe04 	addi	r3,r2,-8
    ede0:	010007c4 	movi	r4,31
    ede4:	20c07d16 	blt	r4,r3,efdc <__subdf3+0x3a0>
    ede8:	01400a04 	movi	r5,40
    edec:	2885c83a 	sub	r2,r5,r2
    edf0:	888ad83a 	srl	r5,r17,r2
    edf4:	98e6983a 	sll	r19,r19,r3
    edf8:	88e2983a 	sll	r17,r17,r3
    edfc:	2ce6b03a 	or	r19,r5,r19
    ee00:	1c007a16 	blt	r3,r16,efec <__subdf3+0x3b0>
    ee04:	1c21c83a 	sub	r16,r3,r16
    ee08:	81400044 	addi	r5,r16,1
    ee0c:	00c007c4 	movi	r3,31
    ee10:	19409616 	blt	r3,r5,f06c <__subdf3+0x430>
    ee14:	1c21c83a 	sub	r16,r3,r16
    ee18:	8c08983a 	sll	r4,r17,r16
    ee1c:	8946d83a 	srl	r3,r17,r5
    ee20:	9c20983a 	sll	r16,r19,r16
    ee24:	2008c03a 	cmpne	r4,r4,zero
    ee28:	994ad83a 	srl	r5,r19,r5
    ee2c:	1c06b03a 	or	r3,r3,r16
    ee30:	1922b03a 	or	r17,r3,r4
    ee34:	0021883a 	mov	r16,zero
    ee38:	003fa306 	br	ecc8 <__alt_mem_sram+0xf7e0ecc8>
    ee3c:	2880202c 	andhi	r2,r5,128
    ee40:	9200004c 	andi	r8,r18,1
    ee44:	103fac1e 	bne	r2,zero,ecf8 <__alt_mem_sram+0xf7e0ecf8>
    ee48:	2804977a 	slli	r2,r5,29
    ee4c:	8822d0fa 	srli	r17,r17,3
    ee50:	00c1ffc4 	movi	r3,2047
    ee54:	280ad0fa 	srli	r5,r5,3
    ee58:	1444b03a 	or	r2,r2,r17
    ee5c:	80c02726 	beq	r16,r3,eefc <__subdf3+0x2c0>
    ee60:	01000434 	movhi	r4,16
    ee64:	213fffc4 	addi	r4,r4,-1
    ee68:	80e0703a 	and	r16,r16,r3
    ee6c:	2908703a 	and	r4,r5,r4
    ee70:	003fad06 	br	ed28 <__alt_mem_sram+0xf7e0ed28>
    ee74:	0080690e 	bge	zero,r2,f01c <__subdf3+0x3e0>
    ee78:	50002f26 	beq	r10,zero,ef38 <__subdf3+0x2fc>
    ee7c:	0101ffc4 	movi	r4,2047
    ee80:	813f9126 	beq	r16,r4,ecc8 <__alt_mem_sram+0xf7e0ecc8>
    ee84:	18c02034 	orhi	r3,r3,128
    ee88:	01000e04 	movi	r4,56
    ee8c:	2080b00e 	bge	r4,r2,f150 <__subdf3+0x514>
    ee90:	198cb03a 	or	r6,r3,r6
    ee94:	300ec03a 	cmpne	r7,r6,zero
    ee98:	0005883a 	mov	r2,zero
    ee9c:	3c4f883a 	add	r7,r7,r17
    eea0:	3c63803a 	cmpltu	r17,r7,r17
    eea4:	114b883a 	add	r5,r2,r5
    eea8:	2c4b883a 	add	r5,r5,r17
    eeac:	3823883a 	mov	r17,r7
    eeb0:	2880202c 	andhi	r2,r5,128
    eeb4:	10002e26 	beq	r2,zero,ef70 <__subdf3+0x334>
    eeb8:	84000044 	addi	r16,r16,1
    eebc:	0081ffc4 	movi	r2,2047
    eec0:	8080de26 	beq	r16,r2,f23c <__subdf3+0x600>
    eec4:	00bfe034 	movhi	r2,65408
    eec8:	10bfffc4 	addi	r2,r2,-1
    eecc:	288a703a 	and	r5,r5,r2
    eed0:	880cd07a 	srli	r6,r17,1
    eed4:	280897fa 	slli	r4,r5,31
    eed8:	88c0004c 	andi	r3,r17,1
    eedc:	30e2b03a 	or	r17,r6,r3
    eee0:	280ad07a 	srli	r5,r5,1
    eee4:	8922b03a 	or	r17,r17,r4
    eee8:	003f7706 	br	ecc8 <__alt_mem_sram+0xf7e0ecc8>
    eeec:	1984b03a 	or	r2,r3,r6
    eef0:	103f6e26 	beq	r2,zero,ecac <__alt_mem_sram+0xf7e0ecac>
    eef4:	39c03fcc 	andi	r7,r7,255
    eef8:	003f6d06 	br	ecb0 <__alt_mem_sram+0xf7e0ecb0>
    eefc:	1146b03a 	or	r3,r2,r5
    ef00:	18003f26 	beq	r3,zero,f000 <__subdf3+0x3c4>
    ef04:	00c00434 	movhi	r3,16
    ef08:	29000234 	orhi	r4,r5,8
    ef0c:	18ffffc4 	addi	r3,r3,-1
    ef10:	20c8703a 	and	r4,r4,r3
    ef14:	003f8406 	br	ed28 <__alt_mem_sram+0xf7e0ed28>
    ef18:	10bfffc4 	addi	r2,r2,-1
    ef1c:	1000501e 	bne	r2,zero,f060 <__subdf3+0x424>
    ef20:	898fc83a 	sub	r7,r17,r6
    ef24:	89e3803a 	cmpltu	r17,r17,r7
    ef28:	28cbc83a 	sub	r5,r5,r3
    ef2c:	2c4bc83a 	sub	r5,r5,r17
    ef30:	3823883a 	mov	r17,r7
    ef34:	003fa106 	br	edbc <__alt_mem_sram+0xf7e0edbc>
    ef38:	1988b03a 	or	r4,r3,r6
    ef3c:	203f6226 	beq	r4,zero,ecc8 <__alt_mem_sram+0xf7e0ecc8>
    ef40:	10bfffc4 	addi	r2,r2,-1
    ef44:	10009b1e 	bne	r2,zero,f1b4 <__subdf3+0x578>
    ef48:	344d883a 	add	r6,r6,r17
    ef4c:	3463803a 	cmpltu	r17,r6,r17
    ef50:	194b883a 	add	r5,r3,r5
    ef54:	2c4b883a 	add	r5,r5,r17
    ef58:	3023883a 	mov	r17,r6
    ef5c:	003fd406 	br	eeb0 <__alt_mem_sram+0xf7e0eeb0>
    ef60:	1106b03a 	or	r3,r2,r4
    ef64:	1800b426 	beq	r3,zero,f238 <__subdf3+0x5fc>
    ef68:	100b883a 	mov	r5,r2
    ef6c:	2023883a 	mov	r17,r4
    ef70:	888001cc 	andi	r2,r17,7
    ef74:	103f561e 	bne	r2,zero,ecd0 <__alt_mem_sram+0xf7e0ecd0>
    ef78:	9200004c 	andi	r8,r18,1
    ef7c:	003fb206 	br	ee48 <__alt_mem_sram+0xf7e0ee48>
    ef80:	1000531e 	bne	r2,zero,f0d0 <__subdf3+0x494>
    ef84:	80800044 	addi	r2,r16,1
    ef88:	1081ffcc 	andi	r2,r2,2047
    ef8c:	01000044 	movi	r4,1
    ef90:	2080a00e 	bge	r4,r2,f214 <__subdf3+0x5d8>
    ef94:	8985c83a 	sub	r2,r17,r6
    ef98:	8889803a 	cmpltu	r4,r17,r2
    ef9c:	28e7c83a 	sub	r19,r5,r3
    efa0:	9927c83a 	sub	r19,r19,r4
    efa4:	9900202c 	andhi	r4,r19,128
    efa8:	20006226 	beq	r4,zero,f134 <__subdf3+0x4f8>
    efac:	3463c83a 	sub	r17,r6,r17
    efb0:	194bc83a 	sub	r5,r3,r5
    efb4:	344d803a 	cmpltu	r6,r6,r17
    efb8:	29a7c83a 	sub	r19,r5,r6
    efbc:	3825883a 	mov	r18,r7
    efc0:	983f841e 	bne	r19,zero,edd4 <__alt_mem_sram+0xf7e0edd4>
    efc4:	8809883a 	mov	r4,r17
    efc8:	000f7080 	call	f708 <__clzsi2>
    efcc:	10800804 	addi	r2,r2,32
    efd0:	10fffe04 	addi	r3,r2,-8
    efd4:	010007c4 	movi	r4,31
    efd8:	20ff830e 	bge	r4,r3,ede8 <__alt_mem_sram+0xf7e0ede8>
    efdc:	14fff604 	addi	r19,r2,-40
    efe0:	8ce6983a 	sll	r19,r17,r19
    efe4:	0023883a 	mov	r17,zero
    efe8:	1c3f860e 	bge	r3,r16,ee04 <__alt_mem_sram+0xf7e0ee04>
    efec:	017fe034 	movhi	r5,65408
    eff0:	297fffc4 	addi	r5,r5,-1
    eff4:	80e1c83a 	sub	r16,r16,r3
    eff8:	994a703a 	and	r5,r19,r5
    effc:	003f3206 	br	ecc8 <__alt_mem_sram+0xf7e0ecc8>
    f000:	0009883a 	mov	r4,zero
    f004:	0005883a 	mov	r2,zero
    f008:	003f4706 	br	ed28 <__alt_mem_sram+0xf7e0ed28>
    f00c:	198cb03a 	or	r6,r3,r6
    f010:	300cc03a 	cmpne	r6,r6,zero
    f014:	0005883a 	mov	r2,zero
    f018:	003f6306 	br	eda8 <__alt_mem_sram+0xf7e0eda8>
    f01c:	10009d1e 	bne	r2,zero,f294 <__subdf3+0x658>
    f020:	81c00044 	addi	r7,r16,1
    f024:	3881ffcc 	andi	r2,r7,2047
    f028:	02400044 	movi	r9,1
    f02c:	4880680e 	bge	r9,r2,f1d0 <__subdf3+0x594>
    f030:	0081ffc4 	movi	r2,2047
    f034:	3880ae26 	beq	r7,r2,f2f0 <__subdf3+0x6b4>
    f038:	344d883a 	add	r6,r6,r17
    f03c:	3463803a 	cmpltu	r17,r6,r17
    f040:	194b883a 	add	r5,r3,r5
    f044:	2c4b883a 	add	r5,r5,r17
    f048:	282297fa 	slli	r17,r5,31
    f04c:	300cd07a 	srli	r6,r6,1
    f050:	280ad07a 	srli	r5,r5,1
    f054:	3821883a 	mov	r16,r7
    f058:	89a2b03a 	or	r17,r17,r6
    f05c:	003f1a06 	br	ecc8 <__alt_mem_sram+0xf7e0ecc8>
    f060:	0101ffc4 	movi	r4,2047
    f064:	813f431e 	bne	r16,r4,ed74 <__alt_mem_sram+0xf7e0ed74>
    f068:	003f1706 	br	ecc8 <__alt_mem_sram+0xf7e0ecc8>
    f06c:	80bff844 	addi	r2,r16,-31
    f070:	00c00804 	movi	r3,32
    f074:	9884d83a 	srl	r2,r19,r2
    f078:	28c05126 	beq	r5,r3,f1c0 <__subdf3+0x584>
    f07c:	00c00fc4 	movi	r3,63
    f080:	1c21c83a 	sub	r16,r3,r16
    f084:	9c26983a 	sll	r19,r19,r16
    f088:	9c62b03a 	or	r17,r19,r17
    f08c:	8822c03a 	cmpne	r17,r17,zero
    f090:	88a2b03a 	or	r17,r17,r2
    f094:	000b883a 	mov	r5,zero
    f098:	0021883a 	mov	r16,zero
    f09c:	003fb406 	br	ef70 <__alt_mem_sram+0xf7e0ef70>
    f0a0:	113ff804 	addi	r4,r2,-32
    f0a4:	01c00804 	movi	r7,32
    f0a8:	1908d83a 	srl	r4,r3,r4
    f0ac:	11c04626 	beq	r2,r7,f1c8 <__subdf3+0x58c>
    f0b0:	01c01004 	movi	r7,64
    f0b4:	3885c83a 	sub	r2,r7,r2
    f0b8:	1884983a 	sll	r2,r3,r2
    f0bc:	118cb03a 	or	r6,r2,r6
    f0c0:	300cc03a 	cmpne	r6,r6,zero
    f0c4:	310cb03a 	or	r6,r6,r4
    f0c8:	0005883a 	mov	r2,zero
    f0cc:	003f3606 	br	eda8 <__alt_mem_sram+0xf7e0eda8>
    f0d0:	80002b26 	beq	r16,zero,f180 <__subdf3+0x544>
    f0d4:	0101ffc4 	movi	r4,2047
    f0d8:	51006926 	beq	r10,r4,f280 <__subdf3+0x644>
    f0dc:	0085c83a 	sub	r2,zero,r2
    f0e0:	29402034 	orhi	r5,r5,128
    f0e4:	01000e04 	movi	r4,56
    f0e8:	20807d16 	blt	r4,r2,f2e0 <__subdf3+0x6a4>
    f0ec:	010007c4 	movi	r4,31
    f0f0:	2080d916 	blt	r4,r2,f458 <__subdf3+0x81c>
    f0f4:	01000804 	movi	r4,32
    f0f8:	2089c83a 	sub	r4,r4,r2
    f0fc:	2912983a 	sll	r9,r5,r4
    f100:	8890d83a 	srl	r8,r17,r2
    f104:	8908983a 	sll	r4,r17,r4
    f108:	2884d83a 	srl	r2,r5,r2
    f10c:	4a22b03a 	or	r17,r9,r8
    f110:	2008c03a 	cmpne	r4,r4,zero
    f114:	8922b03a 	or	r17,r17,r4
    f118:	3463c83a 	sub	r17,r6,r17
    f11c:	1885c83a 	sub	r2,r3,r2
    f120:	344d803a 	cmpltu	r6,r6,r17
    f124:	118bc83a 	sub	r5,r2,r6
    f128:	5021883a 	mov	r16,r10
    f12c:	3825883a 	mov	r18,r7
    f130:	003f2206 	br	edbc <__alt_mem_sram+0xf7e0edbc>
    f134:	9886b03a 	or	r3,r19,r2
    f138:	18001c1e 	bne	r3,zero,f1ac <__subdf3+0x570>
    f13c:	0011883a 	mov	r8,zero
    f140:	000b883a 	mov	r5,zero
    f144:	0023883a 	mov	r17,zero
    f148:	0021883a 	mov	r16,zero
    f14c:	003f3e06 	br	ee48 <__alt_mem_sram+0xf7e0ee48>
    f150:	010007c4 	movi	r4,31
    f154:	20803c16 	blt	r4,r2,f248 <__subdf3+0x60c>
    f158:	01000804 	movi	r4,32
    f15c:	2089c83a 	sub	r4,r4,r2
    f160:	1912983a 	sll	r9,r3,r4
    f164:	308ed83a 	srl	r7,r6,r2
    f168:	3108983a 	sll	r4,r6,r4
    f16c:	1884d83a 	srl	r2,r3,r2
    f170:	49ceb03a 	or	r7,r9,r7
    f174:	2008c03a 	cmpne	r4,r4,zero
    f178:	390eb03a 	or	r7,r7,r4
    f17c:	003f4706 	br	ee9c <__alt_mem_sram+0xf7e0ee9c>
    f180:	2c48b03a 	or	r4,r5,r17
    f184:	20003e26 	beq	r4,zero,f280 <__subdf3+0x644>
    f188:	0084303a 	nor	r2,zero,r2
    f18c:	10003a1e 	bne	r2,zero,f278 <__subdf3+0x63c>
    f190:	3463c83a 	sub	r17,r6,r17
    f194:	194bc83a 	sub	r5,r3,r5
    f198:	344d803a 	cmpltu	r6,r6,r17
    f19c:	298bc83a 	sub	r5,r5,r6
    f1a0:	5021883a 	mov	r16,r10
    f1a4:	3825883a 	mov	r18,r7
    f1a8:	003f0406 	br	edbc <__alt_mem_sram+0xf7e0edbc>
    f1ac:	1023883a 	mov	r17,r2
    f1b0:	003f0706 	br	edd0 <__alt_mem_sram+0xf7e0edd0>
    f1b4:	0101ffc4 	movi	r4,2047
    f1b8:	813f331e 	bne	r16,r4,ee88 <__alt_mem_sram+0xf7e0ee88>
    f1bc:	003ec206 	br	ecc8 <__alt_mem_sram+0xf7e0ecc8>
    f1c0:	0027883a 	mov	r19,zero
    f1c4:	003fb006 	br	f088 <__alt_mem_sram+0xf7e0f088>
    f1c8:	0005883a 	mov	r2,zero
    f1cc:	003fbb06 	br	f0bc <__alt_mem_sram+0xf7e0f0bc>
    f1d0:	2c44b03a 	or	r2,r5,r17
    f1d4:	80008b1e 	bne	r16,zero,f404 <__subdf3+0x7c8>
    f1d8:	1000b526 	beq	r2,zero,f4b0 <__subdf3+0x874>
    f1dc:	1984b03a 	or	r2,r3,r6
    f1e0:	103eb926 	beq	r2,zero,ecc8 <__alt_mem_sram+0xf7e0ecc8>
    f1e4:	3449883a 	add	r4,r6,r17
    f1e8:	2463803a 	cmpltu	r17,r4,r17
    f1ec:	194b883a 	add	r5,r3,r5
    f1f0:	2c4b883a 	add	r5,r5,r17
    f1f4:	2880202c 	andhi	r2,r5,128
    f1f8:	2023883a 	mov	r17,r4
    f1fc:	103f5c26 	beq	r2,zero,ef70 <__alt_mem_sram+0xf7e0ef70>
    f200:	00bfe034 	movhi	r2,65408
    f204:	10bfffc4 	addi	r2,r2,-1
    f208:	4821883a 	mov	r16,r9
    f20c:	288a703a 	and	r5,r5,r2
    f210:	003ead06 	br	ecc8 <__alt_mem_sram+0xf7e0ecc8>
    f214:	2c44b03a 	or	r2,r5,r17
    f218:	8000291e 	bne	r16,zero,f2c0 <__subdf3+0x684>
    f21c:	10004f1e 	bne	r2,zero,f35c <__subdf3+0x720>
    f220:	1984b03a 	or	r2,r3,r6
    f224:	10000426 	beq	r2,zero,f238 <__subdf3+0x5fc>
    f228:	180b883a 	mov	r5,r3
    f22c:	3023883a 	mov	r17,r6
    f230:	3825883a 	mov	r18,r7
    f234:	003ea406 	br	ecc8 <__alt_mem_sram+0xf7e0ecc8>
    f238:	0011883a 	mov	r8,zero
    f23c:	000b883a 	mov	r5,zero
    f240:	0023883a 	mov	r17,zero
    f244:	003f0006 	br	ee48 <__alt_mem_sram+0xf7e0ee48>
    f248:	11fff804 	addi	r7,r2,-32
    f24c:	19c8d83a 	srl	r4,r3,r7
    f250:	01c00804 	movi	r7,32
    f254:	11c07e26 	beq	r2,r7,f450 <__subdf3+0x814>
    f258:	01c01004 	movi	r7,64
    f25c:	3885c83a 	sub	r2,r7,r2
    f260:	1884983a 	sll	r2,r3,r2
    f264:	118cb03a 	or	r6,r2,r6
    f268:	300ec03a 	cmpne	r7,r6,zero
    f26c:	390eb03a 	or	r7,r7,r4
    f270:	0005883a 	mov	r2,zero
    f274:	003f0906 	br	ee9c <__alt_mem_sram+0xf7e0ee9c>
    f278:	0101ffc4 	movi	r4,2047
    f27c:	513f991e 	bne	r10,r4,f0e4 <__alt_mem_sram+0xf7e0f0e4>
    f280:	180b883a 	mov	r5,r3
    f284:	3023883a 	mov	r17,r6
    f288:	5021883a 	mov	r16,r10
    f28c:	3825883a 	mov	r18,r7
    f290:	003e8d06 	br	ecc8 <__alt_mem_sram+0xf7e0ecc8>
    f294:	80001a1e 	bne	r16,zero,f300 <__subdf3+0x6c4>
    f298:	2c48b03a 	or	r4,r5,r17
    f29c:	20005526 	beq	r4,zero,f3f4 <__subdf3+0x7b8>
    f2a0:	0084303a 	nor	r2,zero,r2
    f2a4:	1000511e 	bne	r2,zero,f3ec <__subdf3+0x7b0>
    f2a8:	89a3883a 	add	r17,r17,r6
    f2ac:	194b883a 	add	r5,r3,r5
    f2b0:	898d803a 	cmpltu	r6,r17,r6
    f2b4:	298b883a 	add	r5,r5,r6
    f2b8:	5021883a 	mov	r16,r10
    f2bc:	003efc06 	br	eeb0 <__alt_mem_sram+0xf7e0eeb0>
    f2c0:	1000341e 	bne	r2,zero,f394 <__subdf3+0x758>
    f2c4:	1984b03a 	or	r2,r3,r6
    f2c8:	10006f26 	beq	r2,zero,f488 <__subdf3+0x84c>
    f2cc:	180b883a 	mov	r5,r3
    f2d0:	3023883a 	mov	r17,r6
    f2d4:	3825883a 	mov	r18,r7
    f2d8:	0401ffc4 	movi	r16,2047
    f2dc:	003e7a06 	br	ecc8 <__alt_mem_sram+0xf7e0ecc8>
    f2e0:	2c62b03a 	or	r17,r5,r17
    f2e4:	8822c03a 	cmpne	r17,r17,zero
    f2e8:	0005883a 	mov	r2,zero
    f2ec:	003f8a06 	br	f118 <__alt_mem_sram+0xf7e0f118>
    f2f0:	3821883a 	mov	r16,r7
    f2f4:	000b883a 	mov	r5,zero
    f2f8:	0023883a 	mov	r17,zero
    f2fc:	003ed206 	br	ee48 <__alt_mem_sram+0xf7e0ee48>
    f300:	0101ffc4 	movi	r4,2047
    f304:	51003b26 	beq	r10,r4,f3f4 <__subdf3+0x7b8>
    f308:	0085c83a 	sub	r2,zero,r2
    f30c:	29402034 	orhi	r5,r5,128
    f310:	01000e04 	movi	r4,56
    f314:	20806216 	blt	r4,r2,f4a0 <__subdf3+0x864>
    f318:	010007c4 	movi	r4,31
    f31c:	20806b16 	blt	r4,r2,f4cc <__subdf3+0x890>
    f320:	01000804 	movi	r4,32
    f324:	2089c83a 	sub	r4,r4,r2
    f328:	2912983a 	sll	r9,r5,r4
    f32c:	888ed83a 	srl	r7,r17,r2
    f330:	8908983a 	sll	r4,r17,r4
    f334:	2884d83a 	srl	r2,r5,r2
    f338:	49e2b03a 	or	r17,r9,r7
    f33c:	2008c03a 	cmpne	r4,r4,zero
    f340:	8922b03a 	or	r17,r17,r4
    f344:	89a3883a 	add	r17,r17,r6
    f348:	10c5883a 	add	r2,r2,r3
    f34c:	898d803a 	cmpltu	r6,r17,r6
    f350:	118b883a 	add	r5,r2,r6
    f354:	5021883a 	mov	r16,r10
    f358:	003ed506 	br	eeb0 <__alt_mem_sram+0xf7e0eeb0>
    f35c:	1984b03a 	or	r2,r3,r6
    f360:	103e5926 	beq	r2,zero,ecc8 <__alt_mem_sram+0xf7e0ecc8>
    f364:	8989c83a 	sub	r4,r17,r6
    f368:	8911803a 	cmpltu	r8,r17,r4
    f36c:	28c5c83a 	sub	r2,r5,r3
    f370:	1205c83a 	sub	r2,r2,r8
    f374:	1200202c 	andhi	r8,r2,128
    f378:	403ef926 	beq	r8,zero,ef60 <__alt_mem_sram+0xf7e0ef60>
    f37c:	3463c83a 	sub	r17,r6,r17
    f380:	194bc83a 	sub	r5,r3,r5
    f384:	344d803a 	cmpltu	r6,r6,r17
    f388:	298bc83a 	sub	r5,r5,r6
    f38c:	3825883a 	mov	r18,r7
    f390:	003e4d06 	br	ecc8 <__alt_mem_sram+0xf7e0ecc8>
    f394:	1984b03a 	or	r2,r3,r6
    f398:	10002b26 	beq	r2,zero,f448 <__subdf3+0x80c>
    f39c:	2808d0fa 	srli	r4,r5,3
    f3a0:	8822d0fa 	srli	r17,r17,3
    f3a4:	280a977a 	slli	r5,r5,29
    f3a8:	2080022c 	andhi	r2,r4,8
    f3ac:	2c62b03a 	or	r17,r5,r17
    f3b0:	10000826 	beq	r2,zero,f3d4 <__subdf3+0x798>
    f3b4:	1810d0fa 	srli	r8,r3,3
    f3b8:	4080022c 	andhi	r2,r8,8
    f3bc:	1000051e 	bne	r2,zero,f3d4 <__subdf3+0x798>
    f3c0:	300cd0fa 	srli	r6,r6,3
    f3c4:	1804977a 	slli	r2,r3,29
    f3c8:	4009883a 	mov	r4,r8
    f3cc:	3825883a 	mov	r18,r7
    f3d0:	11a2b03a 	or	r17,r2,r6
    f3d4:	880ad77a 	srli	r5,r17,29
    f3d8:	200890fa 	slli	r4,r4,3
    f3dc:	882290fa 	slli	r17,r17,3
    f3e0:	0401ffc4 	movi	r16,2047
    f3e4:	290ab03a 	or	r5,r5,r4
    f3e8:	003e3706 	br	ecc8 <__alt_mem_sram+0xf7e0ecc8>
    f3ec:	0101ffc4 	movi	r4,2047
    f3f0:	513fc71e 	bne	r10,r4,f310 <__alt_mem_sram+0xf7e0f310>
    f3f4:	180b883a 	mov	r5,r3
    f3f8:	3023883a 	mov	r17,r6
    f3fc:	5021883a 	mov	r16,r10
    f400:	003e3106 	br	ecc8 <__alt_mem_sram+0xf7e0ecc8>
    f404:	10002d26 	beq	r2,zero,f4bc <__subdf3+0x880>
    f408:	1984b03a 	or	r2,r3,r6
    f40c:	10000e26 	beq	r2,zero,f448 <__subdf3+0x80c>
    f410:	2808d0fa 	srli	r4,r5,3
    f414:	8822d0fa 	srli	r17,r17,3
    f418:	280a977a 	slli	r5,r5,29
    f41c:	2080022c 	andhi	r2,r4,8
    f420:	2c62b03a 	or	r17,r5,r17
    f424:	103feb26 	beq	r2,zero,f3d4 <__alt_mem_sram+0xf7e0f3d4>
    f428:	180ed0fa 	srli	r7,r3,3
    f42c:	3880022c 	andhi	r2,r7,8
    f430:	103fe81e 	bne	r2,zero,f3d4 <__alt_mem_sram+0xf7e0f3d4>
    f434:	300cd0fa 	srli	r6,r6,3
    f438:	1804977a 	slli	r2,r3,29
    f43c:	3809883a 	mov	r4,r7
    f440:	11a2b03a 	or	r17,r2,r6
    f444:	003fe306 	br	f3d4 <__alt_mem_sram+0xf7e0f3d4>
    f448:	0401ffc4 	movi	r16,2047
    f44c:	003e1e06 	br	ecc8 <__alt_mem_sram+0xf7e0ecc8>
    f450:	0005883a 	mov	r2,zero
    f454:	003f8306 	br	f264 <__alt_mem_sram+0xf7e0f264>
    f458:	113ff804 	addi	r4,r2,-32
    f45c:	02000804 	movi	r8,32
    f460:	2908d83a 	srl	r4,r5,r4
    f464:	12002526 	beq	r2,r8,f4fc <__subdf3+0x8c0>
    f468:	02001004 	movi	r8,64
    f46c:	4085c83a 	sub	r2,r8,r2
    f470:	288a983a 	sll	r5,r5,r2
    f474:	2c62b03a 	or	r17,r5,r17
    f478:	8822c03a 	cmpne	r17,r17,zero
    f47c:	8922b03a 	or	r17,r17,r4
    f480:	0005883a 	mov	r2,zero
    f484:	003f2406 	br	f118 <__alt_mem_sram+0xf7e0f118>
    f488:	01402034 	movhi	r5,128
    f48c:	0011883a 	mov	r8,zero
    f490:	297fffc4 	addi	r5,r5,-1
    f494:	047ffe04 	movi	r17,-8
    f498:	0401ffc4 	movi	r16,2047
    f49c:	003e6a06 	br	ee48 <__alt_mem_sram+0xf7e0ee48>
    f4a0:	2c62b03a 	or	r17,r5,r17
    f4a4:	8822c03a 	cmpne	r17,r17,zero
    f4a8:	0005883a 	mov	r2,zero
    f4ac:	003fa506 	br	f344 <__alt_mem_sram+0xf7e0f344>
    f4b0:	180b883a 	mov	r5,r3
    f4b4:	3023883a 	mov	r17,r6
    f4b8:	003e0306 	br	ecc8 <__alt_mem_sram+0xf7e0ecc8>
    f4bc:	180b883a 	mov	r5,r3
    f4c0:	3023883a 	mov	r17,r6
    f4c4:	0401ffc4 	movi	r16,2047
    f4c8:	003dff06 	br	ecc8 <__alt_mem_sram+0xf7e0ecc8>
    f4cc:	113ff804 	addi	r4,r2,-32
    f4d0:	01c00804 	movi	r7,32
    f4d4:	2908d83a 	srl	r4,r5,r4
    f4d8:	11c00a26 	beq	r2,r7,f504 <__subdf3+0x8c8>
    f4dc:	01c01004 	movi	r7,64
    f4e0:	3885c83a 	sub	r2,r7,r2
    f4e4:	288a983a 	sll	r5,r5,r2
    f4e8:	2c62b03a 	or	r17,r5,r17
    f4ec:	8822c03a 	cmpne	r17,r17,zero
    f4f0:	8922b03a 	or	r17,r17,r4
    f4f4:	0005883a 	mov	r2,zero
    f4f8:	003f9206 	br	f344 <__alt_mem_sram+0xf7e0f344>
    f4fc:	000b883a 	mov	r5,zero
    f500:	003fdc06 	br	f474 <__alt_mem_sram+0xf7e0f474>
    f504:	000b883a 	mov	r5,zero
    f508:	003ff706 	br	f4e8 <__alt_mem_sram+0xf7e0f4e8>

0000f50c <__fixdfsi>:
    f50c:	2806d53a 	srli	r3,r5,20
    f510:	00800434 	movhi	r2,16
    f514:	10bfffc4 	addi	r2,r2,-1
    f518:	18c1ffcc 	andi	r3,r3,2047
    f51c:	0180ff84 	movi	r6,1022
    f520:	2884703a 	and	r2,r5,r2
    f524:	280ad7fa 	srli	r5,r5,31
    f528:	30c0130e 	bge	r6,r3,f578 <__fixdfsi+0x6c>
    f52c:	01810744 	movi	r6,1053
    f530:	30c00d16 	blt	r6,r3,f568 <__fixdfsi+0x5c>
    f534:	01810cc4 	movi	r6,1075
    f538:	30cdc83a 	sub	r6,r6,r3
    f53c:	01c007c4 	movi	r7,31
    f540:	10800434 	orhi	r2,r2,16
    f544:	39800e0e 	bge	r7,r6,f580 <__fixdfsi+0x74>
    f548:	010104c4 	movi	r4,1043
    f54c:	20c7c83a 	sub	r3,r4,r3
    f550:	10c6d83a 	srl	r3,r2,r3
    f554:	29403fcc 	andi	r5,r5,255
    f558:	0145c83a 	sub	r2,zero,r5
    f55c:	1884f03a 	xor	r2,r3,r2
    f560:	1145883a 	add	r2,r2,r5
    f564:	f800283a 	ret
    f568:	00a00034 	movhi	r2,32768
    f56c:	10bfffc4 	addi	r2,r2,-1
    f570:	2885883a 	add	r2,r5,r2
    f574:	f800283a 	ret
    f578:	0005883a 	mov	r2,zero
    f57c:	f800283a 	ret
    f580:	18fefb44 	addi	r3,r3,-1043
    f584:	2188d83a 	srl	r4,r4,r6
    f588:	10c6983a 	sll	r3,r2,r3
    f58c:	20c6b03a 	or	r3,r4,r3
    f590:	003ff006 	br	f554 <__alt_mem_sram+0xf7e0f554>

0000f594 <__floatsidf>:
    f594:	defffd04 	addi	sp,sp,-12
    f598:	dc400115 	stw	r17,4(sp)
    f59c:	dfc00215 	stw	ra,8(sp)
    f5a0:	dc000015 	stw	r16,0(sp)
    f5a4:	2023883a 	mov	r17,r4
    f5a8:	20001426 	beq	r4,zero,f5fc <__floatsidf+0x68>
    f5ac:	2020d7fa 	srli	r16,r4,31
    f5b0:	80000126 	beq	r16,zero,f5b8 <__floatsidf+0x24>
    f5b4:	0123c83a 	sub	r17,zero,r4
    f5b8:	8809883a 	mov	r4,r17
    f5bc:	000f7080 	call	f708 <__clzsi2>
    f5c0:	01410784 	movi	r5,1054
    f5c4:	00c00284 	movi	r3,10
    f5c8:	288bc83a 	sub	r5,r5,r2
    f5cc:	18801c16 	blt	r3,r2,f640 <__floatsidf+0xac>
    f5d0:	00c002c4 	movi	r3,11
    f5d4:	1887c83a 	sub	r3,r3,r2
    f5d8:	88c8d83a 	srl	r4,r17,r3
    f5dc:	00c00434 	movhi	r3,16
    f5e0:	18ffffc4 	addi	r3,r3,-1
    f5e4:	10800544 	addi	r2,r2,21
    f5e8:	20c8703a 	and	r4,r4,r3
    f5ec:	8884983a 	sll	r2,r17,r2
    f5f0:	28c1ffcc 	andi	r3,r5,2047
    f5f4:	800d883a 	mov	r6,r16
    f5f8:	00000406 	br	f60c <__floatsidf+0x78>
    f5fc:	000d883a 	mov	r6,zero
    f600:	0007883a 	mov	r3,zero
    f604:	0009883a 	mov	r4,zero
    f608:	0005883a 	mov	r2,zero
    f60c:	180a953a 	slli	r5,r3,20
    f610:	31803fcc 	andi	r6,r6,255
    f614:	00c00434 	movhi	r3,16
    f618:	300c97fa 	slli	r6,r6,31
    f61c:	18ffffc4 	addi	r3,r3,-1
    f620:	20c6703a 	and	r3,r4,r3
    f624:	1946b03a 	or	r3,r3,r5
    f628:	1986b03a 	or	r3,r3,r6
    f62c:	dfc00217 	ldw	ra,8(sp)
    f630:	dc400117 	ldw	r17,4(sp)
    f634:	dc000017 	ldw	r16,0(sp)
    f638:	dec00304 	addi	sp,sp,12
    f63c:	f800283a 	ret
    f640:	10fffd44 	addi	r3,r2,-11
    f644:	88c8983a 	sll	r4,r17,r3
    f648:	00800434 	movhi	r2,16
    f64c:	10bfffc4 	addi	r2,r2,-1
    f650:	2088703a 	and	r4,r4,r2
    f654:	28c1ffcc 	andi	r3,r5,2047
    f658:	800d883a 	mov	r6,r16
    f65c:	0005883a 	mov	r2,zero
    f660:	003fea06 	br	f60c <__alt_mem_sram+0xf7e0f60c>

0000f664 <__floatunsidf>:
    f664:	defffe04 	addi	sp,sp,-8
    f668:	dc000015 	stw	r16,0(sp)
    f66c:	dfc00115 	stw	ra,4(sp)
    f670:	2021883a 	mov	r16,r4
    f674:	20001026 	beq	r4,zero,f6b8 <__floatunsidf+0x54>
    f678:	000f7080 	call	f708 <__clzsi2>
    f67c:	01410784 	movi	r5,1054
    f680:	100d883a 	mov	r6,r2
    f684:	288bc83a 	sub	r5,r5,r2
    f688:	00800284 	movi	r2,10
    f68c:	11801616 	blt	r2,r6,f6e8 <__floatunsidf+0x84>
    f690:	008002c4 	movi	r2,11
    f694:	1185c83a 	sub	r2,r2,r6
    f698:	8084d83a 	srl	r2,r16,r2
    f69c:	00c00434 	movhi	r3,16
    f6a0:	31c00544 	addi	r7,r6,21
    f6a4:	18ffffc4 	addi	r3,r3,-1
    f6a8:	81e0983a 	sll	r16,r16,r7
    f6ac:	10cc703a 	and	r6,r2,r3
    f6b0:	2941ffcc 	andi	r5,r5,2047
    f6b4:	00000206 	br	f6c0 <__floatunsidf+0x5c>
    f6b8:	000b883a 	mov	r5,zero
    f6bc:	000d883a 	mov	r6,zero
    f6c0:	280a953a 	slli	r5,r5,20
    f6c4:	00c00434 	movhi	r3,16
    f6c8:	18ffffc4 	addi	r3,r3,-1
    f6cc:	30c6703a 	and	r3,r6,r3
    f6d0:	8005883a 	mov	r2,r16
    f6d4:	1946b03a 	or	r3,r3,r5
    f6d8:	dfc00117 	ldw	ra,4(sp)
    f6dc:	dc000017 	ldw	r16,0(sp)
    f6e0:	dec00204 	addi	sp,sp,8
    f6e4:	f800283a 	ret
    f6e8:	31bffd44 	addi	r6,r6,-11
    f6ec:	818c983a 	sll	r6,r16,r6
    f6f0:	00800434 	movhi	r2,16
    f6f4:	10bfffc4 	addi	r2,r2,-1
    f6f8:	2941ffcc 	andi	r5,r5,2047
    f6fc:	0021883a 	mov	r16,zero
    f700:	308c703a 	and	r6,r6,r2
    f704:	003fee06 	br	f6c0 <__alt_mem_sram+0xf7e0f6c0>

0000f708 <__clzsi2>:
    f708:	00bfffd4 	movui	r2,65535
    f70c:	11000b36 	bltu	r2,r4,f73c <__clzsi2+0x34>
    f710:	00803fc4 	movi	r2,255
    f714:	1100122e 	bgeu	r2,r4,f760 <__clzsi2+0x58>
    f718:	00c00204 	movi	r3,8
    f71c:	01400604 	movi	r5,24
    f720:	20c8d83a 	srl	r4,r4,r3
    f724:	00800074 	movhi	r2,1
    f728:	108a8b04 	addi	r2,r2,10796
    f72c:	1109883a 	add	r4,r2,r4
    f730:	20800003 	ldbu	r2,0(r4)
    f734:	2885c83a 	sub	r2,r5,r2
    f738:	f800283a 	ret
    f73c:	00804034 	movhi	r2,256
    f740:	10bfffc4 	addi	r2,r2,-1
    f744:	11000336 	bltu	r2,r4,f754 <__clzsi2+0x4c>
    f748:	00c00404 	movi	r3,16
    f74c:	180b883a 	mov	r5,r3
    f750:	003ff306 	br	f720 <__alt_mem_sram+0xf7e0f720>
    f754:	00c00604 	movi	r3,24
    f758:	01400204 	movi	r5,8
    f75c:	003ff006 	br	f720 <__alt_mem_sram+0xf7e0f720>
    f760:	0007883a 	mov	r3,zero
    f764:	01400804 	movi	r5,32
    f768:	003fed06 	br	f720 <__alt_mem_sram+0xf7e0f720>

0000f76c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f76c:	defffe04 	addi	sp,sp,-8
    f770:	dfc00115 	stw	ra,4(sp)
    f774:	df000015 	stw	fp,0(sp)
    f778:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f77c:	00800074 	movhi	r2,1
    f780:	10918c04 	addi	r2,r2,17968
    f784:	10800017 	ldw	r2,0(r2)
    f788:	10000526 	beq	r2,zero,f7a0 <alt_get_errno+0x34>
    f78c:	00800074 	movhi	r2,1
    f790:	10918c04 	addi	r2,r2,17968
    f794:	10800017 	ldw	r2,0(r2)
    f798:	103ee83a 	callr	r2
    f79c:	00000206 	br	f7a8 <alt_get_errno+0x3c>
    f7a0:	00800074 	movhi	r2,1
    f7a4:	10985304 	addi	r2,r2,24908
}
    f7a8:	e037883a 	mov	sp,fp
    f7ac:	dfc00117 	ldw	ra,4(sp)
    f7b0:	df000017 	ldw	fp,0(sp)
    f7b4:	dec00204 	addi	sp,sp,8
    f7b8:	f800283a 	ret

0000f7bc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    f7bc:	defffb04 	addi	sp,sp,-20
    f7c0:	dfc00415 	stw	ra,16(sp)
    f7c4:	df000315 	stw	fp,12(sp)
    f7c8:	df000304 	addi	fp,sp,12
    f7cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    f7d0:	e0bfff17 	ldw	r2,-4(fp)
    f7d4:	10000616 	blt	r2,zero,f7f0 <close+0x34>
    f7d8:	e0bfff17 	ldw	r2,-4(fp)
    f7dc:	10c00324 	muli	r3,r2,12
    f7e0:	00800074 	movhi	r2,1
    f7e4:	108d0904 	addi	r2,r2,13348
    f7e8:	1885883a 	add	r2,r3,r2
    f7ec:	00000106 	br	f7f4 <close+0x38>
    f7f0:	0005883a 	mov	r2,zero
    f7f4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    f7f8:	e0bffd17 	ldw	r2,-12(fp)
    f7fc:	10001926 	beq	r2,zero,f864 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    f800:	e0bffd17 	ldw	r2,-12(fp)
    f804:	10800017 	ldw	r2,0(r2)
    f808:	10800417 	ldw	r2,16(r2)
    f80c:	10000626 	beq	r2,zero,f828 <close+0x6c>
    f810:	e0bffd17 	ldw	r2,-12(fp)
    f814:	10800017 	ldw	r2,0(r2)
    f818:	10800417 	ldw	r2,16(r2)
    f81c:	e13ffd17 	ldw	r4,-12(fp)
    f820:	103ee83a 	callr	r2
    f824:	00000106 	br	f82c <close+0x70>
    f828:	0005883a 	mov	r2,zero
    f82c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f830:	e13fff17 	ldw	r4,-4(fp)
    f834:	000feb80 	call	feb8 <alt_release_fd>
    if (rval < 0)
    f838:	e0bffe17 	ldw	r2,-8(fp)
    f83c:	1000070e 	bge	r2,zero,f85c <close+0xa0>
    {
      ALT_ERRNO = -rval;
    f840:	000f76c0 	call	f76c <alt_get_errno>
    f844:	1007883a 	mov	r3,r2
    f848:	e0bffe17 	ldw	r2,-8(fp)
    f84c:	0085c83a 	sub	r2,zero,r2
    f850:	18800015 	stw	r2,0(r3)
      return -1;
    f854:	00bfffc4 	movi	r2,-1
    f858:	00000706 	br	f878 <close+0xbc>
    }
    return 0;
    f85c:	0005883a 	mov	r2,zero
    f860:	00000506 	br	f878 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f864:	000f76c0 	call	f76c <alt_get_errno>
    f868:	1007883a 	mov	r3,r2
    f86c:	00801444 	movi	r2,81
    f870:	18800015 	stw	r2,0(r3)
    return -1;
    f874:	00bfffc4 	movi	r2,-1
  }
}
    f878:	e037883a 	mov	sp,fp
    f87c:	dfc00117 	ldw	ra,4(sp)
    f880:	df000017 	ldw	fp,0(sp)
    f884:	dec00204 	addi	sp,sp,8
    f888:	f800283a 	ret

0000f88c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    f88c:	defffc04 	addi	sp,sp,-16
    f890:	df000315 	stw	fp,12(sp)
    f894:	df000304 	addi	fp,sp,12
    f898:	e13ffd15 	stw	r4,-12(fp)
    f89c:	e17ffe15 	stw	r5,-8(fp)
    f8a0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    f8a4:	e0bfff17 	ldw	r2,-4(fp)
}
    f8a8:	e037883a 	mov	sp,fp
    f8ac:	df000017 	ldw	fp,0(sp)
    f8b0:	dec00104 	addi	sp,sp,4
    f8b4:	f800283a 	ret

0000f8b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f8b8:	defffe04 	addi	sp,sp,-8
    f8bc:	dfc00115 	stw	ra,4(sp)
    f8c0:	df000015 	stw	fp,0(sp)
    f8c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f8c8:	00800074 	movhi	r2,1
    f8cc:	10918c04 	addi	r2,r2,17968
    f8d0:	10800017 	ldw	r2,0(r2)
    f8d4:	10000526 	beq	r2,zero,f8ec <alt_get_errno+0x34>
    f8d8:	00800074 	movhi	r2,1
    f8dc:	10918c04 	addi	r2,r2,17968
    f8e0:	10800017 	ldw	r2,0(r2)
    f8e4:	103ee83a 	callr	r2
    f8e8:	00000206 	br	f8f4 <alt_get_errno+0x3c>
    f8ec:	00800074 	movhi	r2,1
    f8f0:	10985304 	addi	r2,r2,24908
}
    f8f4:	e037883a 	mov	sp,fp
    f8f8:	dfc00117 	ldw	ra,4(sp)
    f8fc:	df000017 	ldw	fp,0(sp)
    f900:	dec00204 	addi	sp,sp,8
    f904:	f800283a 	ret

0000f908 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f908:	defffb04 	addi	sp,sp,-20
    f90c:	dfc00415 	stw	ra,16(sp)
    f910:	df000315 	stw	fp,12(sp)
    f914:	df000304 	addi	fp,sp,12
    f918:	e13ffe15 	stw	r4,-8(fp)
    f91c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f920:	e0bffe17 	ldw	r2,-8(fp)
    f924:	10000616 	blt	r2,zero,f940 <fstat+0x38>
    f928:	e0bffe17 	ldw	r2,-8(fp)
    f92c:	10c00324 	muli	r3,r2,12
    f930:	00800074 	movhi	r2,1
    f934:	108d0904 	addi	r2,r2,13348
    f938:	1885883a 	add	r2,r3,r2
    f93c:	00000106 	br	f944 <fstat+0x3c>
    f940:	0005883a 	mov	r2,zero
    f944:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    f948:	e0bffd17 	ldw	r2,-12(fp)
    f94c:	10001026 	beq	r2,zero,f990 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f950:	e0bffd17 	ldw	r2,-12(fp)
    f954:	10800017 	ldw	r2,0(r2)
    f958:	10800817 	ldw	r2,32(r2)
    f95c:	10000726 	beq	r2,zero,f97c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    f960:	e0bffd17 	ldw	r2,-12(fp)
    f964:	10800017 	ldw	r2,0(r2)
    f968:	10800817 	ldw	r2,32(r2)
    f96c:	e13ffd17 	ldw	r4,-12(fp)
    f970:	e17fff17 	ldw	r5,-4(fp)
    f974:	103ee83a 	callr	r2
    f978:	00000a06 	br	f9a4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f97c:	e0bfff17 	ldw	r2,-4(fp)
    f980:	00c80004 	movi	r3,8192
    f984:	10c00115 	stw	r3,4(r2)
      return 0;
    f988:	0005883a 	mov	r2,zero
    f98c:	00000506 	br	f9a4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f990:	000f8b80 	call	f8b8 <alt_get_errno>
    f994:	1007883a 	mov	r3,r2
    f998:	00801444 	movi	r2,81
    f99c:	18800015 	stw	r2,0(r3)
    return -1;
    f9a0:	00bfffc4 	movi	r2,-1
  }
}
    f9a4:	e037883a 	mov	sp,fp
    f9a8:	dfc00117 	ldw	ra,4(sp)
    f9ac:	df000017 	ldw	fp,0(sp)
    f9b0:	dec00204 	addi	sp,sp,8
    f9b4:	f800283a 	ret

0000f9b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f9b8:	defffe04 	addi	sp,sp,-8
    f9bc:	dfc00115 	stw	ra,4(sp)
    f9c0:	df000015 	stw	fp,0(sp)
    f9c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f9c8:	00800074 	movhi	r2,1
    f9cc:	10918c04 	addi	r2,r2,17968
    f9d0:	10800017 	ldw	r2,0(r2)
    f9d4:	10000526 	beq	r2,zero,f9ec <alt_get_errno+0x34>
    f9d8:	00800074 	movhi	r2,1
    f9dc:	10918c04 	addi	r2,r2,17968
    f9e0:	10800017 	ldw	r2,0(r2)
    f9e4:	103ee83a 	callr	r2
    f9e8:	00000206 	br	f9f4 <alt_get_errno+0x3c>
    f9ec:	00800074 	movhi	r2,1
    f9f0:	10985304 	addi	r2,r2,24908
}
    f9f4:	e037883a 	mov	sp,fp
    f9f8:	dfc00117 	ldw	ra,4(sp)
    f9fc:	df000017 	ldw	fp,0(sp)
    fa00:	dec00204 	addi	sp,sp,8
    fa04:	f800283a 	ret

0000fa08 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    fa08:	deffed04 	addi	sp,sp,-76
    fa0c:	dfc01215 	stw	ra,72(sp)
    fa10:	df001115 	stw	fp,68(sp)
    fa14:	df001104 	addi	fp,sp,68
    fa18:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fa1c:	e0bfff17 	ldw	r2,-4(fp)
    fa20:	10000616 	blt	r2,zero,fa3c <isatty+0x34>
    fa24:	e0bfff17 	ldw	r2,-4(fp)
    fa28:	10c00324 	muli	r3,r2,12
    fa2c:	00800074 	movhi	r2,1
    fa30:	108d0904 	addi	r2,r2,13348
    fa34:	1885883a 	add	r2,r3,r2
    fa38:	00000106 	br	fa40 <isatty+0x38>
    fa3c:	0005883a 	mov	r2,zero
    fa40:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    fa44:	e0bfef17 	ldw	r2,-68(fp)
    fa48:	10000e26 	beq	r2,zero,fa84 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    fa4c:	e0bfef17 	ldw	r2,-68(fp)
    fa50:	10800017 	ldw	r2,0(r2)
    fa54:	10800817 	ldw	r2,32(r2)
    fa58:	1000021e 	bne	r2,zero,fa64 <isatty+0x5c>
    {
      return 1;
    fa5c:	00800044 	movi	r2,1
    fa60:	00000d06 	br	fa98 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    fa64:	e0bff004 	addi	r2,fp,-64
    fa68:	e13fff17 	ldw	r4,-4(fp)
    fa6c:	100b883a 	mov	r5,r2
    fa70:	000f9080 	call	f908 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    fa74:	e0bff117 	ldw	r2,-60(fp)
    fa78:	10880020 	cmpeqi	r2,r2,8192
    fa7c:	10803fcc 	andi	r2,r2,255
    fa80:	00000506 	br	fa98 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    fa84:	000f9b80 	call	f9b8 <alt_get_errno>
    fa88:	1007883a 	mov	r3,r2
    fa8c:	00801444 	movi	r2,81
    fa90:	18800015 	stw	r2,0(r3)
    return 0;
    fa94:	0005883a 	mov	r2,zero
  }
}
    fa98:	e037883a 	mov	sp,fp
    fa9c:	dfc00117 	ldw	ra,4(sp)
    faa0:	df000017 	ldw	fp,0(sp)
    faa4:	dec00204 	addi	sp,sp,8
    faa8:	f800283a 	ret

0000faac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    faac:	defffc04 	addi	sp,sp,-16
    fab0:	df000315 	stw	fp,12(sp)
    fab4:	df000304 	addi	fp,sp,12
    fab8:	e13ffd15 	stw	r4,-12(fp)
    fabc:	e17ffe15 	stw	r5,-8(fp)
    fac0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    fac4:	e0fffe17 	ldw	r3,-8(fp)
    fac8:	e0bffd17 	ldw	r2,-12(fp)
    facc:	18800c26 	beq	r3,r2,fb00 <alt_load_section+0x54>
  {
    while( to != end )
    fad0:	00000806 	br	faf4 <alt_load_section+0x48>
    {
      *to++ = *from++;
    fad4:	e0bffe17 	ldw	r2,-8(fp)
    fad8:	10c00104 	addi	r3,r2,4
    fadc:	e0fffe15 	stw	r3,-8(fp)
    fae0:	e0fffd17 	ldw	r3,-12(fp)
    fae4:	19000104 	addi	r4,r3,4
    fae8:	e13ffd15 	stw	r4,-12(fp)
    faec:	18c00017 	ldw	r3,0(r3)
    faf0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    faf4:	e0fffe17 	ldw	r3,-8(fp)
    faf8:	e0bfff17 	ldw	r2,-4(fp)
    fafc:	18bff51e 	bne	r3,r2,fad4 <__alt_mem_sram+0xf7e0fad4>
    {
      *to++ = *from++;
    }
  }
}
    fb00:	e037883a 	mov	sp,fp
    fb04:	df000017 	ldw	fp,0(sp)
    fb08:	dec00104 	addi	sp,sp,4
    fb0c:	f800283a 	ret

0000fb10 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    fb10:	defffe04 	addi	sp,sp,-8
    fb14:	dfc00115 	stw	ra,4(sp)
    fb18:	df000015 	stw	fp,0(sp)
    fb1c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    fb20:	01000074 	movhi	r4,1
    fb24:	21119104 	addi	r4,r4,17988
    fb28:	01400074 	movhi	r5,1
    fb2c:	294ad604 	addi	r5,r5,11096
    fb30:	01800074 	movhi	r6,1
    fb34:	31919104 	addi	r6,r6,17988
    fb38:	000faac0 	call	faac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    fb3c:	01000034 	movhi	r4,0
    fb40:	21000804 	addi	r4,r4,32
    fb44:	01400034 	movhi	r5,0
    fb48:	29400804 	addi	r5,r5,32
    fb4c:	01800034 	movhi	r6,0
    fb50:	31806f04 	addi	r6,r6,444
    fb54:	000faac0 	call	faac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    fb58:	01000074 	movhi	r4,1
    fb5c:	21083304 	addi	r4,r4,8396
    fb60:	01400074 	movhi	r5,1
    fb64:	29483304 	addi	r5,r5,8396
    fb68:	01800074 	movhi	r6,1
    fb6c:	318ad604 	addi	r6,r6,11096
    fb70:	000faac0 	call	faac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    fb74:	0010fec0 	call	10fec <alt_dcache_flush_all>
  alt_icache_flush_all();
    fb78:	00111dc0 	call	111dc <alt_icache_flush_all>
}
    fb7c:	e037883a 	mov	sp,fp
    fb80:	dfc00117 	ldw	ra,4(sp)
    fb84:	df000017 	ldw	fp,0(sp)
    fb88:	dec00204 	addi	sp,sp,8
    fb8c:	f800283a 	ret

0000fb90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fb90:	defffe04 	addi	sp,sp,-8
    fb94:	dfc00115 	stw	ra,4(sp)
    fb98:	df000015 	stw	fp,0(sp)
    fb9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fba0:	00800074 	movhi	r2,1
    fba4:	10918c04 	addi	r2,r2,17968
    fba8:	10800017 	ldw	r2,0(r2)
    fbac:	10000526 	beq	r2,zero,fbc4 <alt_get_errno+0x34>
    fbb0:	00800074 	movhi	r2,1
    fbb4:	10918c04 	addi	r2,r2,17968
    fbb8:	10800017 	ldw	r2,0(r2)
    fbbc:	103ee83a 	callr	r2
    fbc0:	00000206 	br	fbcc <alt_get_errno+0x3c>
    fbc4:	00800074 	movhi	r2,1
    fbc8:	10985304 	addi	r2,r2,24908
}
    fbcc:	e037883a 	mov	sp,fp
    fbd0:	dfc00117 	ldw	ra,4(sp)
    fbd4:	df000017 	ldw	fp,0(sp)
    fbd8:	dec00204 	addi	sp,sp,8
    fbdc:	f800283a 	ret

0000fbe0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    fbe0:	defff904 	addi	sp,sp,-28
    fbe4:	dfc00615 	stw	ra,24(sp)
    fbe8:	df000515 	stw	fp,20(sp)
    fbec:	df000504 	addi	fp,sp,20
    fbf0:	e13ffd15 	stw	r4,-12(fp)
    fbf4:	e17ffe15 	stw	r5,-8(fp)
    fbf8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    fbfc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fc00:	e0bffd17 	ldw	r2,-12(fp)
    fc04:	10000616 	blt	r2,zero,fc20 <lseek+0x40>
    fc08:	e0bffd17 	ldw	r2,-12(fp)
    fc0c:	10c00324 	muli	r3,r2,12
    fc10:	00800074 	movhi	r2,1
    fc14:	108d0904 	addi	r2,r2,13348
    fc18:	1885883a 	add	r2,r3,r2
    fc1c:	00000106 	br	fc24 <lseek+0x44>
    fc20:	0005883a 	mov	r2,zero
    fc24:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    fc28:	e0bffc17 	ldw	r2,-16(fp)
    fc2c:	10001026 	beq	r2,zero,fc70 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    fc30:	e0bffc17 	ldw	r2,-16(fp)
    fc34:	10800017 	ldw	r2,0(r2)
    fc38:	10800717 	ldw	r2,28(r2)
    fc3c:	10000926 	beq	r2,zero,fc64 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    fc40:	e0bffc17 	ldw	r2,-16(fp)
    fc44:	10800017 	ldw	r2,0(r2)
    fc48:	10800717 	ldw	r2,28(r2)
    fc4c:	e13ffc17 	ldw	r4,-16(fp)
    fc50:	e17ffe17 	ldw	r5,-8(fp)
    fc54:	e1bfff17 	ldw	r6,-4(fp)
    fc58:	103ee83a 	callr	r2
    fc5c:	e0bffb15 	stw	r2,-20(fp)
    fc60:	00000506 	br	fc78 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    fc64:	00bfde84 	movi	r2,-134
    fc68:	e0bffb15 	stw	r2,-20(fp)
    fc6c:	00000206 	br	fc78 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    fc70:	00bfebc4 	movi	r2,-81
    fc74:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    fc78:	e0bffb17 	ldw	r2,-20(fp)
    fc7c:	1000070e 	bge	r2,zero,fc9c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    fc80:	000fb900 	call	fb90 <alt_get_errno>
    fc84:	1007883a 	mov	r3,r2
    fc88:	e0bffb17 	ldw	r2,-20(fp)
    fc8c:	0085c83a 	sub	r2,zero,r2
    fc90:	18800015 	stw	r2,0(r3)
    rc = -1;
    fc94:	00bfffc4 	movi	r2,-1
    fc98:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    fc9c:	e0bffb17 	ldw	r2,-20(fp)
}
    fca0:	e037883a 	mov	sp,fp
    fca4:	dfc00117 	ldw	ra,4(sp)
    fca8:	df000017 	ldw	fp,0(sp)
    fcac:	dec00204 	addi	sp,sp,8
    fcb0:	f800283a 	ret

0000fcb4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    fcb4:	defffd04 	addi	sp,sp,-12
    fcb8:	dfc00215 	stw	ra,8(sp)
    fcbc:	df000115 	stw	fp,4(sp)
    fcc0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    fcc4:	0009883a 	mov	r4,zero
    fcc8:	00101780 	call	10178 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    fccc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    fcd0:	00101ac0 	call	101ac <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    fcd4:	01000074 	movhi	r4,1
    fcd8:	210ace04 	addi	r4,r4,11064
    fcdc:	01400074 	movhi	r5,1
    fce0:	294ace04 	addi	r5,r5,11064
    fce4:	01800074 	movhi	r6,1
    fce8:	318ace04 	addi	r6,r6,11064
    fcec:	001159c0 	call	1159c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    fcf0:	00111240 	call	11124 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    fcf4:	01000074 	movhi	r4,1
    fcf8:	21046004 	addi	r4,r4,4480
    fcfc:	0011d280 	call	11d28 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    fd00:	d126d317 	ldw	r4,-25780(gp)
    fd04:	d0e6d417 	ldw	r3,-25776(gp)
    fd08:	d0a6d517 	ldw	r2,-25772(gp)
    fd0c:	180b883a 	mov	r5,r3
    fd10:	100d883a 	mov	r6,r2
    fd14:	000025c0 	call	25c <main>
    fd18:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    fd1c:	01000044 	movi	r4,1
    fd20:	000f7bc0 	call	f7bc <close>
  exit (result);
    fd24:	e13fff17 	ldw	r4,-4(fp)
    fd28:	0011d3c0 	call	11d3c <exit>

0000fd2c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    fd2c:	defffe04 	addi	sp,sp,-8
    fd30:	df000115 	stw	fp,4(sp)
    fd34:	df000104 	addi	fp,sp,4
    fd38:	e13fff15 	stw	r4,-4(fp)
}
    fd3c:	e037883a 	mov	sp,fp
    fd40:	df000017 	ldw	fp,0(sp)
    fd44:	dec00104 	addi	sp,sp,4
    fd48:	f800283a 	ret

0000fd4c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    fd4c:	defffe04 	addi	sp,sp,-8
    fd50:	df000115 	stw	fp,4(sp)
    fd54:	df000104 	addi	fp,sp,4
    fd58:	e13fff15 	stw	r4,-4(fp)
}
    fd5c:	e037883a 	mov	sp,fp
    fd60:	df000017 	ldw	fp,0(sp)
    fd64:	dec00104 	addi	sp,sp,4
    fd68:	f800283a 	ret

0000fd6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fd6c:	defffe04 	addi	sp,sp,-8
    fd70:	dfc00115 	stw	ra,4(sp)
    fd74:	df000015 	stw	fp,0(sp)
    fd78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fd7c:	00800074 	movhi	r2,1
    fd80:	10918c04 	addi	r2,r2,17968
    fd84:	10800017 	ldw	r2,0(r2)
    fd88:	10000526 	beq	r2,zero,fda0 <alt_get_errno+0x34>
    fd8c:	00800074 	movhi	r2,1
    fd90:	10918c04 	addi	r2,r2,17968
    fd94:	10800017 	ldw	r2,0(r2)
    fd98:	103ee83a 	callr	r2
    fd9c:	00000206 	br	fda8 <alt_get_errno+0x3c>
    fda0:	00800074 	movhi	r2,1
    fda4:	10985304 	addi	r2,r2,24908
}
    fda8:	e037883a 	mov	sp,fp
    fdac:	dfc00117 	ldw	ra,4(sp)
    fdb0:	df000017 	ldw	fp,0(sp)
    fdb4:	dec00204 	addi	sp,sp,8
    fdb8:	f800283a 	ret

0000fdbc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    fdbc:	defff904 	addi	sp,sp,-28
    fdc0:	dfc00615 	stw	ra,24(sp)
    fdc4:	df000515 	stw	fp,20(sp)
    fdc8:	df000504 	addi	fp,sp,20
    fdcc:	e13ffd15 	stw	r4,-12(fp)
    fdd0:	e17ffe15 	stw	r5,-8(fp)
    fdd4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fdd8:	e0bffd17 	ldw	r2,-12(fp)
    fddc:	10000616 	blt	r2,zero,fdf8 <read+0x3c>
    fde0:	e0bffd17 	ldw	r2,-12(fp)
    fde4:	10c00324 	muli	r3,r2,12
    fde8:	00800074 	movhi	r2,1
    fdec:	108d0904 	addi	r2,r2,13348
    fdf0:	1885883a 	add	r2,r3,r2
    fdf4:	00000106 	br	fdfc <read+0x40>
    fdf8:	0005883a 	mov	r2,zero
    fdfc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fe00:	e0bffb17 	ldw	r2,-20(fp)
    fe04:	10002226 	beq	r2,zero,fe90 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fe08:	e0bffb17 	ldw	r2,-20(fp)
    fe0c:	10800217 	ldw	r2,8(r2)
    fe10:	108000cc 	andi	r2,r2,3
    fe14:	10800060 	cmpeqi	r2,r2,1
    fe18:	1000181e 	bne	r2,zero,fe7c <read+0xc0>
        (fd->dev->read))
    fe1c:	e0bffb17 	ldw	r2,-20(fp)
    fe20:	10800017 	ldw	r2,0(r2)
    fe24:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fe28:	10001426 	beq	r2,zero,fe7c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    fe2c:	e0bffb17 	ldw	r2,-20(fp)
    fe30:	10800017 	ldw	r2,0(r2)
    fe34:	10800517 	ldw	r2,20(r2)
    fe38:	e0ffff17 	ldw	r3,-4(fp)
    fe3c:	e13ffb17 	ldw	r4,-20(fp)
    fe40:	e17ffe17 	ldw	r5,-8(fp)
    fe44:	180d883a 	mov	r6,r3
    fe48:	103ee83a 	callr	r2
    fe4c:	e0bffc15 	stw	r2,-16(fp)
    fe50:	e0bffc17 	ldw	r2,-16(fp)
    fe54:	1000070e 	bge	r2,zero,fe74 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    fe58:	000fd6c0 	call	fd6c <alt_get_errno>
    fe5c:	1007883a 	mov	r3,r2
    fe60:	e0bffc17 	ldw	r2,-16(fp)
    fe64:	0085c83a 	sub	r2,zero,r2
    fe68:	18800015 	stw	r2,0(r3)
          return -1;
    fe6c:	00bfffc4 	movi	r2,-1
    fe70:	00000c06 	br	fea4 <read+0xe8>
        }
        return rval;
    fe74:	e0bffc17 	ldw	r2,-16(fp)
    fe78:	00000a06 	br	fea4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    fe7c:	000fd6c0 	call	fd6c <alt_get_errno>
    fe80:	1007883a 	mov	r3,r2
    fe84:	00800344 	movi	r2,13
    fe88:	18800015 	stw	r2,0(r3)
    fe8c:	00000406 	br	fea0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    fe90:	000fd6c0 	call	fd6c <alt_get_errno>
    fe94:	1007883a 	mov	r3,r2
    fe98:	00801444 	movi	r2,81
    fe9c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fea0:	00bfffc4 	movi	r2,-1
}
    fea4:	e037883a 	mov	sp,fp
    fea8:	dfc00117 	ldw	ra,4(sp)
    feac:	df000017 	ldw	fp,0(sp)
    feb0:	dec00204 	addi	sp,sp,8
    feb4:	f800283a 	ret

0000feb8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    feb8:	defffe04 	addi	sp,sp,-8
    febc:	df000115 	stw	fp,4(sp)
    fec0:	df000104 	addi	fp,sp,4
    fec4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    fec8:	e0bfff17 	ldw	r2,-4(fp)
    fecc:	108000d0 	cmplti	r2,r2,3
    fed0:	10000d1e 	bne	r2,zero,ff08 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    fed4:	00800074 	movhi	r2,1
    fed8:	108d0904 	addi	r2,r2,13348
    fedc:	e0ffff17 	ldw	r3,-4(fp)
    fee0:	18c00324 	muli	r3,r3,12
    fee4:	10c5883a 	add	r2,r2,r3
    fee8:	10800204 	addi	r2,r2,8
    feec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    fef0:	00800074 	movhi	r2,1
    fef4:	108d0904 	addi	r2,r2,13348
    fef8:	e0ffff17 	ldw	r3,-4(fp)
    fefc:	18c00324 	muli	r3,r3,12
    ff00:	10c5883a 	add	r2,r2,r3
    ff04:	10000015 	stw	zero,0(r2)
  }
}
    ff08:	e037883a 	mov	sp,fp
    ff0c:	df000017 	ldw	fp,0(sp)
    ff10:	dec00104 	addi	sp,sp,4
    ff14:	f800283a 	ret

0000ff18 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    ff18:	defff904 	addi	sp,sp,-28
    ff1c:	df000615 	stw	fp,24(sp)
    ff20:	df000604 	addi	fp,sp,24
    ff24:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ff28:	0005303a 	rdctl	r2,status
    ff2c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ff30:	e0fffc17 	ldw	r3,-16(fp)
    ff34:	00bfff84 	movi	r2,-2
    ff38:	1884703a 	and	r2,r3,r2
    ff3c:	1001703a 	wrctl	status,r2
  
  return context;
    ff40:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    ff44:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ff48:	d0a00c17 	ldw	r2,-32720(gp)
    ff4c:	10c000c4 	addi	r3,r2,3
    ff50:	00bfff04 	movi	r2,-4
    ff54:	1884703a 	and	r2,r3,r2
    ff58:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ff5c:	d0e00c17 	ldw	r3,-32720(gp)
    ff60:	e0bfff17 	ldw	r2,-4(fp)
    ff64:	1887883a 	add	r3,r3,r2
    ff68:	00820034 	movhi	r2,2048
    ff6c:	10800004 	addi	r2,r2,0
    ff70:	10c0062e 	bgeu	r2,r3,ff8c <sbrk+0x74>
    ff74:	e0bffa17 	ldw	r2,-24(fp)
    ff78:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ff7c:	e0bffd17 	ldw	r2,-12(fp)
    ff80:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ff84:	00bfffc4 	movi	r2,-1
    ff88:	00000b06 	br	ffb8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    ff8c:	d0a00c17 	ldw	r2,-32720(gp)
    ff90:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    ff94:	d0e00c17 	ldw	r3,-32720(gp)
    ff98:	e0bfff17 	ldw	r2,-4(fp)
    ff9c:	1885883a 	add	r2,r3,r2
    ffa0:	d0a00c15 	stw	r2,-32720(gp)
    ffa4:	e0bffa17 	ldw	r2,-24(fp)
    ffa8:	e0bffe15 	stw	r2,-8(fp)
    ffac:	e0bffe17 	ldw	r2,-8(fp)
    ffb0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    ffb4:	e0bffb17 	ldw	r2,-20(fp)
} 
    ffb8:	e037883a 	mov	sp,fp
    ffbc:	df000017 	ldw	fp,0(sp)
    ffc0:	dec00104 	addi	sp,sp,4
    ffc4:	f800283a 	ret

0000ffc8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    ffc8:	defffd04 	addi	sp,sp,-12
    ffcc:	dfc00215 	stw	ra,8(sp)
    ffd0:	df000115 	stw	fp,4(sp)
    ffd4:	df000104 	addi	fp,sp,4
    ffd8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    ffdc:	e13fff17 	ldw	r4,-4(fp)
    ffe0:	0010e940 	call	10e94 <alt_busy_sleep>
}
    ffe4:	e037883a 	mov	sp,fp
    ffe8:	dfc00117 	ldw	ra,4(sp)
    ffec:	df000017 	ldw	fp,0(sp)
    fff0:	dec00204 	addi	sp,sp,8
    fff4:	f800283a 	ret

0000fff8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fff8:	defffe04 	addi	sp,sp,-8
    fffc:	dfc00115 	stw	ra,4(sp)
   10000:	df000015 	stw	fp,0(sp)
   10004:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10008:	00800074 	movhi	r2,1
   1000c:	10918c04 	addi	r2,r2,17968
   10010:	10800017 	ldw	r2,0(r2)
   10014:	10000526 	beq	r2,zero,1002c <alt_get_errno+0x34>
   10018:	00800074 	movhi	r2,1
   1001c:	10918c04 	addi	r2,r2,17968
   10020:	10800017 	ldw	r2,0(r2)
   10024:	103ee83a 	callr	r2
   10028:	00000206 	br	10034 <alt_get_errno+0x3c>
   1002c:	00800074 	movhi	r2,1
   10030:	10985304 	addi	r2,r2,24908
}
   10034:	e037883a 	mov	sp,fp
   10038:	dfc00117 	ldw	ra,4(sp)
   1003c:	df000017 	ldw	fp,0(sp)
   10040:	dec00204 	addi	sp,sp,8
   10044:	f800283a 	ret

00010048 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10048:	defff904 	addi	sp,sp,-28
   1004c:	dfc00615 	stw	ra,24(sp)
   10050:	df000515 	stw	fp,20(sp)
   10054:	df000504 	addi	fp,sp,20
   10058:	e13ffd15 	stw	r4,-12(fp)
   1005c:	e17ffe15 	stw	r5,-8(fp)
   10060:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10064:	e0bffd17 	ldw	r2,-12(fp)
   10068:	10000616 	blt	r2,zero,10084 <write+0x3c>
   1006c:	e0bffd17 	ldw	r2,-12(fp)
   10070:	10c00324 	muli	r3,r2,12
   10074:	00800074 	movhi	r2,1
   10078:	108d0904 	addi	r2,r2,13348
   1007c:	1885883a 	add	r2,r3,r2
   10080:	00000106 	br	10088 <write+0x40>
   10084:	0005883a 	mov	r2,zero
   10088:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1008c:	e0bffb17 	ldw	r2,-20(fp)
   10090:	10002126 	beq	r2,zero,10118 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   10094:	e0bffb17 	ldw	r2,-20(fp)
   10098:	10800217 	ldw	r2,8(r2)
   1009c:	108000cc 	andi	r2,r2,3
   100a0:	10001826 	beq	r2,zero,10104 <write+0xbc>
   100a4:	e0bffb17 	ldw	r2,-20(fp)
   100a8:	10800017 	ldw	r2,0(r2)
   100ac:	10800617 	ldw	r2,24(r2)
   100b0:	10001426 	beq	r2,zero,10104 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   100b4:	e0bffb17 	ldw	r2,-20(fp)
   100b8:	10800017 	ldw	r2,0(r2)
   100bc:	10800617 	ldw	r2,24(r2)
   100c0:	e0ffff17 	ldw	r3,-4(fp)
   100c4:	e13ffb17 	ldw	r4,-20(fp)
   100c8:	e17ffe17 	ldw	r5,-8(fp)
   100cc:	180d883a 	mov	r6,r3
   100d0:	103ee83a 	callr	r2
   100d4:	e0bffc15 	stw	r2,-16(fp)
   100d8:	e0bffc17 	ldw	r2,-16(fp)
   100dc:	1000070e 	bge	r2,zero,100fc <write+0xb4>
      {
        ALT_ERRNO = -rval;
   100e0:	000fff80 	call	fff8 <alt_get_errno>
   100e4:	1007883a 	mov	r3,r2
   100e8:	e0bffc17 	ldw	r2,-16(fp)
   100ec:	0085c83a 	sub	r2,zero,r2
   100f0:	18800015 	stw	r2,0(r3)
        return -1;
   100f4:	00bfffc4 	movi	r2,-1
   100f8:	00000c06 	br	1012c <write+0xe4>
      }
      return rval;
   100fc:	e0bffc17 	ldw	r2,-16(fp)
   10100:	00000a06 	br	1012c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   10104:	000fff80 	call	fff8 <alt_get_errno>
   10108:	1007883a 	mov	r3,r2
   1010c:	00800344 	movi	r2,13
   10110:	18800015 	stw	r2,0(r3)
   10114:	00000406 	br	10128 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   10118:	000fff80 	call	fff8 <alt_get_errno>
   1011c:	1007883a 	mov	r3,r2
   10120:	00801444 	movi	r2,81
   10124:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10128:	00bfffc4 	movi	r2,-1
}
   1012c:	e037883a 	mov	sp,fp
   10130:	dfc00117 	ldw	ra,4(sp)
   10134:	df000017 	ldw	fp,0(sp)
   10138:	dec00204 	addi	sp,sp,8
   1013c:	f800283a 	ret

00010140 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10140:	defffd04 	addi	sp,sp,-12
   10144:	dfc00215 	stw	ra,8(sp)
   10148:	df000115 	stw	fp,4(sp)
   1014c:	df000104 	addi	fp,sp,4
   10150:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10154:	e13fff17 	ldw	r4,-4(fp)
   10158:	01400074 	movhi	r5,1
   1015c:	29518904 	addi	r5,r5,17956
   10160:	00110800 	call	11080 <alt_dev_llist_insert>
}
   10164:	e037883a 	mov	sp,fp
   10168:	dfc00117 	ldw	ra,4(sp)
   1016c:	df000017 	ldw	fp,0(sp)
   10170:	dec00204 	addi	sp,sp,8
   10174:	f800283a 	ret

00010178 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10178:	defffd04 	addi	sp,sp,-12
   1017c:	dfc00215 	stw	ra,8(sp)
   10180:	df000115 	stw	fp,4(sp)
   10184:	df000104 	addi	fp,sp,4
   10188:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   1018c:	0011a240 	call	11a24 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10190:	00800044 	movi	r2,1
   10194:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10198:	e037883a 	mov	sp,fp
   1019c:	dfc00117 	ldw	ra,4(sp)
   101a0:	df000017 	ldw	fp,0(sp)
   101a4:	dec00204 	addi	sp,sp,8
   101a8:	f800283a 	ret

000101ac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   101ac:	defffe04 	addi	sp,sp,-8
   101b0:	dfc00115 	stw	ra,4(sp)
   101b4:	df000015 	stw	fp,0(sp)
   101b8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   101bc:	01020034 	movhi	r4,2048
   101c0:	21041804 	addi	r4,r4,4192
   101c4:	000b883a 	mov	r5,zero
   101c8:	000d883a 	mov	r6,zero
   101cc:	01c0fa04 	movi	r7,1000
   101d0:	0010ccc0 	call	10ccc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_STAMP, timer_stamp);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   101d4:	01000074 	movhi	r4,1
   101d8:	210d7304 	addi	r4,r4,13772
   101dc:	000b883a 	mov	r5,zero
   101e0:	018000c4 	movi	r6,3
   101e4:	00103700 	call	10370 <altera_avalon_jtag_uart_init>
   101e8:	01000074 	movhi	r4,1
   101ec:	210d6904 	addi	r4,r4,13732
   101f0:	00101400 	call	10140 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   101f4:	0001883a 	nop
}
   101f8:	e037883a 	mov	sp,fp
   101fc:	dfc00117 	ldw	ra,4(sp)
   10200:	df000017 	ldw	fp,0(sp)
   10204:	dec00204 	addi	sp,sp,8
   10208:	f800283a 	ret

0001020c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1020c:	defffa04 	addi	sp,sp,-24
   10210:	dfc00515 	stw	ra,20(sp)
   10214:	df000415 	stw	fp,16(sp)
   10218:	df000404 	addi	fp,sp,16
   1021c:	e13ffd15 	stw	r4,-12(fp)
   10220:	e17ffe15 	stw	r5,-8(fp)
   10224:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10228:	e0bffd17 	ldw	r2,-12(fp)
   1022c:	10800017 	ldw	r2,0(r2)
   10230:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   10234:	e0bffc17 	ldw	r2,-16(fp)
   10238:	10c00a04 	addi	r3,r2,40
   1023c:	e0bffd17 	ldw	r2,-12(fp)
   10240:	10800217 	ldw	r2,8(r2)
   10244:	1809883a 	mov	r4,r3
   10248:	e17ffe17 	ldw	r5,-8(fp)
   1024c:	e1bfff17 	ldw	r6,-4(fp)
   10250:	100f883a 	mov	r7,r2
   10254:	00108340 	call	10834 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   10258:	e037883a 	mov	sp,fp
   1025c:	dfc00117 	ldw	ra,4(sp)
   10260:	df000017 	ldw	fp,0(sp)
   10264:	dec00204 	addi	sp,sp,8
   10268:	f800283a 	ret

0001026c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1026c:	defffa04 	addi	sp,sp,-24
   10270:	dfc00515 	stw	ra,20(sp)
   10274:	df000415 	stw	fp,16(sp)
   10278:	df000404 	addi	fp,sp,16
   1027c:	e13ffd15 	stw	r4,-12(fp)
   10280:	e17ffe15 	stw	r5,-8(fp)
   10284:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10288:	e0bffd17 	ldw	r2,-12(fp)
   1028c:	10800017 	ldw	r2,0(r2)
   10290:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   10294:	e0bffc17 	ldw	r2,-16(fp)
   10298:	10c00a04 	addi	r3,r2,40
   1029c:	e0bffd17 	ldw	r2,-12(fp)
   102a0:	10800217 	ldw	r2,8(r2)
   102a4:	1809883a 	mov	r4,r3
   102a8:	e17ffe17 	ldw	r5,-8(fp)
   102ac:	e1bfff17 	ldw	r6,-4(fp)
   102b0:	100f883a 	mov	r7,r2
   102b4:	0010a400 	call	10a40 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   102b8:	e037883a 	mov	sp,fp
   102bc:	dfc00117 	ldw	ra,4(sp)
   102c0:	df000017 	ldw	fp,0(sp)
   102c4:	dec00204 	addi	sp,sp,8
   102c8:	f800283a 	ret

000102cc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   102cc:	defffc04 	addi	sp,sp,-16
   102d0:	dfc00315 	stw	ra,12(sp)
   102d4:	df000215 	stw	fp,8(sp)
   102d8:	df000204 	addi	fp,sp,8
   102dc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   102e0:	e0bfff17 	ldw	r2,-4(fp)
   102e4:	10800017 	ldw	r2,0(r2)
   102e8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   102ec:	e0bffe17 	ldw	r2,-8(fp)
   102f0:	10c00a04 	addi	r3,r2,40
   102f4:	e0bfff17 	ldw	r2,-4(fp)
   102f8:	10800217 	ldw	r2,8(r2)
   102fc:	1809883a 	mov	r4,r3
   10300:	100b883a 	mov	r5,r2
   10304:	00106e00 	call	106e0 <altera_avalon_jtag_uart_close>
}
   10308:	e037883a 	mov	sp,fp
   1030c:	dfc00117 	ldw	ra,4(sp)
   10310:	df000017 	ldw	fp,0(sp)
   10314:	dec00204 	addi	sp,sp,8
   10318:	f800283a 	ret

0001031c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1031c:	defffa04 	addi	sp,sp,-24
   10320:	dfc00515 	stw	ra,20(sp)
   10324:	df000415 	stw	fp,16(sp)
   10328:	df000404 	addi	fp,sp,16
   1032c:	e13ffd15 	stw	r4,-12(fp)
   10330:	e17ffe15 	stw	r5,-8(fp)
   10334:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   10338:	e0bffd17 	ldw	r2,-12(fp)
   1033c:	10800017 	ldw	r2,0(r2)
   10340:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   10344:	e0bffc17 	ldw	r2,-16(fp)
   10348:	10800a04 	addi	r2,r2,40
   1034c:	1009883a 	mov	r4,r2
   10350:	e17ffe17 	ldw	r5,-8(fp)
   10354:	e1bfff17 	ldw	r6,-4(fp)
   10358:	00107480 	call	10748 <altera_avalon_jtag_uart_ioctl>
}
   1035c:	e037883a 	mov	sp,fp
   10360:	dfc00117 	ldw	ra,4(sp)
   10364:	df000017 	ldw	fp,0(sp)
   10368:	dec00204 	addi	sp,sp,8
   1036c:	f800283a 	ret

00010370 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   10370:	defffa04 	addi	sp,sp,-24
   10374:	dfc00515 	stw	ra,20(sp)
   10378:	df000415 	stw	fp,16(sp)
   1037c:	df000404 	addi	fp,sp,16
   10380:	e13ffd15 	stw	r4,-12(fp)
   10384:	e17ffe15 	stw	r5,-8(fp)
   10388:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1038c:	e0bffd17 	ldw	r2,-12(fp)
   10390:	00c00044 	movi	r3,1
   10394:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   10398:	e0bffd17 	ldw	r2,-12(fp)
   1039c:	10800017 	ldw	r2,0(r2)
   103a0:	10800104 	addi	r2,r2,4
   103a4:	1007883a 	mov	r3,r2
   103a8:	e0bffd17 	ldw	r2,-12(fp)
   103ac:	10800817 	ldw	r2,32(r2)
   103b0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   103b4:	e0fffe17 	ldw	r3,-8(fp)
   103b8:	e0bfff17 	ldw	r2,-4(fp)
   103bc:	d8000015 	stw	zero,0(sp)
   103c0:	1809883a 	mov	r4,r3
   103c4:	100b883a 	mov	r5,r2
   103c8:	01800074 	movhi	r6,1
   103cc:	31810d04 	addi	r6,r6,1076
   103d0:	e1fffd17 	ldw	r7,-12(fp)
   103d4:	001120c0 	call	1120c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   103d8:	e0bffd17 	ldw	r2,-12(fp)
   103dc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   103e0:	e0bffd17 	ldw	r2,-12(fp)
   103e4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   103e8:	00800074 	movhi	r2,1
   103ec:	10985804 	addi	r2,r2,24928
   103f0:	10800017 	ldw	r2,0(r2)
   103f4:	1809883a 	mov	r4,r3
   103f8:	100b883a 	mov	r5,r2
   103fc:	01800074 	movhi	r6,1
   10400:	31818e04 	addi	r6,r6,1592
   10404:	e1fffd17 	ldw	r7,-12(fp)
   10408:	0010d540 	call	10d54 <alt_alarm_start>
   1040c:	1000040e 	bge	r2,zero,10420 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   10410:	e0fffd17 	ldw	r3,-12(fp)
   10414:	00a00034 	movhi	r2,32768
   10418:	10bfffc4 	addi	r2,r2,-1
   1041c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   10420:	e037883a 	mov	sp,fp
   10424:	dfc00117 	ldw	ra,4(sp)
   10428:	df000017 	ldw	fp,0(sp)
   1042c:	dec00204 	addi	sp,sp,8
   10430:	f800283a 	ret

00010434 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   10434:	defff804 	addi	sp,sp,-32
   10438:	df000715 	stw	fp,28(sp)
   1043c:	df000704 	addi	fp,sp,28
   10440:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   10444:	e0bfff17 	ldw	r2,-4(fp)
   10448:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   1044c:	e0bffb17 	ldw	r2,-20(fp)
   10450:	10800017 	ldw	r2,0(r2)
   10454:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10458:	e0bffc17 	ldw	r2,-16(fp)
   1045c:	10800104 	addi	r2,r2,4
   10460:	10800037 	ldwio	r2,0(r2)
   10464:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10468:	e0bffd17 	ldw	r2,-12(fp)
   1046c:	1080c00c 	andi	r2,r2,768
   10470:	1000011e 	bne	r2,zero,10478 <altera_avalon_jtag_uart_irq+0x44>
      break;
   10474:	00006c06 	br	10628 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   10478:	e0bffd17 	ldw	r2,-12(fp)
   1047c:	1080400c 	andi	r2,r2,256
   10480:	10003426 	beq	r2,zero,10554 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   10484:	00800074 	movhi	r2,1
   10488:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1048c:	e0bffb17 	ldw	r2,-20(fp)
   10490:	10800a17 	ldw	r2,40(r2)
   10494:	10800044 	addi	r2,r2,1
   10498:	1081ffcc 	andi	r2,r2,2047
   1049c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   104a0:	e0bffb17 	ldw	r2,-20(fp)
   104a4:	10c00b17 	ldw	r3,44(r2)
   104a8:	e0bffe17 	ldw	r2,-8(fp)
   104ac:	1880011e 	bne	r3,r2,104b4 <altera_avalon_jtag_uart_irq+0x80>
          break;
   104b0:	00001606 	br	1050c <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   104b4:	e0bffc17 	ldw	r2,-16(fp)
   104b8:	10800037 	ldwio	r2,0(r2)
   104bc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   104c0:	e0bff917 	ldw	r2,-28(fp)
   104c4:	10a0000c 	andi	r2,r2,32768
   104c8:	1000011e 	bne	r2,zero,104d0 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   104cc:	00000f06 	br	1050c <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   104d0:	e0bffb17 	ldw	r2,-20(fp)
   104d4:	10800a17 	ldw	r2,40(r2)
   104d8:	e0fff917 	ldw	r3,-28(fp)
   104dc:	1809883a 	mov	r4,r3
   104e0:	e0fffb17 	ldw	r3,-20(fp)
   104e4:	1885883a 	add	r2,r3,r2
   104e8:	10800e04 	addi	r2,r2,56
   104ec:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   104f0:	e0bffb17 	ldw	r2,-20(fp)
   104f4:	10800a17 	ldw	r2,40(r2)
   104f8:	10800044 	addi	r2,r2,1
   104fc:	10c1ffcc 	andi	r3,r2,2047
   10500:	e0bffb17 	ldw	r2,-20(fp)
   10504:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   10508:	003fe006 	br	1048c <__alt_mem_sram+0xf7e1048c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1050c:	e0bff917 	ldw	r2,-28(fp)
   10510:	10bfffec 	andhi	r2,r2,65535
   10514:	10000f26 	beq	r2,zero,10554 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10518:	e0bffb17 	ldw	r2,-20(fp)
   1051c:	10c00817 	ldw	r3,32(r2)
   10520:	00bfff84 	movi	r2,-2
   10524:	1886703a 	and	r3,r3,r2
   10528:	e0bffb17 	ldw	r2,-20(fp)
   1052c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   10530:	e0bffc17 	ldw	r2,-16(fp)
   10534:	10800104 	addi	r2,r2,4
   10538:	1007883a 	mov	r3,r2
   1053c:	e0bffb17 	ldw	r2,-20(fp)
   10540:	10800817 	ldw	r2,32(r2)
   10544:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10548:	e0bffc17 	ldw	r2,-16(fp)
   1054c:	10800104 	addi	r2,r2,4
   10550:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   10554:	e0bffd17 	ldw	r2,-12(fp)
   10558:	1080800c 	andi	r2,r2,512
   1055c:	10003126 	beq	r2,zero,10624 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   10560:	e0bffd17 	ldw	r2,-12(fp)
   10564:	1004d43a 	srli	r2,r2,16
   10568:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1056c:	00001406 	br	105c0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   10570:	e0bffc17 	ldw	r2,-16(fp)
   10574:	e0fffb17 	ldw	r3,-20(fp)
   10578:	18c00d17 	ldw	r3,52(r3)
   1057c:	e13ffb17 	ldw	r4,-20(fp)
   10580:	20c7883a 	add	r3,r4,r3
   10584:	18c20e04 	addi	r3,r3,2104
   10588:	18c00003 	ldbu	r3,0(r3)
   1058c:	18c03fcc 	andi	r3,r3,255
   10590:	18c0201c 	xori	r3,r3,128
   10594:	18ffe004 	addi	r3,r3,-128
   10598:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1059c:	e0bffb17 	ldw	r2,-20(fp)
   105a0:	10800d17 	ldw	r2,52(r2)
   105a4:	10800044 	addi	r2,r2,1
   105a8:	10c1ffcc 	andi	r3,r2,2047
   105ac:	e0bffb17 	ldw	r2,-20(fp)
   105b0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   105b4:	e0bffa17 	ldw	r2,-24(fp)
   105b8:	10bfffc4 	addi	r2,r2,-1
   105bc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   105c0:	e0bffa17 	ldw	r2,-24(fp)
   105c4:	10000526 	beq	r2,zero,105dc <altera_avalon_jtag_uart_irq+0x1a8>
   105c8:	e0bffb17 	ldw	r2,-20(fp)
   105cc:	10c00d17 	ldw	r3,52(r2)
   105d0:	e0bffb17 	ldw	r2,-20(fp)
   105d4:	10800c17 	ldw	r2,48(r2)
   105d8:	18bfe51e 	bne	r3,r2,10570 <__alt_mem_sram+0xf7e10570>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   105dc:	e0bffa17 	ldw	r2,-24(fp)
   105e0:	10001026 	beq	r2,zero,10624 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   105e4:	e0bffb17 	ldw	r2,-20(fp)
   105e8:	10c00817 	ldw	r3,32(r2)
   105ec:	00bfff44 	movi	r2,-3
   105f0:	1886703a 	and	r3,r3,r2
   105f4:	e0bffb17 	ldw	r2,-20(fp)
   105f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   105fc:	e0bffb17 	ldw	r2,-20(fp)
   10600:	10800017 	ldw	r2,0(r2)
   10604:	10800104 	addi	r2,r2,4
   10608:	1007883a 	mov	r3,r2
   1060c:	e0bffb17 	ldw	r2,-20(fp)
   10610:	10800817 	ldw	r2,32(r2)
   10614:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10618:	e0bffc17 	ldw	r2,-16(fp)
   1061c:	10800104 	addi	r2,r2,4
   10620:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   10624:	003f8c06 	br	10458 <__alt_mem_sram+0xf7e10458>
}
   10628:	e037883a 	mov	sp,fp
   1062c:	df000017 	ldw	fp,0(sp)
   10630:	dec00104 	addi	sp,sp,4
   10634:	f800283a 	ret

00010638 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   10638:	defff804 	addi	sp,sp,-32
   1063c:	df000715 	stw	fp,28(sp)
   10640:	df000704 	addi	fp,sp,28
   10644:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   10648:	e0bffb17 	ldw	r2,-20(fp)
   1064c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   10650:	e0bff917 	ldw	r2,-28(fp)
   10654:	10800017 	ldw	r2,0(r2)
   10658:	10800104 	addi	r2,r2,4
   1065c:	10800037 	ldwio	r2,0(r2)
   10660:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   10664:	e0bffa17 	ldw	r2,-24(fp)
   10668:	1081000c 	andi	r2,r2,1024
   1066c:	10000b26 	beq	r2,zero,1069c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   10670:	e0bff917 	ldw	r2,-28(fp)
   10674:	10800017 	ldw	r2,0(r2)
   10678:	10800104 	addi	r2,r2,4
   1067c:	1007883a 	mov	r3,r2
   10680:	e0bff917 	ldw	r2,-28(fp)
   10684:	10800817 	ldw	r2,32(r2)
   10688:	10810014 	ori	r2,r2,1024
   1068c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   10690:	e0bff917 	ldw	r2,-28(fp)
   10694:	10000915 	stw	zero,36(r2)
   10698:	00000a06 	br	106c4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1069c:	e0bff917 	ldw	r2,-28(fp)
   106a0:	10c00917 	ldw	r3,36(r2)
   106a4:	00a00034 	movhi	r2,32768
   106a8:	10bfff04 	addi	r2,r2,-4
   106ac:	10c00536 	bltu	r2,r3,106c4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   106b0:	e0bff917 	ldw	r2,-28(fp)
   106b4:	10800917 	ldw	r2,36(r2)
   106b8:	10c00044 	addi	r3,r2,1
   106bc:	e0bff917 	ldw	r2,-28(fp)
   106c0:	10c00915 	stw	r3,36(r2)
   106c4:	00800074 	movhi	r2,1
   106c8:	10985804 	addi	r2,r2,24928
   106cc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   106d0:	e037883a 	mov	sp,fp
   106d4:	df000017 	ldw	fp,0(sp)
   106d8:	dec00104 	addi	sp,sp,4
   106dc:	f800283a 	ret

000106e0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   106e0:	defffd04 	addi	sp,sp,-12
   106e4:	df000215 	stw	fp,8(sp)
   106e8:	df000204 	addi	fp,sp,8
   106ec:	e13ffe15 	stw	r4,-8(fp)
   106f0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   106f4:	00000506 	br	1070c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   106f8:	e0bfff17 	ldw	r2,-4(fp)
   106fc:	1090000c 	andi	r2,r2,16384
   10700:	10000226 	beq	r2,zero,1070c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   10704:	00bffd44 	movi	r2,-11
   10708:	00000b06 	br	10738 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1070c:	e0bffe17 	ldw	r2,-8(fp)
   10710:	10c00d17 	ldw	r3,52(r2)
   10714:	e0bffe17 	ldw	r2,-8(fp)
   10718:	10800c17 	ldw	r2,48(r2)
   1071c:	18800526 	beq	r3,r2,10734 <altera_avalon_jtag_uart_close+0x54>
   10720:	e0bffe17 	ldw	r2,-8(fp)
   10724:	10c00917 	ldw	r3,36(r2)
   10728:	e0bffe17 	ldw	r2,-8(fp)
   1072c:	10800117 	ldw	r2,4(r2)
   10730:	18bff136 	bltu	r3,r2,106f8 <__alt_mem_sram+0xf7e106f8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   10734:	0005883a 	mov	r2,zero
}
   10738:	e037883a 	mov	sp,fp
   1073c:	df000017 	ldw	fp,0(sp)
   10740:	dec00104 	addi	sp,sp,4
   10744:	f800283a 	ret

00010748 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   10748:	defffa04 	addi	sp,sp,-24
   1074c:	df000515 	stw	fp,20(sp)
   10750:	df000504 	addi	fp,sp,20
   10754:	e13ffd15 	stw	r4,-12(fp)
   10758:	e17ffe15 	stw	r5,-8(fp)
   1075c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   10760:	00bff9c4 	movi	r2,-25
   10764:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   10768:	e0bffe17 	ldw	r2,-8(fp)
   1076c:	10da8060 	cmpeqi	r3,r2,27137
   10770:	1800031e 	bne	r3,zero,10780 <altera_avalon_jtag_uart_ioctl+0x38>
   10774:	109a80a0 	cmpeqi	r2,r2,27138
   10778:	1000191e 	bne	r2,zero,107e0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   1077c:	00002806 	br	10820 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   10780:	e0bffd17 	ldw	r2,-12(fp)
   10784:	10c00117 	ldw	r3,4(r2)
   10788:	00a00034 	movhi	r2,32768
   1078c:	10bfffc4 	addi	r2,r2,-1
   10790:	18801226 	beq	r3,r2,107dc <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   10794:	e0bfff17 	ldw	r2,-4(fp)
   10798:	10800017 	ldw	r2,0(r2)
   1079c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   107a0:	e0bffc17 	ldw	r2,-16(fp)
   107a4:	10800090 	cmplti	r2,r2,2
   107a8:	1000061e 	bne	r2,zero,107c4 <altera_avalon_jtag_uart_ioctl+0x7c>
   107ac:	e0fffc17 	ldw	r3,-16(fp)
   107b0:	00a00034 	movhi	r2,32768
   107b4:	10bfffc4 	addi	r2,r2,-1
   107b8:	18800226 	beq	r3,r2,107c4 <altera_avalon_jtag_uart_ioctl+0x7c>
   107bc:	e0bffc17 	ldw	r2,-16(fp)
   107c0:	00000206 	br	107cc <altera_avalon_jtag_uart_ioctl+0x84>
   107c4:	00a00034 	movhi	r2,32768
   107c8:	10bfff84 	addi	r2,r2,-2
   107cc:	e0fffd17 	ldw	r3,-12(fp)
   107d0:	18800115 	stw	r2,4(r3)
      rc = 0;
   107d4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   107d8:	00001106 	br	10820 <altera_avalon_jtag_uart_ioctl+0xd8>
   107dc:	00001006 	br	10820 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   107e0:	e0bffd17 	ldw	r2,-12(fp)
   107e4:	10c00117 	ldw	r3,4(r2)
   107e8:	00a00034 	movhi	r2,32768
   107ec:	10bfffc4 	addi	r2,r2,-1
   107f0:	18800a26 	beq	r3,r2,1081c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   107f4:	e0bffd17 	ldw	r2,-12(fp)
   107f8:	10c00917 	ldw	r3,36(r2)
   107fc:	e0bffd17 	ldw	r2,-12(fp)
   10800:	10800117 	ldw	r2,4(r2)
   10804:	1885803a 	cmpltu	r2,r3,r2
   10808:	10c03fcc 	andi	r3,r2,255
   1080c:	e0bfff17 	ldw	r2,-4(fp)
   10810:	10c00015 	stw	r3,0(r2)
      rc = 0;
   10814:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10818:	00000006 	br	1081c <altera_avalon_jtag_uart_ioctl+0xd4>
   1081c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   10820:	e0bffb17 	ldw	r2,-20(fp)
}
   10824:	e037883a 	mov	sp,fp
   10828:	df000017 	ldw	fp,0(sp)
   1082c:	dec00104 	addi	sp,sp,4
   10830:	f800283a 	ret

00010834 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   10834:	defff304 	addi	sp,sp,-52
   10838:	dfc00c15 	stw	ra,48(sp)
   1083c:	df000b15 	stw	fp,44(sp)
   10840:	df000b04 	addi	fp,sp,44
   10844:	e13ffc15 	stw	r4,-16(fp)
   10848:	e17ffd15 	stw	r5,-12(fp)
   1084c:	e1bffe15 	stw	r6,-8(fp)
   10850:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   10854:	e0bffd17 	ldw	r2,-12(fp)
   10858:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1085c:	00004906 	br	10984 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10860:	e0bffc17 	ldw	r2,-16(fp)
   10864:	10800a17 	ldw	r2,40(r2)
   10868:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   1086c:	e0bffc17 	ldw	r2,-16(fp)
   10870:	10800b17 	ldw	r2,44(r2)
   10874:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   10878:	e0fff717 	ldw	r3,-36(fp)
   1087c:	e0bff817 	ldw	r2,-32(fp)
   10880:	18800536 	bltu	r3,r2,10898 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   10884:	e0fff717 	ldw	r3,-36(fp)
   10888:	e0bff817 	ldw	r2,-32(fp)
   1088c:	1885c83a 	sub	r2,r3,r2
   10890:	e0bff615 	stw	r2,-40(fp)
   10894:	00000406 	br	108a8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   10898:	00c20004 	movi	r3,2048
   1089c:	e0bff817 	ldw	r2,-32(fp)
   108a0:	1885c83a 	sub	r2,r3,r2
   108a4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   108a8:	e0bff617 	ldw	r2,-40(fp)
   108ac:	1000011e 	bne	r2,zero,108b4 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   108b0:	00001d06 	br	10928 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   108b4:	e0fffe17 	ldw	r3,-8(fp)
   108b8:	e0bff617 	ldw	r2,-40(fp)
   108bc:	1880022e 	bgeu	r3,r2,108c8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   108c0:	e0bffe17 	ldw	r2,-8(fp)
   108c4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   108c8:	e0bff817 	ldw	r2,-32(fp)
   108cc:	10800e04 	addi	r2,r2,56
   108d0:	e0fffc17 	ldw	r3,-16(fp)
   108d4:	1885883a 	add	r2,r3,r2
   108d8:	e13ff517 	ldw	r4,-44(fp)
   108dc:	100b883a 	mov	r5,r2
   108e0:	e1bff617 	ldw	r6,-40(fp)
   108e4:	0008b980 	call	8b98 <memcpy>
      ptr   += n;
   108e8:	e0fff517 	ldw	r3,-44(fp)
   108ec:	e0bff617 	ldw	r2,-40(fp)
   108f0:	1885883a 	add	r2,r3,r2
   108f4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   108f8:	e0fffe17 	ldw	r3,-8(fp)
   108fc:	e0bff617 	ldw	r2,-40(fp)
   10900:	1885c83a 	sub	r2,r3,r2
   10904:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10908:	e0fff817 	ldw	r3,-32(fp)
   1090c:	e0bff617 	ldw	r2,-40(fp)
   10910:	1885883a 	add	r2,r3,r2
   10914:	10c1ffcc 	andi	r3,r2,2047
   10918:	e0bffc17 	ldw	r2,-16(fp)
   1091c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   10920:	e0bffe17 	ldw	r2,-8(fp)
   10924:	00bfce16 	blt	zero,r2,10860 <__alt_mem_sram+0xf7e10860>

    /* If we read any data then return it */
    if (ptr != buffer)
   10928:	e0fff517 	ldw	r3,-44(fp)
   1092c:	e0bffd17 	ldw	r2,-12(fp)
   10930:	18800126 	beq	r3,r2,10938 <altera_avalon_jtag_uart_read+0x104>
      break;
   10934:	00001506 	br	1098c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   10938:	e0bfff17 	ldw	r2,-4(fp)
   1093c:	1090000c 	andi	r2,r2,16384
   10940:	10000126 	beq	r2,zero,10948 <altera_avalon_jtag_uart_read+0x114>
      break;
   10944:	00001106 	br	1098c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   10948:	0001883a 	nop
   1094c:	e0bffc17 	ldw	r2,-16(fp)
   10950:	10c00a17 	ldw	r3,40(r2)
   10954:	e0bff717 	ldw	r2,-36(fp)
   10958:	1880051e 	bne	r3,r2,10970 <altera_avalon_jtag_uart_read+0x13c>
   1095c:	e0bffc17 	ldw	r2,-16(fp)
   10960:	10c00917 	ldw	r3,36(r2)
   10964:	e0bffc17 	ldw	r2,-16(fp)
   10968:	10800117 	ldw	r2,4(r2)
   1096c:	18bff736 	bltu	r3,r2,1094c <__alt_mem_sram+0xf7e1094c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   10970:	e0bffc17 	ldw	r2,-16(fp)
   10974:	10c00a17 	ldw	r3,40(r2)
   10978:	e0bff717 	ldw	r2,-36(fp)
   1097c:	1880011e 	bne	r3,r2,10984 <altera_avalon_jtag_uart_read+0x150>
      break;
   10980:	00000206 	br	1098c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10984:	e0bffe17 	ldw	r2,-8(fp)
   10988:	00bfb516 	blt	zero,r2,10860 <__alt_mem_sram+0xf7e10860>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1098c:	e0fff517 	ldw	r3,-44(fp)
   10990:	e0bffd17 	ldw	r2,-12(fp)
   10994:	18801826 	beq	r3,r2,109f8 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10998:	0005303a 	rdctl	r2,status
   1099c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   109a0:	e0fffa17 	ldw	r3,-24(fp)
   109a4:	00bfff84 	movi	r2,-2
   109a8:	1884703a 	and	r2,r3,r2
   109ac:	1001703a 	wrctl	status,r2
  
  return context;
   109b0:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   109b4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   109b8:	e0bffc17 	ldw	r2,-16(fp)
   109bc:	10800817 	ldw	r2,32(r2)
   109c0:	10c00054 	ori	r3,r2,1
   109c4:	e0bffc17 	ldw	r2,-16(fp)
   109c8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   109cc:	e0bffc17 	ldw	r2,-16(fp)
   109d0:	10800017 	ldw	r2,0(r2)
   109d4:	10800104 	addi	r2,r2,4
   109d8:	1007883a 	mov	r3,r2
   109dc:	e0bffc17 	ldw	r2,-16(fp)
   109e0:	10800817 	ldw	r2,32(r2)
   109e4:	18800035 	stwio	r2,0(r3)
   109e8:	e0bff917 	ldw	r2,-28(fp)
   109ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   109f0:	e0bffb17 	ldw	r2,-20(fp)
   109f4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   109f8:	e0fff517 	ldw	r3,-44(fp)
   109fc:	e0bffd17 	ldw	r2,-12(fp)
   10a00:	18800426 	beq	r3,r2,10a14 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   10a04:	e0fff517 	ldw	r3,-44(fp)
   10a08:	e0bffd17 	ldw	r2,-12(fp)
   10a0c:	1885c83a 	sub	r2,r3,r2
   10a10:	00000606 	br	10a2c <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   10a14:	e0bfff17 	ldw	r2,-4(fp)
   10a18:	1090000c 	andi	r2,r2,16384
   10a1c:	10000226 	beq	r2,zero,10a28 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   10a20:	00bffd44 	movi	r2,-11
   10a24:	00000106 	br	10a2c <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   10a28:	00bffec4 	movi	r2,-5
}
   10a2c:	e037883a 	mov	sp,fp
   10a30:	dfc00117 	ldw	ra,4(sp)
   10a34:	df000017 	ldw	fp,0(sp)
   10a38:	dec00204 	addi	sp,sp,8
   10a3c:	f800283a 	ret

00010a40 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10a40:	defff304 	addi	sp,sp,-52
   10a44:	dfc00c15 	stw	ra,48(sp)
   10a48:	df000b15 	stw	fp,44(sp)
   10a4c:	df000b04 	addi	fp,sp,44
   10a50:	e13ffc15 	stw	r4,-16(fp)
   10a54:	e17ffd15 	stw	r5,-12(fp)
   10a58:	e1bffe15 	stw	r6,-8(fp)
   10a5c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   10a60:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   10a64:	e0bffd17 	ldw	r2,-12(fp)
   10a68:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10a6c:	00003806 	br	10b50 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   10a70:	e0bffc17 	ldw	r2,-16(fp)
   10a74:	10800c17 	ldw	r2,48(r2)
   10a78:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   10a7c:	e0bffc17 	ldw	r2,-16(fp)
   10a80:	10800d17 	ldw	r2,52(r2)
   10a84:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   10a88:	e0fff817 	ldw	r3,-32(fp)
   10a8c:	e0bff517 	ldw	r2,-44(fp)
   10a90:	1880062e 	bgeu	r3,r2,10aac <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   10a94:	e0fff517 	ldw	r3,-44(fp)
   10a98:	e0bff817 	ldw	r2,-32(fp)
   10a9c:	1885c83a 	sub	r2,r3,r2
   10aa0:	10bfffc4 	addi	r2,r2,-1
   10aa4:	e0bff615 	stw	r2,-40(fp)
   10aa8:	00000b06 	br	10ad8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   10aac:	e0bff517 	ldw	r2,-44(fp)
   10ab0:	10000526 	beq	r2,zero,10ac8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   10ab4:	00c20004 	movi	r3,2048
   10ab8:	e0bff817 	ldw	r2,-32(fp)
   10abc:	1885c83a 	sub	r2,r3,r2
   10ac0:	e0bff615 	stw	r2,-40(fp)
   10ac4:	00000406 	br	10ad8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10ac8:	00c1ffc4 	movi	r3,2047
   10acc:	e0bff817 	ldw	r2,-32(fp)
   10ad0:	1885c83a 	sub	r2,r3,r2
   10ad4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10ad8:	e0bff617 	ldw	r2,-40(fp)
   10adc:	1000011e 	bne	r2,zero,10ae4 <altera_avalon_jtag_uart_write+0xa4>
        break;
   10ae0:	00001d06 	br	10b58 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   10ae4:	e0fffe17 	ldw	r3,-8(fp)
   10ae8:	e0bff617 	ldw	r2,-40(fp)
   10aec:	1880022e 	bgeu	r3,r2,10af8 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   10af0:	e0bffe17 	ldw	r2,-8(fp)
   10af4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   10af8:	e0bff817 	ldw	r2,-32(fp)
   10afc:	10820e04 	addi	r2,r2,2104
   10b00:	e0fffc17 	ldw	r3,-16(fp)
   10b04:	1885883a 	add	r2,r3,r2
   10b08:	1009883a 	mov	r4,r2
   10b0c:	e17ffd17 	ldw	r5,-12(fp)
   10b10:	e1bff617 	ldw	r6,-40(fp)
   10b14:	0008b980 	call	8b98 <memcpy>
      ptr   += n;
   10b18:	e0fffd17 	ldw	r3,-12(fp)
   10b1c:	e0bff617 	ldw	r2,-40(fp)
   10b20:	1885883a 	add	r2,r3,r2
   10b24:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   10b28:	e0fffe17 	ldw	r3,-8(fp)
   10b2c:	e0bff617 	ldw	r2,-40(fp)
   10b30:	1885c83a 	sub	r2,r3,r2
   10b34:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10b38:	e0fff817 	ldw	r3,-32(fp)
   10b3c:	e0bff617 	ldw	r2,-40(fp)
   10b40:	1885883a 	add	r2,r3,r2
   10b44:	10c1ffcc 	andi	r3,r2,2047
   10b48:	e0bffc17 	ldw	r2,-16(fp)
   10b4c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10b50:	e0bffe17 	ldw	r2,-8(fp)
   10b54:	00bfc616 	blt	zero,r2,10a70 <__alt_mem_sram+0xf7e10a70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b58:	0005303a 	rdctl	r2,status
   10b5c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b60:	e0fffa17 	ldw	r3,-24(fp)
   10b64:	00bfff84 	movi	r2,-2
   10b68:	1884703a 	and	r2,r3,r2
   10b6c:	1001703a 	wrctl	status,r2
  
  return context;
   10b70:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   10b74:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10b78:	e0bffc17 	ldw	r2,-16(fp)
   10b7c:	10800817 	ldw	r2,32(r2)
   10b80:	10c00094 	ori	r3,r2,2
   10b84:	e0bffc17 	ldw	r2,-16(fp)
   10b88:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10b8c:	e0bffc17 	ldw	r2,-16(fp)
   10b90:	10800017 	ldw	r2,0(r2)
   10b94:	10800104 	addi	r2,r2,4
   10b98:	1007883a 	mov	r3,r2
   10b9c:	e0bffc17 	ldw	r2,-16(fp)
   10ba0:	10800817 	ldw	r2,32(r2)
   10ba4:	18800035 	stwio	r2,0(r3)
   10ba8:	e0bff917 	ldw	r2,-28(fp)
   10bac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10bb0:	e0bffb17 	ldw	r2,-20(fp)
   10bb4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   10bb8:	e0bffe17 	ldw	r2,-8(fp)
   10bbc:	0080120e 	bge	zero,r2,10c08 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   10bc0:	e0bfff17 	ldw	r2,-4(fp)
   10bc4:	1090000c 	andi	r2,r2,16384
   10bc8:	10000126 	beq	r2,zero,10bd0 <altera_avalon_jtag_uart_write+0x190>
        break;
   10bcc:	00001006 	br	10c10 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   10bd0:	0001883a 	nop
   10bd4:	e0bffc17 	ldw	r2,-16(fp)
   10bd8:	10c00d17 	ldw	r3,52(r2)
   10bdc:	e0bff517 	ldw	r2,-44(fp)
   10be0:	1880051e 	bne	r3,r2,10bf8 <altera_avalon_jtag_uart_write+0x1b8>
   10be4:	e0bffc17 	ldw	r2,-16(fp)
   10be8:	10c00917 	ldw	r3,36(r2)
   10bec:	e0bffc17 	ldw	r2,-16(fp)
   10bf0:	10800117 	ldw	r2,4(r2)
   10bf4:	18bff736 	bltu	r3,r2,10bd4 <__alt_mem_sram+0xf7e10bd4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   10bf8:	e0bffc17 	ldw	r2,-16(fp)
   10bfc:	10800917 	ldw	r2,36(r2)
   10c00:	10000126 	beq	r2,zero,10c08 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   10c04:	00000206 	br	10c10 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   10c08:	e0bffe17 	ldw	r2,-8(fp)
   10c0c:	00bf9716 	blt	zero,r2,10a6c <__alt_mem_sram+0xf7e10a6c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10c10:	e0fffd17 	ldw	r3,-12(fp)
   10c14:	e0bff717 	ldw	r2,-36(fp)
   10c18:	18800426 	beq	r3,r2,10c2c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   10c1c:	e0fffd17 	ldw	r3,-12(fp)
   10c20:	e0bff717 	ldw	r2,-36(fp)
   10c24:	1885c83a 	sub	r2,r3,r2
   10c28:	00000606 	br	10c44 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   10c2c:	e0bfff17 	ldw	r2,-4(fp)
   10c30:	1090000c 	andi	r2,r2,16384
   10c34:	10000226 	beq	r2,zero,10c40 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   10c38:	00bffd44 	movi	r2,-11
   10c3c:	00000106 	br	10c44 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   10c40:	00bffec4 	movi	r2,-5
}
   10c44:	e037883a 	mov	sp,fp
   10c48:	dfc00117 	ldw	ra,4(sp)
   10c4c:	df000017 	ldw	fp,0(sp)
   10c50:	dec00204 	addi	sp,sp,8
   10c54:	f800283a 	ret

00010c58 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   10c58:	defffa04 	addi	sp,sp,-24
   10c5c:	dfc00515 	stw	ra,20(sp)
   10c60:	df000415 	stw	fp,16(sp)
   10c64:	df000404 	addi	fp,sp,16
   10c68:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   10c6c:	0007883a 	mov	r3,zero
   10c70:	e0bfff17 	ldw	r2,-4(fp)
   10c74:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   10c78:	e0bfff17 	ldw	r2,-4(fp)
   10c7c:	10800104 	addi	r2,r2,4
   10c80:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c84:	0005303a 	rdctl	r2,status
   10c88:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c8c:	e0fffd17 	ldw	r3,-12(fp)
   10c90:	00bfff84 	movi	r2,-2
   10c94:	1884703a 	and	r2,r3,r2
   10c98:	1001703a 	wrctl	status,r2
  
  return context;
   10c9c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   10ca0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   10ca4:	00119200 	call	11920 <alt_tick>
   10ca8:	e0bffc17 	ldw	r2,-16(fp)
   10cac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10cb0:	e0bffe17 	ldw	r2,-8(fp)
   10cb4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   10cb8:	e037883a 	mov	sp,fp
   10cbc:	dfc00117 	ldw	ra,4(sp)
   10cc0:	df000017 	ldw	fp,0(sp)
   10cc4:	dec00204 	addi	sp,sp,8
   10cc8:	f800283a 	ret

00010ccc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   10ccc:	defff804 	addi	sp,sp,-32
   10cd0:	dfc00715 	stw	ra,28(sp)
   10cd4:	df000615 	stw	fp,24(sp)
   10cd8:	df000604 	addi	fp,sp,24
   10cdc:	e13ffc15 	stw	r4,-16(fp)
   10ce0:	e17ffd15 	stw	r5,-12(fp)
   10ce4:	e1bffe15 	stw	r6,-8(fp)
   10ce8:	e1ffff15 	stw	r7,-4(fp)
   10cec:	e0bfff17 	ldw	r2,-4(fp)
   10cf0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   10cf4:	00800074 	movhi	r2,1
   10cf8:	10985804 	addi	r2,r2,24928
   10cfc:	10800017 	ldw	r2,0(r2)
   10d00:	1000041e 	bne	r2,zero,10d14 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   10d04:	00800074 	movhi	r2,1
   10d08:	10985804 	addi	r2,r2,24928
   10d0c:	e0fffb17 	ldw	r3,-20(fp)
   10d10:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   10d14:	e0bffc17 	ldw	r2,-16(fp)
   10d18:	10800104 	addi	r2,r2,4
   10d1c:	00c001c4 	movi	r3,7
   10d20:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   10d24:	d8000015 	stw	zero,0(sp)
   10d28:	e13ffd17 	ldw	r4,-12(fp)
   10d2c:	e17ffe17 	ldw	r5,-8(fp)
   10d30:	01800074 	movhi	r6,1
   10d34:	31831604 	addi	r6,r6,3160
   10d38:	e1fffc17 	ldw	r7,-16(fp)
   10d3c:	001120c0 	call	1120c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   10d40:	e037883a 	mov	sp,fp
   10d44:	dfc00117 	ldw	ra,4(sp)
   10d48:	df000017 	ldw	fp,0(sp)
   10d4c:	dec00204 	addi	sp,sp,8
   10d50:	f800283a 	ret

00010d54 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10d54:	defff504 	addi	sp,sp,-44
   10d58:	df000a15 	stw	fp,40(sp)
   10d5c:	df000a04 	addi	fp,sp,40
   10d60:	e13ffc15 	stw	r4,-16(fp)
   10d64:	e17ffd15 	stw	r5,-12(fp)
   10d68:	e1bffe15 	stw	r6,-8(fp)
   10d6c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10d70:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10d74:	00800074 	movhi	r2,1
   10d78:	10985804 	addi	r2,r2,24928
   10d7c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   10d80:	10003f26 	beq	r2,zero,10e80 <alt_alarm_start+0x12c>
  {
    if (alarm)
   10d84:	e0bffc17 	ldw	r2,-16(fp)
   10d88:	10003b26 	beq	r2,zero,10e78 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   10d8c:	e0bffc17 	ldw	r2,-16(fp)
   10d90:	e0fffe17 	ldw	r3,-8(fp)
   10d94:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   10d98:	e0bffc17 	ldw	r2,-16(fp)
   10d9c:	e0ffff17 	ldw	r3,-4(fp)
   10da0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10da4:	0005303a 	rdctl	r2,status
   10da8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10dac:	e0fff817 	ldw	r3,-32(fp)
   10db0:	00bfff84 	movi	r2,-2
   10db4:	1884703a 	and	r2,r3,r2
   10db8:	1001703a 	wrctl	status,r2
  
  return context;
   10dbc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   10dc0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10dc4:	00800074 	movhi	r2,1
   10dc8:	10985904 	addi	r2,r2,24932
   10dcc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   10dd0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10dd4:	e0fffd17 	ldw	r3,-12(fp)
   10dd8:	e0bff617 	ldw	r2,-40(fp)
   10ddc:	1885883a 	add	r2,r3,r2
   10de0:	10c00044 	addi	r3,r2,1
   10de4:	e0bffc17 	ldw	r2,-16(fp)
   10de8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10dec:	e0bffc17 	ldw	r2,-16(fp)
   10df0:	10c00217 	ldw	r3,8(r2)
   10df4:	e0bff617 	ldw	r2,-40(fp)
   10df8:	1880042e 	bgeu	r3,r2,10e0c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   10dfc:	e0bffc17 	ldw	r2,-16(fp)
   10e00:	00c00044 	movi	r3,1
   10e04:	10c00405 	stb	r3,16(r2)
   10e08:	00000206 	br	10e14 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   10e0c:	e0bffc17 	ldw	r2,-16(fp)
   10e10:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10e14:	e0fffc17 	ldw	r3,-16(fp)
   10e18:	00800074 	movhi	r2,1
   10e1c:	10918f04 	addi	r2,r2,17980
   10e20:	e0bff915 	stw	r2,-28(fp)
   10e24:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10e28:	e0bffa17 	ldw	r2,-24(fp)
   10e2c:	e0fff917 	ldw	r3,-28(fp)
   10e30:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10e34:	e0bff917 	ldw	r2,-28(fp)
   10e38:	10c00017 	ldw	r3,0(r2)
   10e3c:	e0bffa17 	ldw	r2,-24(fp)
   10e40:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10e44:	e0bff917 	ldw	r2,-28(fp)
   10e48:	10800017 	ldw	r2,0(r2)
   10e4c:	e0fffa17 	ldw	r3,-24(fp)
   10e50:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10e54:	e0bff917 	ldw	r2,-28(fp)
   10e58:	e0fffa17 	ldw	r3,-24(fp)
   10e5c:	10c00015 	stw	r3,0(r2)
   10e60:	e0bff717 	ldw	r2,-36(fp)
   10e64:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e68:	e0bffb17 	ldw	r2,-20(fp)
   10e6c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10e70:	0005883a 	mov	r2,zero
   10e74:	00000306 	br	10e84 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   10e78:	00bffa84 	movi	r2,-22
   10e7c:	00000106 	br	10e84 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   10e80:	00bfde84 	movi	r2,-134
  }
}
   10e84:	e037883a 	mov	sp,fp
   10e88:	df000017 	ldw	fp,0(sp)
   10e8c:	dec00104 	addi	sp,sp,4
   10e90:	f800283a 	ret

00010e94 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10e94:	defffa04 	addi	sp,sp,-24
   10e98:	dfc00515 	stw	ra,20(sp)
   10e9c:	df000415 	stw	fp,16(sp)
   10ea0:	df000404 	addi	fp,sp,16
   10ea4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   10ea8:	008000c4 	movi	r2,3
   10eac:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   10eb0:	e0fffd17 	ldw	r3,-12(fp)
   10eb4:	008003f4 	movhi	r2,15
   10eb8:	10909004 	addi	r2,r2,16960
   10ebc:	1885383a 	mul	r2,r3,r2
   10ec0:	01017db4 	movhi	r4,1526
   10ec4:	21384004 	addi	r4,r4,-7936
   10ec8:	100b883a 	mov	r5,r2
   10ecc:	000d15c0 	call	d15c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10ed0:	01200034 	movhi	r4,32768
   10ed4:	213fffc4 	addi	r4,r4,-1
   10ed8:	100b883a 	mov	r5,r2
   10edc:	000d15c0 	call	d15c <__udivsi3>
   10ee0:	e13fff17 	ldw	r4,-4(fp)
   10ee4:	100b883a 	mov	r5,r2
   10ee8:	000d15c0 	call	d15c <__udivsi3>
   10eec:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10ef0:	e0bffe17 	ldw	r2,-8(fp)
   10ef4:	10002a26 	beq	r2,zero,10fa0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   10ef8:	e03ffc15 	stw	zero,-16(fp)
   10efc:	00001706 	br	10f5c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10f00:	00a00034 	movhi	r2,32768
   10f04:	10bfffc4 	addi	r2,r2,-1
   10f08:	10bfffc4 	addi	r2,r2,-1
   10f0c:	103ffe1e 	bne	r2,zero,10f08 <__alt_mem_sram+0xf7e10f08>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   10f10:	e0fffd17 	ldw	r3,-12(fp)
   10f14:	008003f4 	movhi	r2,15
   10f18:	10909004 	addi	r2,r2,16960
   10f1c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10f20:	01017db4 	movhi	r4,1526
   10f24:	21384004 	addi	r4,r4,-7936
   10f28:	100b883a 	mov	r5,r2
   10f2c:	000d15c0 	call	d15c <__udivsi3>
   10f30:	01200034 	movhi	r4,32768
   10f34:	213fffc4 	addi	r4,r4,-1
   10f38:	100b883a 	mov	r5,r2
   10f3c:	000d15c0 	call	d15c <__udivsi3>
   10f40:	1007883a 	mov	r3,r2
   10f44:	e0bfff17 	ldw	r2,-4(fp)
   10f48:	10c5c83a 	sub	r2,r2,r3
   10f4c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10f50:	e0bffc17 	ldw	r2,-16(fp)
   10f54:	10800044 	addi	r2,r2,1
   10f58:	e0bffc15 	stw	r2,-16(fp)
   10f5c:	e0fffc17 	ldw	r3,-16(fp)
   10f60:	e0bffe17 	ldw	r2,-8(fp)
   10f64:	18bfe616 	blt	r3,r2,10f00 <__alt_mem_sram+0xf7e10f00>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10f68:	e0fffd17 	ldw	r3,-12(fp)
   10f6c:	008003f4 	movhi	r2,15
   10f70:	10909004 	addi	r2,r2,16960
   10f74:	1885383a 	mul	r2,r3,r2
   10f78:	01017db4 	movhi	r4,1526
   10f7c:	21384004 	addi	r4,r4,-7936
   10f80:	100b883a 	mov	r5,r2
   10f84:	000d15c0 	call	d15c <__udivsi3>
   10f88:	1007883a 	mov	r3,r2
   10f8c:	e0bfff17 	ldw	r2,-4(fp)
   10f90:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10f94:	10bfffc4 	addi	r2,r2,-1
   10f98:	103ffe1e 	bne	r2,zero,10f94 <__alt_mem_sram+0xf7e10f94>
   10f9c:	00000d06 	br	10fd4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10fa0:	e0fffd17 	ldw	r3,-12(fp)
   10fa4:	008003f4 	movhi	r2,15
   10fa8:	10909004 	addi	r2,r2,16960
   10fac:	1885383a 	mul	r2,r3,r2
   10fb0:	01017db4 	movhi	r4,1526
   10fb4:	21384004 	addi	r4,r4,-7936
   10fb8:	100b883a 	mov	r5,r2
   10fbc:	000d15c0 	call	d15c <__udivsi3>
   10fc0:	1007883a 	mov	r3,r2
   10fc4:	e0bfff17 	ldw	r2,-4(fp)
   10fc8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10fcc:	10bfffc4 	addi	r2,r2,-1
   10fd0:	00bffe16 	blt	zero,r2,10fcc <__alt_mem_sram+0xf7e10fcc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   10fd4:	0005883a 	mov	r2,zero
}
   10fd8:	e037883a 	mov	sp,fp
   10fdc:	dfc00117 	ldw	ra,4(sp)
   10fe0:	df000017 	ldw	fp,0(sp)
   10fe4:	dec00204 	addi	sp,sp,8
   10fe8:	f800283a 	ret

00010fec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10fec:	defffe04 	addi	sp,sp,-8
   10ff0:	df000115 	stw	fp,4(sp)
   10ff4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10ff8:	e03fff15 	stw	zero,-4(fp)
   10ffc:	00000506 	br	11014 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   11000:	e0bfff17 	ldw	r2,-4(fp)
   11004:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   11008:	e0bfff17 	ldw	r2,-4(fp)
   1100c:	10800804 	addi	r2,r2,32
   11010:	e0bfff15 	stw	r2,-4(fp)
   11014:	e0bfff17 	ldw	r2,-4(fp)
   11018:	10820030 	cmpltui	r2,r2,2048
   1101c:	103ff81e 	bne	r2,zero,11000 <__alt_mem_sram+0xf7e11000>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11020:	e037883a 	mov	sp,fp
   11024:	df000017 	ldw	fp,0(sp)
   11028:	dec00104 	addi	sp,sp,4
   1102c:	f800283a 	ret

00011030 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11030:	defffe04 	addi	sp,sp,-8
   11034:	dfc00115 	stw	ra,4(sp)
   11038:	df000015 	stw	fp,0(sp)
   1103c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11040:	00800074 	movhi	r2,1
   11044:	10918c04 	addi	r2,r2,17968
   11048:	10800017 	ldw	r2,0(r2)
   1104c:	10000526 	beq	r2,zero,11064 <alt_get_errno+0x34>
   11050:	00800074 	movhi	r2,1
   11054:	10918c04 	addi	r2,r2,17968
   11058:	10800017 	ldw	r2,0(r2)
   1105c:	103ee83a 	callr	r2
   11060:	00000206 	br	1106c <alt_get_errno+0x3c>
   11064:	00800074 	movhi	r2,1
   11068:	10985304 	addi	r2,r2,24908
}
   1106c:	e037883a 	mov	sp,fp
   11070:	dfc00117 	ldw	ra,4(sp)
   11074:	df000017 	ldw	fp,0(sp)
   11078:	dec00204 	addi	sp,sp,8
   1107c:	f800283a 	ret

00011080 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11080:	defffa04 	addi	sp,sp,-24
   11084:	dfc00515 	stw	ra,20(sp)
   11088:	df000415 	stw	fp,16(sp)
   1108c:	df000404 	addi	fp,sp,16
   11090:	e13ffe15 	stw	r4,-8(fp)
   11094:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11098:	e0bffe17 	ldw	r2,-8(fp)
   1109c:	10000326 	beq	r2,zero,110ac <alt_dev_llist_insert+0x2c>
   110a0:	e0bffe17 	ldw	r2,-8(fp)
   110a4:	10800217 	ldw	r2,8(r2)
   110a8:	1000061e 	bne	r2,zero,110c4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   110ac:	00110300 	call	11030 <alt_get_errno>
   110b0:	1007883a 	mov	r3,r2
   110b4:	00800584 	movi	r2,22
   110b8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   110bc:	00bffa84 	movi	r2,-22
   110c0:	00001306 	br	11110 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   110c4:	e0bffe17 	ldw	r2,-8(fp)
   110c8:	e0ffff17 	ldw	r3,-4(fp)
   110cc:	e0fffc15 	stw	r3,-16(fp)
   110d0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   110d4:	e0bffd17 	ldw	r2,-12(fp)
   110d8:	e0fffc17 	ldw	r3,-16(fp)
   110dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   110e0:	e0bffc17 	ldw	r2,-16(fp)
   110e4:	10c00017 	ldw	r3,0(r2)
   110e8:	e0bffd17 	ldw	r2,-12(fp)
   110ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   110f0:	e0bffc17 	ldw	r2,-16(fp)
   110f4:	10800017 	ldw	r2,0(r2)
   110f8:	e0fffd17 	ldw	r3,-12(fp)
   110fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11100:	e0bffc17 	ldw	r2,-16(fp)
   11104:	e0fffd17 	ldw	r3,-12(fp)
   11108:	10c00015 	stw	r3,0(r2)

  return 0;  
   1110c:	0005883a 	mov	r2,zero
}
   11110:	e037883a 	mov	sp,fp
   11114:	dfc00117 	ldw	ra,4(sp)
   11118:	df000017 	ldw	fp,0(sp)
   1111c:	dec00204 	addi	sp,sp,8
   11120:	f800283a 	ret

00011124 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   11124:	defffd04 	addi	sp,sp,-12
   11128:	dfc00215 	stw	ra,8(sp)
   1112c:	df000115 	stw	fp,4(sp)
   11130:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11134:	00800074 	movhi	r2,1
   11138:	10883204 	addi	r2,r2,8392
   1113c:	e0bfff15 	stw	r2,-4(fp)
   11140:	00000606 	br	1115c <_do_ctors+0x38>
        (*ctor) (); 
   11144:	e0bfff17 	ldw	r2,-4(fp)
   11148:	10800017 	ldw	r2,0(r2)
   1114c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11150:	e0bfff17 	ldw	r2,-4(fp)
   11154:	10bfff04 	addi	r2,r2,-4
   11158:	e0bfff15 	stw	r2,-4(fp)
   1115c:	e0ffff17 	ldw	r3,-4(fp)
   11160:	00800074 	movhi	r2,1
   11164:	10883304 	addi	r2,r2,8396
   11168:	18bff62e 	bgeu	r3,r2,11144 <__alt_mem_sram+0xf7e11144>
        (*ctor) (); 
}
   1116c:	e037883a 	mov	sp,fp
   11170:	dfc00117 	ldw	ra,4(sp)
   11174:	df000017 	ldw	fp,0(sp)
   11178:	dec00204 	addi	sp,sp,8
   1117c:	f800283a 	ret

00011180 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   11180:	defffd04 	addi	sp,sp,-12
   11184:	dfc00215 	stw	ra,8(sp)
   11188:	df000115 	stw	fp,4(sp)
   1118c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11190:	00800074 	movhi	r2,1
   11194:	10883204 	addi	r2,r2,8392
   11198:	e0bfff15 	stw	r2,-4(fp)
   1119c:	00000606 	br	111b8 <_do_dtors+0x38>
        (*dtor) (); 
   111a0:	e0bfff17 	ldw	r2,-4(fp)
   111a4:	10800017 	ldw	r2,0(r2)
   111a8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   111ac:	e0bfff17 	ldw	r2,-4(fp)
   111b0:	10bfff04 	addi	r2,r2,-4
   111b4:	e0bfff15 	stw	r2,-4(fp)
   111b8:	e0ffff17 	ldw	r3,-4(fp)
   111bc:	00800074 	movhi	r2,1
   111c0:	10883304 	addi	r2,r2,8396
   111c4:	18bff62e 	bgeu	r3,r2,111a0 <__alt_mem_sram+0xf7e111a0>
        (*dtor) (); 
}
   111c8:	e037883a 	mov	sp,fp
   111cc:	dfc00117 	ldw	ra,4(sp)
   111d0:	df000017 	ldw	fp,0(sp)
   111d4:	dec00204 	addi	sp,sp,8
   111d8:	f800283a 	ret

000111dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   111dc:	defffe04 	addi	sp,sp,-8
   111e0:	dfc00115 	stw	ra,4(sp)
   111e4:	df000015 	stw	fp,0(sp)
   111e8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   111ec:	0009883a 	mov	r4,zero
   111f0:	01440004 	movi	r5,4096
   111f4:	0011c9c0 	call	11c9c <alt_icache_flush>
#endif
}
   111f8:	e037883a 	mov	sp,fp
   111fc:	dfc00117 	ldw	ra,4(sp)
   11200:	df000017 	ldw	fp,0(sp)
   11204:	dec00204 	addi	sp,sp,8
   11208:	f800283a 	ret

0001120c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1120c:	defff904 	addi	sp,sp,-28
   11210:	dfc00615 	stw	ra,24(sp)
   11214:	df000515 	stw	fp,20(sp)
   11218:	df000504 	addi	fp,sp,20
   1121c:	e13ffc15 	stw	r4,-16(fp)
   11220:	e17ffd15 	stw	r5,-12(fp)
   11224:	e1bffe15 	stw	r6,-8(fp)
   11228:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1122c:	e0800217 	ldw	r2,8(fp)
   11230:	d8800015 	stw	r2,0(sp)
   11234:	e13ffc17 	ldw	r4,-16(fp)
   11238:	e17ffd17 	ldw	r5,-12(fp)
   1123c:	e1bffe17 	ldw	r6,-8(fp)
   11240:	e1ffff17 	ldw	r7,-4(fp)
   11244:	00113ec0 	call	113ec <alt_iic_isr_register>
}  
   11248:	e037883a 	mov	sp,fp
   1124c:	dfc00117 	ldw	ra,4(sp)
   11250:	df000017 	ldw	fp,0(sp)
   11254:	dec00204 	addi	sp,sp,8
   11258:	f800283a 	ret

0001125c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1125c:	defff904 	addi	sp,sp,-28
   11260:	df000615 	stw	fp,24(sp)
   11264:	df000604 	addi	fp,sp,24
   11268:	e13ffe15 	stw	r4,-8(fp)
   1126c:	e17fff15 	stw	r5,-4(fp)
   11270:	e0bfff17 	ldw	r2,-4(fp)
   11274:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11278:	0005303a 	rdctl	r2,status
   1127c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11280:	e0fffb17 	ldw	r3,-20(fp)
   11284:	00bfff84 	movi	r2,-2
   11288:	1884703a 	and	r2,r3,r2
   1128c:	1001703a 	wrctl	status,r2
  
  return context;
   11290:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11294:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   11298:	e0bffa17 	ldw	r2,-24(fp)
   1129c:	00c00044 	movi	r3,1
   112a0:	1884983a 	sll	r2,r3,r2
   112a4:	1007883a 	mov	r3,r2
   112a8:	00800074 	movhi	r2,1
   112ac:	10985704 	addi	r2,r2,24924
   112b0:	10800017 	ldw	r2,0(r2)
   112b4:	1886b03a 	or	r3,r3,r2
   112b8:	00800074 	movhi	r2,1
   112bc:	10985704 	addi	r2,r2,24924
   112c0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   112c4:	00800074 	movhi	r2,1
   112c8:	10985704 	addi	r2,r2,24924
   112cc:	10800017 	ldw	r2,0(r2)
   112d0:	100170fa 	wrctl	ienable,r2
   112d4:	e0bffc17 	ldw	r2,-16(fp)
   112d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   112dc:	e0bffd17 	ldw	r2,-12(fp)
   112e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   112e4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   112e8:	0001883a 	nop
}
   112ec:	e037883a 	mov	sp,fp
   112f0:	df000017 	ldw	fp,0(sp)
   112f4:	dec00104 	addi	sp,sp,4
   112f8:	f800283a 	ret

000112fc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   112fc:	defff904 	addi	sp,sp,-28
   11300:	df000615 	stw	fp,24(sp)
   11304:	df000604 	addi	fp,sp,24
   11308:	e13ffe15 	stw	r4,-8(fp)
   1130c:	e17fff15 	stw	r5,-4(fp)
   11310:	e0bfff17 	ldw	r2,-4(fp)
   11314:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11318:	0005303a 	rdctl	r2,status
   1131c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11320:	e0fffb17 	ldw	r3,-20(fp)
   11324:	00bfff84 	movi	r2,-2
   11328:	1884703a 	and	r2,r3,r2
   1132c:	1001703a 	wrctl	status,r2
  
  return context;
   11330:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11334:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   11338:	e0bffa17 	ldw	r2,-24(fp)
   1133c:	00c00044 	movi	r3,1
   11340:	1884983a 	sll	r2,r3,r2
   11344:	0084303a 	nor	r2,zero,r2
   11348:	1007883a 	mov	r3,r2
   1134c:	00800074 	movhi	r2,1
   11350:	10985704 	addi	r2,r2,24924
   11354:	10800017 	ldw	r2,0(r2)
   11358:	1886703a 	and	r3,r3,r2
   1135c:	00800074 	movhi	r2,1
   11360:	10985704 	addi	r2,r2,24924
   11364:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11368:	00800074 	movhi	r2,1
   1136c:	10985704 	addi	r2,r2,24924
   11370:	10800017 	ldw	r2,0(r2)
   11374:	100170fa 	wrctl	ienable,r2
   11378:	e0bffc17 	ldw	r2,-16(fp)
   1137c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11380:	e0bffd17 	ldw	r2,-12(fp)
   11384:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11388:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   1138c:	0001883a 	nop
}
   11390:	e037883a 	mov	sp,fp
   11394:	df000017 	ldw	fp,0(sp)
   11398:	dec00104 	addi	sp,sp,4
   1139c:	f800283a 	ret

000113a0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   113a0:	defffc04 	addi	sp,sp,-16
   113a4:	df000315 	stw	fp,12(sp)
   113a8:	df000304 	addi	fp,sp,12
   113ac:	e13ffe15 	stw	r4,-8(fp)
   113b0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   113b4:	000530fa 	rdctl	r2,ienable
   113b8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   113bc:	e0bfff17 	ldw	r2,-4(fp)
   113c0:	00c00044 	movi	r3,1
   113c4:	1884983a 	sll	r2,r3,r2
   113c8:	1007883a 	mov	r3,r2
   113cc:	e0bffd17 	ldw	r2,-12(fp)
   113d0:	1884703a 	and	r2,r3,r2
   113d4:	1004c03a 	cmpne	r2,r2,zero
   113d8:	10803fcc 	andi	r2,r2,255
}
   113dc:	e037883a 	mov	sp,fp
   113e0:	df000017 	ldw	fp,0(sp)
   113e4:	dec00104 	addi	sp,sp,4
   113e8:	f800283a 	ret

000113ec <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   113ec:	defff504 	addi	sp,sp,-44
   113f0:	dfc00a15 	stw	ra,40(sp)
   113f4:	df000915 	stw	fp,36(sp)
   113f8:	df000904 	addi	fp,sp,36
   113fc:	e13ffc15 	stw	r4,-16(fp)
   11400:	e17ffd15 	stw	r5,-12(fp)
   11404:	e1bffe15 	stw	r6,-8(fp)
   11408:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   1140c:	00bffa84 	movi	r2,-22
   11410:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   11414:	e0bffd17 	ldw	r2,-12(fp)
   11418:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1141c:	e0bff817 	ldw	r2,-32(fp)
   11420:	10800808 	cmpgei	r2,r2,32
   11424:	1000271e 	bne	r2,zero,114c4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11428:	0005303a 	rdctl	r2,status
   1142c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11430:	e0fffa17 	ldw	r3,-24(fp)
   11434:	00bfff84 	movi	r2,-2
   11438:	1884703a 	and	r2,r3,r2
   1143c:	1001703a 	wrctl	status,r2
  
  return context;
   11440:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   11444:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   11448:	00800074 	movhi	r2,1
   1144c:	10986404 	addi	r2,r2,24976
   11450:	e0fff817 	ldw	r3,-32(fp)
   11454:	180690fa 	slli	r3,r3,3
   11458:	10c5883a 	add	r2,r2,r3
   1145c:	e0fffe17 	ldw	r3,-8(fp)
   11460:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   11464:	00800074 	movhi	r2,1
   11468:	10986404 	addi	r2,r2,24976
   1146c:	e0fff817 	ldw	r3,-32(fp)
   11470:	180690fa 	slli	r3,r3,3
   11474:	10c5883a 	add	r2,r2,r3
   11478:	10800104 	addi	r2,r2,4
   1147c:	e0ffff17 	ldw	r3,-4(fp)
   11480:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   11484:	e0bffe17 	ldw	r2,-8(fp)
   11488:	10000526 	beq	r2,zero,114a0 <alt_iic_isr_register+0xb4>
   1148c:	e0bff817 	ldw	r2,-32(fp)
   11490:	e13ffc17 	ldw	r4,-16(fp)
   11494:	100b883a 	mov	r5,r2
   11498:	001125c0 	call	1125c <alt_ic_irq_enable>
   1149c:	00000406 	br	114b0 <alt_iic_isr_register+0xc4>
   114a0:	e0bff817 	ldw	r2,-32(fp)
   114a4:	e13ffc17 	ldw	r4,-16(fp)
   114a8:	100b883a 	mov	r5,r2
   114ac:	00112fc0 	call	112fc <alt_ic_irq_disable>
   114b0:	e0bff715 	stw	r2,-36(fp)
   114b4:	e0bff917 	ldw	r2,-28(fp)
   114b8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   114bc:	e0bffb17 	ldw	r2,-20(fp)
   114c0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   114c4:	e0bff717 	ldw	r2,-36(fp)
}
   114c8:	e037883a 	mov	sp,fp
   114cc:	dfc00117 	ldw	ra,4(sp)
   114d0:	df000017 	ldw	fp,0(sp)
   114d4:	dec00204 	addi	sp,sp,8
   114d8:	f800283a 	ret

000114dc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   114dc:	defff904 	addi	sp,sp,-28
   114e0:	dfc00615 	stw	ra,24(sp)
   114e4:	df000515 	stw	fp,20(sp)
   114e8:	df000504 	addi	fp,sp,20
   114ec:	e13ffc15 	stw	r4,-16(fp)
   114f0:	e17ffd15 	stw	r5,-12(fp)
   114f4:	e1bffe15 	stw	r6,-8(fp)
   114f8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   114fc:	e13ffd17 	ldw	r4,-12(fp)
   11500:	e17ffe17 	ldw	r5,-8(fp)
   11504:	e1bfff17 	ldw	r6,-4(fp)
   11508:	00117300 	call	11730 <open>
   1150c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   11510:	e0bffb17 	ldw	r2,-20(fp)
   11514:	10001c16 	blt	r2,zero,11588 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   11518:	00800074 	movhi	r2,1
   1151c:	108d0904 	addi	r2,r2,13348
   11520:	e0fffb17 	ldw	r3,-20(fp)
   11524:	18c00324 	muli	r3,r3,12
   11528:	10c5883a 	add	r2,r2,r3
   1152c:	10c00017 	ldw	r3,0(r2)
   11530:	e0bffc17 	ldw	r2,-16(fp)
   11534:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11538:	00800074 	movhi	r2,1
   1153c:	108d0904 	addi	r2,r2,13348
   11540:	e0fffb17 	ldw	r3,-20(fp)
   11544:	18c00324 	muli	r3,r3,12
   11548:	10c5883a 	add	r2,r2,r3
   1154c:	10800104 	addi	r2,r2,4
   11550:	10c00017 	ldw	r3,0(r2)
   11554:	e0bffc17 	ldw	r2,-16(fp)
   11558:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1155c:	00800074 	movhi	r2,1
   11560:	108d0904 	addi	r2,r2,13348
   11564:	e0fffb17 	ldw	r3,-20(fp)
   11568:	18c00324 	muli	r3,r3,12
   1156c:	10c5883a 	add	r2,r2,r3
   11570:	10800204 	addi	r2,r2,8
   11574:	10c00017 	ldw	r3,0(r2)
   11578:	e0bffc17 	ldw	r2,-16(fp)
   1157c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11580:	e13ffb17 	ldw	r4,-20(fp)
   11584:	000feb80 	call	feb8 <alt_release_fd>
  }
} 
   11588:	e037883a 	mov	sp,fp
   1158c:	dfc00117 	ldw	ra,4(sp)
   11590:	df000017 	ldw	fp,0(sp)
   11594:	dec00204 	addi	sp,sp,8
   11598:	f800283a 	ret

0001159c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1159c:	defffb04 	addi	sp,sp,-20
   115a0:	dfc00415 	stw	ra,16(sp)
   115a4:	df000315 	stw	fp,12(sp)
   115a8:	df000304 	addi	fp,sp,12
   115ac:	e13ffd15 	stw	r4,-12(fp)
   115b0:	e17ffe15 	stw	r5,-8(fp)
   115b4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   115b8:	01000074 	movhi	r4,1
   115bc:	210d0c04 	addi	r4,r4,13360
   115c0:	e17ffd17 	ldw	r5,-12(fp)
   115c4:	01800044 	movi	r6,1
   115c8:	01c07fc4 	movi	r7,511
   115cc:	00114dc0 	call	114dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   115d0:	01000074 	movhi	r4,1
   115d4:	210d0904 	addi	r4,r4,13348
   115d8:	e17ffe17 	ldw	r5,-8(fp)
   115dc:	000d883a 	mov	r6,zero
   115e0:	01c07fc4 	movi	r7,511
   115e4:	00114dc0 	call	114dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   115e8:	01000074 	movhi	r4,1
   115ec:	210d0f04 	addi	r4,r4,13372
   115f0:	e17fff17 	ldw	r5,-4(fp)
   115f4:	01800044 	movi	r6,1
   115f8:	01c07fc4 	movi	r7,511
   115fc:	00114dc0 	call	114dc <alt_open_fd>
}  
   11600:	e037883a 	mov	sp,fp
   11604:	dfc00117 	ldw	ra,4(sp)
   11608:	df000017 	ldw	fp,0(sp)
   1160c:	dec00204 	addi	sp,sp,8
   11610:	f800283a 	ret

00011614 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11614:	defffe04 	addi	sp,sp,-8
   11618:	dfc00115 	stw	ra,4(sp)
   1161c:	df000015 	stw	fp,0(sp)
   11620:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11624:	00800074 	movhi	r2,1
   11628:	10918c04 	addi	r2,r2,17968
   1162c:	10800017 	ldw	r2,0(r2)
   11630:	10000526 	beq	r2,zero,11648 <alt_get_errno+0x34>
   11634:	00800074 	movhi	r2,1
   11638:	10918c04 	addi	r2,r2,17968
   1163c:	10800017 	ldw	r2,0(r2)
   11640:	103ee83a 	callr	r2
   11644:	00000206 	br	11650 <alt_get_errno+0x3c>
   11648:	00800074 	movhi	r2,1
   1164c:	10985304 	addi	r2,r2,24908
}
   11650:	e037883a 	mov	sp,fp
   11654:	dfc00117 	ldw	ra,4(sp)
   11658:	df000017 	ldw	fp,0(sp)
   1165c:	dec00204 	addi	sp,sp,8
   11660:	f800283a 	ret

00011664 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   11664:	defffd04 	addi	sp,sp,-12
   11668:	df000215 	stw	fp,8(sp)
   1166c:	df000204 	addi	fp,sp,8
   11670:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11674:	e0bfff17 	ldw	r2,-4(fp)
   11678:	10800217 	ldw	r2,8(r2)
   1167c:	10d00034 	orhi	r3,r2,16384
   11680:	e0bfff17 	ldw	r2,-4(fp)
   11684:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11688:	e03ffe15 	stw	zero,-8(fp)
   1168c:	00001d06 	br	11704 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11690:	00800074 	movhi	r2,1
   11694:	108d0904 	addi	r2,r2,13348
   11698:	e0fffe17 	ldw	r3,-8(fp)
   1169c:	18c00324 	muli	r3,r3,12
   116a0:	10c5883a 	add	r2,r2,r3
   116a4:	10c00017 	ldw	r3,0(r2)
   116a8:	e0bfff17 	ldw	r2,-4(fp)
   116ac:	10800017 	ldw	r2,0(r2)
   116b0:	1880111e 	bne	r3,r2,116f8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   116b4:	00800074 	movhi	r2,1
   116b8:	108d0904 	addi	r2,r2,13348
   116bc:	e0fffe17 	ldw	r3,-8(fp)
   116c0:	18c00324 	muli	r3,r3,12
   116c4:	10c5883a 	add	r2,r2,r3
   116c8:	10800204 	addi	r2,r2,8
   116cc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   116d0:	1000090e 	bge	r2,zero,116f8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   116d4:	e0bffe17 	ldw	r2,-8(fp)
   116d8:	10c00324 	muli	r3,r2,12
   116dc:	00800074 	movhi	r2,1
   116e0:	108d0904 	addi	r2,r2,13348
   116e4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   116e8:	e0bfff17 	ldw	r2,-4(fp)
   116ec:	18800226 	beq	r3,r2,116f8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   116f0:	00bffcc4 	movi	r2,-13
   116f4:	00000a06 	br	11720 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   116f8:	e0bffe17 	ldw	r2,-8(fp)
   116fc:	10800044 	addi	r2,r2,1
   11700:	e0bffe15 	stw	r2,-8(fp)
   11704:	00800074 	movhi	r2,1
   11708:	10918b04 	addi	r2,r2,17964
   1170c:	10800017 	ldw	r2,0(r2)
   11710:	1007883a 	mov	r3,r2
   11714:	e0bffe17 	ldw	r2,-8(fp)
   11718:	18bfdd2e 	bgeu	r3,r2,11690 <__alt_mem_sram+0xf7e11690>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1171c:	0005883a 	mov	r2,zero
}
   11720:	e037883a 	mov	sp,fp
   11724:	df000017 	ldw	fp,0(sp)
   11728:	dec00104 	addi	sp,sp,4
   1172c:	f800283a 	ret

00011730 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11730:	defff604 	addi	sp,sp,-40
   11734:	dfc00915 	stw	ra,36(sp)
   11738:	df000815 	stw	fp,32(sp)
   1173c:	df000804 	addi	fp,sp,32
   11740:	e13ffd15 	stw	r4,-12(fp)
   11744:	e17ffe15 	stw	r5,-8(fp)
   11748:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1174c:	00bfffc4 	movi	r2,-1
   11750:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   11754:	00bffb44 	movi	r2,-19
   11758:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1175c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11760:	e13ffd17 	ldw	r4,-12(fp)
   11764:	01400074 	movhi	r5,1
   11768:	29518904 	addi	r5,r5,17956
   1176c:	0011a440 	call	11a44 <alt_find_dev>
   11770:	e0bff815 	stw	r2,-32(fp)
   11774:	e0bff817 	ldw	r2,-32(fp)
   11778:	1000051e 	bne	r2,zero,11790 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1177c:	e13ffd17 	ldw	r4,-12(fp)
   11780:	0011ad40 	call	11ad4 <alt_find_file>
   11784:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   11788:	00800044 	movi	r2,1
   1178c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11790:	e0bff817 	ldw	r2,-32(fp)
   11794:	10002926 	beq	r2,zero,1183c <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11798:	e13ff817 	ldw	r4,-32(fp)
   1179c:	0011be80 	call	11be8 <alt_get_fd>
   117a0:	e0bff915 	stw	r2,-28(fp)
   117a4:	e0bff917 	ldw	r2,-28(fp)
   117a8:	1000030e 	bge	r2,zero,117b8 <open+0x88>
    {
      status = index;
   117ac:	e0bff917 	ldw	r2,-28(fp)
   117b0:	e0bffa15 	stw	r2,-24(fp)
   117b4:	00002306 	br	11844 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   117b8:	e0bff917 	ldw	r2,-28(fp)
   117bc:	10c00324 	muli	r3,r2,12
   117c0:	00800074 	movhi	r2,1
   117c4:	108d0904 	addi	r2,r2,13348
   117c8:	1885883a 	add	r2,r3,r2
   117cc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   117d0:	e0fffe17 	ldw	r3,-8(fp)
   117d4:	00900034 	movhi	r2,16384
   117d8:	10bfffc4 	addi	r2,r2,-1
   117dc:	1886703a 	and	r3,r3,r2
   117e0:	e0bffc17 	ldw	r2,-16(fp)
   117e4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   117e8:	e0bffb17 	ldw	r2,-20(fp)
   117ec:	1000051e 	bne	r2,zero,11804 <open+0xd4>
   117f0:	e13ffc17 	ldw	r4,-16(fp)
   117f4:	00116640 	call	11664 <alt_file_locked>
   117f8:	e0bffa15 	stw	r2,-24(fp)
   117fc:	e0bffa17 	ldw	r2,-24(fp)
   11800:	10001016 	blt	r2,zero,11844 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   11804:	e0bff817 	ldw	r2,-32(fp)
   11808:	10800317 	ldw	r2,12(r2)
   1180c:	10000826 	beq	r2,zero,11830 <open+0x100>
   11810:	e0bff817 	ldw	r2,-32(fp)
   11814:	10800317 	ldw	r2,12(r2)
   11818:	e13ffc17 	ldw	r4,-16(fp)
   1181c:	e17ffd17 	ldw	r5,-12(fp)
   11820:	e1bffe17 	ldw	r6,-8(fp)
   11824:	e1ffff17 	ldw	r7,-4(fp)
   11828:	103ee83a 	callr	r2
   1182c:	00000106 	br	11834 <open+0x104>
   11830:	0005883a 	mov	r2,zero
   11834:	e0bffa15 	stw	r2,-24(fp)
   11838:	00000206 	br	11844 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1183c:	00bffb44 	movi	r2,-19
   11840:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11844:	e0bffa17 	ldw	r2,-24(fp)
   11848:	1000090e 	bge	r2,zero,11870 <open+0x140>
  {
    alt_release_fd (index);  
   1184c:	e13ff917 	ldw	r4,-28(fp)
   11850:	000feb80 	call	feb8 <alt_release_fd>
    ALT_ERRNO = -status;
   11854:	00116140 	call	11614 <alt_get_errno>
   11858:	1007883a 	mov	r3,r2
   1185c:	e0bffa17 	ldw	r2,-24(fp)
   11860:	0085c83a 	sub	r2,zero,r2
   11864:	18800015 	stw	r2,0(r3)
    return -1;
   11868:	00bfffc4 	movi	r2,-1
   1186c:	00000106 	br	11874 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   11870:	e0bff917 	ldw	r2,-28(fp)
}
   11874:	e037883a 	mov	sp,fp
   11878:	dfc00117 	ldw	ra,4(sp)
   1187c:	df000017 	ldw	fp,0(sp)
   11880:	dec00204 	addi	sp,sp,8
   11884:	f800283a 	ret

00011888 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11888:	defffa04 	addi	sp,sp,-24
   1188c:	df000515 	stw	fp,20(sp)
   11890:	df000504 	addi	fp,sp,20
   11894:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11898:	0005303a 	rdctl	r2,status
   1189c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   118a0:	e0fffc17 	ldw	r3,-16(fp)
   118a4:	00bfff84 	movi	r2,-2
   118a8:	1884703a 	and	r2,r3,r2
   118ac:	1001703a 	wrctl	status,r2
  
  return context;
   118b0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   118b4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   118b8:	e0bfff17 	ldw	r2,-4(fp)
   118bc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   118c0:	e0bffd17 	ldw	r2,-12(fp)
   118c4:	10800017 	ldw	r2,0(r2)
   118c8:	e0fffd17 	ldw	r3,-12(fp)
   118cc:	18c00117 	ldw	r3,4(r3)
   118d0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   118d4:	e0bffd17 	ldw	r2,-12(fp)
   118d8:	10800117 	ldw	r2,4(r2)
   118dc:	e0fffd17 	ldw	r3,-12(fp)
   118e0:	18c00017 	ldw	r3,0(r3)
   118e4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   118e8:	e0bffd17 	ldw	r2,-12(fp)
   118ec:	e0fffd17 	ldw	r3,-12(fp)
   118f0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   118f4:	e0bffd17 	ldw	r2,-12(fp)
   118f8:	e0fffd17 	ldw	r3,-12(fp)
   118fc:	10c00015 	stw	r3,0(r2)
   11900:	e0bffb17 	ldw	r2,-20(fp)
   11904:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11908:	e0bffe17 	ldw	r2,-8(fp)
   1190c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   11910:	e037883a 	mov	sp,fp
   11914:	df000017 	ldw	fp,0(sp)
   11918:	dec00104 	addi	sp,sp,4
   1191c:	f800283a 	ret

00011920 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11920:	defffb04 	addi	sp,sp,-20
   11924:	dfc00415 	stw	ra,16(sp)
   11928:	df000315 	stw	fp,12(sp)
   1192c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11930:	d0a00e17 	ldw	r2,-32712(gp)
   11934:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11938:	d0a6d817 	ldw	r2,-25760(gp)
   1193c:	10800044 	addi	r2,r2,1
   11940:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11944:	00002e06 	br	11a00 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   11948:	e0bffd17 	ldw	r2,-12(fp)
   1194c:	10800017 	ldw	r2,0(r2)
   11950:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11954:	e0bffd17 	ldw	r2,-12(fp)
   11958:	10800403 	ldbu	r2,16(r2)
   1195c:	10803fcc 	andi	r2,r2,255
   11960:	10000426 	beq	r2,zero,11974 <alt_tick+0x54>
   11964:	d0a6d817 	ldw	r2,-25760(gp)
   11968:	1000021e 	bne	r2,zero,11974 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1196c:	e0bffd17 	ldw	r2,-12(fp)
   11970:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11974:	e0bffd17 	ldw	r2,-12(fp)
   11978:	10800217 	ldw	r2,8(r2)
   1197c:	d0e6d817 	ldw	r3,-25760(gp)
   11980:	18801d36 	bltu	r3,r2,119f8 <alt_tick+0xd8>
   11984:	e0bffd17 	ldw	r2,-12(fp)
   11988:	10800403 	ldbu	r2,16(r2)
   1198c:	10803fcc 	andi	r2,r2,255
   11990:	1000191e 	bne	r2,zero,119f8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   11994:	e0bffd17 	ldw	r2,-12(fp)
   11998:	10800317 	ldw	r2,12(r2)
   1199c:	e0fffd17 	ldw	r3,-12(fp)
   119a0:	18c00517 	ldw	r3,20(r3)
   119a4:	1809883a 	mov	r4,r3
   119a8:	103ee83a 	callr	r2
   119ac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   119b0:	e0bfff17 	ldw	r2,-4(fp)
   119b4:	1000031e 	bne	r2,zero,119c4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   119b8:	e13ffd17 	ldw	r4,-12(fp)
   119bc:	00118880 	call	11888 <alt_alarm_stop>
   119c0:	00000d06 	br	119f8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   119c4:	e0bffd17 	ldw	r2,-12(fp)
   119c8:	10c00217 	ldw	r3,8(r2)
   119cc:	e0bfff17 	ldw	r2,-4(fp)
   119d0:	1887883a 	add	r3,r3,r2
   119d4:	e0bffd17 	ldw	r2,-12(fp)
   119d8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   119dc:	e0bffd17 	ldw	r2,-12(fp)
   119e0:	10c00217 	ldw	r3,8(r2)
   119e4:	d0a6d817 	ldw	r2,-25760(gp)
   119e8:	1880032e 	bgeu	r3,r2,119f8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   119ec:	e0bffd17 	ldw	r2,-12(fp)
   119f0:	00c00044 	movi	r3,1
   119f4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   119f8:	e0bffe17 	ldw	r2,-8(fp)
   119fc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11a00:	e0fffd17 	ldw	r3,-12(fp)
   11a04:	d0a00e04 	addi	r2,gp,-32712
   11a08:	18bfcf1e 	bne	r3,r2,11948 <__alt_mem_sram+0xf7e11948>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   11a0c:	0001883a 	nop
}
   11a10:	e037883a 	mov	sp,fp
   11a14:	dfc00117 	ldw	ra,4(sp)
   11a18:	df000017 	ldw	fp,0(sp)
   11a1c:	dec00204 	addi	sp,sp,8
   11a20:	f800283a 	ret

00011a24 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   11a24:	deffff04 	addi	sp,sp,-4
   11a28:	df000015 	stw	fp,0(sp)
   11a2c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11a30:	000170fa 	wrctl	ienable,zero
}
   11a34:	e037883a 	mov	sp,fp
   11a38:	df000017 	ldw	fp,0(sp)
   11a3c:	dec00104 	addi	sp,sp,4
   11a40:	f800283a 	ret

00011a44 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11a44:	defffa04 	addi	sp,sp,-24
   11a48:	dfc00515 	stw	ra,20(sp)
   11a4c:	df000415 	stw	fp,16(sp)
   11a50:	df000404 	addi	fp,sp,16
   11a54:	e13ffe15 	stw	r4,-8(fp)
   11a58:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11a5c:	e0bfff17 	ldw	r2,-4(fp)
   11a60:	10800017 	ldw	r2,0(r2)
   11a64:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11a68:	e13ffe17 	ldw	r4,-8(fp)
   11a6c:	00035400 	call	3540 <strlen>
   11a70:	10800044 	addi	r2,r2,1
   11a74:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11a78:	00000d06 	br	11ab0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11a7c:	e0bffc17 	ldw	r2,-16(fp)
   11a80:	10c00217 	ldw	r3,8(r2)
   11a84:	e0bffd17 	ldw	r2,-12(fp)
   11a88:	1809883a 	mov	r4,r3
   11a8c:	e17ffe17 	ldw	r5,-8(fp)
   11a90:	100d883a 	mov	r6,r2
   11a94:	0011d740 	call	11d74 <memcmp>
   11a98:	1000021e 	bne	r2,zero,11aa4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11a9c:	e0bffc17 	ldw	r2,-16(fp)
   11aa0:	00000706 	br	11ac0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11aa4:	e0bffc17 	ldw	r2,-16(fp)
   11aa8:	10800017 	ldw	r2,0(r2)
   11aac:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11ab0:	e0fffc17 	ldw	r3,-16(fp)
   11ab4:	e0bfff17 	ldw	r2,-4(fp)
   11ab8:	18bff01e 	bne	r3,r2,11a7c <__alt_mem_sram+0xf7e11a7c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11abc:	0005883a 	mov	r2,zero
}
   11ac0:	e037883a 	mov	sp,fp
   11ac4:	dfc00117 	ldw	ra,4(sp)
   11ac8:	df000017 	ldw	fp,0(sp)
   11acc:	dec00204 	addi	sp,sp,8
   11ad0:	f800283a 	ret

00011ad4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11ad4:	defffb04 	addi	sp,sp,-20
   11ad8:	dfc00415 	stw	ra,16(sp)
   11adc:	df000315 	stw	fp,12(sp)
   11ae0:	df000304 	addi	fp,sp,12
   11ae4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11ae8:	00800074 	movhi	r2,1
   11aec:	10918704 	addi	r2,r2,17948
   11af0:	10800017 	ldw	r2,0(r2)
   11af4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11af8:	00003106 	br	11bc0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   11afc:	e0bffd17 	ldw	r2,-12(fp)
   11b00:	10800217 	ldw	r2,8(r2)
   11b04:	1009883a 	mov	r4,r2
   11b08:	00035400 	call	3540 <strlen>
   11b0c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11b10:	e0bffd17 	ldw	r2,-12(fp)
   11b14:	10c00217 	ldw	r3,8(r2)
   11b18:	e0bffe17 	ldw	r2,-8(fp)
   11b1c:	10bfffc4 	addi	r2,r2,-1
   11b20:	1885883a 	add	r2,r3,r2
   11b24:	10800003 	ldbu	r2,0(r2)
   11b28:	10803fcc 	andi	r2,r2,255
   11b2c:	1080201c 	xori	r2,r2,128
   11b30:	10bfe004 	addi	r2,r2,-128
   11b34:	10800bd8 	cmpnei	r2,r2,47
   11b38:	1000031e 	bne	r2,zero,11b48 <alt_find_file+0x74>
    {
      len -= 1;
   11b3c:	e0bffe17 	ldw	r2,-8(fp)
   11b40:	10bfffc4 	addi	r2,r2,-1
   11b44:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11b48:	e0bffe17 	ldw	r2,-8(fp)
   11b4c:	e0ffff17 	ldw	r3,-4(fp)
   11b50:	1885883a 	add	r2,r3,r2
   11b54:	10800003 	ldbu	r2,0(r2)
   11b58:	10803fcc 	andi	r2,r2,255
   11b5c:	1080201c 	xori	r2,r2,128
   11b60:	10bfe004 	addi	r2,r2,-128
   11b64:	10800be0 	cmpeqi	r2,r2,47
   11b68:	1000081e 	bne	r2,zero,11b8c <alt_find_file+0xb8>
   11b6c:	e0bffe17 	ldw	r2,-8(fp)
   11b70:	e0ffff17 	ldw	r3,-4(fp)
   11b74:	1885883a 	add	r2,r3,r2
   11b78:	10800003 	ldbu	r2,0(r2)
   11b7c:	10803fcc 	andi	r2,r2,255
   11b80:	1080201c 	xori	r2,r2,128
   11b84:	10bfe004 	addi	r2,r2,-128
   11b88:	10000a1e 	bne	r2,zero,11bb4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   11b8c:	e0bffd17 	ldw	r2,-12(fp)
   11b90:	10c00217 	ldw	r3,8(r2)
   11b94:	e0bffe17 	ldw	r2,-8(fp)
   11b98:	1809883a 	mov	r4,r3
   11b9c:	e17fff17 	ldw	r5,-4(fp)
   11ba0:	100d883a 	mov	r6,r2
   11ba4:	0011d740 	call	11d74 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11ba8:	1000021e 	bne	r2,zero,11bb4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11bac:	e0bffd17 	ldw	r2,-12(fp)
   11bb0:	00000806 	br	11bd4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   11bb4:	e0bffd17 	ldw	r2,-12(fp)
   11bb8:	10800017 	ldw	r2,0(r2)
   11bbc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11bc0:	e0fffd17 	ldw	r3,-12(fp)
   11bc4:	00800074 	movhi	r2,1
   11bc8:	10918704 	addi	r2,r2,17948
   11bcc:	18bfcb1e 	bne	r3,r2,11afc <__alt_mem_sram+0xf7e11afc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11bd0:	0005883a 	mov	r2,zero
}
   11bd4:	e037883a 	mov	sp,fp
   11bd8:	dfc00117 	ldw	ra,4(sp)
   11bdc:	df000017 	ldw	fp,0(sp)
   11be0:	dec00204 	addi	sp,sp,8
   11be4:	f800283a 	ret

00011be8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   11be8:	defffc04 	addi	sp,sp,-16
   11bec:	df000315 	stw	fp,12(sp)
   11bf0:	df000304 	addi	fp,sp,12
   11bf4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   11bf8:	00bffa04 	movi	r2,-24
   11bfc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11c00:	e03ffd15 	stw	zero,-12(fp)
   11c04:	00001d06 	br	11c7c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   11c08:	00800074 	movhi	r2,1
   11c0c:	108d0904 	addi	r2,r2,13348
   11c10:	e0fffd17 	ldw	r3,-12(fp)
   11c14:	18c00324 	muli	r3,r3,12
   11c18:	10c5883a 	add	r2,r2,r3
   11c1c:	10800017 	ldw	r2,0(r2)
   11c20:	1000131e 	bne	r2,zero,11c70 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   11c24:	00800074 	movhi	r2,1
   11c28:	108d0904 	addi	r2,r2,13348
   11c2c:	e0fffd17 	ldw	r3,-12(fp)
   11c30:	18c00324 	muli	r3,r3,12
   11c34:	10c5883a 	add	r2,r2,r3
   11c38:	e0ffff17 	ldw	r3,-4(fp)
   11c3c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11c40:	00800074 	movhi	r2,1
   11c44:	10918b04 	addi	r2,r2,17964
   11c48:	10c00017 	ldw	r3,0(r2)
   11c4c:	e0bffd17 	ldw	r2,-12(fp)
   11c50:	1880040e 	bge	r3,r2,11c64 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   11c54:	00800074 	movhi	r2,1
   11c58:	10918b04 	addi	r2,r2,17964
   11c5c:	e0fffd17 	ldw	r3,-12(fp)
   11c60:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   11c64:	e0bffd17 	ldw	r2,-12(fp)
   11c68:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   11c6c:	00000606 	br	11c88 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11c70:	e0bffd17 	ldw	r2,-12(fp)
   11c74:	10800044 	addi	r2,r2,1
   11c78:	e0bffd15 	stw	r2,-12(fp)
   11c7c:	e0bffd17 	ldw	r2,-12(fp)
   11c80:	10800810 	cmplti	r2,r2,32
   11c84:	103fe01e 	bne	r2,zero,11c08 <__alt_mem_sram+0xf7e11c08>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11c88:	e0bffe17 	ldw	r2,-8(fp)
}
   11c8c:	e037883a 	mov	sp,fp
   11c90:	df000017 	ldw	fp,0(sp)
   11c94:	dec00104 	addi	sp,sp,4
   11c98:	f800283a 	ret

00011c9c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   11c9c:	defffb04 	addi	sp,sp,-20
   11ca0:	df000415 	stw	fp,16(sp)
   11ca4:	df000404 	addi	fp,sp,16
   11ca8:	e13ffe15 	stw	r4,-8(fp)
   11cac:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   11cb0:	e0bfff17 	ldw	r2,-4(fp)
   11cb4:	10840070 	cmpltui	r2,r2,4097
   11cb8:	1000021e 	bne	r2,zero,11cc4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   11cbc:	00840004 	movi	r2,4096
   11cc0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   11cc4:	e0fffe17 	ldw	r3,-8(fp)
   11cc8:	e0bfff17 	ldw	r2,-4(fp)
   11ccc:	1885883a 	add	r2,r3,r2
   11cd0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11cd4:	e0bffe17 	ldw	r2,-8(fp)
   11cd8:	e0bffc15 	stw	r2,-16(fp)
   11cdc:	00000506 	br	11cf4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   11ce0:	e0bffc17 	ldw	r2,-16(fp)
   11ce4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11ce8:	e0bffc17 	ldw	r2,-16(fp)
   11cec:	10800804 	addi	r2,r2,32
   11cf0:	e0bffc15 	stw	r2,-16(fp)
   11cf4:	e0fffc17 	ldw	r3,-16(fp)
   11cf8:	e0bffd17 	ldw	r2,-12(fp)
   11cfc:	18bff836 	bltu	r3,r2,11ce0 <__alt_mem_sram+0xf7e11ce0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   11d00:	e0bffe17 	ldw	r2,-8(fp)
   11d04:	108007cc 	andi	r2,r2,31
   11d08:	10000226 	beq	r2,zero,11d14 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   11d0c:	e0bffc17 	ldw	r2,-16(fp)
   11d10:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   11d14:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   11d18:	e037883a 	mov	sp,fp
   11d1c:	df000017 	ldw	fp,0(sp)
   11d20:	dec00104 	addi	sp,sp,4
   11d24:	f800283a 	ret

00011d28 <atexit>:
   11d28:	200b883a 	mov	r5,r4
   11d2c:	000d883a 	mov	r6,zero
   11d30:	0009883a 	mov	r4,zero
   11d34:	000f883a 	mov	r7,zero
   11d38:	0011df01 	jmpi	11df0 <__register_exitproc>

00011d3c <exit>:
   11d3c:	defffe04 	addi	sp,sp,-8
   11d40:	000b883a 	mov	r5,zero
   11d44:	dc000015 	stw	r16,0(sp)
   11d48:	dfc00115 	stw	ra,4(sp)
   11d4c:	2021883a 	mov	r16,r4
   11d50:	0011f040 	call	11f04 <__call_exitprocs>
   11d54:	00800074 	movhi	r2,1
   11d58:	10918104 	addi	r2,r2,17924
   11d5c:	11000017 	ldw	r4,0(r2)
   11d60:	20800f17 	ldw	r2,60(r4)
   11d64:	10000126 	beq	r2,zero,11d6c <exit+0x30>
   11d68:	103ee83a 	callr	r2
   11d6c:	8009883a 	mov	r4,r16
   11d70:	00120980 	call	12098 <_exit>

00011d74 <memcmp>:
   11d74:	01c000c4 	movi	r7,3
   11d78:	3980192e 	bgeu	r7,r6,11de0 <memcmp+0x6c>
   11d7c:	2144b03a 	or	r2,r4,r5
   11d80:	11c4703a 	and	r2,r2,r7
   11d84:	10000f26 	beq	r2,zero,11dc4 <memcmp+0x50>
   11d88:	20800003 	ldbu	r2,0(r4)
   11d8c:	28c00003 	ldbu	r3,0(r5)
   11d90:	10c0151e 	bne	r2,r3,11de8 <memcmp+0x74>
   11d94:	31bfff84 	addi	r6,r6,-2
   11d98:	01ffffc4 	movi	r7,-1
   11d9c:	00000406 	br	11db0 <memcmp+0x3c>
   11da0:	20800003 	ldbu	r2,0(r4)
   11da4:	28c00003 	ldbu	r3,0(r5)
   11da8:	31bfffc4 	addi	r6,r6,-1
   11dac:	10c00e1e 	bne	r2,r3,11de8 <memcmp+0x74>
   11db0:	21000044 	addi	r4,r4,1
   11db4:	29400044 	addi	r5,r5,1
   11db8:	31fff91e 	bne	r6,r7,11da0 <__alt_mem_sram+0xf7e11da0>
   11dbc:	0005883a 	mov	r2,zero
   11dc0:	f800283a 	ret
   11dc4:	20c00017 	ldw	r3,0(r4)
   11dc8:	28800017 	ldw	r2,0(r5)
   11dcc:	1880041e 	bne	r3,r2,11de0 <memcmp+0x6c>
   11dd0:	31bfff04 	addi	r6,r6,-4
   11dd4:	21000104 	addi	r4,r4,4
   11dd8:	29400104 	addi	r5,r5,4
   11ddc:	39bff936 	bltu	r7,r6,11dc4 <__alt_mem_sram+0xf7e11dc4>
   11de0:	303fe91e 	bne	r6,zero,11d88 <__alt_mem_sram+0xf7e11d88>
   11de4:	003ff506 	br	11dbc <__alt_mem_sram+0xf7e11dbc>
   11de8:	10c5c83a 	sub	r2,r2,r3
   11dec:	f800283a 	ret

00011df0 <__register_exitproc>:
   11df0:	00800074 	movhi	r2,1
   11df4:	defffa04 	addi	sp,sp,-24
   11df8:	10918104 	addi	r2,r2,17924
   11dfc:	dc000315 	stw	r16,12(sp)
   11e00:	14000017 	ldw	r16,0(r2)
   11e04:	dc400415 	stw	r17,16(sp)
   11e08:	dfc00515 	stw	ra,20(sp)
   11e0c:	80805217 	ldw	r2,328(r16)
   11e10:	2023883a 	mov	r17,r4
   11e14:	10003626 	beq	r2,zero,11ef0 <__register_exitproc+0x100>
   11e18:	10c00117 	ldw	r3,4(r2)
   11e1c:	010007c4 	movi	r4,31
   11e20:	20c00e16 	blt	r4,r3,11e5c <__register_exitproc+0x6c>
   11e24:	1a400044 	addi	r9,r3,1
   11e28:	8800211e 	bne	r17,zero,11eb0 <__register_exitproc+0xc0>
   11e2c:	18c00084 	addi	r3,r3,2
   11e30:	18c7883a 	add	r3,r3,r3
   11e34:	18c7883a 	add	r3,r3,r3
   11e38:	12400115 	stw	r9,4(r2)
   11e3c:	10c7883a 	add	r3,r2,r3
   11e40:	19400015 	stw	r5,0(r3)
   11e44:	0005883a 	mov	r2,zero
   11e48:	dfc00517 	ldw	ra,20(sp)
   11e4c:	dc400417 	ldw	r17,16(sp)
   11e50:	dc000317 	ldw	r16,12(sp)
   11e54:	dec00604 	addi	sp,sp,24
   11e58:	f800283a 	ret
   11e5c:	00800034 	movhi	r2,0
   11e60:	10800004 	addi	r2,r2,0
   11e64:	10002526 	beq	r2,zero,11efc <__register_exitproc+0x10c>
   11e68:	01006404 	movi	r4,400
   11e6c:	d9400015 	stw	r5,0(sp)
   11e70:	d9800115 	stw	r6,4(sp)
   11e74:	d9c00215 	stw	r7,8(sp)
   11e78:	00000000 	call	0 <__alt_mem_sdram>
   11e7c:	d9400017 	ldw	r5,0(sp)
   11e80:	d9800117 	ldw	r6,4(sp)
   11e84:	d9c00217 	ldw	r7,8(sp)
   11e88:	10001c26 	beq	r2,zero,11efc <__register_exitproc+0x10c>
   11e8c:	80c05217 	ldw	r3,328(r16)
   11e90:	10000115 	stw	zero,4(r2)
   11e94:	02400044 	movi	r9,1
   11e98:	10c00015 	stw	r3,0(r2)
   11e9c:	80805215 	stw	r2,328(r16)
   11ea0:	10006215 	stw	zero,392(r2)
   11ea4:	10006315 	stw	zero,396(r2)
   11ea8:	0007883a 	mov	r3,zero
   11eac:	883fdf26 	beq	r17,zero,11e2c <__alt_mem_sram+0xf7e11e2c>
   11eb0:	18d1883a 	add	r8,r3,r3
   11eb4:	4211883a 	add	r8,r8,r8
   11eb8:	1211883a 	add	r8,r2,r8
   11ebc:	41802215 	stw	r6,136(r8)
   11ec0:	01000044 	movi	r4,1
   11ec4:	11806217 	ldw	r6,392(r2)
   11ec8:	20c8983a 	sll	r4,r4,r3
   11ecc:	310cb03a 	or	r6,r6,r4
   11ed0:	11806215 	stw	r6,392(r2)
   11ed4:	41c04215 	stw	r7,264(r8)
   11ed8:	01800084 	movi	r6,2
   11edc:	89bfd31e 	bne	r17,r6,11e2c <__alt_mem_sram+0xf7e11e2c>
   11ee0:	11806317 	ldw	r6,396(r2)
   11ee4:	3108b03a 	or	r4,r6,r4
   11ee8:	11006315 	stw	r4,396(r2)
   11eec:	003fcf06 	br	11e2c <__alt_mem_sram+0xf7e11e2c>
   11ef0:	80805304 	addi	r2,r16,332
   11ef4:	80805215 	stw	r2,328(r16)
   11ef8:	003fc706 	br	11e18 <__alt_mem_sram+0xf7e11e18>
   11efc:	00bfffc4 	movi	r2,-1
   11f00:	003fd106 	br	11e48 <__alt_mem_sram+0xf7e11e48>

00011f04 <__call_exitprocs>:
   11f04:	00800074 	movhi	r2,1
   11f08:	10918104 	addi	r2,r2,17924
   11f0c:	10800017 	ldw	r2,0(r2)
   11f10:	defff404 	addi	sp,sp,-48
   11f14:	dd800815 	stw	r22,32(sp)
   11f18:	d8800015 	stw	r2,0(sp)
   11f1c:	10805204 	addi	r2,r2,328
   11f20:	dd000615 	stw	r20,24(sp)
   11f24:	dc800415 	stw	r18,16(sp)
   11f28:	dfc00b15 	stw	ra,44(sp)
   11f2c:	df000a15 	stw	fp,40(sp)
   11f30:	ddc00915 	stw	r23,36(sp)
   11f34:	dd400715 	stw	r21,28(sp)
   11f38:	dcc00515 	stw	r19,20(sp)
   11f3c:	dc400315 	stw	r17,12(sp)
   11f40:	dc000215 	stw	r16,8(sp)
   11f44:	2025883a 	mov	r18,r4
   11f48:	2829883a 	mov	r20,r5
   11f4c:	d8800115 	stw	r2,4(sp)
   11f50:	05bfffc4 	movi	r22,-1
   11f54:	d8800017 	ldw	r2,0(sp)
   11f58:	14c05217 	ldw	r19,328(r2)
   11f5c:	98001d26 	beq	r19,zero,11fd4 <__call_exitprocs+0xd0>
   11f60:	dd400117 	ldw	r21,4(sp)
   11f64:	98800117 	ldw	r2,4(r19)
   11f68:	173fffc4 	addi	fp,r2,-1
   11f6c:	e0000d16 	blt	fp,zero,11fa4 <__call_exitprocs+0xa0>
   11f70:	14000044 	addi	r16,r2,1
   11f74:	8421883a 	add	r16,r16,r16
   11f78:	8421883a 	add	r16,r16,r16
   11f7c:	84402004 	addi	r17,r16,128
   11f80:	9c63883a 	add	r17,r19,r17
   11f84:	9c21883a 	add	r16,r19,r16
   11f88:	a0001e26 	beq	r20,zero,12004 <__call_exitprocs+0x100>
   11f8c:	80804017 	ldw	r2,256(r16)
   11f90:	15001c26 	beq	r2,r20,12004 <__call_exitprocs+0x100>
   11f94:	e73fffc4 	addi	fp,fp,-1
   11f98:	843fff04 	addi	r16,r16,-4
   11f9c:	8c7fff04 	addi	r17,r17,-4
   11fa0:	e5bff91e 	bne	fp,r22,11f88 <__alt_mem_sram+0xf7e11f88>
   11fa4:	00800034 	movhi	r2,0
   11fa8:	10800004 	addi	r2,r2,0
   11fac:	10000926 	beq	r2,zero,11fd4 <__call_exitprocs+0xd0>
   11fb0:	98800117 	ldw	r2,4(r19)
   11fb4:	1000311e 	bne	r2,zero,1207c <__call_exitprocs+0x178>
   11fb8:	98800017 	ldw	r2,0(r19)
   11fbc:	10003426 	beq	r2,zero,12090 <__call_exitprocs+0x18c>
   11fc0:	9809883a 	mov	r4,r19
   11fc4:	a8800015 	stw	r2,0(r21)
   11fc8:	00000000 	call	0 <__alt_mem_sdram>
   11fcc:	acc00017 	ldw	r19,0(r21)
   11fd0:	983fe41e 	bne	r19,zero,11f64 <__alt_mem_sram+0xf7e11f64>
   11fd4:	dfc00b17 	ldw	ra,44(sp)
   11fd8:	df000a17 	ldw	fp,40(sp)
   11fdc:	ddc00917 	ldw	r23,36(sp)
   11fe0:	dd800817 	ldw	r22,32(sp)
   11fe4:	dd400717 	ldw	r21,28(sp)
   11fe8:	dd000617 	ldw	r20,24(sp)
   11fec:	dcc00517 	ldw	r19,20(sp)
   11ff0:	dc800417 	ldw	r18,16(sp)
   11ff4:	dc400317 	ldw	r17,12(sp)
   11ff8:	dc000217 	ldw	r16,8(sp)
   11ffc:	dec00c04 	addi	sp,sp,48
   12000:	f800283a 	ret
   12004:	98800117 	ldw	r2,4(r19)
   12008:	80c00017 	ldw	r3,0(r16)
   1200c:	10bfffc4 	addi	r2,r2,-1
   12010:	17001526 	beq	r2,fp,12068 <__call_exitprocs+0x164>
   12014:	80000015 	stw	zero,0(r16)
   12018:	183fde26 	beq	r3,zero,11f94 <__alt_mem_sram+0xf7e11f94>
   1201c:	00800044 	movi	r2,1
   12020:	1708983a 	sll	r4,r2,fp
   12024:	98806217 	ldw	r2,392(r19)
   12028:	9dc00117 	ldw	r23,4(r19)
   1202c:	2084703a 	and	r2,r4,r2
   12030:	1000061e 	bne	r2,zero,1204c <__call_exitprocs+0x148>
   12034:	183ee83a 	callr	r3
   12038:	98800117 	ldw	r2,4(r19)
   1203c:	15ffc51e 	bne	r2,r23,11f54 <__alt_mem_sram+0xf7e11f54>
   12040:	a8800017 	ldw	r2,0(r21)
   12044:	14ffd326 	beq	r2,r19,11f94 <__alt_mem_sram+0xf7e11f94>
   12048:	003fc206 	br	11f54 <__alt_mem_sram+0xf7e11f54>
   1204c:	98806317 	ldw	r2,396(r19)
   12050:	2084703a 	and	r2,r4,r2
   12054:	1000061e 	bne	r2,zero,12070 <__call_exitprocs+0x16c>
   12058:	89400017 	ldw	r5,0(r17)
   1205c:	9009883a 	mov	r4,r18
   12060:	183ee83a 	callr	r3
   12064:	003ff406 	br	12038 <__alt_mem_sram+0xf7e12038>
   12068:	9f000115 	stw	fp,4(r19)
   1206c:	003fea06 	br	12018 <__alt_mem_sram+0xf7e12018>
   12070:	89000017 	ldw	r4,0(r17)
   12074:	183ee83a 	callr	r3
   12078:	003fef06 	br	12038 <__alt_mem_sram+0xf7e12038>
   1207c:	98800017 	ldw	r2,0(r19)
   12080:	982b883a 	mov	r21,r19
   12084:	1027883a 	mov	r19,r2
   12088:	983fb61e 	bne	r19,zero,11f64 <__alt_mem_sram+0xf7e11f64>
   1208c:	003fd106 	br	11fd4 <__alt_mem_sram+0xf7e11fd4>
   12090:	0005883a 	mov	r2,zero
   12094:	003ffa06 	br	12080 <__alt_mem_sram+0xf7e12080>

00012098 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   12098:	defffd04 	addi	sp,sp,-12
   1209c:	df000215 	stw	fp,8(sp)
   120a0:	df000204 	addi	fp,sp,8
   120a4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   120a8:	0001883a 	nop
   120ac:	e0bfff17 	ldw	r2,-4(fp)
   120b0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   120b4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   120b8:	10000226 	beq	r2,zero,120c4 <_exit+0x2c>
    ALT_SIM_FAIL();
   120bc:	002af070 	cmpltui	zero,zero,43969
   120c0:	00000106 	br	120c8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   120c4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   120c8:	003fff06 	br	120c8 <__alt_mem_sram+0xf7e120c8>
