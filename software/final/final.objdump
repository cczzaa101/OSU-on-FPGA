
final.elf:     file format elf32-littlenios2
final.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001345c memsz 0x0001345c flags r-x
    LOAD off    0x0001447c vaddr 0x0001347c paddr 0x00014f68 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00016a54 vaddr 0x00016a54 paddr 0x00016a54 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012834  000001bc  000001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a8c  000129f0  000129f0  000139f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  0001347c  00014f68  0001447c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00016a54  00016a54  00016a54  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00016bb4  00016bb4  00015f68  2**0
                  CONTENTS
  7 .sram         00000000  08200000  08200000  00015f68  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00015f68  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000d08  00000000  00000000  00015f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023677  00000000  00000000  00016c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008f94  00000000  00000000  0003a30f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b2c5  00000000  00000000  000432a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000020b4  00000000  00000000  0004e568  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000031ce  00000000  00000000  0005061c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016d3e  00000000  00000000  000537ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0006a528  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001368  00000000  00000000  0006a588  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006eb11  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0006eb14  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006eb17  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006eb18  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006eb19  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006eb1d  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006eb21  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0006eb25  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0006eb2e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0006eb37  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  0006eb40  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000030  00000000  00000000  0006eb4c  2**0
                  CONTENTS, READONLY
 30 .jdi          00003ce9  00000000  00000000  0006eb7c  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000884d3  00000000  00000000  00072865  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001bc l    d  .text	00000000 .text
000129f0 l    d  .rodata	00000000 .rodata
0001347c l    d  .rwdata	00000000 .rwdata
00016a54 l    d  .bss	00000000 .bss
00016bb4 l    d  .sdram	00000000 .sdram
08200000 l    d  .sram	00000000 .sram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_bsp//obj/HAL/src/crt0.o
00000204 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00016a54 l     O .bss	00000002 ctl_reg.3304
00016a56 l     O .bss	00000002 no_device.3305
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000131ca l     O .rodata	00000010 zeroes.4181
000131da l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000604c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00007bcc l     F .text	00000008 __fp_lock
00007bd4 l     F .text	00000008 __fp_unlock
00007be8 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0001347c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
000138c0 l     O .rwdata	00000020 lc_ctype_charset
000138a0 l     O .rwdata	00000020 lc_message_charset
000138e0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001320c l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000b048 l     F .text	000000fc __sprint_r.part.0
00013340 l     O .rodata	00000010 blanks.4125
00013330 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000d964 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00010090 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000101b0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000101dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000102dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000103d0 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000104b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00010690 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00014f58 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0001091c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010a64 l     F .text	00000038 alt_dev_reg
00013ec8 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00010d58 l     F .text	00000204 altera_avalon_jtag_uart_irq
00010f5c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001157c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00011954 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00011e00 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00011f38 l     F .text	00000050 alt_get_errno
00011f88 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000a688 g     F .text	00000074 _mprec_log10
0000a774 g     F .text	0000008c __any_on
0000c998 g     F .text	00000054 _isatty_r
00013218 g     O .rodata	00000028 __mprec_tinytens
000105d8 g     F .text	00000078 alt_main
00003d98 g     F .text	000000b8 _puts_r
00016ab4 g     O .bss	00000100 alt_irq
0000c9ec g     F .text	0000005c _lseek_r
00014f68 g       *ABS*	00000000 __flash_rwdata_start
0000ebf8 g     F .text	00000084 .hidden __eqdf2
00016bb4 g       *ABS*	00000000 __alt_heap_start
00003d5c g     F .text	0000003c printf
0000cc14 g     F .text	0000009c _wcrtomb_r
08200000 g       *ABS*	00000000 __alt_mem_sram
0000af40 g     F .text	0000005c __sseek
00007f1c g     F .text	00000010 __sinit
0000caa4 g     F .text	00000154 __swbuf_r
00008994 g     F .text	0000007c _setlocale_r
00007d88 g     F .text	00000064 __sfmoreglue
00010670 g     F .text	00000020 __malloc_unlock
000095f4 g     F .text	0000015c memmove
00007f04 g     F .text	00000018 _cleanup
00009874 g     F .text	000000a8 _Balloc
0000ec7c g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000c940 g     F .text	00000058 _fstat_r
00016a70 g     O .bss	00000004 errno
0000aebc g     F .text	00000008 __seofread
00016a78 g     O .bss	00000004 alt_argv
0001cf28 g       *ABS*	00000000 _gp
000108ec g     F .text	00000030 usleep
00013d48 g     O .rwdata	00000180 alt_fd_list
00012368 g     F .text	00000090 alt_find_dev
000094bc g     F .text	00000138 memcpy
00007bdc g     F .text	0000000c _cleanup_r
0000feb8 g     F .text	000000d0 .hidden __floatsidf
00011ec0 g     F .text	00000078 alt_io_redirect
0000ed5c g     F .text	000000e0 .hidden __ltdf2
000129f0 g       *ABS*	00000000 __DTOR_END__
00003e50 g     F .text	00000014 puts
0000ada0 g     F .text	00000074 __fpclassifyd
0000a5e4 g     F .text	000000a4 __ratio
0000c4b8 g     F .text	00000024 __vfiprintf_internal
00011158 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00003d30 g     F .text	0000002c _printf_r
0000da80 g     F .text	00000008 .hidden __udivsi3
0001032c g     F .text	000000a4 isatty
00013268 g     O .rodata	000000c8 __mprec_tens
00008a10 g     F .text	0000000c __locale_charset
000125c0 g     F .text	0000008c alt_icache_flush
00016a6c g     O .bss	00000004 __malloc_top_pad
00014f30 g     O .rwdata	00000004 __mb_cur_max
00008a40 g     F .text	0000000c _localeconv_r
00009c74 g     F .text	0000003c __i2b
00008380 g     F .text	000004a4 __sfvwrite_r
0000ae14 g     F .text	00000054 _sbrk_r
0000ca48 g     F .text	0000005c _read_r
00014f50 g     O .rwdata	00000004 alt_max_fd
0000c650 g     F .text	00000100 _fclose_r
00007b9c g     F .text	00000030 fflush
00016a68 g     O .bss	00000004 __malloc_max_sbrked_mem
0000da90 g     F .text	0000089c .hidden __adddf3
0000a38c g     F .text	0000011c __b2d
0000d3d4 g     F .text	00000590 .hidden __umoddi3
00010504 g     F .text	000000d4 lseek
00014f28 g     O .rwdata	00000004 _global_impure_ptr
0000a800 g     F .text	000005a0 _realloc_r
00016bb4 g       *ABS*	00000000 __bss_end
00011d10 g     F .text	000000f0 alt_iic_isr_register
00012244 g     F .text	00000104 alt_tick
0000ce14 g     F .text	000005c0 .hidden __udivdi3
0000c764 g     F .text	00000184 _fputwc_r
00013240 g     O .rodata	00000028 __mprec_bigtens
00009a58 g     F .text	00000104 __s2b
0000ff88 g     F .text	000000a4 .hidden __floatunsidf
0000a134 g     F .text	00000060 __mcmp
00007f3c g     F .text	00000018 __fp_lock_all
00011cc4 g     F .text	0000004c alt_ic_irq_enabled
000121ac g     F .text	00000098 alt_alarm_stop
00016a80 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000d0 alt_irq_handler
00013d20 g     O .rwdata	00000028 alt_dev_null
00011910 g     F .text	00000044 alt_dcache_flush_all
00009b5c g     F .text	00000068 __hi0bits
0000fe30 g     F .text	00000088 .hidden __fixdfsi
00014f68 g       *ABS*	00000000 __ram_rwdata_end
00014f48 g     O .rwdata	00000008 alt_dev_list
0001096c g     F .text	000000f8 write
0001347c g       *ABS*	00000000 __ram_rodata_end
0001022c g     F .text	000000b0 fstat
0000ed5c g     F .text	000000e0 .hidden __ledf2
00009eac g     F .text	00000140 __pow5mult
0000b15c g     F .text	0000135c ___vfiprintf_internal_r
00016a60 g     O .bss	00000004 __nlocale_changed
0000da88 g     F .text	00000008 .hidden __umodsi3
00016bb4 g       *ABS*	00000000 end
00010c94 g     F .text	000000c4 altera_avalon_jtag_uart_init
000129f0 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
000115f0 g     F .text	00000088 alt_avalon_timer_sc_init
0001002c g     F .text	00000064 .hidden __clzsi2
00011364 g     F .text	00000218 altera_avalon_jtag_uart_write
00007f2c g     F .text	00000004 __sfp_lock_acquire
000093d4 g     F .text	000000e8 memchr
00003efc g     F .text	00001ffc ___vfprintf_internal_r
00008090 g     F .text	000002f0 _free_r
00008a1c g     F .text	00000010 __locale_mb_cur_max
00012828 g     F .text	00000194 __call_exitprocs
00016a5c g     O .bss	00000004 __mlocale_changed
00014f34 g     O .rwdata	00000004 __malloc_sbrk_base
000001bc g     F .text	0000004c _start
00016a84 g     O .bss	00000004 _alt_tick_rate
00009fec g     F .text	00000148 __lshift
00016a88 g     O .bss	00000004 _alt_nticks
000106e0 g     F .text	000000fc read
00010ad0 g     F .text	00000060 alt_sys_init
00012714 g     F .text	00000114 __register_exitproc
00009cb0 g     F .text	000001fc __multiply
00011004 g     F .text	00000068 altera_avalon_jtag_uart_close
0001347c g       *ABS*	00000000 __ram_rwdata_start
000129f0 g       *ABS*	00000000 __ram_rodata_start
00016a8c g     O .bss	00000028 __malloc_current_mallinfo
0000a4a8 g     F .text	0000013c __d2b
00010b30 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001250c g     F .text	000000b4 alt_get_fd
000117b8 g     F .text	00000158 alt_busy_sleep
0000c538 g     F .text	00000054 _close_r
00012698 g     F .text	0000007c memcmp
00010bf0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00016bb4 g       *ABS*	00000000 __alt_stack_base
00010c40 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00005f1c g     F .text	00000130 __swsetup_r
0000e32c g     F .text	000008cc .hidden __divdf3
00007dec g     F .text	00000118 __sfp
0000a6fc g     F .text	00000078 __copybits
00013918 g     O .rwdata	00000408 __malloc_av_
00007f38 g     F .text	00000004 __sinit_lock_release
0000ee3c g     F .text	00000724 .hidden __muldf3
0000ae68 g     F .text	00000054 __sread
000123f8 g     F .text	00000114 alt_find_file
000119a4 g     F .text	000000a4 alt_dev_llist_insert
00010650 g     F .text	00000020 __malloc_lock
0001083c g     F .text	000000b0 sbrk
00007974 g     F .text	00000228 _fflush_r
0000c58c g     F .text	000000c4 _calloc_r
00016a54 g       *ABS*	00000000 __bss_start
00009750 g     F .text	00000124 memset
0000025c g     F .text	0000398c main
00016a7c g     O .bss	00000004 alt_envp
00016a64 g     O .bss	00000004 __malloc_max_total_mem
00010b90 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000cbf8 g     F .text	0000001c __swbuf
0000af9c g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0000c750 g     F .text	00000014 fclose
0000624c g     F .text	00001728 _dtoa_r
00008c2c g     F .text	000007a8 _malloc_r
0000cd88 g     F .text	00000030 __ascii_wctomb
00014f54 g     O .rwdata	00000004 alt_errno
00008824 g     F .text	000000b8 _fwalk
0000d9d0 g     F .text	00000054 .hidden __divsi3
00007f6c g     F .text	00000124 _malloc_trim_r
000129f0 g       *ABS*	00000000 __CTOR_END__
0000afa4 g     F .text	000000a4 strcmp
000129f0 g       *ABS*	00000000 __flash_rodata_start
000129f0 g       *ABS*	00000000 __DTOR_LIST__
0000ebf8 g     F .text	00000084 .hidden __nedf2
00003c34 g     F .text	00000040 UsbRead
00010a9c g     F .text	00000034 alt_irq_init
000107dc g     F .text	00000060 alt_release_fd
00000208 g     F .text	00000054 maxmin
00013350 g     O .rodata	00000100 .hidden __clz_tab
00016a58 g     O .bss	00000004 _PathLocale
0001264c g     F .text	00000014 atexit
0000c4dc g     F .text	0000005c _write_r
00008a4c g     F .text	0000001c setlocale
00014f2c g     O .rwdata	00000004 _impure_ptr
00016a74 g     O .bss	00000004 alt_argc
00011aa4 g     F .text	0000005c _do_dtors
00008a38 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
0000a32c g     F .text	00000060 __ulp
00007f54 g     F .text	00000018 __fp_unlock_all
00014f40 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00008a68 g     F .text	0000000c localeconv
00011b30 g     F .text	00000050 alt_ic_isr_register
00014f68 g       *ABS*	00000000 _edata
00016bb4 g       *ABS*	00000000 _end
00003be8 g     F .text	0000004c UsbWrite
000001bc g       *ABS*	00000000 __ram_exceptions_end
0001106c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00011c20 g     F .text	000000a4 alt_ic_irq_disable
0000aec4 g     F .text	0000007c __swrite
00014f38 g     O .rwdata	00000004 __malloc_trim_threshold
00012348 g     F .text	00000020 altera_nios2_qsys_irq_init
00008a2c g     F .text	0000000c __locale_msgcharset
00012660 g     F .text	00000038 exit
000088dc g     F .text	000000b8 _fwalk_reent
0000a194 g     F .text	00000198 __mdiff
0000da24 g     F .text	0000005c .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00007f30 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
000129bc g     F .text	00000034 _exit
00011678 g     F .text	00000140 alt_alarm_start
00008a74 g     F .text	000001b8 __smakebuf_r
00003e64 g     F .text	00000098 strlen
00012054 g     F .text	00000158 open
0000ec7c g     F .text	000000e0 .hidden __gedf2
00014f3c g     O .rwdata	00000004 __wctomb
0000b144 g     F .text	00000018 __sprint_r
00011b00 g     F .text	00000030 alt_icache_flush_all
00014f5c g     O .rwdata	00000004 alt_priority_mask
00011b80 g     F .text	000000a0 alt_ic_irq_enable
00005ef8 g     F .text	00000024 __vfprintf_internal
0000cdb8 g     F .text	0000005c _wctomb_r
0000f560 g     F .text	000008d0 .hidden __subdf3
00009bc4 g     F .text	000000b0 __lo0bits
00014f60 g     O .rwdata	00000008 alt_alarm_list
00011a48 g     F .text	0000005c _do_ctors
00003c74 g     F .text	000000bc UsbSoftReset
0000ccb0 g     F .text	000000d8 wcrtomb
000100e0 g     F .text	000000d0 close
00010434 g     F .text	00000080 alt_load
0000c8e8 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
00007f34 g     F .text	00000004 __sinit_lock_acquire
00009944 g     F .text	00000114 __multadd
0000991c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_sram+0xf7e00004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406f14 	ori	at,at,444
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001426 	beq	r2,zero,17c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00800074 	movhi	r2,1
 130:	109aad04 	addi	r2,r2,27316
 134:	e0fffd17 	ldw	r3,-12(fp)
 138:	180690fa 	slli	r3,r3,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	10c00017 	ldw	r3,0(r2)
 144:	00800074 	movhi	r2,1
 148:	109aad04 	addi	r2,r2,27316
 14c:	e13ffd17 	ldw	r4,-12(fp)
 150:	200890fa 	slli	r4,r4,3
 154:	1105883a 	add	r2,r2,r4
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	00000706 	br	198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 17c:	e0bffc17 	ldw	r2,-16(fp)
 180:	1085883a 	add	r2,r2,r2
 184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 188:	e0bffd17 	ldw	r2,-12(fp)
 18c:	10800044 	addi	r2,r2,1
 190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 194:	003fe106 	br	11c <__alt_mem_sram+0xf7e0011c>

    active = alt_irq_pending ();
 198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 19c:	e0bffb17 	ldw	r2,-20(fp)
 1a0:	103fdb1e 	bne	r2,zero,110 <__alt_mem_sram+0xf7e00110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	0001883a 	nop
}
 1a8:	e037883a 	mov	sp,fp
 1ac:	dfc00117 	ldw	ra,4(sp)
 1b0:	df000017 	ldw	fp,0(sp)
 1b4:	dec00204 	addi	sp,sp,8
 1b8:	f800283a 	ret

Disassembly of section .text:

000001bc <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1bc:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     1c0:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1c4:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     1c8:	00bffd16 	blt	zero,r2,1c0 <__alt_mem_sram+0xf7e001c0>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1cc:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     1d0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1d4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1d8:	d6b3ca14 	ori	gp,gp,53032
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1dc:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1e0:	109a9514 	ori	r2,r2,27220

    movhi r3, %hi(__bss_end)
     1e4:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1e8:	18daed14 	ori	r3,r3,27572

    beq r2, r3, 1f
     1ec:	10c00326 	beq	r2,r3,1fc <_start+0x40>

0:
    stw zero, (r2)
     1f0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1f4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1f8:	10fffd36 	bltu	r2,r3,1f0 <__alt_mem_sram+0xf7e001f0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1fc:	00104340 	call	10434 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     200:	00105d80 	call	105d8 <alt_main>

00000204 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     204:	003fff06 	br	204 <__alt_mem_sram+0xf7e00204>

00000208 <maxmin>:
*
******************************************************************************/
void UsbSoftReset();
//--------------------------------------
int maxmin(int no, int max, int min)
{
     208:	defffc04 	addi	sp,sp,-16
     20c:	df000315 	stw	fp,12(sp)
     210:	df000304 	addi	fp,sp,12
     214:	e13ffd15 	stw	r4,-12(fp)
     218:	e17ffe15 	stw	r5,-8(fp)
     21c:	e1bfff15 	stw	r6,-4(fp)
 if(no>max) {no=max;}
     220:	e0bffd17 	ldw	r2,-12(fp)
     224:	e0fffe17 	ldw	r3,-8(fp)
     228:	1880020e 	bge	r3,r2,234 <maxmin+0x2c>
     22c:	e0bffe17 	ldw	r2,-8(fp)
     230:	e0bffd15 	stw	r2,-12(fp)
 if(no<min) {no=min;}
     234:	e0fffd17 	ldw	r3,-12(fp)
     238:	e0bfff17 	ldw	r2,-4(fp)
     23c:	1880020e 	bge	r3,r2,248 <maxmin+0x40>
     240:	e0bfff17 	ldw	r2,-4(fp)
     244:	e0bffd15 	stw	r2,-12(fp)

 return(no);
     248:	e0bffd17 	ldw	r2,-12(fp)
}
     24c:	e037883a 	mov	sp,fp
     250:	df000017 	ldw	fp,0(sp)
     254:	dec00104 	addi	sp,sp,4
     258:	f800283a 	ret

0000025c <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
     25c:	defff604 	addi	sp,sp,-40
     260:	dfc00915 	stw	ra,36(sp)
     264:	df000815 	stw	fp,32(sp)
     268:	df000804 	addi	fp,sp,32
    alt_u16 intStat;
    alt_u16 usb_ctl_val;
    static alt_u16 ctl_reg = 0;
    static alt_u16 no_device = 0;
    alt_u16 fs_device = 0;
     26c:	e03ffa8d 	sth	zero,-22(fp)
    int button_value;
    alt_u16 px = 320;
     270:	00805004 	movi	r2,320
     274:	e0bff88d 	sth	r2,-30(fp)
    alt_u16 py = 240; 
     278:	00803c04 	movi	r2,240
     27c:	e0bff90d 	sth	r2,-28(fp)
    signed char  dx = 0;
     280:	e03ff985 	stb	zero,-26(fp)
    signed char  dy = 0; 
     284:	e03ff9c5 	stb	zero,-25(fp)
    alt_u8  pbutton = 0;
     288:	e03ffb05 	stb	zero,-20(fp)
    alt_u8 toggle=0;
     28c:	e03ffa05 	stb	zero,-24(fp)
    alt_u8 data_size;
    volatile unsigned int *MOUSEX_PIO = (unsigned int*)0x08001050; //make a pointer to access the PIO block
     290:	00820034 	movhi	r2,2048
     294:	10841404 	addi	r2,r2,4176
     298:	e0bffc15 	stw	r2,-16(fp)
    volatile unsigned int *MOUSEY_PIO = (unsigned int*)0x08001040;
     29c:	00820034 	movhi	r2,2048
     2a0:	10841004 	addi	r2,r2,4160
     2a4:	e0bffd15 	stw	r2,-12(fp)
    //VGA display initial
    

    //----------------------------------------SIE1 initial---------------------------------------------------//
USB_HOT_PLUG:
    UsbSoftReset();
     2a8:	0003c740 	call	3c74 <UsbSoftReset>
    UsbWrite (HPI_SIE1_MSG_ADR, 0);
     2ac:	01005104 	movi	r4,324
     2b0:	000b883a 	mov	r5,zero
     2b4:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite (HOST1_STAT_REG, 0xFFFF);
     2b8:	01302414 	movui	r4,49296
     2bc:	017fffd4 	movui	r5,65535
     2c0:	0003be80 	call	3be8 <UsbWrite>
              
    /* Set HUSB_pEOT time */
    UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
     2c4:	01006d04 	movi	r4,436
     2c8:	01409604 	movi	r5,600
     2cc:	0003be80 	call	3be8 <UsbWrite>
     
    usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
     2d0:	00811004 	movi	r2,1088
     2d4:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
     2d8:	e0bff80b 	ldhu	r2,-32(fp)
     2dc:	01005084 	movi	r4,322
     2e0:	100b883a 	mov	r5,r2
     2e4:	0003be80 	call	3be8 <UsbWrite>
    
    intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
     2e8:	00808404 	movi	r2,528
     2ec:	e0bffe0d 	sth	r2,-8(fp)
    UsbWrite(HOST1_IRQ_EN_REG, intStat); 
     2f0:	e0bffe0b 	ldhu	r2,-8(fp)
     2f4:	01302314 	movui	r4,49292
     2f8:	100b883a 	mov	r5,r2
     2fc:	0003be80 	call	3be8 <UsbWrite>

    UsbWrite(COMM_R0,0x0000);//reset time 
     300:	01007104 	movi	r4,452
     304:	000b883a 	mov	r5,zero
     308:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R1,0x0000);  //port number
     30c:	01007184 	movi	r4,454
     310:	000b883a 	mov	r5,zero
     314:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R2,0x0000);  //r1
     318:	01007204 	movi	r4,456
     31c:	000b883a 	mov	r5,zero
     320:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R3,0x0000);  //r1
     324:	01007284 	movi	r4,458
     328:	000b883a 	mov	r5,zero
     32c:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R4,0x0000);  //r1
     330:	01007304 	movi	r4,460
     334:	000b883a 	mov	r5,zero
     338:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R5,0x0000);  //r1
     33c:	01007384 	movi	r4,462
     340:	000b883a 	mov	r5,zero
     344:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R6,0x0000);  //r1
     348:	01007404 	movi	r4,464
     34c:	000b883a 	mov	r5,zero
     350:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R7,0x0000);  //r1
     354:	01007484 	movi	r4,466
     358:	000b883a 	mov	r5,zero
     35c:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R8,0x0000);  //r1
     360:	01007504 	movi	r4,468
     364:	000b883a 	mov	r5,zero
     368:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R9,0x0000);  //r1
     36c:	01007584 	movi	r4,470
     370:	000b883a 	mov	r5,zero
     374:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R10,0x0000);  //r1
     378:	01007604 	movi	r4,472
     37c:	000b883a 	mov	r5,zero
     380:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R11,0x0000);  //r1
     384:	01007684 	movi	r4,474
     388:	000b883a 	mov	r5,zero
     38c:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R12,0x0000);  //r1
     390:	01007704 	movi	r4,476
     394:	000b883a 	mov	r5,zero
     398:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R13,0x0000);  //r1    
     39c:	01007784 	movi	r4,478
     3a0:	000b883a 	mov	r5,zero
     3a4:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
     3a8:	01007084 	movi	r4,450
     3ac:	01401c84 	movi	r5,114
     3b0:	0003be80 	call	3be8 <UsbWrite>
    IOWR(CY7C67200_BASE,HPI_MAILBOX,0xCE01);
     3b4:	00f38054 	movui	r3,52737
     3b8:	00824034 	movhi	r2,2304
     3bc:	10800904 	addi	r2,r2,36
     3c0:	10c00035 	stwio	r3,0(r2)
     
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
     3c4:	0001883a 	nop
     3c8:	00824034 	movhi	r2,2304
     3cc:	10800b04 	addi	r2,r2,44
     3d0:	10800037 	ldwio	r2,0(r2)
     3d4:	10bfffcc 	andi	r2,r2,65535
     3d8:	103ffb26 	beq	r2,zero,3c8 <__alt_mem_sram+0xf7e003c8>
    {
    }
    while (IORD(CY7C67200_BASE,HPI_MAILBOX) != COMM_ACK) 
     3dc:	0001883a 	nop
     3e0:	00824034 	movhi	r2,2304
     3e4:	10800904 	addi	r2,r2,36
     3e8:	10800037 	ldwio	r2,0(r2)
     3ec:	1083fb58 	cmpnei	r2,r2,4077
     3f0:	10000826 	beq	r2,zero,414 <main+0x1b8>
    {
        printf("[ERROR]:routine mailbox data is %x\n",IORD(CY7C67200_BASE,HPI_MAILBOX));
     3f4:	00824034 	movhi	r2,2304
     3f8:	10800904 	addi	r2,r2,36
     3fc:	10800037 	ldwio	r2,0(r2)
     400:	01000074 	movhi	r4,1
     404:	210a7c04 	addi	r4,r4,10736
     408:	100b883a 	mov	r5,r2
     40c:	0003d5c0 	call	3d5c <printf>
        goto USB_HOT_PLUG;
     410:	003fa506 	br	2a8 <__alt_mem_sram+0xf7e002a8>
    }
    
  
    //usleep(30*1000);    
    UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
     414:	01007084 	movi	r4,450
     418:	01401d04 	movi	r5,116
     41c:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R0,0x003c);//reset time 
     420:	01007104 	movi	r4,452
     424:	01400f04 	movi	r5,60
     428:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R1,0x0000);  //port number
     42c:	01007184 	movi	r4,454
     430:	000b883a 	mov	r5,zero
     434:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R2,0x0000);  //r1
     438:	01007204 	movi	r4,456
     43c:	000b883a 	mov	r5,zero
     440:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R3,0x0000);  //r1
     444:	01007284 	movi	r4,458
     448:	000b883a 	mov	r5,zero
     44c:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R4,0x0000);  //r1
     450:	01007304 	movi	r4,460
     454:	000b883a 	mov	r5,zero
     458:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R5,0x0000);  //r1
     45c:	01007384 	movi	r4,462
     460:	000b883a 	mov	r5,zero
     464:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R6,0x0000);  //r1
     468:	01007404 	movi	r4,464
     46c:	000b883a 	mov	r5,zero
     470:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R7,0x0000);  //r1
     474:	01007484 	movi	r4,466
     478:	000b883a 	mov	r5,zero
     47c:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R8,0x0000);  //r1
     480:	01007504 	movi	r4,468
     484:	000b883a 	mov	r5,zero
     488:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R9,0x0000);  //r1
     48c:	01007584 	movi	r4,470
     490:	000b883a 	mov	r5,zero
     494:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R10,0x0000);  //r1
     498:	01007604 	movi	r4,472
     49c:	000b883a 	mov	r5,zero
     4a0:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R11,0x0000);  //r1
     4a4:	01007684 	movi	r4,474
     4a8:	000b883a 	mov	r5,zero
     4ac:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R12,0x0000);  //r1
     4b0:	01007704 	movi	r4,476
     4b4:	000b883a 	mov	r5,zero
     4b8:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite(COMM_R13,0x0000);  //r1    
     4bc:	01007784 	movi	r4,478
     4c0:	000b883a 	mov	r5,zero
     4c4:	0003be80 	call	3be8 <UsbWrite>

    IOWR(CY7C67200_BASE,HPI_MAILBOX,0xCE01);
     4c8:	00f38054 	movui	r3,52737
     4cc:	00824034 	movhi	r2,2304
     4d0:	10800904 	addi	r2,r2,36
     4d4:	10c00035 	stwio	r3,0(r2)
  
    while (IORD(CY7C67200_BASE,HPI_MAILBOX) != COMM_ACK) 
     4d8:	0001883a 	nop
     4dc:	00824034 	movhi	r2,2304
     4e0:	10800904 	addi	r2,r2,36
     4e4:	10800037 	ldwio	r2,0(r2)
     4e8:	1083fb58 	cmpnei	r2,r2,4077
     4ec:	10000826 	beq	r2,zero,510 <main+0x2b4>
    {
        printf("[ERROR]:routine mailbox data is %x\n",IORD(CY7C67200_BASE,HPI_MAILBOX));
     4f0:	00824034 	movhi	r2,2304
     4f4:	10800904 	addi	r2,r2,36
     4f8:	10800037 	ldwio	r2,0(r2)
     4fc:	01000074 	movhi	r4,1
     500:	210a7c04 	addi	r4,r4,10736
     504:	100b883a 	mov	r5,r2
     508:	0003d5c0 	call	3d5c <printf>
        goto USB_HOT_PLUG;
     50c:	003f6606 	br	2a8 <__alt_mem_sram+0xf7e002a8>
    }

    //usleep(30*1000);    
    ctl_reg = USB1_CTL_REG;
     510:	00b02284 	movi	r2,-16246
     514:	d0a6cb0d 	sth	r2,-25812(gp)
    no_device = (A_DP_STAT | A_DM_STAT);
     518:	008c0004 	movi	r2,12288
     51c:	d0a6cb8d 	sth	r2,-25810(gp)
    fs_device = A_DP_STAT;
     520:	00880004 	movi	r2,8192
     524:	e0bffa8d 	sth	r2,-22(fp)
    
    usb_ctl_val = UsbRead(ctl_reg);
     528:	d0a6cb0b 	ldhu	r2,-25812(gp)
     52c:	10bfffcc 	andi	r2,r2,65535
     530:	1009883a 	mov	r4,r2
     534:	0003c340 	call	3c34 <UsbRead>
     538:	e0bff80d 	sth	r2,-32(fp)
   
    if (!(usb_ctl_val & no_device))
     53c:	d0a6cb8b 	ldhu	r2,-25810(gp)
     540:	e0fff80b 	ldhu	r3,-32(fp)
     544:	1884703a 	and	r2,r3,r2
     548:	10bfffcc 	andi	r2,r2,65535
     54c:	10001a1e 	bne	r2,zero,5b8 <main+0x35c>
    {
      printf("\n[INFO]: no device is present in SIE1!\n");
     550:	01000074 	movhi	r4,1
     554:	210a8504 	addi	r4,r4,10772
     558:	0003e500 	call	3e50 <puts>
      printf("[INFO]: please insert a USB mouse in SIE1!\n");
     55c:	01000074 	movhi	r4,1
     560:	210a8f04 	addi	r4,r4,10812
     564:	0003e500 	call	3e50 <puts>
      while (!(usb_ctl_val & no_device))
     568:	00000d06 	br	5a0 <main+0x344>
      {
       
         usb_ctl_val = UsbRead(ctl_reg);
     56c:	d0a6cb0b 	ldhu	r2,-25812(gp)
     570:	10bfffcc 	andi	r2,r2,65535
     574:	1009883a 	mov	r4,r2
     578:	0003c340 	call	3c34 <UsbRead>
     57c:	e0bff80d 	sth	r2,-32(fp)
         if(usb_ctl_val & no_device)
     580:	d0a6cb8b 	ldhu	r2,-25810(gp)
     584:	e0fff80b 	ldhu	r3,-32(fp)
     588:	1884703a 	and	r2,r3,r2
     58c:	10bfffcc 	andi	r2,r2,65535
     590:	10000126 	beq	r2,zero,598 <main+0x33c>
           goto USB_HOT_PLUG;
     594:	003f4406 	br	2a8 <__alt_mem_sram+0xf7e002a8>
       
         usleep(2000);
     598:	0101f404 	movi	r4,2000
     59c:	00108ec0 	call	108ec <usleep>
   
    if (!(usb_ctl_val & no_device))
    {
      printf("\n[INFO]: no device is present in SIE1!\n");
      printf("[INFO]: please insert a USB mouse in SIE1!\n");
      while (!(usb_ctl_val & no_device))
     5a0:	d0a6cb8b 	ldhu	r2,-25810(gp)
     5a4:	e0fff80b 	ldhu	r3,-32(fp)
     5a8:	1884703a 	and	r2,r3,r2
     5ac:	10bfffcc 	andi	r2,r2,65535
     5b0:	103fee26 	beq	r2,zero,56c <__alt_mem_sram+0xf7e0056c>
     5b4:	00000c06 	br	5e8 <main+0x38c>
      }
    }
    else
    {
        /* check for low speed or full speed by reading D+ and D- lines */    
        if (usb_ctl_val & fs_device)
     5b8:	e0fff80b 	ldhu	r3,-32(fp)
     5bc:	e0bffa8b 	ldhu	r2,-22(fp)
     5c0:	1884703a 	and	r2,r3,r2
     5c4:	10bfffcc 	andi	r2,r2,65535
     5c8:	10000426 	beq	r2,zero,5dc <main+0x380>
        {
            printf("[INFO]: full speed device\n");
     5cc:	01000074 	movhi	r4,1
     5d0:	210a9a04 	addi	r4,r4,10856
     5d4:	0003e500 	call	3e50 <puts>
     5d8:	00000306 	br	5e8 <main+0x38c>
            
        }
        else
        {
            printf("[INFO]: low speed device\n");            
     5dc:	01000074 	movhi	r4,1
     5e0:	210aa104 	addi	r4,r4,10884
     5e4:	0003e500 	call	3e50 <puts>

    //printf("[SIE1 INIT]:USB 1 Control Register reg is %x\n",UsbRead(0xC08A));
    
    //------------------------------------------------------set address -----------------------------------------------------------------
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
     5e8:	00c14004 	movi	r3,1280
     5ec:	00824034 	movhi	r2,2304
     5f0:	10800a04 	addi	r2,r2,40
     5f4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
     5f8:	00c14304 	movi	r3,1292
     5fc:	00824034 	movhi	r2,2304
     600:	10800804 	addi	r2,r2,32
     604:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
     608:	00c00204 	movi	r3,8
     60c:	00824034 	movhi	r2,2304
     610:	10800804 	addi	r2,r2,32
     614:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x00D0);
     618:	00c03404 	movi	r3,208
     61c:	00824034 	movhi	r2,2304
     620:	10800804 	addi	r2,r2,32
     624:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
     628:	00c00044 	movi	r3,1
     62c:	00824034 	movhi	r2,2304
     630:	10800804 	addi	r2,r2,32
     634:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     638:	00c004c4 	movi	r3,19
     63c:	00824034 	movhi	r2,2304
     640:	10800804 	addi	r2,r2,32
     644:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
     648:	00c14504 	movi	r3,1300
     64c:	00824034 	movhi	r2,2304
     650:	10800804 	addi	r2,r2,32
     654:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0500);
     658:	00c14004 	movi	r3,1280
     65c:	00824034 	movhi	r2,2304
     660:	10800804 	addi	r2,r2,32
     664:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//device address   
     668:	00c00084 	movi	r3,2
     66c:	00824034 	movhi	r2,2304
     670:	10800804 	addi	r2,r2,32
     674:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     678:	0007883a 	mov	r3,zero
     67c:	00824034 	movhi	r2,2304
     680:	10800804 	addi	r2,r2,32
     684:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     688:	0007883a 	mov	r3,zero
     68c:	00824034 	movhi	r2,2304
     690:	10800804 	addi	r2,r2,32
     694:	10c00035 	stwio	r3,0(r2)
    
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
     698:	0007883a 	mov	r3,zero
     69c:	00824034 	movhi	r2,2304
     6a0:	10800804 	addi	r2,r2,32
     6a4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
     6a8:	0007883a 	mov	r3,zero
     6ac:	00824034 	movhi	r2,2304
     6b0:	10800804 	addi	r2,r2,32
     6b4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0090);//device address
     6b8:	00c02404 	movi	r3,144
     6bc:	00824034 	movhi	r2,2304
     6c0:	10800804 	addi	r2,r2,32
     6c4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
     6c8:	00c01044 	movi	r3,65
     6cc:	00824034 	movhi	r2,2304
     6d0:	10800804 	addi	r2,r2,32
     6d4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     6d8:	00c004c4 	movi	r3,19
     6dc:	00824034 	movhi	r2,2304
     6e0:	10800804 	addi	r2,r2,32
     6e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     6e8:	0007883a 	mov	r3,zero
     6ec:	00824034 	movhi	r2,2304
     6f0:	10800804 	addi	r2,r2,32
     6f4:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     6f8:	01006c04 	movi	r4,432
     6fc:	01414004 	movi	r5,1280
     700:	0003be80 	call	3be8 <UsbWrite>
    
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     704:	00004906 	br	82c <main+0x5d0>
    {
        //the starting address
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
     708:	00c14004 	movi	r3,1280
     70c:	00824034 	movhi	r2,2304
     710:	10800a04 	addi	r2,r2,40
     714:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
     718:	00c14304 	movi	r3,1292
     71c:	00824034 	movhi	r2,2304
     720:	10800804 	addi	r2,r2,32
     724:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
     728:	00c00204 	movi	r3,8
     72c:	00824034 	movhi	r2,2304
     730:	10800804 	addi	r2,r2,32
     734:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x00D0);
     738:	00c03404 	movi	r3,208
     73c:	00824034 	movhi	r2,2304
     740:	10800804 	addi	r2,r2,32
     744:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
     748:	00c00044 	movi	r3,1
     74c:	00824034 	movhi	r2,2304
     750:	10800804 	addi	r2,r2,32
     754:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     758:	00c004c4 	movi	r3,19
     75c:	00824034 	movhi	r2,2304
     760:	10800804 	addi	r2,r2,32
     764:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0514); 
     768:	00c14504 	movi	r3,1300
     76c:	00824034 	movhi	r2,2304
     770:	10800804 	addi	r2,r2,32
     774:	10c00035 	stwio	r3,0(r2)
    
           //td content 4 bytes
           IOWR(CY7C67200_BASE,HPI_DATA,0x0500);
     778:	00c14004 	movi	r3,1280
     77c:	00824034 	movhi	r2,2304
     780:	10800804 	addi	r2,r2,32
     784:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//device address   
     788:	00c00084 	movi	r3,2
     78c:	00824034 	movhi	r2,2304
     790:	10800804 	addi	r2,r2,32
     794:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     798:	0007883a 	mov	r3,zero
     79c:	00824034 	movhi	r2,2304
     7a0:	10800804 	addi	r2,r2,32
     7a4:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     7a8:	0007883a 	mov	r3,zero
     7ac:	00824034 	movhi	r2,2304
     7b0:	10800804 	addi	r2,r2,32
     7b4:	10c00035 	stwio	r3,0(r2)
           //IN 
           IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
     7b8:	0007883a 	mov	r3,zero
     7bc:	00824034 	movhi	r2,2304
     7c0:	10800804 	addi	r2,r2,32
     7c4:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
     7c8:	0007883a 	mov	r3,zero
     7cc:	00824034 	movhi	r2,2304
     7d0:	10800804 	addi	r2,r2,32
     7d4:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0090);//device address
     7d8:	00c02404 	movi	r3,144
     7dc:	00824034 	movhi	r2,2304
     7e0:	10800804 	addi	r2,r2,32
     7e4:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
     7e8:	00c01044 	movi	r3,65
     7ec:	00824034 	movhi	r2,2304
     7f0:	10800804 	addi	r2,r2,32
     7f4:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     7f8:	00c004c4 	movi	r3,19
     7fc:	00824034 	movhi	r2,2304
     800:	10800804 	addi	r2,r2,32
     804:	10c00035 	stwio	r3,0(r2)
           IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     808:	0007883a 	mov	r3,zero
     80c:	00824034 	movhi	r2,2304
     810:	10800804 	addi	r2,r2,32
     814:	10c00035 	stwio	r3,0(r2)
        
           UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr 
     818:	01006c04 	movi	r4,432
     81c:	01414004 	movi	r5,1280
     820:	0003be80 	call	3be8 <UsbWrite>
           usleep(10*1000);
     824:	0109c404 	movi	r4,10000
     828:	00108ec0 	call	108ec <usleep>
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     82c:	00824034 	movhi	r2,2304
     830:	10800b04 	addi	r2,r2,44
     834:	10800037 	ldwio	r2,0(r2)
     838:	1080040c 	andi	r2,r2,16
     83c:	103fb226 	beq	r2,zero,708 <__alt_mem_sram+0xf7e00708>
           UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr 
           usleep(10*1000);
    }
    
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
     840:	01005104 	movi	r4,324
     844:	0003c340 	call	3c34 <UsbRead>
     848:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
     84c:	01005104 	movi	r4,324
     850:	000b883a 	mov	r5,zero
     854:	0003be80 	call	3be8 <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
     858:	00000d06 	br	890 <main+0x634>
    {
       if(usb_ctl_val == 0x000)
     85c:	e0bff80b 	ldhu	r2,-32(fp)
     860:	10000526 	beq	r2,zero,878 <main+0x61c>
       {
       }
       else
       {
        printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
     864:	e0bff80b 	ldhu	r2,-32(fp)
     868:	01000074 	movhi	r4,1
     86c:	210aa804 	addi	r4,r4,10912
     870:	100b883a 	mov	r5,r2
     874:	0003d5c0 	call	3d5c <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
     878:	01005104 	movi	r4,324
     87c:	0003c340 	call	3c34 <UsbRead>
     880:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
     884:	01005104 	movi	r4,324
     888:	000b883a 	mov	r5,zero
     88c:	0003be80 	call	3be8 <UsbWrite>
    }
    
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
     890:	e0bff80b 	ldhu	r2,-32(fp)
     894:	10840018 	cmpnei	r2,r2,4096
     898:	103ff01e 	bne	r2,zero,85c <__alt_mem_sram+0xf7e0085c>
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
       //goto USB_HOT_PLUG;
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
     89c:	00c14184 	movi	r3,1286
     8a0:	00824034 	movhi	r2,2304
     8a4:	10800a04 	addi	r2,r2,40
     8a8:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
     8ac:	00824034 	movhi	r2,2304
     8b0:	10800804 	addi	r2,r2,32
     8b4:	10800037 	ldwio	r2,0(r2)
     8b8:	01000074 	movhi	r4,1
     8bc:	210ab004 	addi	r4,r4,10944
     8c0:	100b883a 	mov	r5,r2
     8c4:	0003d5c0 	call	3d5c <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
     8c8:	00c14204 	movi	r3,1288
     8cc:	00824034 	movhi	r2,2304
     8d0:	10800a04 	addi	r2,r2,40
     8d4:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
     8d8:	00824034 	movhi	r2,2304
     8dc:	10800804 	addi	r2,r2,32
     8e0:	10800037 	ldwio	r2,0(r2)
     8e4:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
     8e8:	e0bff80b 	ldhu	r2,-32(fp)
     8ec:	01000074 	movhi	r4,1
     8f0:	210abb04 	addi	r4,r4,10988
     8f4:	100b883a 	mov	r5,r2
     8f8:	0003d5c0 	call	3d5c <printf>
    while (usb_ctl_val != 0x03) 
     8fc:	e0bff80b 	ldhu	r2,-32(fp)
     900:	108000e0 	cmpeqi	r2,r2,3
     904:	10001a1e 	bne	r2,zero,970 <main+0x714>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
     908:	00824034 	movhi	r2,2304
     90c:	10800b04 	addi	r2,r2,44
     910:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
     914:	01005104 	movi	r4,324
     918:	0003c340 	call	3c34 <UsbRead>
     91c:	10bfffcc 	andi	r2,r2,65535
     920:	10840018 	cmpnei	r2,r2,4096
     924:	1000091e 	bne	r2,zero,94c <main+0x6f0>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
     928:	01005104 	movi	r4,324
     92c:	000b883a 	mov	r5,zero
     930:	0003be80 	call	3be8 <UsbWrite>
           
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     934:	0001883a 	nop
     938:	00824034 	movhi	r2,2304
     93c:	10800b04 	addi	r2,r2,44
     940:	10800037 	ldwio	r2,0(r2)
     944:	1080040c 	andi	r2,r2,16
     948:	103ffb26 	beq	r2,zero,938 <__alt_mem_sram+0xf7e00938>
           {
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
     94c:	00c14204 	movi	r3,1288
     950:	00824034 	movhi	r2,2304
     954:	10800a04 	addi	r2,r2,40
     958:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
     95c:	00824034 	movhi	r2,2304
     960:	10800804 	addi	r2,r2,32
     964:	10800037 	ldwio	r2,0(r2)
     968:	e0bff80d 	sth	r2,-32(fp)
           
           goto USB_HOT_PLUG;
     96c:	003e4e06 	br	2a8 <__alt_mem_sram+0xf7e002a8>
    }    
       
    printf("------------[ENUM PROCESS]:set address pass!---------------\n");
     970:	01000074 	movhi	r4,1
     974:	210ac704 	addi	r4,r4,11036
     978:	0003e500 	call	3e50 <puts>
    
    
    //-------------------------------get device descriptor-1 -----------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
     97c:	00c14004 	movi	r3,1280
     980:	00824034 	movhi	r2,2304
     984:	10800a04 	addi	r2,r2,40
     988:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
     98c:	00c14304 	movi	r3,1292
     990:	00824034 	movhi	r2,2304
     994:	10800804 	addi	r2,r2,32
     998:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
     99c:	00c00204 	movi	r3,8
     9a0:	00824034 	movhi	r2,2304
     9a4:	10800804 	addi	r2,r2,32
     9a8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
     9ac:	00c0b404 	movi	r3,720
     9b0:	00824034 	movhi	r2,2304
     9b4:	10800804 	addi	r2,r2,32
     9b8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
     9bc:	00c00044 	movi	r3,1
     9c0:	00824034 	movhi	r2,2304
     9c4:	10800804 	addi	r2,r2,32
     9c8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     9cc:	00c004c4 	movi	r3,19
     9d0:	00824034 	movhi	r2,2304
     9d4:	10800804 	addi	r2,r2,32
     9d8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
     9dc:	00c14504 	movi	r3,1300
     9e0:	00824034 	movhi	r2,2304
     9e4:	10800804 	addi	r2,r2,32
     9e8:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
     9ec:	00c1a004 	movi	r3,1664
     9f0:	00824034 	movhi	r2,2304
     9f4:	10800804 	addi	r2,r2,32
     9f8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0100);
     9fc:	00c04004 	movi	r3,256
     a00:	00824034 	movhi	r2,2304
     a04:	10800804 	addi	r2,r2,32
     a08:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     a0c:	0007883a 	mov	r3,zero
     a10:	00824034 	movhi	r2,2304
     a14:	10800804 	addi	r2,r2,32
     a18:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);
     a1c:	00c00204 	movi	r3,8
     a20:	00824034 	movhi	r2,2304
     a24:	10800804 	addi	r2,r2,32
     a28:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN
    IOWR(CY7C67200_BASE,HPI_DATA,0x052C); //
     a2c:	00c14b04 	movi	r3,1324
     a30:	00824034 	movhi	r2,2304
     a34:	10800804 	addi	r2,r2,32
     a38:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//
     a3c:	00c00204 	movi	r3,8
     a40:	00824034 	movhi	r2,2304
     a44:	10800804 	addi	r2,r2,32
     a48:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//
     a4c:	00c0a404 	movi	r3,656
     a50:	00824034 	movhi	r2,2304
     a54:	10800804 	addi	r2,r2,32
     a58:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
     a5c:	00c01044 	movi	r3,65
     a60:	00824034 	movhi	r2,2304
     a64:	10800804 	addi	r2,r2,32
     a68:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     a6c:	00c004c4 	movi	r3,19
     a70:	00824034 	movhi	r2,2304
     a74:	10800804 	addi	r2,r2,32
     a78:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);
     a7c:	00c14804 	movi	r3,1312
     a80:	00824034 	movhi	r2,2304
     a84:	10800804 	addi	r2,r2,32
     a88:	10c00035 	stwio	r3,0(r2)
    
//    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
     a8c:	0007883a 	mov	r3,zero
     a90:	00824034 	movhi	r2,2304
     a94:	10800804 	addi	r2,r2,32
     a98:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
     a9c:	0007883a 	mov	r3,zero
     aa0:	00824034 	movhi	r2,2304
     aa4:	10800804 	addi	r2,r2,32
     aa8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//device address
     aac:	00c08404 	movi	r3,528
     ab0:	00824034 	movhi	r2,2304
     ab4:	10800804 	addi	r2,r2,32
     ab8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
     abc:	00c01044 	movi	r3,65
     ac0:	00824034 	movhi	r2,2304
     ac4:	10800804 	addi	r2,r2,32
     ac8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     acc:	00c004c4 	movi	r3,19
     ad0:	00824034 	movhi	r2,2304
     ad4:	10800804 	addi	r2,r2,32
     ad8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     adc:	0007883a 	mov	r3,zero
     ae0:	00824034 	movhi	r2,2304
     ae4:	10800804 	addi	r2,r2,32
     ae8:	10c00035 	stwio	r3,0(r2)
    
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     aec:	01006c04 	movi	r4,432
     af0:	01414004 	movi	r5,1280
     af4:	0003be80 	call	3be8 <UsbWrite>
    
   //usleep(10*1000);
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     af8:	00006106 	br	c80 <main+0xa24>
    {
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
     afc:	00c14004 	movi	r3,1280
     b00:	00824034 	movhi	r2,2304
     b04:	10800a04 	addi	r2,r2,40
     b08:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
     b0c:	00c14304 	movi	r3,1292
     b10:	00824034 	movhi	r2,2304
     b14:	10800804 	addi	r2,r2,32
     b18:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
     b1c:	00c00204 	movi	r3,8
     b20:	00824034 	movhi	r2,2304
     b24:	10800804 	addi	r2,r2,32
     b28:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
     b2c:	00c0b404 	movi	r3,720
     b30:	00824034 	movhi	r2,2304
     b34:	10800804 	addi	r2,r2,32
     b38:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
     b3c:	00c00044 	movi	r3,1
     b40:	00824034 	movhi	r2,2304
     b44:	10800804 	addi	r2,r2,32
     b48:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     b4c:	00c004c4 	movi	r3,19
     b50:	00824034 	movhi	r2,2304
     b54:	10800804 	addi	r2,r2,32
     b58:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
     b5c:	00c14504 	movi	r3,1300
     b60:	00824034 	movhi	r2,2304
     b64:	10800804 	addi	r2,r2,32
     b68:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);
     b6c:	00c1a004 	movi	r3,1664
     b70:	00824034 	movhi	r2,2304
     b74:	10800804 	addi	r2,r2,32
     b78:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0100);
     b7c:	00c04004 	movi	r3,256
     b80:	00824034 	movhi	r2,2304
     b84:	10800804 	addi	r2,r2,32
     b88:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     b8c:	0007883a 	mov	r3,zero
     b90:	00824034 	movhi	r2,2304
     b94:	10800804 	addi	r2,r2,32
     b98:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);
     b9c:	00c00204 	movi	r3,8
     ba0:	00824034 	movhi	r2,2304
     ba4:	10800804 	addi	r2,r2,32
     ba8:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN
    IOWR(CY7C67200_BASE,HPI_DATA,0x052C); //
     bac:	00c14b04 	movi	r3,1324
     bb0:	00824034 	movhi	r2,2304
     bb4:	10800804 	addi	r2,r2,32
     bb8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//
     bbc:	00c00204 	movi	r3,8
     bc0:	00824034 	movhi	r2,2304
     bc4:	10800804 	addi	r2,r2,32
     bc8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//
     bcc:	00c0a404 	movi	r3,656
     bd0:	00824034 	movhi	r2,2304
     bd4:	10800804 	addi	r2,r2,32
     bd8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
     bdc:	00c01044 	movi	r3,65
     be0:	00824034 	movhi	r2,2304
     be4:	10800804 	addi	r2,r2,32
     be8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     bec:	00c004c4 	movi	r3,19
     bf0:	00824034 	movhi	r2,2304
     bf4:	10800804 	addi	r2,r2,32
     bf8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);
     bfc:	00c14804 	movi	r3,1312
     c00:	00824034 	movhi	r2,2304
     c04:	10800804 	addi	r2,r2,32
     c08:	10c00035 	stwio	r3,0(r2)
    
//    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
     c0c:	0007883a 	mov	r3,zero
     c10:	00824034 	movhi	r2,2304
     c14:	10800804 	addi	r2,r2,32
     c18:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
     c1c:	0007883a 	mov	r3,zero
     c20:	00824034 	movhi	r2,2304
     c24:	10800804 	addi	r2,r2,32
     c28:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//device address
     c2c:	00c08404 	movi	r3,528
     c30:	00824034 	movhi	r2,2304
     c34:	10800804 	addi	r2,r2,32
     c38:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
     c3c:	00c01044 	movi	r3,65
     c40:	00824034 	movhi	r2,2304
     c44:	10800804 	addi	r2,r2,32
     c48:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     c4c:	00c004c4 	movi	r3,19
     c50:	00824034 	movhi	r2,2304
     c54:	10800804 	addi	r2,r2,32
     c58:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     c5c:	0007883a 	mov	r3,zero
     c60:	00824034 	movhi	r2,2304
     c64:	10800804 	addi	r2,r2,32
     c68:	10c00035 	stwio	r3,0(r2)
    
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
     c6c:	01006c04 	movi	r4,432
     c70:	01414004 	movi	r5,1280
     c74:	0003be80 	call	3be8 <UsbWrite>
    usleep(10*1000);
     c78:	0109c404 	movi	r4,10000
     c7c:	00108ec0 	call	108ec <usleep>
    
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    
   //usleep(10*1000);
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     c80:	00824034 	movhi	r2,2304
     c84:	10800b04 	addi	r2,r2,44
     c88:	10800037 	ldwio	r2,0(r2)
     c8c:	1080040c 	andi	r2,r2,16
     c90:	103f9a26 	beq	r2,zero,afc <__alt_mem_sram+0xf7e00afc>
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    usleep(10*1000);
    }
    
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
     c94:	01005104 	movi	r4,324
     c98:	0003c340 	call	3c34 <UsbRead>
     c9c:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
     ca0:	01005104 	movi	r4,324
     ca4:	000b883a 	mov	r5,zero
     ca8:	0003be80 	call	3be8 <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
     cac:	00000d06 	br	ce4 <main+0xa88>
    {
       if(usb_ctl_val == 0x000)
     cb0:	e0bff80b 	ldhu	r2,-32(fp)
     cb4:	10000526 	beq	r2,zero,ccc <main+0xa70>
       {
       }
       else
       {
        printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
     cb8:	e0bff80b 	ldhu	r2,-32(fp)
     cbc:	01000074 	movhi	r4,1
     cc0:	210aa804 	addi	r4,r4,10912
     cc4:	100b883a 	mov	r5,r2
     cc8:	0003d5c0 	call	3d5c <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
     ccc:	01005104 	movi	r4,324
     cd0:	0003c340 	call	3c34 <UsbRead>
     cd4:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
     cd8:	01005104 	movi	r4,324
     cdc:	000b883a 	mov	r5,zero
     ce0:	0003be80 	call	3be8 <UsbWrite>
    }
    
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
     ce4:	e0bff80b 	ldhu	r2,-32(fp)
     ce8:	10840018 	cmpnei	r2,r2,4096
     cec:	103ff01e 	bne	r2,zero,cb0 <__alt_mem_sram+0xf7e00cb0>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
     cf0:	00c14184 	movi	r3,1286
     cf4:	00824034 	movhi	r2,2304
     cf8:	10800a04 	addi	r2,r2,40
     cfc:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
     d00:	00824034 	movhi	r2,2304
     d04:	10800804 	addi	r2,r2,32
     d08:	10800037 	ldwio	r2,0(r2)
     d0c:	01000074 	movhi	r4,1
     d10:	210ad604 	addi	r4,r4,11096
     d14:	100b883a 	mov	r5,r2
     d18:	0003d5c0 	call	3d5c <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
     d1c:	00c14204 	movi	r3,1288
     d20:	00824034 	movhi	r2,2304
     d24:	10800a04 	addi	r2,r2,40
     d28:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
     d2c:	00824034 	movhi	r2,2304
     d30:	10800804 	addi	r2,r2,32
     d34:	10800037 	ldwio	r2,0(r2)
     d38:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
     d3c:	e0bff80b 	ldhu	r2,-32(fp)
     d40:	01000074 	movhi	r4,1
     d44:	210ae104 	addi	r4,r4,11140
     d48:	100b883a 	mov	r5,r2
     d4c:	0003d5c0 	call	3d5c <printf>
    while (usb_ctl_val != 0x03) 
     d50:	00001906 	br	db8 <main+0xb5c>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
     d54:	00824034 	movhi	r2,2304
     d58:	10800b04 	addi	r2,r2,44
     d5c:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
     d60:	01005104 	movi	r4,324
     d64:	0003c340 	call	3c34 <UsbRead>
     d68:	10bfffcc 	andi	r2,r2,65535
     d6c:	10840018 	cmpnei	r2,r2,4096
     d70:	1000091e 	bne	r2,zero,d98 <main+0xb3c>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
     d74:	01005104 	movi	r4,324
     d78:	000b883a 	mov	r5,zero
     d7c:	0003be80 	call	3be8 <UsbWrite>
           
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
     d80:	0001883a 	nop
     d84:	00824034 	movhi	r2,2304
     d88:	10800b04 	addi	r2,r2,44
     d8c:	10800037 	ldwio	r2,0(r2)
     d90:	1080040c 	andi	r2,r2,16
     d94:	103ffb26 	beq	r2,zero,d84 <__alt_mem_sram+0xf7e00d84>
           {
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
     d98:	00c14204 	movi	r3,1288
     d9c:	00824034 	movhi	r2,2304
     da0:	10800a04 	addi	r2,r2,40
     da4:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
     da8:	00824034 	movhi	r2,2304
     dac:	10800804 	addi	r2,r2,32
     db0:	10800037 	ldwio	r2,0(r2)
     db4:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
     db8:	e0bff80b 	ldhu	r2,-32(fp)
     dbc:	108000d8 	cmpnei	r2,r2,3
     dc0:	103fe41e 	bne	r2,zero,d54 <__alt_mem_sram+0xf7e00d54>
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
       
    printf("---------------[ENUM PROCESS]:get device descriptor-1 pass!-----------------\n");
     dc4:	01000074 	movhi	r4,1
     dc8:	210aed04 	addi	r4,r4,11188
     dcc:	0003e500 	call	3e50 <puts>
    
    
    //--------------------------------get device descriptor-1---------------------------------------------//
    //get device descriptor
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
     dd0:	00c14004 	movi	r3,1280
     dd4:	00824034 	movhi	r2,2304
     dd8:	10800a04 	addi	r2,r2,40
     ddc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
     de0:	00c14304 	movi	r3,1292
     de4:	00824034 	movhi	r2,2304
     de8:	10800804 	addi	r2,r2,32
     dec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
     df0:	00c00204 	movi	r3,8
     df4:	00824034 	movhi	r2,2304
     df8:	10800804 	addi	r2,r2,32
     dfc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
     e00:	00c0b404 	movi	r3,720
     e04:	00824034 	movhi	r2,2304
     e08:	10800804 	addi	r2,r2,32
     e0c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
     e10:	00c00044 	movi	r3,1
     e14:	00824034 	movhi	r2,2304
     e18:	10800804 	addi	r2,r2,32
     e1c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
     e20:	00c004c4 	movi	r3,19
     e24:	00824034 	movhi	r2,2304
     e28:	10800804 	addi	r2,r2,32
     e2c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
     e30:	00c14504 	movi	r3,1300
     e34:	00824034 	movhi	r2,2304
     e38:	10800804 	addi	r2,r2,32
     e3c:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
     e40:	00c1a004 	movi	r3,1664
     e44:	00824034 	movhi	r2,2304
     e48:	10800804 	addi	r2,r2,32
     e4c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0100);//e
     e50:	00c04004 	movi	r3,256
     e54:	00824034 	movhi	r2,2304
     e58:	10800804 	addi	r2,r2,32
     e5c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
     e60:	0007883a 	mov	r3,zero
     e64:	00824034 	movhi	r2,2304
     e68:	10800804 	addi	r2,r2,32
     e6c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0012);//2
     e70:	00c00484 	movi	r3,18
     e74:	00824034 	movhi	r2,2304
     e78:	10800804 	addi	r2,r2,32
     e7c:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
     e80:	00c15104 	movi	r3,1348
     e84:	00824034 	movhi	r2,2304
     e88:	10800804 	addi	r2,r2,32
     e8c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
     e90:	00c00204 	movi	r3,8
     e94:	00824034 	movhi	r2,2304
     e98:	10800804 	addi	r2,r2,32
     e9c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
     ea0:	00c0a404 	movi	r3,656
     ea4:	00824034 	movhi	r2,2304
     ea8:	10800804 	addi	r2,r2,32
     eac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
     eb0:	00c01044 	movi	r3,65
     eb4:	00824034 	movhi	r2,2304
     eb8:	10800804 	addi	r2,r2,32
     ebc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
     ec0:	00c004c4 	movi	r3,19
     ec4:	00824034 	movhi	r2,2304
     ec8:	10800804 	addi	r2,r2,32
     ecc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
     ed0:	00c14804 	movi	r3,1312
     ed4:	00824034 	movhi	r2,2304
     ed8:	10800804 	addi	r2,r2,32
     edc:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x054c); //520
     ee0:	00c15304 	movi	r3,1356
     ee4:	00824034 	movhi	r2,2304
     ee8:	10800804 	addi	r2,r2,32
     eec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
     ef0:	00c00204 	movi	r3,8
     ef4:	00824034 	movhi	r2,2304
     ef8:	10800804 	addi	r2,r2,32
     efc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
     f00:	00c0a404 	movi	r3,656
     f04:	00824034 	movhi	r2,2304
     f08:	10800804 	addi	r2,r2,32
     f0c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
     f10:	00c00044 	movi	r3,1
     f14:	00824034 	movhi	r2,2304
     f18:	10800804 	addi	r2,r2,32
     f1c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
     f20:	00c004c4 	movi	r3,19
     f24:	00824034 	movhi	r2,2304
     f28:	10800804 	addi	r2,r2,32
     f2c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
     f30:	00c14b04 	movi	r3,1324
     f34:	00824034 	movhi	r2,2304
     f38:	10800804 	addi	r2,r2,32
     f3c:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-3
    IOWR(CY7C67200_BASE,HPI_DATA,0x0554); //c
     f40:	00c15504 	movi	r3,1364
     f44:	00824034 	movhi	r2,2304
     f48:	10800804 	addi	r2,r2,32
     f4c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//e
     f50:	00c00084 	movi	r3,2
     f54:	00824034 	movhi	r2,2304
     f58:	10800804 	addi	r2,r2,32
     f5c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
     f60:	00c0a404 	movi	r3,656
     f64:	00824034 	movhi	r2,2304
     f68:	10800804 	addi	r2,r2,32
     f6c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
     f70:	00c01044 	movi	r3,65
     f74:	00824034 	movhi	r2,2304
     f78:	10800804 	addi	r2,r2,32
     f7c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
     f80:	00c004c4 	movi	r3,19
     f84:	00824034 	movhi	r2,2304
     f88:	10800804 	addi	r2,r2,32
     f8c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
     f90:	00c14e04 	movi	r3,1336
     f94:	00824034 	movhi	r2,2304
     f98:	10800804 	addi	r2,r2,32
     f9c:	10c00035 	stwio	r3,0(r2)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //538
     fa0:	0007883a 	mov	r3,zero
     fa4:	00824034 	movhi	r2,2304
     fa8:	10800804 	addi	r2,r2,32
     fac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
     fb0:	0007883a 	mov	r3,zero
     fb4:	00824034 	movhi	r2,2304
     fb8:	10800804 	addi	r2,r2,32
     fbc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//c
     fc0:	00c08404 	movi	r3,528
     fc4:	00824034 	movhi	r2,2304
     fc8:	10800804 	addi	r2,r2,32
     fcc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//e
     fd0:	00c01044 	movi	r3,65
     fd4:	00824034 	movhi	r2,2304
     fd8:	10800804 	addi	r2,r2,32
     fdc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
     fe0:	00c004c4 	movi	r3,19
     fe4:	00824034 	movhi	r2,2304
     fe8:	10800804 	addi	r2,r2,32
     fec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//2
     ff0:	0007883a 	mov	r3,zero
     ff4:	00824034 	movhi	r2,2304
     ff8:	10800804 	addi	r2,r2,32
     ffc:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1000:	01006c04 	movi	r4,432
    1004:	01414004 	movi	r5,1280
    1008:	0003be80 	call	3be8 <UsbWrite>
    
    //usleep(100*1000);
    //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    100c:	00009106 	br	1254 <main+0xff8>
    {
        //resend the get device descriptor
        //get device descriptor

    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    1010:	00c14004 	movi	r3,1280
    1014:	00824034 	movhi	r2,2304
    1018:	10800a04 	addi	r2,r2,40
    101c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    1020:	00c14304 	movi	r3,1292
    1024:	00824034 	movhi	r2,2304
    1028:	10800804 	addi	r2,r2,32
    102c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    1030:	00c00204 	movi	r3,8
    1034:	00824034 	movhi	r2,2304
    1038:	10800804 	addi	r2,r2,32
    103c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    1040:	00c0b404 	movi	r3,720
    1044:	00824034 	movhi	r2,2304
    1048:	10800804 	addi	r2,r2,32
    104c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    1050:	00c00044 	movi	r3,1
    1054:	00824034 	movhi	r2,2304
    1058:	10800804 	addi	r2,r2,32
    105c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    1060:	00c004c4 	movi	r3,19
    1064:	00824034 	movhi	r2,2304
    1068:	10800804 	addi	r2,r2,32
    106c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    1070:	00c14504 	movi	r3,1300
    1074:	00824034 	movhi	r2,2304
    1078:	10800804 	addi	r2,r2,32
    107c:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
    1080:	00c1a004 	movi	r3,1664
    1084:	00824034 	movhi	r2,2304
    1088:	10800804 	addi	r2,r2,32
    108c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0100);//e
    1090:	00c04004 	movi	r3,256
    1094:	00824034 	movhi	r2,2304
    1098:	10800804 	addi	r2,r2,32
    109c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    10a0:	0007883a 	mov	r3,zero
    10a4:	00824034 	movhi	r2,2304
    10a8:	10800804 	addi	r2,r2,32
    10ac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0012);//2
    10b0:	00c00484 	movi	r3,18
    10b4:	00824034 	movhi	r2,2304
    10b8:	10800804 	addi	r2,r2,32
    10bc:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
    10c0:	00c15104 	movi	r3,1348
    10c4:	00824034 	movhi	r2,2304
    10c8:	10800804 	addi	r2,r2,32
    10cc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    10d0:	00c00204 	movi	r3,8
    10d4:	00824034 	movhi	r2,2304
    10d8:	10800804 	addi	r2,r2,32
    10dc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    10e0:	00c0a404 	movi	r3,656
    10e4:	00824034 	movhi	r2,2304
    10e8:	10800804 	addi	r2,r2,32
    10ec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    10f0:	00c01044 	movi	r3,65
    10f4:	00824034 	movhi	r2,2304
    10f8:	10800804 	addi	r2,r2,32
    10fc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    1100:	00c004c4 	movi	r3,19
    1104:	00824034 	movhi	r2,2304
    1108:	10800804 	addi	r2,r2,32
    110c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    1110:	00c14804 	movi	r3,1312
    1114:	00824034 	movhi	r2,2304
    1118:	10800804 	addi	r2,r2,32
    111c:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x054c); //520
    1120:	00c15304 	movi	r3,1356
    1124:	00824034 	movhi	r2,2304
    1128:	10800804 	addi	r2,r2,32
    112c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    1130:	00c00204 	movi	r3,8
    1134:	00824034 	movhi	r2,2304
    1138:	10800804 	addi	r2,r2,32
    113c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    1140:	00c0a404 	movi	r3,656
    1144:	00824034 	movhi	r2,2304
    1148:	10800804 	addi	r2,r2,32
    114c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6
    1150:	00c00044 	movi	r3,1
    1154:	00824034 	movhi	r2,2304
    1158:	10800804 	addi	r2,r2,32
    115c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    1160:	00c004c4 	movi	r3,19
    1164:	00824034 	movhi	r2,2304
    1168:	10800804 	addi	r2,r2,32
    116c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    1170:	00c14b04 	movi	r3,1324
    1174:	00824034 	movhi	r2,2304
    1178:	10800804 	addi	r2,r2,32
    117c:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-3
    IOWR(CY7C67200_BASE,HPI_DATA,0x0554); //c
    1180:	00c15504 	movi	r3,1364
    1184:	00824034 	movhi	r2,2304
    1188:	10800804 	addi	r2,r2,32
    118c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//e
    1190:	00c00084 	movi	r3,2
    1194:	00824034 	movhi	r2,2304
    1198:	10800804 	addi	r2,r2,32
    119c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
    11a0:	00c0a404 	movi	r3,656
    11a4:	00824034 	movhi	r2,2304
    11a8:	10800804 	addi	r2,r2,32
    11ac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    11b0:	00c01044 	movi	r3,65
    11b4:	00824034 	movhi	r2,2304
    11b8:	10800804 	addi	r2,r2,32
    11bc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    11c0:	00c004c4 	movi	r3,19
    11c4:	00824034 	movhi	r2,2304
    11c8:	10800804 	addi	r2,r2,32
    11cc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
    11d0:	00c14e04 	movi	r3,1336
    11d4:	00824034 	movhi	r2,2304
    11d8:	10800804 	addi	r2,r2,32
    11dc:	10c00035 	stwio	r3,0(r2)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //538
    11e0:	0007883a 	mov	r3,zero
    11e4:	00824034 	movhi	r2,2304
    11e8:	10800804 	addi	r2,r2,32
    11ec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
    11f0:	0007883a 	mov	r3,zero
    11f4:	00824034 	movhi	r2,2304
    11f8:	10800804 	addi	r2,r2,32
    11fc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//c
    1200:	00c08404 	movi	r3,528
    1204:	00824034 	movhi	r2,2304
    1208:	10800804 	addi	r2,r2,32
    120c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//e
    1210:	00c01044 	movi	r3,65
    1214:	00824034 	movhi	r2,2304
    1218:	10800804 	addi	r2,r2,32
    121c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
    1220:	00c004c4 	movi	r3,19
    1224:	00824034 	movhi	r2,2304
    1228:	10800804 	addi	r2,r2,32
    122c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//2
    1230:	0007883a 	mov	r3,zero
    1234:	00824034 	movhi	r2,2304
    1238:	10800804 	addi	r2,r2,32
    123c:	10c00035 	stwio	r3,0(r2)
    
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1240:	01006c04 	movi	r4,432
    1244:	01414004 	movi	r5,1280
    1248:	0003be80 	call	3be8 <UsbWrite>
    usleep(10*1000);
    124c:	0109c404 	movi	r4,10000
    1250:	00108ec0 	call	108ec <usleep>
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    
    //usleep(100*1000);
    //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1254:	00824034 	movhi	r2,2304
    1258:	10800b04 	addi	r2,r2,44
    125c:	10800037 	ldwio	r2,0(r2)
    1260:	1080040c 	andi	r2,r2,16
    1264:	103f6a26 	beq	r2,zero,1010 <__alt_mem_sram+0xf7e01010>
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    usleep(10*1000);
    }
    
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    1268:	01005104 	movi	r4,324
    126c:	0003c340 	call	3c34 <UsbRead>
    1270:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1274:	01005104 	movi	r4,324
    1278:	000b883a 	mov	r5,zero
    127c:	0003be80 	call	3be8 <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    1280:	00000d06 	br	12b8 <main+0x105c>
    {
       if(usb_ctl_val == 0x000)
    1284:	e0bff80b 	ldhu	r2,-32(fp)
    1288:	10000526 	beq	r2,zero,12a0 <main+0x1044>
       {
       }
       else
       {
        printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    128c:	e0bff80b 	ldhu	r2,-32(fp)
    1290:	01000074 	movhi	r4,1
    1294:	210aa804 	addi	r4,r4,10912
    1298:	100b883a 	mov	r5,r2
    129c:	0003d5c0 	call	3d5c <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    12a0:	01005104 	movi	r4,324
    12a4:	0003c340 	call	3c34 <UsbRead>
    12a8:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    12ac:	01005104 	movi	r4,324
    12b0:	000b883a 	mov	r5,zero
    12b4:	0003be80 	call	3be8 <UsbWrite>
    }
    
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    12b8:	e0bff80b 	ldhu	r2,-32(fp)
    12bc:	10840018 	cmpnei	r2,r2,4096
    12c0:	103ff01e 	bne	r2,zero,1284 <__alt_mem_sram+0xf7e01284>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    12c4:	00c14184 	movi	r3,1286
    12c8:	00824034 	movhi	r2,2304
    12cc:	10800a04 	addi	r2,r2,40
    12d0:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    12d4:	00824034 	movhi	r2,2304
    12d8:	10800804 	addi	r2,r2,32
    12dc:	10800037 	ldwio	r2,0(r2)
    12e0:	01000074 	movhi	r4,1
    12e4:	210ad604 	addi	r4,r4,11096
    12e8:	100b883a 	mov	r5,r2
    12ec:	0003d5c0 	call	3d5c <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    12f0:	00c14204 	movi	r3,1288
    12f4:	00824034 	movhi	r2,2304
    12f8:	10800a04 	addi	r2,r2,40
    12fc:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    1300:	00824034 	movhi	r2,2304
    1304:	10800804 	addi	r2,r2,32
    1308:	10800037 	ldwio	r2,0(r2)
    130c:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
    1310:	e0bff80b 	ldhu	r2,-32(fp)
    1314:	01000074 	movhi	r4,1
    1318:	210ae104 	addi	r4,r4,11140
    131c:	100b883a 	mov	r5,r2
    1320:	0003d5c0 	call	3d5c <printf>
    while (usb_ctl_val != 0x03) 
    1324:	00001906 	br	138c <main+0x1130>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    1328:	00824034 	movhi	r2,2304
    132c:	10800b04 	addi	r2,r2,44
    1330:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    1334:	01005104 	movi	r4,324
    1338:	0003c340 	call	3c34 <UsbRead>
    133c:	10bfffcc 	andi	r2,r2,65535
    1340:	10840018 	cmpnei	r2,r2,4096
    1344:	1000091e 	bne	r2,zero,136c <main+0x1110>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1348:	01005104 	movi	r4,324
    134c:	000b883a 	mov	r5,zero
    1350:	0003be80 	call	3be8 <UsbWrite>
                   
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1354:	0001883a 	nop
    1358:	00824034 	movhi	r2,2304
    135c:	10800b04 	addi	r2,r2,44
    1360:	10800037 	ldwio	r2,0(r2)
    1364:	1080040c 	andi	r2,r2,16
    1368:	103ffb26 	beq	r2,zero,1358 <__alt_mem_sram+0xf7e01358>
           {
            
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    136c:	00c14204 	movi	r3,1288
    1370:	00824034 	movhi	r2,2304
    1374:	10800a04 	addi	r2,r2,40
    1378:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    137c:	00824034 	movhi	r2,2304
    1380:	10800804 	addi	r2,r2,32
    1384:	10800037 	ldwio	r2,0(r2)
    1388:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    138c:	e0bff80b 	ldhu	r2,-32(fp)
    1390:	108000d8 	cmpnei	r2,r2,3
    1394:	103fe41e 	bne	r2,zero,1328 <__alt_mem_sram+0xf7e01328>
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
       
    printf("------------[ENUM PROCESS]:get device descriptor-2 pass!--------------\n");
    1398:	01000074 	movhi	r4,1
    139c:	210b0104 	addi	r4,r4,11268
    13a0:	0003e500 	call	3e50 <puts>
//    printf("\n[ENUM PROCESS]:TD rec data8 is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    //-----------------------------------get configuration descriptor -1 ----------------------------------//
    //usleep(1000);
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    13a4:	00c14004 	movi	r3,1280
    13a8:	00824034 	movhi	r2,2304
    13ac:	10800a04 	addi	r2,r2,40
    13b0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    13b4:	00c14304 	movi	r3,1292
    13b8:	00824034 	movhi	r2,2304
    13bc:	10800804 	addi	r2,r2,32
    13c0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    13c4:	00c00204 	movi	r3,8
    13c8:	00824034 	movhi	r2,2304
    13cc:	10800804 	addi	r2,r2,32
    13d0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    13d4:	00c0b404 	movi	r3,720
    13d8:	00824034 	movhi	r2,2304
    13dc:	10800804 	addi	r2,r2,32
    13e0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    13e4:	00c00044 	movi	r3,1
    13e8:	00824034 	movhi	r2,2304
    13ec:	10800804 	addi	r2,r2,32
    13f0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    13f4:	00c004c4 	movi	r3,19
    13f8:	00824034 	movhi	r2,2304
    13fc:	10800804 	addi	r2,r2,32
    1400:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    1404:	00c14504 	movi	r3,1300
    1408:	00824034 	movhi	r2,2304
    140c:	10800804 	addi	r2,r2,32
    1410:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
    1414:	00c1a004 	movi	r3,1664
    1418:	00824034 	movhi	r2,2304
    141c:	10800804 	addi	r2,r2,32
    1420:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0200);//e
    1424:	00c08004 	movi	r3,512
    1428:	00824034 	movhi	r2,2304
    142c:	10800804 	addi	r2,r2,32
    1430:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    1434:	0007883a 	mov	r3,zero
    1438:	00824034 	movhi	r2,2304
    143c:	10800804 	addi	r2,r2,32
    1440:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0009);//2
    1444:	00c00244 	movi	r3,9
    1448:	00824034 	movhi	r2,2304
    144c:	10800804 	addi	r2,r2,32
    1450:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
    1454:	00c15104 	movi	r3,1348
    1458:	00824034 	movhi	r2,2304
    145c:	10800804 	addi	r2,r2,32
    1460:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    1464:	00c00204 	movi	r3,8
    1468:	00824034 	movhi	r2,2304
    146c:	10800804 	addi	r2,r2,32
    1470:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    1474:	00c0a404 	movi	r3,656
    1478:	00824034 	movhi	r2,2304
    147c:	10800804 	addi	r2,r2,32
    1480:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    1484:	00c01044 	movi	r3,65
    1488:	00824034 	movhi	r2,2304
    148c:	10800804 	addi	r2,r2,32
    1490:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    1494:	00c004c4 	movi	r3,19
    1498:	00824034 	movhi	r2,2304
    149c:	10800804 	addi	r2,r2,32
    14a0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    14a4:	00c14804 	movi	r3,1312
    14a8:	00824034 	movhi	r2,2304
    14ac:	10800804 	addi	r2,r2,32
    14b0:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x054c); //520
    14b4:	00c15304 	movi	r3,1356
    14b8:	00824034 	movhi	r2,2304
    14bc:	10800804 	addi	r2,r2,32
    14c0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//2
    14c4:	00c00044 	movi	r3,1
    14c8:	00824034 	movhi	r2,2304
    14cc:	10800804 	addi	r2,r2,32
    14d0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    14d4:	00c0a404 	movi	r3,656
    14d8:	00824034 	movhi	r2,2304
    14dc:	10800804 	addi	r2,r2,32
    14e0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    14e4:	00c00044 	movi	r3,1
    14e8:	00824034 	movhi	r2,2304
    14ec:	10800804 	addi	r2,r2,32
    14f0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    14f4:	00c004c4 	movi	r3,19
    14f8:	00824034 	movhi	r2,2304
    14fc:	10800804 	addi	r2,r2,32
    1500:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    1504:	00c14b04 	movi	r3,1324
    1508:	00824034 	movhi	r2,2304
    150c:	10800804 	addi	r2,r2,32
    1510:	10c00035 	stwio	r3,0(r2)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //52c
    1514:	0007883a 	mov	r3,zero
    1518:	00824034 	movhi	r2,2304
    151c:	10800804 	addi	r2,r2,32
    1520:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
    1524:	0007883a 	mov	r3,zero
    1528:	00824034 	movhi	r2,2304
    152c:	10800804 	addi	r2,r2,32
    1530:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//530
    1534:	00c08404 	movi	r3,528
    1538:	00824034 	movhi	r2,2304
    153c:	10800804 	addi	r2,r2,32
    1540:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    1544:	00c01044 	movi	r3,65
    1548:	00824034 	movhi	r2,2304
    154c:	10800804 	addi	r2,r2,32
    1550:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    1554:	00c004c4 	movi	r3,19
    1558:	00824034 	movhi	r2,2304
    155c:	10800804 	addi	r2,r2,32
    1560:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
    1564:	0007883a 	mov	r3,zero
    1568:	00824034 	movhi	r2,2304
    156c:	10800804 	addi	r2,r2,32
    1570:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1574:	01006c04 	movi	r4,432
    1578:	01414004 	movi	r5,1280
    157c:	0003be80 	call	3be8 <UsbWrite>
    
   //usleep(10*1000);
   //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1580:	00007906 	br	1768 <main+0x150c>
    {
        //resend the get device descriptor
        //get device descriptor

    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    1584:	00c14004 	movi	r3,1280
    1588:	00824034 	movhi	r2,2304
    158c:	10800a04 	addi	r2,r2,40
    1590:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    1594:	00c14304 	movi	r3,1292
    1598:	00824034 	movhi	r2,2304
    159c:	10800804 	addi	r2,r2,32
    15a0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    15a4:	00c00204 	movi	r3,8
    15a8:	00824034 	movhi	r2,2304
    15ac:	10800804 	addi	r2,r2,32
    15b0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    15b4:	00c0b404 	movi	r3,720
    15b8:	00824034 	movhi	r2,2304
    15bc:	10800804 	addi	r2,r2,32
    15c0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    15c4:	00c00044 	movi	r3,1
    15c8:	00824034 	movhi	r2,2304
    15cc:	10800804 	addi	r2,r2,32
    15d0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    15d4:	00c004c4 	movi	r3,19
    15d8:	00824034 	movhi	r2,2304
    15dc:	10800804 	addi	r2,r2,32
    15e0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    15e4:	00c14504 	movi	r3,1300
    15e8:	00824034 	movhi	r2,2304
    15ec:	10800804 	addi	r2,r2,32
    15f0:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
    15f4:	00c1a004 	movi	r3,1664
    15f8:	00824034 	movhi	r2,2304
    15fc:	10800804 	addi	r2,r2,32
    1600:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0200);//e
    1604:	00c08004 	movi	r3,512
    1608:	00824034 	movhi	r2,2304
    160c:	10800804 	addi	r2,r2,32
    1610:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    1614:	0007883a 	mov	r3,zero
    1618:	00824034 	movhi	r2,2304
    161c:	10800804 	addi	r2,r2,32
    1620:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0009);//2
    1624:	00c00244 	movi	r3,9
    1628:	00824034 	movhi	r2,2304
    162c:	10800804 	addi	r2,r2,32
    1630:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
    1634:	00c15104 	movi	r3,1348
    1638:	00824034 	movhi	r2,2304
    163c:	10800804 	addi	r2,r2,32
    1640:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    1644:	00c00204 	movi	r3,8
    1648:	00824034 	movhi	r2,2304
    164c:	10800804 	addi	r2,r2,32
    1650:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    1654:	00c0a404 	movi	r3,656
    1658:	00824034 	movhi	r2,2304
    165c:	10800804 	addi	r2,r2,32
    1660:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    1664:	00c01044 	movi	r3,65
    1668:	00824034 	movhi	r2,2304
    166c:	10800804 	addi	r2,r2,32
    1670:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    1674:	00c004c4 	movi	r3,19
    1678:	00824034 	movhi	r2,2304
    167c:	10800804 	addi	r2,r2,32
    1680:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    1684:	00c14804 	movi	r3,1312
    1688:	00824034 	movhi	r2,2304
    168c:	10800804 	addi	r2,r2,32
    1690:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x054c); //520
    1694:	00c15304 	movi	r3,1356
    1698:	00824034 	movhi	r2,2304
    169c:	10800804 	addi	r2,r2,32
    16a0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//2
    16a4:	00c00044 	movi	r3,1
    16a8:	00824034 	movhi	r2,2304
    16ac:	10800804 	addi	r2,r2,32
    16b0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    16b4:	00c0a404 	movi	r3,656
    16b8:	00824034 	movhi	r2,2304
    16bc:	10800804 	addi	r2,r2,32
    16c0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    16c4:	00c00044 	movi	r3,1
    16c8:	00824034 	movhi	r2,2304
    16cc:	10800804 	addi	r2,r2,32
    16d0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    16d4:	00c004c4 	movi	r3,19
    16d8:	00824034 	movhi	r2,2304
    16dc:	10800804 	addi	r2,r2,32
    16e0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    16e4:	00c14b04 	movi	r3,1324
    16e8:	00824034 	movhi	r2,2304
    16ec:	10800804 	addi	r2,r2,32
    16f0:	10c00035 	stwio	r3,0(r2)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //52c
    16f4:	0007883a 	mov	r3,zero
    16f8:	00824034 	movhi	r2,2304
    16fc:	10800804 	addi	r2,r2,32
    1700:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
    1704:	0007883a 	mov	r3,zero
    1708:	00824034 	movhi	r2,2304
    170c:	10800804 	addi	r2,r2,32
    1710:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//530
    1714:	00c08404 	movi	r3,528
    1718:	00824034 	movhi	r2,2304
    171c:	10800804 	addi	r2,r2,32
    1720:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    1724:	00c01044 	movi	r3,65
    1728:	00824034 	movhi	r2,2304
    172c:	10800804 	addi	r2,r2,32
    1730:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    1734:	00c004c4 	movi	r3,19
    1738:	00824034 	movhi	r2,2304
    173c:	10800804 	addi	r2,r2,32
    1740:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
    1744:	0007883a 	mov	r3,zero
    1748:	00824034 	movhi	r2,2304
    174c:	10800804 	addi	r2,r2,32
    1750:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1754:	01006c04 	movi	r4,432
    1758:	01414004 	movi	r5,1280
    175c:	0003be80 	call	3be8 <UsbWrite>
    usleep(10*1000);
    1760:	0109c404 	movi	r4,10000
    1764:	00108ec0 	call	108ec <usleep>
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    
   //usleep(10*1000);
   //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1768:	00824034 	movhi	r2,2304
    176c:	10800b04 	addi	r2,r2,44
    1770:	10800037 	ldwio	r2,0(r2)
    1774:	1080040c 	andi	r2,r2,16
    1778:	103f8226 	beq	r2,zero,1584 <__alt_mem_sram+0xf7e01584>
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    177c:	01005104 	movi	r4,324
    1780:	0003c340 	call	3c34 <UsbRead>
    1784:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1788:	01005104 	movi	r4,324
    178c:	000b883a 	mov	r5,zero
    1790:	0003be80 	call	3be8 <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    1794:	00000d06 	br	17cc <main+0x1570>
    {
       if(usb_ctl_val == 0x000)
    1798:	e0bff80b 	ldhu	r2,-32(fp)
    179c:	10000526 	beq	r2,zero,17b4 <main+0x1558>
       {
       }
       else
       {
        printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    17a0:	e0bff80b 	ldhu	r2,-32(fp)
    17a4:	01000074 	movhi	r4,1
    17a8:	210aa804 	addi	r4,r4,10912
    17ac:	100b883a 	mov	r5,r2
    17b0:	0003d5c0 	call	3d5c <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    17b4:	01005104 	movi	r4,324
    17b8:	0003c340 	call	3c34 <UsbRead>
    17bc:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    17c0:	01005104 	movi	r4,324
    17c4:	000b883a 	mov	r5,zero
    17c8:	0003be80 	call	3be8 <UsbWrite>
    usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    17cc:	e0bff80b 	ldhu	r2,-32(fp)
    17d0:	10840018 	cmpnei	r2,r2,4096
    17d4:	103ff01e 	bne	r2,zero,1798 <__alt_mem_sram+0xf7e01798>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    17d8:	00c14184 	movi	r3,1286
    17dc:	00824034 	movhi	r2,2304
    17e0:	10800a04 	addi	r2,r2,40
    17e4:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    17e8:	00824034 	movhi	r2,2304
    17ec:	10800804 	addi	r2,r2,32
    17f0:	10800037 	ldwio	r2,0(r2)
    17f4:	01000074 	movhi	r4,1
    17f8:	210b1304 	addi	r4,r4,11340
    17fc:	100b883a 	mov	r5,r2
    1800:	0003d5c0 	call	3d5c <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    1804:	00c14204 	movi	r3,1288
    1808:	00824034 	movhi	r2,2304
    180c:	10800a04 	addi	r2,r2,40
    1810:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    1814:	00824034 	movhi	r2,2304
    1818:	10800804 	addi	r2,r2,32
    181c:	10800037 	ldwio	r2,0(r2)
    1820:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
    1824:	e0bff80b 	ldhu	r2,-32(fp)
    1828:	01000074 	movhi	r4,1
    182c:	210b1e04 	addi	r4,r4,11384
    1830:	100b883a 	mov	r5,r2
    1834:	0003d5c0 	call	3d5c <printf>
    while (usb_ctl_val != 0x03) 
    1838:	00001906 	br	18a0 <main+0x1644>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    183c:	00824034 	movhi	r2,2304
    1840:	10800b04 	addi	r2,r2,44
    1844:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    1848:	01005104 	movi	r4,324
    184c:	0003c340 	call	3c34 <UsbRead>
    1850:	10bfffcc 	andi	r2,r2,65535
    1854:	10840018 	cmpnei	r2,r2,4096
    1858:	1000091e 	bne	r2,zero,1880 <main+0x1624>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    185c:	01005104 	movi	r4,324
    1860:	000b883a 	mov	r5,zero
    1864:	0003be80 	call	3be8 <UsbWrite>
                   
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1868:	0001883a 	nop
    186c:	00824034 	movhi	r2,2304
    1870:	10800b04 	addi	r2,r2,44
    1874:	10800037 	ldwio	r2,0(r2)
    1878:	1080040c 	andi	r2,r2,16
    187c:	103ffb26 	beq	r2,zero,186c <__alt_mem_sram+0xf7e0186c>
           {
            
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    1880:	00c14204 	movi	r3,1288
    1884:	00824034 	movhi	r2,2304
    1888:	10800a04 	addi	r2,r2,40
    188c:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    1890:	00824034 	movhi	r2,2304
    1894:	10800804 	addi	r2,r2,32
    1898:	10800037 	ldwio	r2,0(r2)
    189c:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    18a0:	e0bff80b 	ldhu	r2,-32(fp)
    18a4:	108000d8 	cmpnei	r2,r2,3
    18a8:	103fe41e 	bne	r2,zero,183c <__alt_mem_sram+0xf7e0183c>
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
    printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
    18ac:	01000074 	movhi	r4,1
    18b0:	210b2a04 	addi	r4,r4,11432
    18b4:	0003e500 	call	3e50 <puts>
    
    //-----------------------------------get configuration descriptor-2------------------------------------//
    //get device descriptor
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    18b8:	00c14004 	movi	r3,1280
    18bc:	00824034 	movhi	r2,2304
    18c0:	10800a04 	addi	r2,r2,40
    18c4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    18c8:	00c14304 	movi	r3,1292
    18cc:	00824034 	movhi	r2,2304
    18d0:	10800804 	addi	r2,r2,32
    18d4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    18d8:	00c00204 	movi	r3,8
    18dc:	00824034 	movhi	r2,2304
    18e0:	10800804 	addi	r2,r2,32
    18e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    18e8:	00c0b404 	movi	r3,720
    18ec:	00824034 	movhi	r2,2304
    18f0:	10800804 	addi	r2,r2,32
    18f4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    18f8:	00c00044 	movi	r3,1
    18fc:	00824034 	movhi	r2,2304
    1900:	10800804 	addi	r2,r2,32
    1904:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    1908:	00c004c4 	movi	r3,19
    190c:	00824034 	movhi	r2,2304
    1910:	10800804 	addi	r2,r2,32
    1914:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    1918:	00c14504 	movi	r3,1300
    191c:	00824034 	movhi	r2,2304
    1920:	10800804 	addi	r2,r2,32
    1924:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
    1928:	00c1a004 	movi	r3,1664
    192c:	00824034 	movhi	r2,2304
    1930:	10800804 	addi	r2,r2,32
    1934:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0200);//e //config 
    1938:	00c08004 	movi	r3,512
    193c:	00824034 	movhi	r2,2304
    1940:	10800804 	addi	r2,r2,32
    1944:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    1948:	0007883a 	mov	r3,zero
    194c:	00824034 	movhi	r2,2304
    1950:	10800804 	addi	r2,r2,32
    1954:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x00FF);//2
    1958:	00c03fc4 	movi	r3,255
    195c:	00824034 	movhi	r2,2304
    1960:	10800804 	addi	r2,r2,32
    1964:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x055c); //514
    1968:	00c15704 	movi	r3,1372
    196c:	00824034 	movhi	r2,2304
    1970:	10800804 	addi	r2,r2,32
    1974:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    1978:	00c00204 	movi	r3,8
    197c:	00824034 	movhi	r2,2304
    1980:	10800804 	addi	r2,r2,32
    1984:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    1988:	00c0a404 	movi	r3,656
    198c:	00824034 	movhi	r2,2304
    1990:	10800804 	addi	r2,r2,32
    1994:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    1998:	00c01044 	movi	r3,65
    199c:	00824034 	movhi	r2,2304
    19a0:	10800804 	addi	r2,r2,32
    19a4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    19a8:	00c004c4 	movi	r3,19
    19ac:	00824034 	movhi	r2,2304
    19b0:	10800804 	addi	r2,r2,32
    19b4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    19b8:	00c14804 	movi	r3,1312
    19bc:	00824034 	movhi	r2,2304
    19c0:	10800804 	addi	r2,r2,32
    19c4:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x0564); //520
    19c8:	00c15904 	movi	r3,1380
    19cc:	00824034 	movhi	r2,2304
    19d0:	10800804 	addi	r2,r2,32
    19d4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    19d8:	00c00204 	movi	r3,8
    19dc:	00824034 	movhi	r2,2304
    19e0:	10800804 	addi	r2,r2,32
    19e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    19e8:	00c0a404 	movi	r3,656
    19ec:	00824034 	movhi	r2,2304
    19f0:	10800804 	addi	r2,r2,32
    19f4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    19f8:	00c00044 	movi	r3,1
    19fc:	00824034 	movhi	r2,2304
    1a00:	10800804 	addi	r2,r2,32
    1a04:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    1a08:	00c004c4 	movi	r3,19
    1a0c:	00824034 	movhi	r2,2304
    1a10:	10800804 	addi	r2,r2,32
    1a14:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    1a18:	00c14b04 	movi	r3,1324
    1a1c:	00824034 	movhi	r2,2304
    1a20:	10800804 	addi	r2,r2,32
    1a24:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-3
    IOWR(CY7C67200_BASE,HPI_DATA,0x056c); //52c
    1a28:	00c15b04 	movi	r3,1388
    1a2c:	00824034 	movhi	r2,2304
    1a30:	10800804 	addi	r2,r2,32
    1a34:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
    1a38:	00c00204 	movi	r3,8
    1a3c:	00824034 	movhi	r2,2304
    1a40:	10800804 	addi	r2,r2,32
    1a44:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
    1a48:	00c0a404 	movi	r3,656
    1a4c:	00824034 	movhi	r2,2304
    1a50:	10800804 	addi	r2,r2,32
    1a54:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    1a58:	00c01044 	movi	r3,65
    1a5c:	00824034 	movhi	r2,2304
    1a60:	10800804 	addi	r2,r2,32
    1a64:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    1a68:	00c004c4 	movi	r3,19
    1a6c:	00824034 	movhi	r2,2304
    1a70:	10800804 	addi	r2,r2,32
    1a74:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
    1a78:	00c14e04 	movi	r3,1336
    1a7c:	00824034 	movhi	r2,2304
    1a80:	10800804 	addi	r2,r2,32
    1a84:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-4
    IOWR(CY7C67200_BASE,HPI_DATA,0x0574); //538
    1a88:	00c15d04 	movi	r3,1396
    1a8c:	00824034 	movhi	r2,2304
    1a90:	10800804 	addi	r2,r2,32
    1a94:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//a
    1a98:	00c00204 	movi	r3,8
    1a9c:	00824034 	movhi	r2,2304
    1aa0:	10800804 	addi	r2,r2,32
    1aa4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
    1aa8:	00c0a404 	movi	r3,656
    1aac:	00824034 	movhi	r2,2304
    1ab0:	10800804 	addi	r2,r2,32
    1ab4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
    1ab8:	00c00044 	movi	r3,1
    1abc:	00824034 	movhi	r2,2304
    1ac0:	10800804 	addi	r2,r2,32
    1ac4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
    1ac8:	00c004c4 	movi	r3,19
    1acc:	00824034 	movhi	r2,2304
    1ad0:	10800804 	addi	r2,r2,32
    1ad4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544);//2
    1ad8:	00c15104 	movi	r3,1348
    1adc:	00824034 	movhi	r2,2304
    1ae0:	10800804 	addi	r2,r2,32
    1ae4:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-5
    IOWR(CY7C67200_BASE,HPI_DATA,0x057c); //544
    1ae8:	00c15f04 	movi	r3,1404
    1aec:	00824034 	movhi	r2,2304
    1af0:	10800804 	addi	r2,r2,32
    1af4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//6
    1af8:	00c00084 	movi	r3,2
    1afc:	00824034 	movhi	r2,2304
    1b00:	10800804 	addi	r2,r2,32
    1b04:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    1b08:	00c0a404 	movi	r3,656
    1b0c:	00824034 	movhi	r2,2304
    1b10:	10800804 	addi	r2,r2,32
    1b14:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a //data1
    1b18:	00c01044 	movi	r3,65
    1b1c:	00824034 	movhi	r2,2304
    1b20:	10800804 	addi	r2,r2,32
    1b24:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    1b28:	00c004c4 	movi	r3,19
    1b2c:	00824034 	movhi	r2,2304
    1b30:	10800804 	addi	r2,r2,32
    1b34:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0550);//e
    1b38:	00c15404 	movi	r3,1360
    1b3c:	00824034 	movhi	r2,2304
    1b40:	10800804 	addi	r2,r2,32
    1b44:	10c00035 	stwio	r3,0(r2)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //550
    1b48:	0007883a 	mov	r3,zero
    1b4c:	00824034 	movhi	r2,2304
    1b50:	10800804 	addi	r2,r2,32
    1b54:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//2
    1b58:	0007883a 	mov	r3,zero
    1b5c:	00824034 	movhi	r2,2304
    1b60:	10800804 	addi	r2,r2,32
    1b64:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//4
    1b68:	00c08404 	movi	r3,528
    1b6c:	00824034 	movhi	r2,2304
    1b70:	10800804 	addi	r2,r2,32
    1b74:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6
    1b78:	00c01044 	movi	r3,65
    1b7c:	00824034 	movhi	r2,2304
    1b80:	10800804 	addi	r2,r2,32
    1b84:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    1b88:	00c004c4 	movi	r3,19
    1b8c:	00824034 	movhi	r2,2304
    1b90:	10800804 	addi	r2,r2,32
    1b94:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
    1b98:	0007883a 	mov	r3,zero
    1b9c:	00824034 	movhi	r2,2304
    1ba0:	10800804 	addi	r2,r2,32
    1ba4:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1ba8:	01006c04 	movi	r4,432
    1bac:	01414004 	movi	r5,1280
    1bb0:	0003be80 	call	3be8 <UsbWrite>
    
   usleep(100*1000);
    1bb4:	010000b4 	movhi	r4,2
    1bb8:	2121a804 	addi	r4,r4,-31072
    1bbc:	00108ec0 	call	108ec <usleep>
   //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1bc0:	0000c106 	br	1ec8 <main+0x1c6c>
    {
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    1bc4:	00c14004 	movi	r3,1280
    1bc8:	00824034 	movhi	r2,2304
    1bcc:	10800a04 	addi	r2,r2,40
    1bd0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    1bd4:	00c14304 	movi	r3,1292
    1bd8:	00824034 	movhi	r2,2304
    1bdc:	10800804 	addi	r2,r2,32
    1be0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    1be4:	00c00204 	movi	r3,8
    1be8:	00824034 	movhi	r2,2304
    1bec:	10800804 	addi	r2,r2,32
    1bf0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    1bf4:	00c0b404 	movi	r3,720
    1bf8:	00824034 	movhi	r2,2304
    1bfc:	10800804 	addi	r2,r2,32
    1c00:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    1c04:	00c00044 	movi	r3,1
    1c08:	00824034 	movhi	r2,2304
    1c0c:	10800804 	addi	r2,r2,32
    1c10:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    1c14:	00c004c4 	movi	r3,19
    1c18:	00824034 	movhi	r2,2304
    1c1c:	10800804 	addi	r2,r2,32
    1c20:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    1c24:	00c14504 	movi	r3,1300
    1c28:	00824034 	movhi	r2,2304
    1c2c:	10800804 	addi	r2,r2,32
    1c30:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
    1c34:	00c1a004 	movi	r3,1664
    1c38:	00824034 	movhi	r2,2304
    1c3c:	10800804 	addi	r2,r2,32
    1c40:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0200);//e //config 
    1c44:	00c08004 	movi	r3,512
    1c48:	00824034 	movhi	r2,2304
    1c4c:	10800804 	addi	r2,r2,32
    1c50:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    1c54:	0007883a 	mov	r3,zero
    1c58:	00824034 	movhi	r2,2304
    1c5c:	10800804 	addi	r2,r2,32
    1c60:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x00FF);//2
    1c64:	00c03fc4 	movi	r3,255
    1c68:	00824034 	movhi	r2,2304
    1c6c:	10800804 	addi	r2,r2,32
    1c70:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x055c); //514
    1c74:	00c15704 	movi	r3,1372
    1c78:	00824034 	movhi	r2,2304
    1c7c:	10800804 	addi	r2,r2,32
    1c80:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    1c84:	00c00204 	movi	r3,8
    1c88:	00824034 	movhi	r2,2304
    1c8c:	10800804 	addi	r2,r2,32
    1c90:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    1c94:	00c0a404 	movi	r3,656
    1c98:	00824034 	movhi	r2,2304
    1c9c:	10800804 	addi	r2,r2,32
    1ca0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    1ca4:	00c01044 	movi	r3,65
    1ca8:	00824034 	movhi	r2,2304
    1cac:	10800804 	addi	r2,r2,32
    1cb0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    1cb4:	00c004c4 	movi	r3,19
    1cb8:	00824034 	movhi	r2,2304
    1cbc:	10800804 	addi	r2,r2,32
    1cc0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    1cc4:	00c14804 	movi	r3,1312
    1cc8:	00824034 	movhi	r2,2304
    1ccc:	10800804 	addi	r2,r2,32
    1cd0:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x0564); //520
    1cd4:	00c15904 	movi	r3,1380
    1cd8:	00824034 	movhi	r2,2304
    1cdc:	10800804 	addi	r2,r2,32
    1ce0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    1ce4:	00c00204 	movi	r3,8
    1ce8:	00824034 	movhi	r2,2304
    1cec:	10800804 	addi	r2,r2,32
    1cf0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    1cf4:	00c0a404 	movi	r3,656
    1cf8:	00824034 	movhi	r2,2304
    1cfc:	10800804 	addi	r2,r2,32
    1d00:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    1d04:	00c00044 	movi	r3,1
    1d08:	00824034 	movhi	r2,2304
    1d0c:	10800804 	addi	r2,r2,32
    1d10:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    1d14:	00c004c4 	movi	r3,19
    1d18:	00824034 	movhi	r2,2304
    1d1c:	10800804 	addi	r2,r2,32
    1d20:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    1d24:	00c14b04 	movi	r3,1324
    1d28:	00824034 	movhi	r2,2304
    1d2c:	10800804 	addi	r2,r2,32
    1d30:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-3
    IOWR(CY7C67200_BASE,HPI_DATA,0x056c); //52c
    1d34:	00c15b04 	movi	r3,1388
    1d38:	00824034 	movhi	r2,2304
    1d3c:	10800804 	addi	r2,r2,32
    1d40:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
    1d44:	00c00204 	movi	r3,8
    1d48:	00824034 	movhi	r2,2304
    1d4c:	10800804 	addi	r2,r2,32
    1d50:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
    1d54:	00c0a404 	movi	r3,656
    1d58:	00824034 	movhi	r2,2304
    1d5c:	10800804 	addi	r2,r2,32
    1d60:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    1d64:	00c01044 	movi	r3,65
    1d68:	00824034 	movhi	r2,2304
    1d6c:	10800804 	addi	r2,r2,32
    1d70:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    1d74:	00c004c4 	movi	r3,19
    1d78:	00824034 	movhi	r2,2304
    1d7c:	10800804 	addi	r2,r2,32
    1d80:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
    1d84:	00c14e04 	movi	r3,1336
    1d88:	00824034 	movhi	r2,2304
    1d8c:	10800804 	addi	r2,r2,32
    1d90:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-4
    IOWR(CY7C67200_BASE,HPI_DATA,0x0574); //538
    1d94:	00c15d04 	movi	r3,1396
    1d98:	00824034 	movhi	r2,2304
    1d9c:	10800804 	addi	r2,r2,32
    1da0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//a
    1da4:	00c00204 	movi	r3,8
    1da8:	00824034 	movhi	r2,2304
    1dac:	10800804 	addi	r2,r2,32
    1db0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
    1db4:	00c0a404 	movi	r3,656
    1db8:	00824034 	movhi	r2,2304
    1dbc:	10800804 	addi	r2,r2,32
    1dc0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
    1dc4:	00c00044 	movi	r3,1
    1dc8:	00824034 	movhi	r2,2304
    1dcc:	10800804 	addi	r2,r2,32
    1dd0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
    1dd4:	00c004c4 	movi	r3,19
    1dd8:	00824034 	movhi	r2,2304
    1ddc:	10800804 	addi	r2,r2,32
    1de0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544);//2
    1de4:	00c15104 	movi	r3,1348
    1de8:	00824034 	movhi	r2,2304
    1dec:	10800804 	addi	r2,r2,32
    1df0:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-5
    IOWR(CY7C67200_BASE,HPI_DATA,0x057c); //544
    1df4:	00c15f04 	movi	r3,1404
    1df8:	00824034 	movhi	r2,2304
    1dfc:	10800804 	addi	r2,r2,32
    1e00:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//6
    1e04:	00c00084 	movi	r3,2
    1e08:	00824034 	movhi	r2,2304
    1e0c:	10800804 	addi	r2,r2,32
    1e10:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    1e14:	00c0a404 	movi	r3,656
    1e18:	00824034 	movhi	r2,2304
    1e1c:	10800804 	addi	r2,r2,32
    1e20:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a //data1
    1e24:	00c01044 	movi	r3,65
    1e28:	00824034 	movhi	r2,2304
    1e2c:	10800804 	addi	r2,r2,32
    1e30:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    1e34:	00c004c4 	movi	r3,19
    1e38:	00824034 	movhi	r2,2304
    1e3c:	10800804 	addi	r2,r2,32
    1e40:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0550);//e
    1e44:	00c15404 	movi	r3,1360
    1e48:	00824034 	movhi	r2,2304
    1e4c:	10800804 	addi	r2,r2,32
    1e50:	10c00035 	stwio	r3,0(r2)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //550
    1e54:	0007883a 	mov	r3,zero
    1e58:	00824034 	movhi	r2,2304
    1e5c:	10800804 	addi	r2,r2,32
    1e60:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//2
    1e64:	0007883a 	mov	r3,zero
    1e68:	00824034 	movhi	r2,2304
    1e6c:	10800804 	addi	r2,r2,32
    1e70:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//4
    1e74:	00c08404 	movi	r3,528
    1e78:	00824034 	movhi	r2,2304
    1e7c:	10800804 	addi	r2,r2,32
    1e80:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6
    1e84:	00c01044 	movi	r3,65
    1e88:	00824034 	movhi	r2,2304
    1e8c:	10800804 	addi	r2,r2,32
    1e90:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    1e94:	00c004c4 	movi	r3,19
    1e98:	00824034 	movhi	r2,2304
    1e9c:	10800804 	addi	r2,r2,32
    1ea0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
    1ea4:	0007883a 	mov	r3,zero
    1ea8:	00824034 	movhi	r2,2304
    1eac:	10800804 	addi	r2,r2,32
    1eb0:	10c00035 	stwio	r3,0(r2)
          
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    1eb4:	01006c04 	movi	r4,432
    1eb8:	01414004 	movi	r5,1280
    1ebc:	0003be80 	call	3be8 <UsbWrite>
    usleep(10*1000);
    1ec0:	0109c404 	movi	r4,10000
    1ec4:	00108ec0 	call	108ec <usleep>
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    
   usleep(100*1000);
   //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1ec8:	00824034 	movhi	r2,2304
    1ecc:	10800b04 	addi	r2,r2,44
    1ed0:	10800037 	ldwio	r2,0(r2)
    1ed4:	1080040c 	andi	r2,r2,16
    1ed8:	103f3a26 	beq	r2,zero,1bc4 <__alt_mem_sram+0xf7e01bc4>
          
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    usleep(10*1000);
    }
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    1edc:	01005104 	movi	r4,324
    1ee0:	0003c340 	call	3c34 <UsbRead>
    1ee4:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1ee8:	01005104 	movi	r4,324
    1eec:	000b883a 	mov	r5,zero
    1ef0:	0003be80 	call	3be8 <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    1ef4:	00000d06 	br	1f2c <main+0x1cd0>
    {
       if(usb_ctl_val == 0x000)
    1ef8:	e0bff80b 	ldhu	r2,-32(fp)
    1efc:	10000526 	beq	r2,zero,1f14 <main+0x1cb8>
       {
       }
       else
       {
        printf("[SIE MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    1f00:	e0bff80b 	ldhu	r2,-32(fp)
    1f04:	01000074 	movhi	r4,1
    1f08:	210b3d04 	addi	r4,r4,11508
    1f0c:	100b883a 	mov	r5,r2
    1f10:	0003d5c0 	call	3d5c <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    1f14:	01005104 	movi	r4,324
    1f18:	0003c340 	call	3c34 <UsbRead>
    1f1c:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1f20:	01005104 	movi	r4,324
    1f24:	000b883a 	mov	r5,zero
    1f28:	0003be80 	call	3be8 <UsbWrite>
    usleep(10*1000);
    }
    //UsbRead(0x01B8);
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    1f2c:	e0bff80b 	ldhu	r2,-32(fp)
    1f30:	10840018 	cmpnei	r2,r2,4096
    1f34:	103ff01e 	bne	r2,zero,1ef8 <__alt_mem_sram+0xf7e01ef8>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    1f38:	00c14184 	movi	r3,1286
    1f3c:	00824034 	movhi	r2,2304
    1f40:	10800a04 	addi	r2,r2,40
    1f44:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    1f48:	00824034 	movhi	r2,2304
    1f4c:	10800804 	addi	r2,r2,32
    1f50:	10800037 	ldwio	r2,0(r2)
    1f54:	01000074 	movhi	r4,1
    1f58:	210b4504 	addi	r4,r4,11540
    1f5c:	100b883a 	mov	r5,r2
    1f60:	0003d5c0 	call	3d5c <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    1f64:	00c14204 	movi	r3,1288
    1f68:	00824034 	movhi	r2,2304
    1f6c:	10800a04 	addi	r2,r2,40
    1f70:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    1f74:	00824034 	movhi	r2,2304
    1f78:	10800804 	addi	r2,r2,32
    1f7c:	10800037 	ldwio	r2,0(r2)
    1f80:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
    1f84:	e0bff80b 	ldhu	r2,-32(fp)
    1f88:	01000074 	movhi	r4,1
    1f8c:	210b5004 	addi	r4,r4,11584
    1f90:	100b883a 	mov	r5,r2
    1f94:	0003d5c0 	call	3d5c <printf>
    while (usb_ctl_val != 0x03) 
    1f98:	00001906 	br	2000 <main+0x1da4>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    1f9c:	00824034 	movhi	r2,2304
    1fa0:	10800b04 	addi	r2,r2,44
    1fa4:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    1fa8:	01005104 	movi	r4,324
    1fac:	0003c340 	call	3c34 <UsbRead>
    1fb0:	10bfffcc 	andi	r2,r2,65535
    1fb4:	10840018 	cmpnei	r2,r2,4096
    1fb8:	1000091e 	bne	r2,zero,1fe0 <main+0x1d84>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    1fbc:	01005104 	movi	r4,324
    1fc0:	000b883a 	mov	r5,zero
    1fc4:	0003be80 	call	3be8 <UsbWrite>
                   
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    1fc8:	0001883a 	nop
    1fcc:	00824034 	movhi	r2,2304
    1fd0:	10800b04 	addi	r2,r2,44
    1fd4:	10800037 	ldwio	r2,0(r2)
    1fd8:	1080040c 	andi	r2,r2,16
    1fdc:	103ffb26 	beq	r2,zero,1fcc <__alt_mem_sram+0xf7e01fcc>
           {
            
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    1fe0:	00c14204 	movi	r3,1288
    1fe4:	00824034 	movhi	r2,2304
    1fe8:	10800a04 	addi	r2,r2,40
    1fec:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    1ff0:	00824034 	movhi	r2,2304
    1ff4:	10800804 	addi	r2,r2,32
    1ff8:	10800037 	ldwio	r2,0(r2)
    1ffc:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    2000:	e0bff80b 	ldhu	r2,-32(fp)
    2004:	108000d8 	cmpnei	r2,r2,3
    2008:	103fe41e 	bne	r2,zero,1f9c <__alt_mem_sram+0xf7e01f9c>
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
       
       
    printf("-----------[ENUM PROCESS]:get configuration descriptor-2 pass!------------\n");
    200c:	01000074 	movhi	r4,1
    2010:	210b5c04 	addi	r4,r4,11632
    2014:	0003e500 	call	3e50 <puts>
    

    IOWR(CY7C67200_BASE,HPI_ADDR,0x056c); //the start address
    2018:	00c15b04 	movi	r3,1388
    201c:	00824034 	movhi	r2,2304
    2020:	10800a04 	addi	r2,r2,40
    2024:	10c00035 	stwio	r3,0(r2)

    if(  ( IORD(CY7C67200_BASE,HPI_DATA) & 0x0ff)  ==0x02)
    2028:	00824034 	movhi	r2,2304
    202c:	10800804 	addi	r2,r2,32
    2030:	10800037 	ldwio	r2,0(r2)
    2034:	10803fcc 	andi	r2,r2,255
    2038:	10800098 	cmpnei	r2,r2,2
    203c:	1000041e 	bne	r2,zero,2050 <main+0x1df4>
    {
         printf("\n[INFO]:check TD rec data7 \n[INFO]:Mouse Detected!!!\n\n");
    2040:	01000074 	movhi	r4,1
    2044:	210b6f04 	addi	r4,r4,11708
    2048:	0003e500 	call	3e50 <puts>
    204c:	00000306 	br	205c <main+0x1e00>
    }
    else
    {
        printf("\n[INFO]:Mouse Not Detected!!! \n\n");
    2050:	01000074 	movhi	r4,1
    2054:	210b7d04 	addi	r4,r4,11764
    2058:	0003e500 	call	3e50 <puts>
    }
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x057a); //the start address   
    205c:	00c15e84 	movi	r3,1402
    2060:	00824034 	movhi	r2,2304
    2064:	10800a04 	addi	r2,r2,40
    2068:	10c00035 	stwio	r3,0(r2)
      
    data_size = (IORD(CY7C67200_BASE,HPI_DATA)>>8)&0x0ff; 
    206c:	00824034 	movhi	r2,2304
    2070:	10800804 	addi	r2,r2,32
    2074:	10800037 	ldwio	r2,0(r2)
    2078:	1005d23a 	srai	r2,r2,8
    207c:	e0bffe85 	stb	r2,-6(fp)
    printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
    2080:	e0bffe83 	ldbu	r2,-6(fp)
    2084:	01000074 	movhi	r4,1
    2088:	210b8504 	addi	r4,r4,11796
    208c:	100b883a 	mov	r5,r2
    2090:	0003d5c0 	call	3d5c <printf>
    
    //------------------------------------set configuration -----------------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    2094:	00c14004 	movi	r3,1280
    2098:	00824034 	movhi	r2,2304
    209c:	10800a04 	addi	r2,r2,40
    20a0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    20a4:	00c14304 	movi	r3,1292
    20a8:	00824034 	movhi	r2,2304
    20ac:	10800804 	addi	r2,r2,32
    20b0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    20b4:	00c00204 	movi	r3,8
    20b8:	00824034 	movhi	r2,2304
    20bc:	10800804 	addi	r2,r2,32
    20c0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
    20c4:	00c0b404 	movi	r3,720
    20c8:	00824034 	movhi	r2,2304
    20cc:	10800804 	addi	r2,r2,32
    20d0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    20d4:	00c00044 	movi	r3,1
    20d8:	00824034 	movhi	r2,2304
    20dc:	10800804 	addi	r2,r2,32
    20e0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    20e4:	00c004c4 	movi	r3,19
    20e8:	00824034 	movhi	r2,2304
    20ec:	10800804 	addi	r2,r2,32
    20f0:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    20f4:	00c14504 	movi	r3,1300
    20f8:	00824034 	movhi	r2,2304
    20fc:	10800804 	addi	r2,r2,32
    2100:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0900);
    2104:	00c24004 	movi	r3,2304
    2108:	00824034 	movhi	r2,2304
    210c:	10800804 	addi	r2,r2,32
    2110:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//device address   
    2114:	00c00044 	movi	r3,1
    2118:	00824034 	movhi	r2,2304
    211c:	10800804 	addi	r2,r2,32
    2120:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    2124:	0007883a 	mov	r3,zero
    2128:	00824034 	movhi	r2,2304
    212c:	10800804 	addi	r2,r2,32
    2130:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    2134:	0007883a 	mov	r3,zero
    2138:	00824034 	movhi	r2,2304
    213c:	10800804 	addi	r2,r2,32
    2140:	10c00035 	stwio	r3,0(r2)
    //in packet
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
    2144:	0007883a 	mov	r3,zero
    2148:	00824034 	movhi	r2,2304
    214c:	10800804 	addi	r2,r2,32
    2150:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
    2154:	0007883a 	mov	r3,zero
    2158:	00824034 	movhi	r2,2304
    215c:	10800804 	addi	r2,r2,32
    2160:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//device address
    2164:	00c0a404 	movi	r3,656
    2168:	00824034 	movhi	r2,2304
    216c:	10800804 	addi	r2,r2,32
    2170:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041); //data 1
    2174:	00c01044 	movi	r3,65
    2178:	00824034 	movhi	r2,2304
    217c:	10800804 	addi	r2,r2,32
    2180:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    2184:	00c004c4 	movi	r3,19
    2188:	00824034 	movhi	r2,2304
    218c:	10800804 	addi	r2,r2,32
    2190:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    2194:	0007883a 	mov	r3,zero
    2198:	00824034 	movhi	r2,2304
    219c:	10800804 	addi	r2,r2,32
    21a0:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    21a4:	01006c04 	movi	r4,432
    21a8:	01414004 	movi	r5,1280
    21ac:	0003be80 	call	3be8 <UsbWrite>
    //usleep(10*1000);
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    21b0:	00004906 	br	22d8 <main+0x207c>
    {
        IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    21b4:	00c14004 	movi	r3,1280
    21b8:	00824034 	movhi	r2,2304
    21bc:	10800a04 	addi	r2,r2,40
    21c0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    21c4:	00c14304 	movi	r3,1292
    21c8:	00824034 	movhi	r2,2304
    21cc:	10800804 	addi	r2,r2,32
    21d0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    21d4:	00c00204 	movi	r3,8
    21d8:	00824034 	movhi	r2,2304
    21dc:	10800804 	addi	r2,r2,32
    21e0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x02D0);
    21e4:	00c0b404 	movi	r3,720
    21e8:	00824034 	movhi	r2,2304
    21ec:	10800804 	addi	r2,r2,32
    21f0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    21f4:	00c00044 	movi	r3,1
    21f8:	00824034 	movhi	r2,2304
    21fc:	10800804 	addi	r2,r2,32
    2200:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    2204:	00c004c4 	movi	r3,19
    2208:	00824034 	movhi	r2,2304
    220c:	10800804 	addi	r2,r2,32
    2210:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    2214:	00c14504 	movi	r3,1300
    2218:	00824034 	movhi	r2,2304
    221c:	10800804 	addi	r2,r2,32
    2220:	10c00035 	stwio	r3,0(r2)
    
        //td content 4 bytes
        IOWR(CY7C67200_BASE,HPI_DATA,0x0900);
    2224:	00c24004 	movi	r3,2304
    2228:	00824034 	movhi	r2,2304
    222c:	10800804 	addi	r2,r2,32
    2230:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//device address   
    2234:	00c00044 	movi	r3,1
    2238:	00824034 	movhi	r2,2304
    223c:	10800804 	addi	r2,r2,32
    2240:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    2244:	0007883a 	mov	r3,zero
    2248:	00824034 	movhi	r2,2304
    224c:	10800804 	addi	r2,r2,32
    2250:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    2254:	0007883a 	mov	r3,zero
    2258:	00824034 	movhi	r2,2304
    225c:	10800804 	addi	r2,r2,32
    2260:	10c00035 	stwio	r3,0(r2)
        //in packet
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
    2264:	0007883a 	mov	r3,zero
    2268:	00824034 	movhi	r2,2304
    226c:	10800804 	addi	r2,r2,32
    2270:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
    2274:	0007883a 	mov	r3,zero
    2278:	00824034 	movhi	r2,2304
    227c:	10800804 	addi	r2,r2,32
    2280:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//device address
    2284:	00c0a404 	movi	r3,656
    2288:	00824034 	movhi	r2,2304
    228c:	10800804 	addi	r2,r2,32
    2290:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0041); //data 1
    2294:	00c01044 	movi	r3,65
    2298:	00824034 	movhi	r2,2304
    229c:	10800804 	addi	r2,r2,32
    22a0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    22a4:	00c004c4 	movi	r3,19
    22a8:	00824034 	movhi	r2,2304
    22ac:	10800804 	addi	r2,r2,32
    22b0:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    22b4:	0007883a 	mov	r3,zero
    22b8:	00824034 	movhi	r2,2304
    22bc:	10800804 	addi	r2,r2,32
    22c0:	10c00035 	stwio	r3,0(r2)
        
        UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    22c4:	01006c04 	movi	r4,432
    22c8:	01414004 	movi	r5,1280
    22cc:	0003be80 	call	3be8 <UsbWrite>
        usleep(10*1000);
    22d0:	0109c404 	movi	r4,10000
    22d4:	00108ec0 	call	108ec <usleep>
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    //usleep(10*1000);
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    22d8:	00824034 	movhi	r2,2304
    22dc:	10800b04 	addi	r2,r2,44
    22e0:	10800037 	ldwio	r2,0(r2)
    22e4:	1080040c 	andi	r2,r2,16
    22e8:	103fb226 	beq	r2,zero,21b4 <__alt_mem_sram+0xf7e021b4>
        
        UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    22ec:	01005104 	movi	r4,324
    22f0:	0003c340 	call	3c34 <UsbRead>
    22f4:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    22f8:	01005104 	movi	r4,324
    22fc:	000b883a 	mov	r5,zero
    2300:	0003be80 	call	3be8 <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    2304:	00000d06 	br	233c <main+0x20e0>
    {
       if(usb_ctl_val == 0x000)
    2308:	e0bff80b 	ldhu	r2,-32(fp)
    230c:	10000526 	beq	r2,zero,2324 <main+0x20c8>
       {
       }
       else
       {
        printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    2310:	e0bff80b 	ldhu	r2,-32(fp)
    2314:	01000074 	movhi	r4,1
    2318:	210aa804 	addi	r4,r4,10912
    231c:	100b883a 	mov	r5,r2
    2320:	0003d5c0 	call	3d5c <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2324:	01005104 	movi	r4,324
    2328:	0003c340 	call	3c34 <UsbRead>
    232c:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2330:	01005104 	movi	r4,324
    2334:	000b883a 	mov	r5,zero
    2338:	0003be80 	call	3be8 <UsbWrite>
        usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    233c:	e0bff80b 	ldhu	r2,-32(fp)
    2340:	10840018 	cmpnei	r2,r2,4096
    2344:	103ff01e 	bne	r2,zero,2308 <__alt_mem_sram+0xf7e02308>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    2348:	00c14184 	movi	r3,1286
    234c:	00824034 	movhi	r2,2304
    2350:	10800a04 	addi	r2,r2,40
    2354:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    2358:	00824034 	movhi	r2,2304
    235c:	10800804 	addi	r2,r2,32
    2360:	10800037 	ldwio	r2,0(r2)
    2364:	01000074 	movhi	r4,1
    2368:	210b8f04 	addi	r4,r4,11836
    236c:	100b883a 	mov	r5,r2
    2370:	0003d5c0 	call	3d5c <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    2374:	00c14204 	movi	r3,1288
    2378:	00824034 	movhi	r2,2304
    237c:	10800a04 	addi	r2,r2,40
    2380:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    2384:	00824034 	movhi	r2,2304
    2388:	10800804 	addi	r2,r2,32
    238c:	10800037 	ldwio	r2,0(r2)
    2390:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
    2394:	e0bff80b 	ldhu	r2,-32(fp)
    2398:	01000074 	movhi	r4,1
    239c:	210b9a04 	addi	r4,r4,11880
    23a0:	100b883a 	mov	r5,r2
    23a4:	0003d5c0 	call	3d5c <printf>
    while (usb_ctl_val != 0x03) 
    23a8:	00001906 	br	2410 <main+0x21b4>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    23ac:	00824034 	movhi	r2,2304
    23b0:	10800b04 	addi	r2,r2,44
    23b4:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    23b8:	01005104 	movi	r4,324
    23bc:	0003c340 	call	3c34 <UsbRead>
    23c0:	10bfffcc 	andi	r2,r2,65535
    23c4:	10840018 	cmpnei	r2,r2,4096
    23c8:	1000091e 	bne	r2,zero,23f0 <main+0x2194>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    23cc:	01005104 	movi	r4,324
    23d0:	000b883a 	mov	r5,zero
    23d4:	0003be80 	call	3be8 <UsbWrite>
           
        
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    23d8:	0001883a 	nop
    23dc:	00824034 	movhi	r2,2304
    23e0:	10800b04 	addi	r2,r2,44
    23e4:	10800037 	ldwio	r2,0(r2)
    23e8:	1080040c 	andi	r2,r2,16
    23ec:	103ffb26 	beq	r2,zero,23dc <__alt_mem_sram+0xf7e023dc>
           {
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    23f0:	00c14204 	movi	r3,1288
    23f4:	00824034 	movhi	r2,2304
    23f8:	10800a04 	addi	r2,r2,40
    23fc:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    2400:	00824034 	movhi	r2,2304
    2404:	10800804 	addi	r2,r2,32
    2408:	10800037 	ldwio	r2,0(r2)
    240c:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    2410:	e0bff80b 	ldhu	r2,-32(fp)
    2414:	108000d8 	cmpnei	r2,r2,3
    2418:	103fe41e 	bne	r2,zero,23ac <__alt_mem_sram+0xf7e023ac>
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
    
    printf("------------[ENUM PROCESS]:set configuration pass!-------------------\n");
    241c:	01000074 	movhi	r4,1
    2420:	210ba604 	addi	r4,r4,11928
    2424:	0003e500 	call	3e50 <puts>
    
    //----------------------------------------------classe request out ------------------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    2428:	00c14004 	movi	r3,1280
    242c:	00824034 	movhi	r2,2304
    2430:	10800a04 	addi	r2,r2,40
    2434:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    2438:	00c14304 	movi	r3,1292
    243c:	00824034 	movhi	r2,2304
    2440:	10800804 	addi	r2,r2,32
    2444:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    2448:	00c00204 	movi	r3,8
    244c:	00824034 	movhi	r2,2304
    2450:	10800804 	addi	r2,r2,32
    2454:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
    2458:	00c0b404 	movi	r3,720
    245c:	00824034 	movhi	r2,2304
    2460:	10800804 	addi	r2,r2,32
    2464:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    2468:	00c00044 	movi	r3,1
    246c:	00824034 	movhi	r2,2304
    2470:	10800804 	addi	r2,r2,32
    2474:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    2478:	00c004c4 	movi	r3,19
    247c:	00824034 	movhi	r2,2304
    2480:	10800804 	addi	r2,r2,32
    2484:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    2488:	00c14504 	movi	r3,1300
    248c:	00824034 	movhi	r2,2304
    2490:	10800804 	addi	r2,r2,32
    2494:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0A21);
    2498:	00c28844 	movi	r3,2593
    249c:	00824034 	movhi	r2,2304
    24a0:	10800804 	addi	r2,r2,32
    24a4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//device address   
    24a8:	0007883a 	mov	r3,zero
    24ac:	00824034 	movhi	r2,2304
    24b0:	10800804 	addi	r2,r2,32
    24b4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    24b8:	0007883a 	mov	r3,zero
    24bc:	00824034 	movhi	r2,2304
    24c0:	10800804 	addi	r2,r2,32
    24c4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    24c8:	0007883a 	mov	r3,zero
    24cc:	00824034 	movhi	r2,2304
    24d0:	10800804 	addi	r2,r2,32
    24d4:	10c00035 	stwio	r3,0(r2)
    //in packet
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
    24d8:	0007883a 	mov	r3,zero
    24dc:	00824034 	movhi	r2,2304
    24e0:	10800804 	addi	r2,r2,32
    24e4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number /data length
    24e8:	0007883a 	mov	r3,zero
    24ec:	00824034 	movhi	r2,2304
    24f0:	10800804 	addi	r2,r2,32
    24f4:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//device address
    24f8:	00c0a404 	movi	r3,656
    24fc:	00824034 	movhi	r2,2304
    2500:	10800804 	addi	r2,r2,32
    2504:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041); //data 1
    2508:	00c01044 	movi	r3,65
    250c:	00824034 	movhi	r2,2304
    2510:	10800804 	addi	r2,r2,32
    2514:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    2518:	00c004c4 	movi	r3,19
    251c:	00824034 	movhi	r2,2304
    2520:	10800804 	addi	r2,r2,32
    2524:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    2528:	0007883a 	mov	r3,zero
    252c:	00824034 	movhi	r2,2304
    2530:	10800804 	addi	r2,r2,32
    2534:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2538:	01006c04 	movi	r4,432
    253c:	01414004 	movi	r5,1280
    2540:	0003be80 	call	3be8 <UsbWrite>
    //usleep(10*1000);
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2544:	00004906 	br	266c <main+0x2410>
    {
        IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    2548:	00c14004 	movi	r3,1280
    254c:	00824034 	movhi	r2,2304
    2550:	10800a04 	addi	r2,r2,40
    2554:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    2558:	00c14304 	movi	r3,1292
    255c:	00824034 	movhi	r2,2304
    2560:	10800804 	addi	r2,r2,32
    2564:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    2568:	00c00204 	movi	r3,8
    256c:	00824034 	movhi	r2,2304
    2570:	10800804 	addi	r2,r2,32
    2574:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x02D0);
    2578:	00c0b404 	movi	r3,720
    257c:	00824034 	movhi	r2,2304
    2580:	10800804 	addi	r2,r2,32
    2584:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    2588:	00c00044 	movi	r3,1
    258c:	00824034 	movhi	r2,2304
    2590:	10800804 	addi	r2,r2,32
    2594:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    2598:	00c004c4 	movi	r3,19
    259c:	00824034 	movhi	r2,2304
    25a0:	10800804 	addi	r2,r2,32
    25a4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    25a8:	00c14504 	movi	r3,1300
    25ac:	00824034 	movhi	r2,2304
    25b0:	10800804 	addi	r2,r2,32
    25b4:	10c00035 	stwio	r3,0(r2)
    
        //td content 4 bytes
        IOWR(CY7C67200_BASE,HPI_DATA,0x0A21);
    25b8:	00c28844 	movi	r3,2593
    25bc:	00824034 	movhi	r2,2304
    25c0:	10800804 	addi	r2,r2,32
    25c4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//device address   
    25c8:	0007883a 	mov	r3,zero
    25cc:	00824034 	movhi	r2,2304
    25d0:	10800804 	addi	r2,r2,32
    25d4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    25d8:	0007883a 	mov	r3,zero
    25dc:	00824034 	movhi	r2,2304
    25e0:	10800804 	addi	r2,r2,32
    25e4:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    25e8:	0007883a 	mov	r3,zero
    25ec:	00824034 	movhi	r2,2304
    25f0:	10800804 	addi	r2,r2,32
    25f4:	10c00035 	stwio	r3,0(r2)
        //in packet
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
    25f8:	0007883a 	mov	r3,zero
    25fc:	00824034 	movhi	r2,2304
    2600:	10800804 	addi	r2,r2,32
    2604:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
    2608:	0007883a 	mov	r3,zero
    260c:	00824034 	movhi	r2,2304
    2610:	10800804 	addi	r2,r2,32
    2614:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//device address
    2618:	00c0a404 	movi	r3,656
    261c:	00824034 	movhi	r2,2304
    2620:	10800804 	addi	r2,r2,32
    2624:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0041); //data 1
    2628:	00c01044 	movi	r3,65
    262c:	00824034 	movhi	r2,2304
    2630:	10800804 	addi	r2,r2,32
    2634:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    2638:	00c004c4 	movi	r3,19
    263c:	00824034 	movhi	r2,2304
    2640:	10800804 	addi	r2,r2,32
    2644:	10c00035 	stwio	r3,0(r2)
        IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
    2648:	0007883a 	mov	r3,zero
    264c:	00824034 	movhi	r2,2304
    2650:	10800804 	addi	r2,r2,32
    2654:	10c00035 	stwio	r3,0(r2)
        
        UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2658:	01006c04 	movi	r4,432
    265c:	01414004 	movi	r5,1280
    2660:	0003be80 	call	3be8 <UsbWrite>
        usleep(10*1000);
    2664:	0109c404 	movi	r4,10000
    2668:	00108ec0 	call	108ec <usleep>
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    //usleep(10*1000);
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    266c:	00824034 	movhi	r2,2304
    2670:	10800b04 	addi	r2,r2,44
    2674:	10800037 	ldwio	r2,0(r2)
    2678:	1080040c 	andi	r2,r2,16
    267c:	103fb226 	beq	r2,zero,2548 <__alt_mem_sram+0xf7e02548>
        
        UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
        usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2680:	01005104 	movi	r4,324
    2684:	0003c340 	call	3c34 <UsbRead>
    2688:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    268c:	01005104 	movi	r4,324
    2690:	000b883a 	mov	r5,zero
    2694:	0003be80 	call	3be8 <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    2698:	00000d06 	br	26d0 <main+0x2474>
    {
       if(usb_ctl_val == 0x000)
    269c:	e0bff80b 	ldhu	r2,-32(fp)
    26a0:	10000526 	beq	r2,zero,26b8 <main+0x245c>
       {
       }
       else
       {
        printf("[SIE1 MSG]:SIE 1 msg reg is %x\n",usb_ctl_val);
    26a4:	e0bff80b 	ldhu	r2,-32(fp)
    26a8:	01000074 	movhi	r4,1
    26ac:	210bb804 	addi	r4,r4,12000
    26b0:	100b883a 	mov	r5,r2
    26b4:	0003d5c0 	call	3d5c <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    26b8:	01005104 	movi	r4,324
    26bc:	0003c340 	call	3c34 <UsbRead>
    26c0:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    26c4:	01005104 	movi	r4,324
    26c8:	000b883a 	mov	r5,zero
    26cc:	0003be80 	call	3be8 <UsbWrite>
        usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    26d0:	e0bff80b 	ldhu	r2,-32(fp)
    26d4:	10840018 	cmpnei	r2,r2,4096
    26d8:	103ff01e 	bne	r2,zero,269c <__alt_mem_sram+0xf7e0269c>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    26dc:	00c14184 	movi	r3,1286
    26e0:	00824034 	movhi	r2,2304
    26e4:	10800a04 	addi	r2,r2,40
    26e8:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    26ec:	00824034 	movhi	r2,2304
    26f0:	10800804 	addi	r2,r2,32
    26f4:	10800037 	ldwio	r2,0(r2)
    26f8:	01000074 	movhi	r4,1
    26fc:	210bc004 	addi	r4,r4,12032
    2700:	100b883a 	mov	r5,r2
    2704:	0003d5c0 	call	3d5c <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    2708:	00c14204 	movi	r3,1288
    270c:	00824034 	movhi	r2,2304
    2710:	10800a04 	addi	r2,r2,40
    2714:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    2718:	00824034 	movhi	r2,2304
    271c:	10800804 	addi	r2,r2,32
    2720:	10800037 	ldwio	r2,0(r2)
    2724:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    2728:	e0bff80b 	ldhu	r2,-32(fp)
    272c:	01000074 	movhi	r4,1
    2730:	210bcb04 	addi	r4,r4,12076
    2734:	100b883a 	mov	r5,r2
    2738:	0003d5c0 	call	3d5c <printf>
    while (usb_ctl_val != 0x03) 
    273c:	00001906 	br	27a4 <main+0x2548>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    2740:	00824034 	movhi	r2,2304
    2744:	10800b04 	addi	r2,r2,44
    2748:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    274c:	01005104 	movi	r4,324
    2750:	0003c340 	call	3c34 <UsbRead>
    2754:	10bfffcc 	andi	r2,r2,65535
    2758:	10840018 	cmpnei	r2,r2,4096
    275c:	1000091e 	bne	r2,zero,2784 <main+0x2528>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2760:	01005104 	movi	r4,324
    2764:	000b883a 	mov	r5,zero
    2768:	0003be80 	call	3be8 <UsbWrite>
           
        
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    276c:	0001883a 	nop
    2770:	00824034 	movhi	r2,2304
    2774:	10800b04 	addi	r2,r2,44
    2778:	10800037 	ldwio	r2,0(r2)
    277c:	1080040c 	andi	r2,r2,16
    2780:	103ffb26 	beq	r2,zero,2770 <__alt_mem_sram+0xf7e02770>
           {
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    2784:	00c14204 	movi	r3,1288
    2788:	00824034 	movhi	r2,2304
    278c:	10800a04 	addi	r2,r2,40
    2790:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    2794:	00824034 	movhi	r2,2304
    2798:	10800804 	addi	r2,r2,32
    279c:	10800037 	ldwio	r2,0(r2)
    27a0:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    27a4:	e0bff80b 	ldhu	r2,-32(fp)
    27a8:	108000d8 	cmpnei	r2,r2,3
    27ac:	103fe41e 	bne	r2,zero,2740 <__alt_mem_sram+0xf7e02740>
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
    
    
    printf("------------[ENUM PROCESS]:classe request out pass!-------------------\n");
    27b0:	01000074 	movhi	r4,1
    27b4:	210bd704 	addi	r4,r4,12124
    27b8:	0003e500 	call	3e50 <puts>
    
    //----------------------------------get descriptor(class 0x21) request out --------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    27bc:	00c14004 	movi	r3,1280
    27c0:	00824034 	movhi	r2,2304
    27c4:	10800a04 	addi	r2,r2,40
    27c8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    27cc:	00c14304 	movi	r3,1292
    27d0:	00824034 	movhi	r2,2304
    27d4:	10800804 	addi	r2,r2,32
    27d8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    27dc:	00c00204 	movi	r3,8
    27e0:	00824034 	movhi	r2,2304
    27e4:	10800804 	addi	r2,r2,32
    27e8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
    27ec:	00c0b404 	movi	r3,720
    27f0:	00824034 	movhi	r2,2304
    27f4:	10800804 	addi	r2,r2,32
    27f8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    27fc:	00c00044 	movi	r3,1
    2800:	00824034 	movhi	r2,2304
    2804:	10800804 	addi	r2,r2,32
    2808:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    280c:	00c004c4 	movi	r3,19
    2810:	00824034 	movhi	r2,2304
    2814:	10800804 	addi	r2,r2,32
    2818:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    281c:	00c14504 	movi	r3,1300
    2820:	00824034 	movhi	r2,2304
    2824:	10800804 	addi	r2,r2,32
    2828:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0681);//c
    282c:	00c1a044 	movi	r3,1665
    2830:	00824034 	movhi	r2,2304
    2834:	10800804 	addi	r2,r2,32
    2838:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x2100);//e //config 
    283c:	00c84004 	movi	r3,8448
    2840:	00824034 	movhi	r2,2304
    2844:	10800804 	addi	r2,r2,32
    2848:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    284c:	0007883a 	mov	r3,zero
    2850:	00824034 	movhi	r2,2304
    2854:	10800804 	addi	r2,r2,32
    2858:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x007B);//2
    285c:	00c01ec4 	movi	r3,123
    2860:	00824034 	movhi	r2,2304
    2864:	10800804 	addi	r2,r2,32
    2868:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
    286c:	00c15104 	movi	r3,1348
    2870:	00824034 	movhi	r2,2304
    2874:	10800804 	addi	r2,r2,32
    2878:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    287c:	00c00204 	movi	r3,8
    2880:	00824034 	movhi	r2,2304
    2884:	10800804 	addi	r2,r2,32
    2888:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    288c:	00c0a404 	movi	r3,656
    2890:	00824034 	movhi	r2,2304
    2894:	10800804 	addi	r2,r2,32
    2898:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    289c:	00c01044 	movi	r3,65
    28a0:	00824034 	movhi	r2,2304
    28a4:	10800804 	addi	r2,r2,32
    28a8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    28ac:	00c004c4 	movi	r3,19
    28b0:	00824034 	movhi	r2,2304
    28b4:	10800804 	addi	r2,r2,32
    28b8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    28bc:	00c14804 	movi	r3,1312
    28c0:	00824034 	movhi	r2,2304
    28c4:	10800804 	addi	r2,r2,32
    28c8:	10c00035 	stwio	r3,0(r2)
        
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //52c
    28cc:	0007883a 	mov	r3,zero
    28d0:	00824034 	movhi	r2,2304
    28d4:	10800804 	addi	r2,r2,32
    28d8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
    28dc:	0007883a 	mov	r3,zero
    28e0:	00824034 	movhi	r2,2304
    28e4:	10800804 	addi	r2,r2,32
    28e8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//530
    28ec:	00c08404 	movi	r3,528
    28f0:	00824034 	movhi	r2,2304
    28f4:	10800804 	addi	r2,r2,32
    28f8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    28fc:	00c01044 	movi	r3,65
    2900:	00824034 	movhi	r2,2304
    2904:	10800804 	addi	r2,r2,32
    2908:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    290c:	00c004c4 	movi	r3,19
    2910:	00824034 	movhi	r2,2304
    2914:	10800804 	addi	r2,r2,32
    2918:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
    291c:	0007883a 	mov	r3,zero
    2920:	00824034 	movhi	r2,2304
    2924:	10800804 	addi	r2,r2,32
    2928:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    292c:	01006c04 	movi	r4,432
    2930:	01414004 	movi	r5,1280
    2934:	0003be80 	call	3be8 <UsbWrite>
    //usleep(10*1000);
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2938:	00006106 	br	2ac0 <main+0x2864>
    {
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    293c:	00c14004 	movi	r3,1280
    2940:	00824034 	movhi	r2,2304
    2944:	10800a04 	addi	r2,r2,40
    2948:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    294c:	00c14304 	movi	r3,1292
    2950:	00824034 	movhi	r2,2304
    2954:	10800804 	addi	r2,r2,32
    2958:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    295c:	00c00204 	movi	r3,8
    2960:	00824034 	movhi	r2,2304
    2964:	10800804 	addi	r2,r2,32
    2968:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
    296c:	00c0b404 	movi	r3,720
    2970:	00824034 	movhi	r2,2304
    2974:	10800804 	addi	r2,r2,32
    2978:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    297c:	00c00044 	movi	r3,1
    2980:	00824034 	movhi	r2,2304
    2984:	10800804 	addi	r2,r2,32
    2988:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    298c:	00c004c4 	movi	r3,19
    2990:	00824034 	movhi	r2,2304
    2994:	10800804 	addi	r2,r2,32
    2998:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    299c:	00c14504 	movi	r3,1300
    29a0:	00824034 	movhi	r2,2304
    29a4:	10800804 	addi	r2,r2,32
    29a8:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0681);//c
    29ac:	00c1a044 	movi	r3,1665
    29b0:	00824034 	movhi	r2,2304
    29b4:	10800804 	addi	r2,r2,32
    29b8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x2100);//e //config 
    29bc:	00c84004 	movi	r3,8448
    29c0:	00824034 	movhi	r2,2304
    29c4:	10800804 	addi	r2,r2,32
    29c8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    29cc:	0007883a 	mov	r3,zero
    29d0:	00824034 	movhi	r2,2304
    29d4:	10800804 	addi	r2,r2,32
    29d8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x007B);//2
    29dc:	00c01ec4 	movi	r3,123
    29e0:	00824034 	movhi	r2,2304
    29e4:	10800804 	addi	r2,r2,32
    29e8:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
    29ec:	00c15104 	movi	r3,1348
    29f0:	00824034 	movhi	r2,2304
    29f4:	10800804 	addi	r2,r2,32
    29f8:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    29fc:	00c00204 	movi	r3,8
    2a00:	00824034 	movhi	r2,2304
    2a04:	10800804 	addi	r2,r2,32
    2a08:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    2a0c:	00c0a404 	movi	r3,656
    2a10:	00824034 	movhi	r2,2304
    2a14:	10800804 	addi	r2,r2,32
    2a18:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    2a1c:	00c01044 	movi	r3,65
    2a20:	00824034 	movhi	r2,2304
    2a24:	10800804 	addi	r2,r2,32
    2a28:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    2a2c:	00c004c4 	movi	r3,19
    2a30:	00824034 	movhi	r2,2304
    2a34:	10800804 	addi	r2,r2,32
    2a38:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    2a3c:	00c14804 	movi	r3,1312
    2a40:	00824034 	movhi	r2,2304
    2a44:	10800804 	addi	r2,r2,32
    2a48:	10c00035 	stwio	r3,0(r2)
        
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //52c
    2a4c:	0007883a 	mov	r3,zero
    2a50:	00824034 	movhi	r2,2304
    2a54:	10800804 	addi	r2,r2,32
    2a58:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
    2a5c:	0007883a 	mov	r3,zero
    2a60:	00824034 	movhi	r2,2304
    2a64:	10800804 	addi	r2,r2,32
    2a68:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//530
    2a6c:	00c08404 	movi	r3,528
    2a70:	00824034 	movhi	r2,2304
    2a74:	10800804 	addi	r2,r2,32
    2a78:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    2a7c:	00c01044 	movi	r3,65
    2a80:	00824034 	movhi	r2,2304
    2a84:	10800804 	addi	r2,r2,32
    2a88:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    2a8c:	00c004c4 	movi	r3,19
    2a90:	00824034 	movhi	r2,2304
    2a94:	10800804 	addi	r2,r2,32
    2a98:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
    2a9c:	0007883a 	mov	r3,zero
    2aa0:	00824034 	movhi	r2,2304
    2aa4:	10800804 	addi	r2,r2,32
    2aa8:	10c00035 	stwio	r3,0(r2)
        
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    2aac:	01006c04 	movi	r4,432
    2ab0:	01414004 	movi	r5,1280
    2ab4:	0003be80 	call	3be8 <UsbWrite>
    usleep(10*1000);
    2ab8:	0109c404 	movi	r4,10000
    2abc:	00108ec0 	call	108ec <usleep>
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    //usleep(10*1000);
   
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2ac0:	00824034 	movhi	r2,2304
    2ac4:	10800b04 	addi	r2,r2,44
    2ac8:	10800037 	ldwio	r2,0(r2)
    2acc:	1080040c 	andi	r2,r2,16
    2ad0:	103f9a26 	beq	r2,zero,293c <__alt_mem_sram+0xf7e0293c>
        
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2ad4:	01005104 	movi	r4,324
    2ad8:	0003c340 	call	3c34 <UsbRead>
    2adc:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2ae0:	01005104 	movi	r4,324
    2ae4:	000b883a 	mov	r5,zero
    2ae8:	0003be80 	call	3be8 <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    2aec:	00000d06 	br	2b24 <main+0x28c8>
    {
       if(usb_ctl_val == 0x000)
    2af0:	e0bff80b 	ldhu	r2,-32(fp)
    2af4:	10000526 	beq	r2,zero,2b0c <main+0x28b0>
       {
       }
       else
       {
        printf("[SIE MSG]:SIE 1 msg reg is %x\n",usb_ctl_val);
    2af8:	e0bff80b 	ldhu	r2,-32(fp)
    2afc:	01000074 	movhi	r4,1
    2b00:	210be904 	addi	r4,r4,12196
    2b04:	100b883a 	mov	r5,r2
    2b08:	0003d5c0 	call	3d5c <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    2b0c:	01005104 	movi	r4,324
    2b10:	0003c340 	call	3c34 <UsbRead>
    2b14:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2b18:	01005104 	movi	r4,324
    2b1c:	000b883a 	mov	r5,zero
    2b20:	0003be80 	call	3be8 <UsbWrite>
    usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    2b24:	e0bff80b 	ldhu	r2,-32(fp)
    2b28:	10840018 	cmpnei	r2,r2,4096
    2b2c:	103ff01e 	bne	r2,zero,2af0 <__alt_mem_sram+0xf7e02af0>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    2b30:	00c14184 	movi	r3,1286
    2b34:	00824034 	movhi	r2,2304
    2b38:	10800a04 	addi	r2,r2,40
    2b3c:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    2b40:	00824034 	movhi	r2,2304
    2b44:	10800804 	addi	r2,r2,32
    2b48:	10800037 	ldwio	r2,0(r2)
    2b4c:	01000074 	movhi	r4,1
    2b50:	210bc004 	addi	r4,r4,12032
    2b54:	100b883a 	mov	r5,r2
    2b58:	0003d5c0 	call	3d5c <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    2b5c:	00c14204 	movi	r3,1288
    2b60:	00824034 	movhi	r2,2304
    2b64:	10800a04 	addi	r2,r2,40
    2b68:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    2b6c:	00824034 	movhi	r2,2304
    2b70:	10800804 	addi	r2,r2,32
    2b74:	10800037 	ldwio	r2,0(r2)
    2b78:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    2b7c:	e0bff80b 	ldhu	r2,-32(fp)
    2b80:	01000074 	movhi	r4,1
    2b84:	210bcb04 	addi	r4,r4,12076
    2b88:	100b883a 	mov	r5,r2
    2b8c:	0003d5c0 	call	3d5c <printf>
    while (usb_ctl_val != 0x03) 
    2b90:	00001906 	br	2bf8 <main+0x299c>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    2b94:	00824034 	movhi	r2,2304
    2b98:	10800b04 	addi	r2,r2,44
    2b9c:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    2ba0:	01005104 	movi	r4,324
    2ba4:	0003c340 	call	3c34 <UsbRead>
    2ba8:	10bfffcc 	andi	r2,r2,65535
    2bac:	10840018 	cmpnei	r2,r2,4096
    2bb0:	1000091e 	bne	r2,zero,2bd8 <main+0x297c>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    2bb4:	01005104 	movi	r4,324
    2bb8:	000b883a 	mov	r5,zero
    2bbc:	0003be80 	call	3be8 <UsbWrite>
           
        
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    2bc0:	0001883a 	nop
    2bc4:	00824034 	movhi	r2,2304
    2bc8:	10800b04 	addi	r2,r2,44
    2bcc:	10800037 	ldwio	r2,0(r2)
    2bd0:	1080040c 	andi	r2,r2,16
    2bd4:	103ffb26 	beq	r2,zero,2bc4 <__alt_mem_sram+0xf7e02bc4>
           {
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    2bd8:	00c14204 	movi	r3,1288
    2bdc:	00824034 	movhi	r2,2304
    2be0:	10800a04 	addi	r2,r2,40
    2be4:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    2be8:	00824034 	movhi	r2,2304
    2bec:	10800804 	addi	r2,r2,32
    2bf0:	10800037 	ldwio	r2,0(r2)
    2bf4:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    2bf8:	e0bff80b 	ldhu	r2,-32(fp)
    2bfc:	108000d8 	cmpnei	r2,r2,3
    2c00:	103fe41e 	bne	r2,zero,2b94 <__alt_mem_sram+0xf7e02b94>
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
    
    
    
    printf("------------[ENUM PROCESS]:get descriptor (class 0x21) pass!-------------------\n");
    2c04:	01000074 	movhi	r4,1
    2c08:	210bf104 	addi	r4,r4,12228
    2c0c:	0003e500 	call	3e50 <puts>
    
    //-------------------------------get descriptor (class 0x22)-------------------------------------------//
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    2c10:	00c14004 	movi	r3,1280
    2c14:	00824034 	movhi	r2,2304
    2c18:	10800a04 	addi	r2,r2,40
    2c1c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    2c20:	00c14304 	movi	r3,1292
    2c24:	00824034 	movhi	r2,2304
    2c28:	10800804 	addi	r2,r2,32
    2c2c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    2c30:	00c00204 	movi	r3,8
    2c34:	00824034 	movhi	r2,2304
    2c38:	10800804 	addi	r2,r2,32
    2c3c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    2c40:	00c0b404 	movi	r3,720
    2c44:	00824034 	movhi	r2,2304
    2c48:	10800804 	addi	r2,r2,32
    2c4c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    2c50:	00c00044 	movi	r3,1
    2c54:	00824034 	movhi	r2,2304
    2c58:	10800804 	addi	r2,r2,32
    2c5c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    2c60:	00c004c4 	movi	r3,19
    2c64:	00824034 	movhi	r2,2304
    2c68:	10800804 	addi	r2,r2,32
    2c6c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    2c70:	00c14504 	movi	r3,1300
    2c74:	00824034 	movhi	r2,2304
    2c78:	10800804 	addi	r2,r2,32
    2c7c:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0681);//c
    2c80:	00c1a044 	movi	r3,1665
    2c84:	00824034 	movhi	r2,2304
    2c88:	10800804 	addi	r2,r2,32
    2c8c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x2200);//e //config 
    2c90:	00c88004 	movi	r3,8704
    2c94:	00824034 	movhi	r2,2304
    2c98:	10800804 	addi	r2,r2,32
    2c9c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    2ca0:	0007883a 	mov	r3,zero
    2ca4:	00824034 	movhi	r2,2304
    2ca8:	10800804 	addi	r2,r2,32
    2cac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x007B);//2
    2cb0:	00c01ec4 	movi	r3,123
    2cb4:	00824034 	movhi	r2,2304
    2cb8:	10800804 	addi	r2,r2,32
    2cbc:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0580); //514
    2cc0:	00c16004 	movi	r3,1408
    2cc4:	00824034 	movhi	r2,2304
    2cc8:	10800804 	addi	r2,r2,32
    2ccc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    2cd0:	00c00204 	movi	r3,8
    2cd4:	00824034 	movhi	r2,2304
    2cd8:	10800804 	addi	r2,r2,32
    2cdc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    2ce0:	00c0a404 	movi	r3,656
    2ce4:	00824034 	movhi	r2,2304
    2ce8:	10800804 	addi	r2,r2,32
    2cec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    2cf0:	00c01044 	movi	r3,65
    2cf4:	00824034 	movhi	r2,2304
    2cf8:	10800804 	addi	r2,r2,32
    2cfc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    2d00:	00c004c4 	movi	r3,19
    2d04:	00824034 	movhi	r2,2304
    2d08:	10800804 	addi	r2,r2,32
    2d0c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    2d10:	00c14804 	movi	r3,1312
    2d14:	00824034 	movhi	r2,2304
    2d18:	10800804 	addi	r2,r2,32
    2d1c:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x0588); //520
    2d20:	00c16204 	movi	r3,1416
    2d24:	00824034 	movhi	r2,2304
    2d28:	10800804 	addi	r2,r2,32
    2d2c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    2d30:	00c00204 	movi	r3,8
    2d34:	00824034 	movhi	r2,2304
    2d38:	10800804 	addi	r2,r2,32
    2d3c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    2d40:	00c0a404 	movi	r3,656
    2d44:	00824034 	movhi	r2,2304
    2d48:	10800804 	addi	r2,r2,32
    2d4c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    2d50:	00c00044 	movi	r3,1
    2d54:	00824034 	movhi	r2,2304
    2d58:	10800804 	addi	r2,r2,32
    2d5c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    2d60:	00c004c4 	movi	r3,19
    2d64:	00824034 	movhi	r2,2304
    2d68:	10800804 	addi	r2,r2,32
    2d6c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    2d70:	00c14b04 	movi	r3,1324
    2d74:	00824034 	movhi	r2,2304
    2d78:	10800804 	addi	r2,r2,32
    2d7c:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-3
    IOWR(CY7C67200_BASE,HPI_DATA,0x0590); //52c
    2d80:	00c16404 	movi	r3,1424
    2d84:	00824034 	movhi	r2,2304
    2d88:	10800804 	addi	r2,r2,32
    2d8c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
    2d90:	00c00204 	movi	r3,8
    2d94:	00824034 	movhi	r2,2304
    2d98:	10800804 	addi	r2,r2,32
    2d9c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
    2da0:	00c0a404 	movi	r3,656
    2da4:	00824034 	movhi	r2,2304
    2da8:	10800804 	addi	r2,r2,32
    2dac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    2db0:	00c01044 	movi	r3,65
    2db4:	00824034 	movhi	r2,2304
    2db8:	10800804 	addi	r2,r2,32
    2dbc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    2dc0:	00c004c4 	movi	r3,19
    2dc4:	00824034 	movhi	r2,2304
    2dc8:	10800804 	addi	r2,r2,32
    2dcc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
    2dd0:	00c14e04 	movi	r3,1336
    2dd4:	00824034 	movhi	r2,2304
    2dd8:	10800804 	addi	r2,r2,32
    2ddc:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-4
    IOWR(CY7C67200_BASE,HPI_DATA,0x0598); //538
    2de0:	00c16604 	movi	r3,1432
    2de4:	00824034 	movhi	r2,2304
    2de8:	10800804 	addi	r2,r2,32
    2dec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//a
    2df0:	00c00204 	movi	r3,8
    2df4:	00824034 	movhi	r2,2304
    2df8:	10800804 	addi	r2,r2,32
    2dfc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
    2e00:	00c0a404 	movi	r3,656
    2e04:	00824034 	movhi	r2,2304
    2e08:	10800804 	addi	r2,r2,32
    2e0c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
    2e10:	00c00044 	movi	r3,1
    2e14:	00824034 	movhi	r2,2304
    2e18:	10800804 	addi	r2,r2,32
    2e1c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
    2e20:	00c004c4 	movi	r3,19
    2e24:	00824034 	movhi	r2,2304
    2e28:	10800804 	addi	r2,r2,32
    2e2c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544);//2
    2e30:	00c15104 	movi	r3,1348
    2e34:	00824034 	movhi	r2,2304
    2e38:	10800804 	addi	r2,r2,32
    2e3c:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-5
    IOWR(CY7C67200_BASE,HPI_DATA,0x05a0); //544
    2e40:	00c16804 	movi	r3,1440
    2e44:	00824034 	movhi	r2,2304
    2e48:	10800804 	addi	r2,r2,32
    2e4c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    2e50:	00c00204 	movi	r3,8
    2e54:	00824034 	movhi	r2,2304
    2e58:	10800804 	addi	r2,r2,32
    2e5c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    2e60:	00c0a404 	movi	r3,656
    2e64:	00824034 	movhi	r2,2304
    2e68:	10800804 	addi	r2,r2,32
    2e6c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a //data1
    2e70:	00c01044 	movi	r3,65
    2e74:	00824034 	movhi	r2,2304
    2e78:	10800804 	addi	r2,r2,32
    2e7c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    2e80:	00c004c4 	movi	r3,19
    2e84:	00824034 	movhi	r2,2304
    2e88:	10800804 	addi	r2,r2,32
    2e8c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0550);//e
    2e90:	00c15404 	movi	r3,1360
    2e94:	00824034 	movhi	r2,2304
    2e98:	10800804 	addi	r2,r2,32
    2e9c:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-6
    IOWR(CY7C67200_BASE,HPI_DATA,0x05a8); //550
    2ea0:	00c16a04 	movi	r3,1448
    2ea4:	00824034 	movhi	r2,2304
    2ea8:	10800804 	addi	r2,r2,32
    2eac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    2eb0:	00c00204 	movi	r3,8
    2eb4:	00824034 	movhi	r2,2304
    2eb8:	10800804 	addi	r2,r2,32
    2ebc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    2ec0:	00c0a404 	movi	r3,656
    2ec4:	00824034 	movhi	r2,2304
    2ec8:	10800804 	addi	r2,r2,32
    2ecc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    2ed0:	00c00044 	movi	r3,1
    2ed4:	00824034 	movhi	r2,2304
    2ed8:	10800804 	addi	r2,r2,32
    2edc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    2ee0:	00c004c4 	movi	r3,19
    2ee4:	00824034 	movhi	r2,2304
    2ee8:	10800804 	addi	r2,r2,32
    2eec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x055c);//a
    2ef0:	00c15704 	movi	r3,1372
    2ef4:	00824034 	movhi	r2,2304
    2ef8:	10800804 	addi	r2,r2,32
    2efc:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-7
    IOWR(CY7C67200_BASE,HPI_DATA,0x05b0); //c
    2f00:	00c16c04 	movi	r3,1456
    2f04:	00824034 	movhi	r2,2304
    2f08:	10800804 	addi	r2,r2,32
    2f0c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
    2f10:	00c00204 	movi	r3,8
    2f14:	00824034 	movhi	r2,2304
    2f18:	10800804 	addi	r2,r2,32
    2f1c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//560
    2f20:	00c0a404 	movi	r3,656
    2f24:	00824034 	movhi	r2,2304
    2f28:	10800804 	addi	r2,r2,32
    2f2c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2 //data1
    2f30:	00c01044 	movi	r3,65
    2f34:	00824034 	movhi	r2,2304
    2f38:	10800804 	addi	r2,r2,32
    2f3c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    2f40:	00c004c4 	movi	r3,19
    2f44:	00824034 	movhi	r2,2304
    2f48:	10800804 	addi	r2,r2,32
    2f4c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0568);//6
    2f50:	00c15a04 	movi	r3,1384
    2f54:	00824034 	movhi	r2,2304
    2f58:	10800804 	addi	r2,r2,32
    2f5c:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-8
    IOWR(CY7C67200_BASE,HPI_DATA,0x05b8); //8
    2f60:	00c16e04 	movi	r3,1464
    2f64:	00824034 	movhi	r2,2304
    2f68:	10800804 	addi	r2,r2,32
    2f6c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0003);//a
    2f70:	00c000c4 	movi	r3,3
    2f74:	00824034 	movhi	r2,2304
    2f78:	10800804 	addi	r2,r2,32
    2f7c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
    2f80:	00c0a404 	movi	r3,656
    2f84:	00824034 	movhi	r2,2304
    2f88:	10800804 	addi	r2,r2,32
    2f8c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
    2f90:	00c00044 	movi	r3,1
    2f94:	00824034 	movhi	r2,2304
    2f98:	10800804 	addi	r2,r2,32
    2f9c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//570
    2fa0:	00c004c4 	movi	r3,19
    2fa4:	00824034 	movhi	r2,2304
    2fa8:	10800804 	addi	r2,r2,32
    2fac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0574);//2
    2fb0:	00c15d04 	movi	r3,1396
    2fb4:	00824034 	movhi	r2,2304
    2fb8:	10800804 	addi	r2,r2,32
    2fbc:	10c00035 	stwio	r3,0(r2)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //574
    2fc0:	0007883a 	mov	r3,zero
    2fc4:	00824034 	movhi	r2,2304
    2fc8:	10800804 	addi	r2,r2,32
    2fcc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
    2fd0:	0007883a 	mov	r3,zero
    2fd4:	00824034 	movhi	r2,2304
    2fd8:	10800804 	addi	r2,r2,32
    2fdc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//8
    2fe0:	00c08404 	movi	r3,528
    2fe4:	00824034 	movhi	r2,2304
    2fe8:	10800804 	addi	r2,r2,32
    2fec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    2ff0:	00c01044 	movi	r3,65
    2ff4:	00824034 	movhi	r2,2304
    2ff8:	10800804 	addi	r2,r2,32
    2ffc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    3000:	00c004c4 	movi	r3,19
    3004:	00824034 	movhi	r2,2304
    3008:	10800804 	addi	r2,r2,32
    300c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
    3010:	0007883a 	mov	r3,zero
    3014:	00824034 	movhi	r2,2304
    3018:	10800804 	addi	r2,r2,32
    301c:	10c00035 	stwio	r3,0(r2)
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    3020:	01006c04 	movi	r4,432
    3024:	01414004 	movi	r5,1280
    3028:	0003be80 	call	3be8 <UsbWrite>
    
   //usleep(100*1000);
   //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    302c:	00010906 	br	3454 <main+0x31f8>
    {
    //the starting address
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    3030:	00c14004 	movi	r3,1280
    3034:	00824034 	movhi	r2,2304
    3038:	10800a04 	addi	r2,r2,40
    303c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x050C); 
    3040:	00c14304 	movi	r3,1292
    3044:	00824034 	movhi	r2,2304
    3048:	10800804 	addi	r2,r2,32
    304c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
    3050:	00c00204 	movi	r3,8
    3054:	00824034 	movhi	r2,2304
    3058:	10800804 	addi	r2,r2,32
    305c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
    3060:	00c0b404 	movi	r3,720
    3064:	00824034 	movhi	r2,2304
    3068:	10800804 	addi	r2,r2,32
    306c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
    3070:	00c00044 	movi	r3,1
    3074:	00824034 	movhi	r2,2304
    3078:	10800804 	addi	r2,r2,32
    307c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
    3080:	00c004c4 	movi	r3,19
    3084:	00824034 	movhi	r2,2304
    3088:	10800804 	addi	r2,r2,32
    308c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
    3090:	00c14504 	movi	r3,1300
    3094:	00824034 	movhi	r2,2304
    3098:	10800804 	addi	r2,r2,32
    309c:	10c00035 	stwio	r3,0(r2)
    
    //td content 4 bytes
    IOWR(CY7C67200_BASE,HPI_DATA,0x0681);//c
    30a0:	00c1a044 	movi	r3,1665
    30a4:	00824034 	movhi	r2,2304
    30a8:	10800804 	addi	r2,r2,32
    30ac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x2200);//e //config 
    30b0:	00c88004 	movi	r3,8704
    30b4:	00824034 	movhi	r2,2304
    30b8:	10800804 	addi	r2,r2,32
    30bc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
    30c0:	0007883a 	mov	r3,zero
    30c4:	00824034 	movhi	r2,2304
    30c8:	10800804 	addi	r2,r2,32
    30cc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x007B);//2
    30d0:	00c01ec4 	movi	r3,123
    30d4:	00824034 	movhi	r2,2304
    30d8:	10800804 	addi	r2,r2,32
    30dc:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-1
    IOWR(CY7C67200_BASE,HPI_DATA,0x0580); //514
    30e0:	00c16004 	movi	r3,1408
    30e4:	00824034 	movhi	r2,2304
    30e8:	10800804 	addi	r2,r2,32
    30ec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    30f0:	00c00204 	movi	r3,8
    30f4:	00824034 	movhi	r2,2304
    30f8:	10800804 	addi	r2,r2,32
    30fc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    3100:	00c0a404 	movi	r3,656
    3104:	00824034 	movhi	r2,2304
    3108:	10800804 	addi	r2,r2,32
    310c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    3110:	00c01044 	movi	r3,65
    3114:	00824034 	movhi	r2,2304
    3118:	10800804 	addi	r2,r2,32
    311c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    3120:	00c004c4 	movi	r3,19
    3124:	00824034 	movhi	r2,2304
    3128:	10800804 	addi	r2,r2,32
    312c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
    3130:	00c14804 	movi	r3,1312
    3134:	00824034 	movhi	r2,2304
    3138:	10800804 	addi	r2,r2,32
    313c:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-2
    IOWR(CY7C67200_BASE,HPI_DATA,0x0588); //520
    3140:	00c16204 	movi	r3,1416
    3144:	00824034 	movhi	r2,2304
    3148:	10800804 	addi	r2,r2,32
    314c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    3150:	00c00204 	movi	r3,8
    3154:	00824034 	movhi	r2,2304
    3158:	10800804 	addi	r2,r2,32
    315c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    3160:	00c0a404 	movi	r3,656
    3164:	00824034 	movhi	r2,2304
    3168:	10800804 	addi	r2,r2,32
    316c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    3170:	00c00044 	movi	r3,1
    3174:	00824034 	movhi	r2,2304
    3178:	10800804 	addi	r2,r2,32
    317c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    3180:	00c004c4 	movi	r3,19
    3184:	00824034 	movhi	r2,2304
    3188:	10800804 	addi	r2,r2,32
    318c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
    3190:	00c14b04 	movi	r3,1324
    3194:	00824034 	movhi	r2,2304
    3198:	10800804 	addi	r2,r2,32
    319c:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-3
    IOWR(CY7C67200_BASE,HPI_DATA,0x0590); //52c
    31a0:	00c16404 	movi	r3,1424
    31a4:	00824034 	movhi	r2,2304
    31a8:	10800804 	addi	r2,r2,32
    31ac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
    31b0:	00c00204 	movi	r3,8
    31b4:	00824034 	movhi	r2,2304
    31b8:	10800804 	addi	r2,r2,32
    31bc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
    31c0:	00c0a404 	movi	r3,656
    31c4:	00824034 	movhi	r2,2304
    31c8:	10800804 	addi	r2,r2,32
    31cc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
    31d0:	00c01044 	movi	r3,65
    31d4:	00824034 	movhi	r2,2304
    31d8:	10800804 	addi	r2,r2,32
    31dc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    31e0:	00c004c4 	movi	r3,19
    31e4:	00824034 	movhi	r2,2304
    31e8:	10800804 	addi	r2,r2,32
    31ec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
    31f0:	00c14e04 	movi	r3,1336
    31f4:	00824034 	movhi	r2,2304
    31f8:	10800804 	addi	r2,r2,32
    31fc:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-4
    IOWR(CY7C67200_BASE,HPI_DATA,0x0598); //538
    3200:	00c16604 	movi	r3,1432
    3204:	00824034 	movhi	r2,2304
    3208:	10800804 	addi	r2,r2,32
    320c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//a
    3210:	00c00204 	movi	r3,8
    3214:	00824034 	movhi	r2,2304
    3218:	10800804 	addi	r2,r2,32
    321c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
    3220:	00c0a404 	movi	r3,656
    3224:	00824034 	movhi	r2,2304
    3228:	10800804 	addi	r2,r2,32
    322c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
    3230:	00c00044 	movi	r3,1
    3234:	00824034 	movhi	r2,2304
    3238:	10800804 	addi	r2,r2,32
    323c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
    3240:	00c004c4 	movi	r3,19
    3244:	00824034 	movhi	r2,2304
    3248:	10800804 	addi	r2,r2,32
    324c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0544);//2
    3250:	00c15104 	movi	r3,1348
    3254:	00824034 	movhi	r2,2304
    3258:	10800804 	addi	r2,r2,32
    325c:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-5
    IOWR(CY7C67200_BASE,HPI_DATA,0x05a0); //544
    3260:	00c16804 	movi	r3,1440
    3264:	00824034 	movhi	r2,2304
    3268:	10800804 	addi	r2,r2,32
    326c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
    3270:	00c00204 	movi	r3,8
    3274:	00824034 	movhi	r2,2304
    3278:	10800804 	addi	r2,r2,32
    327c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
    3280:	00c0a404 	movi	r3,656
    3284:	00824034 	movhi	r2,2304
    3288:	10800804 	addi	r2,r2,32
    328c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a //data1
    3290:	00c01044 	movi	r3,65
    3294:	00824034 	movhi	r2,2304
    3298:	10800804 	addi	r2,r2,32
    329c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    32a0:	00c004c4 	movi	r3,19
    32a4:	00824034 	movhi	r2,2304
    32a8:	10800804 	addi	r2,r2,32
    32ac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0550);//e
    32b0:	00c15404 	movi	r3,1360
    32b4:	00824034 	movhi	r2,2304
    32b8:	10800804 	addi	r2,r2,32
    32bc:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-6
    IOWR(CY7C67200_BASE,HPI_DATA,0x05a8); //550
    32c0:	00c16a04 	movi	r3,1448
    32c4:	00824034 	movhi	r2,2304
    32c8:	10800804 	addi	r2,r2,32
    32cc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
    32d0:	00c00204 	movi	r3,8
    32d4:	00824034 	movhi	r2,2304
    32d8:	10800804 	addi	r2,r2,32
    32dc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
    32e0:	00c0a404 	movi	r3,656
    32e4:	00824034 	movhi	r2,2304
    32e8:	10800804 	addi	r2,r2,32
    32ec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
    32f0:	00c00044 	movi	r3,1
    32f4:	00824034 	movhi	r2,2304
    32f8:	10800804 	addi	r2,r2,32
    32fc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    3300:	00c004c4 	movi	r3,19
    3304:	00824034 	movhi	r2,2304
    3308:	10800804 	addi	r2,r2,32
    330c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x055c);//a
    3310:	00c15704 	movi	r3,1372
    3314:	00824034 	movhi	r2,2304
    3318:	10800804 	addi	r2,r2,32
    331c:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-7
    IOWR(CY7C67200_BASE,HPI_DATA,0x05b0); //c
    3320:	00c16c04 	movi	r3,1456
    3324:	00824034 	movhi	r2,2304
    3328:	10800804 	addi	r2,r2,32
    332c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
    3330:	00c00204 	movi	r3,8
    3334:	00824034 	movhi	r2,2304
    3338:	10800804 	addi	r2,r2,32
    333c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//560
    3340:	00c0a404 	movi	r3,656
    3344:	00824034 	movhi	r2,2304
    3348:	10800804 	addi	r2,r2,32
    334c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2 //data1
    3350:	00c01044 	movi	r3,65
    3354:	00824034 	movhi	r2,2304
    3358:	10800804 	addi	r2,r2,32
    335c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
    3360:	00c004c4 	movi	r3,19
    3364:	00824034 	movhi	r2,2304
    3368:	10800804 	addi	r2,r2,32
    336c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0568);//6
    3370:	00c15a04 	movi	r3,1384
    3374:	00824034 	movhi	r2,2304
    3378:	10800804 	addi	r2,r2,32
    337c:	10c00035 	stwio	r3,0(r2)
    
    //data phase IN-8
    IOWR(CY7C67200_BASE,HPI_DATA,0x05b8); //8
    3380:	00c16e04 	movi	r3,1464
    3384:	00824034 	movhi	r2,2304
    3388:	10800804 	addi	r2,r2,32
    338c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0003);//a
    3390:	00c000c4 	movi	r3,3
    3394:	00824034 	movhi	r2,2304
    3398:	10800804 	addi	r2,r2,32
    339c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
    33a0:	00c0a404 	movi	r3,656
    33a4:	00824034 	movhi	r2,2304
    33a8:	10800804 	addi	r2,r2,32
    33ac:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data1
    33b0:	00c00044 	movi	r3,1
    33b4:	00824034 	movhi	r2,2304
    33b8:	10800804 	addi	r2,r2,32
    33bc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//570
    33c0:	00c004c4 	movi	r3,19
    33c4:	00824034 	movhi	r2,2304
    33c8:	10800804 	addi	r2,r2,32
    33cc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0574);//2
    33d0:	00c15d04 	movi	r3,1396
    33d4:	00824034 	movhi	r2,2304
    33d8:	10800804 	addi	r2,r2,32
    33dc:	10c00035 	stwio	r3,0(r2)
    
    //status phase
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //574
    33e0:	0007883a 	mov	r3,zero
    33e4:	00824034 	movhi	r2,2304
    33e8:	10800804 	addi	r2,r2,32
    33ec:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
    33f0:	0007883a 	mov	r3,zero
    33f4:	00824034 	movhi	r2,2304
    33f8:	10800804 	addi	r2,r2,32
    33fc:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//8
    3400:	00c08404 	movi	r3,528
    3404:	00824034 	movhi	r2,2304
    3408:	10800804 	addi	r2,r2,32
    340c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
    3410:	00c01044 	movi	r3,65
    3414:	00824034 	movhi	r2,2304
    3418:	10800804 	addi	r2,r2,32
    341c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
    3420:	00c004c4 	movi	r3,19
    3424:	00824034 	movhi	r2,2304
    3428:	10800804 	addi	r2,r2,32
    342c:	10c00035 	stwio	r3,0(r2)
    IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
    3430:	0007883a 	mov	r3,zero
    3434:	00824034 	movhi	r2,2304
    3438:	10800804 	addi	r2,r2,32
    343c:	10c00035 	stwio	r3,0(r2)
          
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    3440:	01006c04 	movi	r4,432
    3444:	01414004 	movi	r5,1280
    3448:	0003be80 	call	3be8 <UsbWrite>
    usleep(10*1000);
    344c:	0109c404 	movi	r4,10000
    3450:	00108ec0 	call	108ec <usleep>
     
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    
   //usleep(100*1000);
   //if no message
    while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    3454:	00824034 	movhi	r2,2304
    3458:	10800b04 	addi	r2,r2,44
    345c:	10800037 	ldwio	r2,0(r2)
    3460:	1080040c 	andi	r2,r2,16
    3464:	103ef226 	beq	r2,zero,3030 <__alt_mem_sram+0xf7e03030>
          
    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    3468:	01005104 	movi	r4,324
    346c:	0003c340 	call	3c34 <UsbRead>
    3470:	e0bff80d 	sth	r2,-32(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    3474:	01005104 	movi	r4,324
    3478:	000b883a 	mov	r5,zero
    347c:	0003be80 	call	3be8 <UsbWrite>
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    3480:	00000d06 	br	34b8 <main+0x325c>
    {
       if(usb_ctl_val == 0x000)
    3484:	e0bff80b 	ldhu	r2,-32(fp)
    3488:	10000526 	beq	r2,zero,34a0 <main+0x3244>
       {
       }
       else
       {
        printf("[SIE1 MSG]: SIE 1 msg reg is %x\n",usb_ctl_val);
    348c:	e0bff80b 	ldhu	r2,-32(fp)
    3490:	01000074 	movhi	r4,1
    3494:	210c0504 	addi	r4,r4,12308
    3498:	100b883a 	mov	r5,r2
    349c:	0003d5c0 	call	3d5c <printf>
       }
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    34a0:	01005104 	movi	r4,324
    34a4:	0003c340 	call	3c34 <UsbRead>
    34a8:	e0bff80d 	sth	r2,-32(fp)
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
    34ac:	01005104 	movi	r4,324
    34b0:	000b883a 	mov	r5,zero
    34b4:	0003be80 	call	3be8 <UsbWrite>
    usleep(10*1000);
    }
    
    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != 0x1000)  //read sie1 msg register
    34b8:	e0bff80b 	ldhu	r2,-32(fp)
    34bc:	10840018 	cmpnei	r2,r2,4096
    34c0:	103ff01e 	bne	r2,zero,3484 <__alt_mem_sram+0xf7e03484>
       usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
       UsbWrite(HPI_SIE1_MSG_ADR, 0);
      
    }

    IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
    34c4:	00c14184 	movi	r3,1286
    34c8:	00824034 	movhi	r2,2304
    34cc:	10800a04 	addi	r2,r2,40
    34d0:	10c00035 	stwio	r3,0(r2)
    printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    34d4:	00824034 	movhi	r2,2304
    34d8:	10800804 	addi	r2,r2,32
    34dc:	10800037 	ldwio	r2,0(r2)
    34e0:	01000074 	movhi	r4,1
    34e4:	210c0e04 	addi	r4,r4,12344
    34e8:	100b883a 	mov	r5,r2
    34ec:	0003d5c0 	call	3d5c <printf>
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    34f0:	00c14204 	movi	r3,1288
    34f4:	00824034 	movhi	r2,2304
    34f8:	10800a04 	addi	r2,r2,40
    34fc:	10c00035 	stwio	r3,0(r2)
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    3500:	00824034 	movhi	r2,2304
    3504:	10800804 	addi	r2,r2,32
    3508:	10800037 	ldwio	r2,0(r2)
    350c:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    3510:	e0bff80b 	ldhu	r2,-32(fp)
    3514:	01000074 	movhi	r4,1
    3518:	210c1a04 	addi	r4,r4,12392
    351c:	100b883a 	mov	r5,r2
    3520:	0003d5c0 	call	3d5c <printf>
    while (usb_ctl_val != 0x03) 
    3524:	00001906 	br	358c <main+0x3330>
    {
       IORD(CY7C67200_BASE,HPI_STATUS);
    3528:	00824034 	movhi	r2,2304
    352c:	10800b04 	addi	r2,r2,44
    3530:	10800037 	ldwio	r2,0(r2)
       if(UsbRead(HPI_SIE1_MSG_ADR) == 0x1000)
    3534:	01005104 	movi	r4,324
    3538:	0003c340 	call	3c34 <UsbRead>
    353c:	10bfffcc 	andi	r2,r2,65535
    3540:	10840018 	cmpnei	r2,r2,4096
    3544:	1000091e 	bne	r2,zero,356c <main+0x3310>
       {
           UsbWrite(HPI_SIE1_MSG_ADR, 0);
    3548:	01005104 	movi	r4,324
    354c:	000b883a 	mov	r5,zero
    3550:	0003be80 	call	3be8 <UsbWrite>
                   
           while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    3554:	0001883a 	nop
    3558:	00824034 	movhi	r2,2304
    355c:	10800b04 	addi	r2,r2,44
    3560:	10800037 	ldwio	r2,0(r2)
    3564:	1080040c 	andi	r2,r2,16
    3568:	103ffb26 	beq	r2,zero,3558 <__alt_mem_sram+0xf7e03558>
           {
            
           }
        }
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    356c:	00c14204 	movi	r3,1288
    3570:	00824034 	movhi	r2,2304
    3574:	10800a04 	addi	r2,r2,40
    3578:	10c00035 	stwio	r3,0(r2)
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    357c:	00824034 	movhi	r2,2304
    3580:	10800804 	addi	r2,r2,32
    3584:	10800037 	ldwio	r2,0(r2)
    3588:	e0bff80d 	sth	r2,-32(fp)
    printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
    
    IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
    while (usb_ctl_val != 0x03) 
    358c:	e0bff80b 	ldhu	r2,-32(fp)
    3590:	108000d8 	cmpnei	r2,r2,3
    3594:	103fe41e 	bne	r2,zero,3528 <__alt_mem_sram+0xf7e03528>
           //usleep(1000);
           IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
           usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA); 
    }    
       
    printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) pass!----------------\n");
    3598:	01000074 	movhi	r4,1
    359c:	210c2604 	addi	r4,r4,12440
    35a0:	0003e500 	call	3e50 <puts>
    

    
    //-----------------------------------get mouse x y button value------------------------------------------------//
    usleep(10000);
    35a4:	0109c404 	movi	r4,10000
    35a8:	00108ec0 	call	108ec <usleep>
    while(1)
    {
      toggle++;
    35ac:	e0bffa03 	ldbu	r2,-24(fp)
    35b0:	10800044 	addi	r2,r2,1
    35b4:	e0bffa05 	stb	r2,-24(fp)
      IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    35b8:	00c14004 	movi	r3,1280
    35bc:	00824034 	movhi	r2,2304
    35c0:	10800a04 	addi	r2,r2,40
    35c4:	10c00035 	stwio	r3,0(r2)
      //data phase IN-1
      IOWR(CY7C67200_BASE,HPI_DATA,0x051c); //500
    35c8:	00c14704 	movi	r3,1308
    35cc:	00824034 	movhi	r2,2304
    35d0:	10800804 	addi	r2,r2,32
    35d4:	10c00035 	stwio	r3,0(r2)
      if(data_size ==8)
    35d8:	e0bffe83 	ldbu	r2,-6(fp)
    35dc:	10800218 	cmpnei	r2,r2,8
    35e0:	1000051e 	bne	r2,zero,35f8 <main+0x339c>
      {
          IOWR(CY7C67200_BASE,HPI_DATA,0x0006);//2 data length
    35e4:	00c00184 	movi	r3,6
    35e8:	00824034 	movhi	r2,2304
    35ec:	10800804 	addi	r2,r2,32
    35f0:	10c00035 	stwio	r3,0(r2)
    35f4:	00000506 	br	360c <main+0x33b0>
      }
      else
      {
          IOWR(CY7C67200_BASE,HPI_DATA,0x000f & data_size);//2 data length
    35f8:	e0bffe83 	ldbu	r2,-6(fp)
    35fc:	10c003cc 	andi	r3,r2,15
    3600:	00824034 	movhi	r2,2304
    3604:	10800804 	addi	r2,r2,32
    3608:	10c00035 	stwio	r3,0(r2)
      }
      IOWR(CY7C67200_BASE,HPI_DATA,0x0291);//4 //endpoint 1
    360c:	00c0a444 	movi	r3,657
    3610:	00824034 	movhi	r2,2304
    3614:	10800804 	addi	r2,r2,32
    3618:	10c00035 	stwio	r3,0(r2)
      if(toggle%2)
    361c:	e0bffa03 	ldbu	r2,-24(fp)
    3620:	1080004c 	andi	r2,r2,1
    3624:	10803fcc 	andi	r2,r2,255
    3628:	10000526 	beq	r2,zero,3640 <main+0x33e4>
      {
          IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data 1
    362c:	00c00044 	movi	r3,1
    3630:	00824034 	movhi	r2,2304
    3634:	10800804 	addi	r2,r2,32
    3638:	10c00035 	stwio	r3,0(r2)
    363c:	00000406 	br	3650 <main+0x33f4>
      }
      else
      {
          IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6 //data 1
    3640:	00c01044 	movi	r3,65
    3644:	00824034 	movhi	r2,2304
    3648:	10800804 	addi	r2,r2,32
    364c:	10c00035 	stwio	r3,0(r2)
      }
      IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    3650:	00c004c4 	movi	r3,19
    3654:	00824034 	movhi	r2,2304
    3658:	10800804 	addi	r2,r2,32
    365c:	10c00035 	stwio	r3,0(r2)
      IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
    3660:	0007883a 	mov	r3,zero
    3664:	00824034 	movhi	r2,2304
    3668:	10800804 	addi	r2,r2,32
    366c:	10c00035 	stwio	r3,0(r2)
      UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    3670:	01006c04 	movi	r4,432
    3674:	01414004 	movi	r5,1280
    3678:	0003be80 	call	3be8 <UsbWrite>
      //usleep(10*1000);    
      while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    367c:	00003306 	br	374c <main+0x34f0>
      {
          IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address       
    3680:	00c14004 	movi	r3,1280
    3684:	00824034 	movhi	r2,2304
    3688:	10800a04 	addi	r2,r2,40
    368c:	10c00035 	stwio	r3,0(r2)
          //data phase IN-1
          IOWR(CY7C67200_BASE,HPI_DATA,0x051c); //500
    3690:	00c14704 	movi	r3,1308
    3694:	00824034 	movhi	r2,2304
    3698:	10800804 	addi	r2,r2,32
    369c:	10c00035 	stwio	r3,0(r2)
          if(data_size ==8)
    36a0:	e0bffe83 	ldbu	r2,-6(fp)
    36a4:	10800218 	cmpnei	r2,r2,8
    36a8:	1000051e 	bne	r2,zero,36c0 <main+0x3464>
          {
             IOWR(CY7C67200_BASE,HPI_DATA,0x0006);//2 data length
    36ac:	00c00184 	movi	r3,6
    36b0:	00824034 	movhi	r2,2304
    36b4:	10800804 	addi	r2,r2,32
    36b8:	10c00035 	stwio	r3,0(r2)
    36bc:	00000506 	br	36d4 <main+0x3478>
          }
          else
          {
             IOWR(CY7C67200_BASE,HPI_DATA,0x000f & data_size);//2 data length
    36c0:	e0bffe83 	ldbu	r2,-6(fp)
    36c4:	10c003cc 	andi	r3,r2,15
    36c8:	00824034 	movhi	r2,2304
    36cc:	10800804 	addi	r2,r2,32
    36d0:	10c00035 	stwio	r3,0(r2)
          }
          IOWR(CY7C67200_BASE,HPI_DATA,0x0291);//4 //endpoint 1
    36d4:	00c0a444 	movi	r3,657
    36d8:	00824034 	movhi	r2,2304
    36dc:	10800804 	addi	r2,r2,32
    36e0:	10c00035 	stwio	r3,0(r2)
          if(toggle%2)
    36e4:	e0bffa03 	ldbu	r2,-24(fp)
    36e8:	1080004c 	andi	r2,r2,1
    36ec:	10803fcc 	andi	r2,r2,255
    36f0:	10000526 	beq	r2,zero,3708 <main+0x34ac>
          {
            IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data 1
    36f4:	00c00044 	movi	r3,1
    36f8:	00824034 	movhi	r2,2304
    36fc:	10800804 	addi	r2,r2,32
    3700:	10c00035 	stwio	r3,0(r2)
    3704:	00000406 	br	3718 <main+0x34bc>
          }
          else
          {
            IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6 //data 1
    3708:	00c01044 	movi	r3,65
    370c:	00824034 	movhi	r2,2304
    3710:	10800804 	addi	r2,r2,32
    3714:	10c00035 	stwio	r3,0(r2)
          }
          IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
    3718:	00c004c4 	movi	r3,19
    371c:	00824034 	movhi	r2,2304
    3720:	10800804 	addi	r2,r2,32
    3724:	10c00035 	stwio	r3,0(r2)
          IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
    3728:	0007883a 	mov	r3,zero
    372c:	00824034 	movhi	r2,2304
    3730:	10800804 	addi	r2,r2,32
    3734:	10c00035 	stwio	r3,0(r2)
          UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
    3738:	01006c04 	movi	r4,432
    373c:	01414004 	movi	r5,1280
    3740:	0003be80 	call	3be8 <UsbWrite>
          usleep(10*1000);
    3744:	0109c404 	movi	r4,10000
    3748:	00108ec0 	call	108ec <usleep>
      }
      IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
      IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
      UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
      //usleep(10*1000);    
      while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
    374c:	00824034 	movhi	r2,2304
    3750:	10800b04 	addi	r2,r2,44
    3754:	10800037 	ldwio	r2,0(r2)
    3758:	1080040c 	andi	r2,r2,16
    375c:	103fc826 	beq	r2,zero,3680 <__alt_mem_sram+0xf7e03680>
          IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
          IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
          UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
          usleep(10*1000);
      }//end while
      usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    3760:	01005104 	movi	r4,324
    3764:	0003c340 	call	3c34 <UsbRead>
    3768:	e0bff80d 	sth	r2,-32(fp)
      UsbWrite(HPI_SIE1_MSG_ADR, 0);
    376c:	01005104 	movi	r4,324
    3770:	000b883a 	mov	r5,zero
    3774:	0003be80 	call	3be8 <UsbWrite>
      while (usb_ctl_val != 0x1000)  //read sie1 msg register
    3778:	00000d06 	br	37b0 <main+0x3554>
      {
         if(usb_ctl_val == 0x000)
    377c:	e0bff80b 	ldhu	r2,-32(fp)
    3780:	10000526 	beq	r2,zero,3798 <main+0x353c>
         {}
         else
         {
            printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
    3784:	e0bff80b 	ldhu	r2,-32(fp)
    3788:	01000074 	movhi	r4,1
    378c:	210aa804 	addi	r4,r4,10912
    3790:	100b883a 	mov	r5,r2
    3794:	0003d5c0 	call	3d5c <printf>
         }
         usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
    3798:	01005104 	movi	r4,324
    379c:	0003c340 	call	3c34 <UsbRead>
    37a0:	e0bff80d 	sth	r2,-32(fp)
         UsbWrite(HPI_SIE1_MSG_ADR, 0);
    37a4:	01005104 	movi	r4,324
    37a8:	000b883a 	mov	r5,zero
    37ac:	0003be80 	call	3be8 <UsbWrite>
          UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
          usleep(10*1000);
      }//end while
      usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
      UsbWrite(HPI_SIE1_MSG_ADR, 0);
      while (usb_ctl_val != 0x1000)  //read sie1 msg register
    37b0:	e0bff80b 	ldhu	r2,-32(fp)
    37b4:	10840018 	cmpnei	r2,r2,4096
    37b8:	103ff01e 	bne	r2,zero,377c <__alt_mem_sram+0xf7e0377c>
            printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
         }
         usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
         UsbWrite(HPI_SIE1_MSG_ADR, 0);
      }
      IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
    37bc:	00c14204 	movi	r3,1288
    37c0:	00824034 	movhi	r2,2304
    37c4:	10800a04 	addi	r2,r2,40
    37c8:	10c00035 	stwio	r3,0(r2)
      usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
    37cc:	00824034 	movhi	r2,2304
    37d0:	10800804 	addi	r2,r2,32
    37d4:	10800037 	ldwio	r2,0(r2)
    37d8:	e0bff80d 	sth	r2,-32(fp)

      if (usb_ctl_val != 0x03) 
    37dc:	e0bff80b 	ldhu	r2,-32(fp)
    37e0:	108000e0 	cmpeqi	r2,r2,3
    37e4:	1000051e 	bne	r2,zero,37fc <main+0x35a0>
      {
         pbutton = 0;
    37e8:	e03ffb05 	stb	zero,-20(fp)
         dx = 0;
    37ec:	e03ff985 	stb	zero,-26(fp)
         dy = 0;
    37f0:	e03ff9c5 	stb	zero,-25(fp)
         button_value = 0;
    37f4:	e03fff15 	stw	zero,-4(fp)
    37f8:	00007a06 	br	39e4 <main+0x3788>
      }
    
      else
     {
        if(data_size != 8 )  
    37fc:	e0bffe83 	ldbu	r2,-6(fp)
    3800:	10800220 	cmpeqi	r2,r2,8
    3804:	10003b1e 	bne	r2,zero,38f4 <main+0x3698>
        {
          IOWR(CY7C67200_BASE,HPI_ADDR,0x051c); //the start address  
    3808:	00c14704 	movi	r3,1308
    380c:	00824034 	movhi	r2,2304
    3810:	10800a04 	addi	r2,r2,40
    3814:	10c00035 	stwio	r3,0(r2)
          button_value = IORD(CY7C67200_BASE,HPI_DATA);
    3818:	00824034 	movhi	r2,2304
    381c:	10800804 	addi	r2,r2,32
    3820:	10800037 	ldwio	r2,0(r2)
    3824:	e0bfff15 	stw	r2,-4(fp)
          if((button_value & 0x00ff) ==0x0001)
    3828:	e0bfff17 	ldw	r2,-4(fp)
    382c:	10803fcc 	andi	r2,r2,255
    3830:	10800058 	cmpnei	r2,r2,1
    3834:	1000031e 	bne	r2,zero,3844 <main+0x35e8>
          {
           //printf("left button\n");
            pbutton = 1;
    3838:	00800044 	movi	r2,1
    383c:	e0bffb05 	stb	r2,-20(fp)
    3840:	00000806 	br	3864 <main+0x3608>
          }
          else
          if((button_value& 0x00ff) ==0x0002)
    3844:	e0bfff17 	ldw	r2,-4(fp)
    3848:	10803fcc 	andi	r2,r2,255
    384c:	10800098 	cmpnei	r2,r2,2
    3850:	1000031e 	bne	r2,zero,3860 <main+0x3604>
          {
           //printf("right button\n");
           pbutton = 2;    
    3854:	00800084 	movi	r2,2
    3858:	e0bffb05 	stb	r2,-20(fp)
    385c:	00000106 	br	3864 <main+0x3608>
          }
          else
          {
           pbutton = 0;
    3860:	e03ffb05 	stb	zero,-20(fp)
          }
          if((signed char)((button_value>>8)&0x00ff) != 0)
    3864:	e0bfff17 	ldw	r2,-4(fp)
    3868:	1005d23a 	srai	r2,r2,8
    386c:	10803fcc 	andi	r2,r2,255
    3870:	1080201c 	xori	r2,r2,128
    3874:	10bfe004 	addi	r2,r2,-128
    3878:	10000c26 	beq	r2,zero,38ac <main+0x3650>
          {
       
             if((signed char)((button_value>>8)&0x00ff )==dx)
    387c:	e0bfff17 	ldw	r2,-4(fp)
    3880:	1005d23a 	srai	r2,r2,8
    3884:	10c03fcc 	andi	r3,r2,255
    3888:	18c0201c 	xori	r3,r3,128
    388c:	18ffe004 	addi	r3,r3,-128
    3890:	e0bff987 	ldb	r2,-26(fp)
    3894:	1880021e 	bne	r3,r2,38a0 <main+0x3644>
             {
                dx = 0;
    3898:	e03ff985 	stb	zero,-26(fp)
    389c:	00000306 	br	38ac <main+0x3650>
             }
              else
             {
                dx = (signed char)((button_value>>8)&0x00ff);
    38a0:	e0bfff17 	ldw	r2,-4(fp)
    38a4:	1005d23a 	srai	r2,r2,8
    38a8:	e0bff985 	stb	r2,-26(fp)
             }
       
          }
       
       button_value = IORD(CY7C67200_BASE,HPI_DATA);
    38ac:	00824034 	movhi	r2,2304
    38b0:	10800804 	addi	r2,r2,32
    38b4:	10800037 	ldwio	r2,0(r2)
    38b8:	e0bfff15 	stw	r2,-4(fp)
    
       if(button_value&0xff)
    38bc:	e0bfff17 	ldw	r2,-4(fp)
    38c0:	10803fcc 	andi	r2,r2,255
    38c4:	10004726 	beq	r2,zero,39e4 <main+0x3788>
       {
          //printf("dy value is %d\n",button_value&0xff);
          if((signed char)(button_value&0x00ff) == dy)
    38c8:	e0bfff17 	ldw	r2,-4(fp)
    38cc:	10c03fcc 	andi	r3,r2,255
    38d0:	18c0201c 	xori	r3,r3,128
    38d4:	18ffe004 	addi	r3,r3,-128
    38d8:	e0bff9c7 	ldb	r2,-25(fp)
    38dc:	1880021e 	bne	r3,r2,38e8 <main+0x368c>
          {
             dy = 0;
    38e0:	e03ff9c5 	stb	zero,-25(fp)
    38e4:	00003f06 	br	39e4 <main+0x3788>
          }
          else
          {
             dy = (signed char)(button_value&0xff);
    38e8:	e0bfff17 	ldw	r2,-4(fp)
    38ec:	e0bff9c5 	stb	r2,-25(fp)
    38f0:	00003c06 	br	39e4 <main+0x3788>
        
        }
      }
      else //>8
      {
        IOWR(CY7C67200_BASE,HPI_ADDR,0x051c); //the start address  
    38f4:	00c14704 	movi	r3,1308
    38f8:	00824034 	movhi	r2,2304
    38fc:	10800a04 	addi	r2,r2,40
    3900:	10c00035 	stwio	r3,0(r2)
        button_value = IORD(CY7C67200_BASE,HPI_DATA);
    3904:	00824034 	movhi	r2,2304
    3908:	10800804 	addi	r2,r2,32
    390c:	10800037 	ldwio	r2,0(r2)
    3910:	e0bfff15 	stw	r2,-4(fp)
         if(((button_value>>8) & 0x00ff) ==0x0001)
    3914:	e0bfff17 	ldw	r2,-4(fp)
    3918:	1005d23a 	srai	r2,r2,8
    391c:	10803fcc 	andi	r2,r2,255
    3920:	10800058 	cmpnei	r2,r2,1
    3924:	1000031e 	bne	r2,zero,3934 <main+0x36d8>
        {
           //printf("left button\n");
           pbutton = 1;
    3928:	00800044 	movi	r2,1
    392c:	e0bffb05 	stb	r2,-20(fp)
    3930:	00000906 	br	3958 <main+0x36fc>
        }
        else
        if(((button_value>>8) & 0x00ff) ==0x0002)
    3934:	e0bfff17 	ldw	r2,-4(fp)
    3938:	1005d23a 	srai	r2,r2,8
    393c:	10803fcc 	andi	r2,r2,255
    3940:	10800098 	cmpnei	r2,r2,2
    3944:	1000031e 	bne	r2,zero,3954 <main+0x36f8>
        {
           //printf("right button\n");
           pbutton = 2;    
    3948:	00800084 	movi	r2,2
    394c:	e0bffb05 	stb	r2,-20(fp)
    3950:	00000106 	br	3958 <main+0x36fc>
        }
        else
        {
           pbutton = 0;
    3954:	e03ffb05 	stb	zero,-20(fp)
        }
        button_value = IORD(CY7C67200_BASE,HPI_DATA);
    3958:	00824034 	movhi	r2,2304
    395c:	10800804 	addi	r2,r2,32
    3960:	10800037 	ldwio	r2,0(r2)
    3964:	e0bfff15 	stw	r2,-4(fp)
        if((signed char)((button_value>>8)&0x00ff) != 0)
    3968:	e0bfff17 	ldw	r2,-4(fp)
    396c:	1005d23a 	srai	r2,r2,8
    3970:	10803fcc 	andi	r2,r2,255
    3974:	1080201c 	xori	r2,r2,128
    3978:	10bfe004 	addi	r2,r2,-128
    397c:	10000c26 	beq	r2,zero,39b0 <main+0x3754>
        {
           if((signed char)((button_value>>8)&0x00ff )==dy)
    3980:	e0bfff17 	ldw	r2,-4(fp)
    3984:	1005d23a 	srai	r2,r2,8
    3988:	10c03fcc 	andi	r3,r2,255
    398c:	18c0201c 	xori	r3,r3,128
    3990:	18ffe004 	addi	r3,r3,-128
    3994:	e0bff9c7 	ldb	r2,-25(fp)
    3998:	1880021e 	bne	r3,r2,39a4 <main+0x3748>
           {
              dy = 0;
    399c:	e03ff9c5 	stb	zero,-25(fp)
    39a0:	00000306 	br	39b0 <main+0x3754>
           }
           else
           {
              dy = (signed char)((button_value>>8)&0x00ff);
    39a4:	e0bfff17 	ldw	r2,-4(fp)
    39a8:	1005d23a 	srai	r2,r2,8
    39ac:	e0bff9c5 	stb	r2,-25(fp)
           }
       
        }
       
       if(button_value&0x0ff)
    39b0:	e0bfff17 	ldw	r2,-4(fp)
    39b4:	10803fcc 	andi	r2,r2,255
    39b8:	10000a26 	beq	r2,zero,39e4 <main+0x3788>
       {
          //printf("dy value is %d\n",button_value&0xff);
          if((signed char)(button_value&0x00ff) == dx)
    39bc:	e0bfff17 	ldw	r2,-4(fp)
    39c0:	10c03fcc 	andi	r3,r2,255
    39c4:	18c0201c 	xori	r3,r3,128
    39c8:	18ffe004 	addi	r3,r3,-128
    39cc:	e0bff987 	ldb	r2,-26(fp)
    39d0:	1880021e 	bne	r3,r2,39dc <main+0x3780>
          {
             dx = 0;
    39d4:	e03ff985 	stb	zero,-26(fp)
    39d8:	00000206 	br	39e4 <main+0x3788>
          }
          else
          {
             dx = (signed char)(button_value&0xff);
    39dc:	e0bfff17 	ldw	r2,-4(fp)
    39e0:	e0bff985 	stb	r2,-26(fp)
        }
      }
        
    }    
     
    px = px + dx;
    39e4:	e0fff987 	ldb	r3,-26(fp)
    39e8:	e0bff88b 	ldhu	r2,-30(fp)
    39ec:	1885883a 	add	r2,r3,r2
    39f0:	e0bff88d 	sth	r2,-30(fp)
    py = py + dy;
    39f4:	e0fff9c7 	ldb	r3,-25(fp)
    39f8:	e0bff90b 	ldhu	r2,-28(fp)
    39fc:	1885883a 	add	r2,r3,r2
    3a00:	e0bff90d 	sth	r2,-28(fp)
    
    px=maxmin(px,639,0);
    3a04:	e0bff88b 	ldhu	r2,-30(fp)
    3a08:	1009883a 	mov	r4,r2
    3a0c:	01409fc4 	movi	r5,639
    3a10:	000d883a 	mov	r6,zero
    3a14:	00002080 	call	208 <maxmin>
    3a18:	e0bff88d 	sth	r2,-30(fp)
    py=maxmin(py,479,0);
    3a1c:	e0bff90b 	ldhu	r2,-28(fp)
    3a20:	1009883a 	mov	r4,r2
    3a24:	014077c4 	movi	r5,479
    3a28:	000d883a 	mov	r6,zero
    3a2c:	00002080 	call	208 <maxmin>
    3a30:	e0bff90d 	sth	r2,-28(fp)
    *MOUSEX_PIO = px;
    3a34:	e0fff88b 	ldhu	r3,-30(fp)
    3a38:	e0bffc17 	ldw	r2,-16(fp)
    3a3c:	10c00015 	stw	r3,0(r2)
    while(*MOUSEX_PIO != px);
    3a40:	0001883a 	nop
    3a44:	e0bffc17 	ldw	r2,-16(fp)
    3a48:	10c00017 	ldw	r3,0(r2)
    3a4c:	e0bff88b 	ldhu	r2,-30(fp)
    3a50:	18bffc1e 	bne	r3,r2,3a44 <__alt_mem_sram+0xf7e03a44>
    *MOUSEY_PIO = py;
    3a54:	e0fff90b 	ldhu	r3,-28(fp)
    3a58:	e0bffd17 	ldw	r2,-12(fp)
    3a5c:	10c00015 	stw	r3,0(r2)
    while(*MOUSEY_PIO != py);
    3a60:	0001883a 	nop
    3a64:	e0bffd17 	ldw	r2,-12(fp)
    3a68:	10c00017 	ldw	r3,0(r2)
    3a6c:	e0bff90b 	ldhu	r2,-28(fp)
    3a70:	18bffc1e 	bne	r3,r2,3a64 <__alt_mem_sram+0xf7e03a64>
    printf("\n[MOUSE XY]:%d, %d", px, py);
    3a74:	e0fff88b 	ldhu	r3,-30(fp)
    3a78:	e0bff90b 	ldhu	r2,-28(fp)
    3a7c:	01000074 	movhi	r4,1
    3a80:	210c3a04 	addi	r4,r4,12520
    3a84:	180b883a 	mov	r5,r3
    3a88:	100d883a 	mov	r6,r2
    3a8c:	0003d5c0 	call	3d5c <printf>
    usleep(5*1000);
    3a90:	0104e204 	movi	r4,5000
    3a94:	00108ec0 	call	108ec <usleep>
    //usleep(5*1000);
    //USB hot plug routine
    usb_ctl_val = UsbRead(ctl_reg);
    3a98:	d0a6cb0b 	ldhu	r2,-25812(gp)
    3a9c:	10bfffcc 	andi	r2,r2,65535
    3aa0:	1009883a 	mov	r4,r2
    3aa4:	0003c340 	call	3c34 <UsbRead>
    3aa8:	e0bff80d 	sth	r2,-32(fp)
    //usleep(5*1000);
    usb_ctl_val = UsbRead(ctl_reg);
    3aac:	d0a6cb0b 	ldhu	r2,-25812(gp)
    3ab0:	10bfffcc 	andi	r2,r2,65535
    3ab4:	1009883a 	mov	r4,r2
    3ab8:	0003c340 	call	3c34 <UsbRead>
    3abc:	e0bff80d 	sth	r2,-32(fp)
    //usleep(5*1000);
    usb_ctl_val = UsbRead(ctl_reg);
    3ac0:	d0a6cb0b 	ldhu	r2,-25812(gp)
    3ac4:	10bfffcc 	andi	r2,r2,65535
    3ac8:	1009883a 	mov	r4,r2
    3acc:	0003c340 	call	3c34 <UsbRead>
    3ad0:	e0bff80d 	sth	r2,-32(fp)
    //usleep(5*1000);
    usb_ctl_val = UsbRead(ctl_reg);
    3ad4:	d0a6cb0b 	ldhu	r2,-25812(gp)
    3ad8:	10bfffcc 	andi	r2,r2,65535
    3adc:	1009883a 	mov	r4,r2
    3ae0:	0003c340 	call	3c34 <UsbRead>
    3ae4:	e0bff80d 	sth	r2,-32(fp)
    //usleep(5*1000);
    usb_ctl_val = UsbRead(ctl_reg);
    3ae8:	d0a6cb0b 	ldhu	r2,-25812(gp)
    3aec:	10bfffcc 	andi	r2,r2,65535
    3af0:	1009883a 	mov	r4,r2
    3af4:	0003c340 	call	3c34 <UsbRead>
    3af8:	e0bff80d 	sth	r2,-32(fp)
    //usleep(5*1000);
    usb_ctl_val = UsbRead(ctl_reg);
    3afc:	d0a6cb0b 	ldhu	r2,-25812(gp)
    3b00:	10bfffcc 	andi	r2,r2,65535
    3b04:	1009883a 	mov	r4,r2
    3b08:	0003c340 	call	3c34 <UsbRead>
    3b0c:	e0bff80d 	sth	r2,-32(fp)
    //usleep(5*1000);

    if(!(usb_ctl_val & no_device))
    3b10:	d0a6cb8b 	ldhu	r2,-25810(gp)
    3b14:	e0fff80b 	ldhu	r3,-32(fp)
    3b18:	1884703a 	and	r2,r3,r2
    3b1c:	10bfffcc 	andi	r2,r2,65535
    3b20:	1000061e 	bne	r2,zero,3b3c <main+0x38e0>
    {
       printf("\n[INFO]: the mouse has been removed!!! \n");
    3b24:	01000074 	movhi	r4,1
    3b28:	210c3f04 	addi	r4,r4,12540
    3b2c:	0003e500 	call	3e50 <puts>
       printf("[INFO]: please insert again!!! \n");
    3b30:	01000074 	movhi	r4,1
    3b34:	210c4904 	addi	r4,r4,12580
    3b38:	0003e500 	call	3e50 <puts>
    };
    usleep(5000);
    3b3c:	0104e204 	movi	r4,5000
    3b40:	00108ec0 	call	108ec <usleep>
    usb_ctl_val = UsbRead(ctl_reg);
    3b44:	d0a6cb0b 	ldhu	r2,-25812(gp)
    3b48:	10bfffcc 	andi	r2,r2,65535
    3b4c:	1009883a 	mov	r4,r2
    3b50:	0003c340 	call	3c34 <UsbRead>
    3b54:	e0bff80d 	sth	r2,-32(fp)
    while (!(usb_ctl_val & no_device))
    3b58:	00001d06 	br	3bd0 <main+0x3974>
    {
       
       usb_ctl_val = UsbRead(ctl_reg);
    3b5c:	d0a6cb0b 	ldhu	r2,-25812(gp)
    3b60:	10bfffcc 	andi	r2,r2,65535
    3b64:	1009883a 	mov	r4,r2
    3b68:	0003c340 	call	3c34 <UsbRead>
    3b6c:	e0bff80d 	sth	r2,-32(fp)
       usleep(5*1000);
    3b70:	0104e204 	movi	r4,5000
    3b74:	00108ec0 	call	108ec <usleep>
       usb_ctl_val = UsbRead(ctl_reg);
    3b78:	d0a6cb0b 	ldhu	r2,-25812(gp)
    3b7c:	10bfffcc 	andi	r2,r2,65535
    3b80:	1009883a 	mov	r4,r2
    3b84:	0003c340 	call	3c34 <UsbRead>
    3b88:	e0bff80d 	sth	r2,-32(fp)
       usleep(5*1000);
    3b8c:	0104e204 	movi	r4,5000
    3b90:	00108ec0 	call	108ec <usleep>
       usb_ctl_val = UsbRead(ctl_reg);
    3b94:	d0a6cb0b 	ldhu	r2,-25812(gp)
    3b98:	10bfffcc 	andi	r2,r2,65535
    3b9c:	1009883a 	mov	r4,r2
    3ba0:	0003c340 	call	3c34 <UsbRead>
    3ba4:	e0bff80d 	sth	r2,-32(fp)
       usleep(5*1000);
    3ba8:	0104e204 	movi	r4,5000
    3bac:	00108ec0 	call	108ec <usleep>

       if(usb_ctl_val & no_device)
    3bb0:	d0a6cb8b 	ldhu	r2,-25810(gp)
    3bb4:	e0fff80b 	ldhu	r3,-32(fp)
    3bb8:	1884703a 	and	r2,r3,r2
    3bbc:	10bfffcc 	andi	r2,r2,65535
    3bc0:	10000126 	beq	r2,zero,3bc8 <main+0x396c>
         goto USB_HOT_PLUG;
    3bc4:	0031b806 	br	2a8 <__alt_mem_sram+0xf7e002a8>
       
       usleep(200);
    3bc8:	01003204 	movi	r4,200
    3bcc:	00108ec0 	call	108ec <usleep>
       printf("\n[INFO]: the mouse has been removed!!! \n");
       printf("[INFO]: please insert again!!! \n");
    };
    usleep(5000);
    usb_ctl_val = UsbRead(ctl_reg);
    while (!(usb_ctl_val & no_device))
    3bd0:	d0a6cb8b 	ldhu	r2,-25810(gp)
    3bd4:	e0fff80b 	ldhu	r3,-32(fp)
    3bd8:	1884703a 	and	r2,r3,r2
    3bdc:	10bfffcc 	andi	r2,r2,65535
    3be0:	103fde26 	beq	r2,zero,3b5c <__alt_mem_sram+0xf7e03b5c>
       
       usleep(200);

    }
    
    }//end while
    3be4:	003e7106 	br	35ac <__alt_mem_sram+0xf7e035ac>

00003be8 <UsbWrite>:
*
* @note     None
*
******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
    3be8:	defffd04 	addi	sp,sp,-12
    3bec:	df000215 	stw	fp,8(sp)
    3bf0:	df000204 	addi	fp,sp,8
    3bf4:	2007883a 	mov	r3,r4
    3bf8:	2805883a 	mov	r2,r5
    3bfc:	e0fffe0d 	sth	r3,-8(fp)
    3c00:	e0bfff0d 	sth	r2,-4(fp)
    //XIo_Out16(USB_ADDRESS, Address);
    IOWR(CY7C67200_BASE,HPI_ADDR,Address);
    3c04:	e0fffe0b 	ldhu	r3,-8(fp)
    3c08:	00824034 	movhi	r2,2304
    3c0c:	10800a04 	addi	r2,r2,40
    3c10:	10c00035 	stwio	r3,0(r2)
    //usleep(10);
    
    //XIo_Out16(USB_DATA, Data);
    IOWR(CY7C67200_BASE,HPI_DATA,Data); 
    3c14:	e0ffff0b 	ldhu	r3,-4(fp)
    3c18:	00824034 	movhi	r2,2304
    3c1c:	10800804 	addi	r2,r2,32
    3c20:	10c00035 	stwio	r3,0(r2)
}
    3c24:	e037883a 	mov	sp,fp
    3c28:	df000017 	ldw	fp,0(sp)
    3c2c:	dec00104 	addi	sp,sp,4
    3c30:	f800283a 	ret

00003c34 <UsbRead>:
*
* @note     None
*
******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
    3c34:	defffe04 	addi	sp,sp,-8
    3c38:	df000115 	stw	fp,4(sp)
    3c3c:	df000104 	addi	fp,sp,4
    3c40:	2005883a 	mov	r2,r4
    3c44:	e0bfff0d 	sth	r2,-4(fp)
    //XIo_Out16(HPI_ADDR, Address);
    IOWR(CY7C67200_BASE,HPI_ADDR,Address);
    3c48:	e0ffff0b 	ldhu	r3,-4(fp)
    3c4c:	00824034 	movhi	r2,2304
    3c50:	10800a04 	addi	r2,r2,40
    3c54:	10c00035 	stwio	r3,0(r2)
    //usleep(20);
    return IORD(CY7C67200_BASE,HPI_DATA);
    3c58:	00824034 	movhi	r2,2304
    3c5c:	10800804 	addi	r2,r2,32
    3c60:	10800037 	ldwio	r2,0(r2)
}
    3c64:	e037883a 	mov	sp,fp
    3c68:	df000017 	ldw	fp,0(sp)
    3c6c:	dec00104 	addi	sp,sp,4
    3c70:	f800283a 	ret

00003c74 <UsbSoftReset>:
*
* @note     None
*
******************************************************************************/
void UsbSoftReset()
{
    3c74:	defffe04 	addi	sp,sp,-8
    3c78:	dfc00115 	stw	ra,4(sp)
    3c7c:	df000015 	stw	fp,0(sp)
    3c80:	d839883a 	mov	fp,sp
    //XIo_Out16(USB_MAILBOX, COMM_RESET);
    IOWR(CY7C67200_BASE,HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
    3c84:	00fe9414 	movui	r3,64080
    3c88:	00824034 	movhi	r2,2304
    3c8c:	10800904 	addi	r2,r2,36
    3c90:	10c00035 	stwio	r3,0(r2)
    usleep(100000);
    3c94:	010000b4 	movhi	r4,2
    3c98:	2121a804 	addi	r4,r4,-31072
    3c9c:	00108ec0 	call	108ec <usleep>
    printf("[USB INIT]:reset finished!\n");
    3ca0:	01000074 	movhi	r4,1
    3ca4:	210c5104 	addi	r4,r4,12612
    3ca8:	0003e500 	call	3e50 <puts>

    usleep(500000);
    3cac:	01000234 	movhi	r4,8
    3cb0:	21284804 	addi	r4,r4,-24288
    3cb4:	00108ec0 	call	108ec <usleep>
    printf("[USB INIT]:Clear up the interrupt\r\n");
    3cb8:	01000074 	movhi	r4,1
    3cbc:	210c5804 	addi	r4,r4,12640
    3cc0:	0003e500 	call	3e50 <puts>
    IORD(CY7C67200_BASE,HPI_MAILBOX);
    3cc4:	00824034 	movhi	r2,2304
    3cc8:	10800904 	addi	r2,r2,36
    3ccc:	10800037 	ldwio	r2,0(r2)
    IORD(CY7C67200_BASE,HPI_STATUS);
    3cd0:	00824034 	movhi	r2,2304
    3cd4:	10800b04 	addi	r2,r2,44
    3cd8:	10800037 	ldwio	r2,0(r2)

    // Had to add the write due to a bug in BIOS where they overwrite
    // the mailbox after initialization with garbage.  The read clears
    // any pending interrupts.
    UsbRead (HPI_SIE1_MSG_ADR);
    3cdc:	01005104 	movi	r4,324
    3ce0:	0003c340 	call	3c34 <UsbRead>
    UsbWrite (HPI_SIE1_MSG_ADR, 0);
    3ce4:	01005104 	movi	r4,324
    3ce8:	000b883a 	mov	r5,zero
    3cec:	0003be80 	call	3be8 <UsbWrite>
    UsbRead (HPI_SIE2_MSG_ADR);
    3cf0:	01005204 	movi	r4,328
    3cf4:	0003c340 	call	3c34 <UsbRead>
    UsbWrite (HPI_SIE2_MSG_ADR, 0);
    3cf8:	01005204 	movi	r4,328
    3cfc:	000b883a 	mov	r5,zero
    3d00:	0003be80 	call	3be8 <UsbWrite>

    UsbWrite (HOST1_STAT_REG, 0xFFFF);
    3d04:	01302414 	movui	r4,49296
    3d08:	017fffd4 	movui	r5,65535
    3d0c:	0003be80 	call	3be8 <UsbWrite>
    UsbWrite (HOST2_STAT_REG, 0xFFFF);
    3d10:	01302c14 	movui	r4,49328
    3d14:	017fffd4 	movui	r5,65535
    3d18:	0003be80 	call	3be8 <UsbWrite>
}
    3d1c:	e037883a 	mov	sp,fp
    3d20:	dfc00117 	ldw	ra,4(sp)
    3d24:	df000017 	ldw	fp,0(sp)
    3d28:	dec00204 	addi	sp,sp,8
    3d2c:	f800283a 	ret

00003d30 <_printf_r>:
    3d30:	defffd04 	addi	sp,sp,-12
    3d34:	dfc00015 	stw	ra,0(sp)
    3d38:	d9800115 	stw	r6,4(sp)
    3d3c:	d9c00215 	stw	r7,8(sp)
    3d40:	280d883a 	mov	r6,r5
    3d44:	21400217 	ldw	r5,8(r4)
    3d48:	d9c00104 	addi	r7,sp,4
    3d4c:	0003efc0 	call	3efc <___vfprintf_internal_r>
    3d50:	dfc00017 	ldw	ra,0(sp)
    3d54:	dec00304 	addi	sp,sp,12
    3d58:	f800283a 	ret

00003d5c <printf>:
    3d5c:	defffc04 	addi	sp,sp,-16
    3d60:	dfc00015 	stw	ra,0(sp)
    3d64:	d9400115 	stw	r5,4(sp)
    3d68:	d9800215 	stw	r6,8(sp)
    3d6c:	d9c00315 	stw	r7,12(sp)
    3d70:	00800074 	movhi	r2,1
    3d74:	1093cb04 	addi	r2,r2,20268
    3d78:	10800017 	ldw	r2,0(r2)
    3d7c:	200b883a 	mov	r5,r4
    3d80:	d9800104 	addi	r6,sp,4
    3d84:	11000217 	ldw	r4,8(r2)
    3d88:	0005ef80 	call	5ef8 <__vfprintf_internal>
    3d8c:	dfc00017 	ldw	ra,0(sp)
    3d90:	dec00404 	addi	sp,sp,16
    3d94:	f800283a 	ret

00003d98 <_puts_r>:
    3d98:	defff604 	addi	sp,sp,-40
    3d9c:	dc000715 	stw	r16,28(sp)
    3da0:	2021883a 	mov	r16,r4
    3da4:	2809883a 	mov	r4,r5
    3da8:	dc400815 	stw	r17,32(sp)
    3dac:	dfc00915 	stw	ra,36(sp)
    3db0:	2823883a 	mov	r17,r5
    3db4:	0003e640 	call	3e64 <strlen>
    3db8:	00c00074 	movhi	r3,1
    3dbc:	18d3cb04 	addi	r3,r3,20268
    3dc0:	18c00017 	ldw	r3,0(r3)
    3dc4:	11000044 	addi	r4,r2,1
    3dc8:	d8800115 	stw	r2,4(sp)
    3dcc:	18c00217 	ldw	r3,8(r3)
    3dd0:	01400074 	movhi	r5,1
    3dd4:	294c6104 	addi	r5,r5,12676
    3dd8:	1880030b 	ldhu	r2,12(r3)
    3ddc:	d9400215 	stw	r5,8(sp)
    3de0:	d9000615 	stw	r4,24(sp)
    3de4:	01400044 	movi	r5,1
    3de8:	01000084 	movi	r4,2
    3dec:	d9000515 	stw	r4,20(sp)
    3df0:	dc400015 	stw	r17,0(sp)
    3df4:	d9400315 	stw	r5,12(sp)
    3df8:	dec00415 	stw	sp,16(sp)
    3dfc:	1108000c 	andi	r4,r2,8192
    3e00:	2000061e 	bne	r4,zero,3e1c <_puts_r+0x84>
    3e04:	19401917 	ldw	r5,100(r3)
    3e08:	0137ffc4 	movi	r4,-8193
    3e0c:	10880014 	ori	r2,r2,8192
    3e10:	2908703a 	and	r4,r5,r4
    3e14:	1880030d 	sth	r2,12(r3)
    3e18:	19001915 	stw	r4,100(r3)
    3e1c:	81400217 	ldw	r5,8(r16)
    3e20:	8009883a 	mov	r4,r16
    3e24:	d9800404 	addi	r6,sp,16
    3e28:	00083800 	call	8380 <__sfvwrite_r>
    3e2c:	1000061e 	bne	r2,zero,3e48 <_puts_r+0xb0>
    3e30:	00800284 	movi	r2,10
    3e34:	dfc00917 	ldw	ra,36(sp)
    3e38:	dc400817 	ldw	r17,32(sp)
    3e3c:	dc000717 	ldw	r16,28(sp)
    3e40:	dec00a04 	addi	sp,sp,40
    3e44:	f800283a 	ret
    3e48:	00bfffc4 	movi	r2,-1
    3e4c:	003ff906 	br	3e34 <__alt_mem_sram+0xf7e03e34>

00003e50 <puts>:
    3e50:	00800074 	movhi	r2,1
    3e54:	1093cb04 	addi	r2,r2,20268
    3e58:	200b883a 	mov	r5,r4
    3e5c:	11000017 	ldw	r4,0(r2)
    3e60:	0003d981 	jmpi	3d98 <_puts_r>

00003e64 <strlen>:
    3e64:	208000cc 	andi	r2,r4,3
    3e68:	10002026 	beq	r2,zero,3eec <strlen+0x88>
    3e6c:	20800007 	ldb	r2,0(r4)
    3e70:	10002026 	beq	r2,zero,3ef4 <strlen+0x90>
    3e74:	2005883a 	mov	r2,r4
    3e78:	00000206 	br	3e84 <strlen+0x20>
    3e7c:	10c00007 	ldb	r3,0(r2)
    3e80:	18001826 	beq	r3,zero,3ee4 <strlen+0x80>
    3e84:	10800044 	addi	r2,r2,1
    3e88:	10c000cc 	andi	r3,r2,3
    3e8c:	183ffb1e 	bne	r3,zero,3e7c <__alt_mem_sram+0xf7e03e7c>
    3e90:	10c00017 	ldw	r3,0(r2)
    3e94:	01ffbff4 	movhi	r7,65279
    3e98:	39ffbfc4 	addi	r7,r7,-257
    3e9c:	00ca303a 	nor	r5,zero,r3
    3ea0:	01a02074 	movhi	r6,32897
    3ea4:	19c7883a 	add	r3,r3,r7
    3ea8:	31a02004 	addi	r6,r6,-32640
    3eac:	1946703a 	and	r3,r3,r5
    3eb0:	1986703a 	and	r3,r3,r6
    3eb4:	1800091e 	bne	r3,zero,3edc <strlen+0x78>
    3eb8:	10800104 	addi	r2,r2,4
    3ebc:	10c00017 	ldw	r3,0(r2)
    3ec0:	19cb883a 	add	r5,r3,r7
    3ec4:	00c6303a 	nor	r3,zero,r3
    3ec8:	28c6703a 	and	r3,r5,r3
    3ecc:	1986703a 	and	r3,r3,r6
    3ed0:	183ff926 	beq	r3,zero,3eb8 <__alt_mem_sram+0xf7e03eb8>
    3ed4:	00000106 	br	3edc <strlen+0x78>
    3ed8:	10800044 	addi	r2,r2,1
    3edc:	10c00007 	ldb	r3,0(r2)
    3ee0:	183ffd1e 	bne	r3,zero,3ed8 <__alt_mem_sram+0xf7e03ed8>
    3ee4:	1105c83a 	sub	r2,r2,r4
    3ee8:	f800283a 	ret
    3eec:	2005883a 	mov	r2,r4
    3ef0:	003fe706 	br	3e90 <__alt_mem_sram+0xf7e03e90>
    3ef4:	0005883a 	mov	r2,zero
    3ef8:	f800283a 	ret

00003efc <___vfprintf_internal_r>:
    3efc:	defeb604 	addi	sp,sp,-1320
    3f00:	dfc14915 	stw	ra,1316(sp)
    3f04:	ddc14715 	stw	r23,1308(sp)
    3f08:	dd814615 	stw	r22,1304(sp)
    3f0c:	282f883a 	mov	r23,r5
    3f10:	202d883a 	mov	r22,r4
    3f14:	d9812a15 	stw	r6,1192(sp)
    3f18:	d9c12d15 	stw	r7,1204(sp)
    3f1c:	df014815 	stw	fp,1312(sp)
    3f20:	dd414515 	stw	r21,1300(sp)
    3f24:	dd014415 	stw	r20,1296(sp)
    3f28:	dcc14315 	stw	r19,1292(sp)
    3f2c:	dc814215 	stw	r18,1288(sp)
    3f30:	dc414115 	stw	r17,1284(sp)
    3f34:	dc014015 	stw	r16,1280(sp)
    3f38:	0008a400 	call	8a40 <_localeconv_r>
    3f3c:	10800017 	ldw	r2,0(r2)
    3f40:	1009883a 	mov	r4,r2
    3f44:	d8813515 	stw	r2,1236(sp)
    3f48:	0003e640 	call	3e64 <strlen>
    3f4c:	d8813815 	stw	r2,1248(sp)
    3f50:	b0000226 	beq	r22,zero,3f5c <___vfprintf_internal_r+0x60>
    3f54:	b0800e17 	ldw	r2,56(r22)
    3f58:	10010426 	beq	r2,zero,436c <___vfprintf_internal_r+0x470>
    3f5c:	b8c0030b 	ldhu	r3,12(r23)
    3f60:	1908000c 	andi	r4,r3,8192
    3f64:	1805883a 	mov	r2,r3
    3f68:	2000071e 	bne	r4,zero,3f88 <___vfprintf_internal_r+0x8c>
    3f6c:	b9001917 	ldw	r4,100(r23)
    3f70:	18880014 	ori	r2,r3,8192
    3f74:	00f7ffc4 	movi	r3,-8193
    3f78:	20c8703a 	and	r4,r4,r3
    3f7c:	b880030d 	sth	r2,12(r23)
    3f80:	1007883a 	mov	r3,r2
    3f84:	b9001915 	stw	r4,100(r23)
    3f88:	1100020c 	andi	r4,r2,8
    3f8c:	2000a726 	beq	r4,zero,422c <___vfprintf_internal_r+0x330>
    3f90:	b9000417 	ldw	r4,16(r23)
    3f94:	2000a526 	beq	r4,zero,422c <___vfprintf_internal_r+0x330>
    3f98:	1080068c 	andi	r2,r2,26
    3f9c:	01000284 	movi	r4,10
    3fa0:	1100ab26 	beq	r2,r4,4250 <___vfprintf_internal_r+0x354>
    3fa4:	dac10e04 	addi	r11,sp,1080
    3fa8:	db010dc4 	addi	r12,sp,1079
    3fac:	d8800404 	addi	r2,sp,16
    3fb0:	05000074 	movhi	r20,1
    3fb4:	dac12815 	stw	r11,1184(sp)
    3fb8:	5b17c83a 	sub	r11,r11,r12
    3fbc:	a50c7284 	addi	r20,r20,12746
    3fc0:	db012915 	stw	r12,1188(sp)
    3fc4:	d8811e15 	stw	r2,1144(sp)
    3fc8:	d8012015 	stw	zero,1152(sp)
    3fcc:	d8011f15 	stw	zero,1148(sp)
    3fd0:	d8013315 	stw	zero,1228(sp)
    3fd4:	d8013715 	stw	zero,1244(sp)
    3fd8:	d8013915 	stw	zero,1252(sp)
    3fdc:	d8013b15 	stw	zero,1260(sp)
    3fe0:	d8013a15 	stw	zero,1256(sp)
    3fe4:	d8012f15 	stw	zero,1212(sp)
    3fe8:	1011883a 	mov	r8,r2
    3fec:	dac13c15 	stw	r11,1264(sp)
    3ff0:	db012a17 	ldw	r12,1192(sp)
    3ff4:	60800007 	ldb	r2,0(r12)
    3ff8:	1000df26 	beq	r2,zero,4378 <___vfprintf_internal_r+0x47c>
    3ffc:	00c00944 	movi	r3,37
    4000:	10c0dd26 	beq	r2,r3,4378 <___vfprintf_internal_r+0x47c>
    4004:	6021883a 	mov	r16,r12
    4008:	00000106 	br	4010 <___vfprintf_internal_r+0x114>
    400c:	10c08426 	beq	r2,r3,4220 <___vfprintf_internal_r+0x324>
    4010:	84000044 	addi	r16,r16,1
    4014:	80800007 	ldb	r2,0(r16)
    4018:	103ffc1e 	bne	r2,zero,400c <__alt_mem_sram+0xf7e0400c>
    401c:	dac12a17 	ldw	r11,1192(sp)
    4020:	82e3c83a 	sub	r17,r16,r11
    4024:	88000f26 	beq	r17,zero,4064 <___vfprintf_internal_r+0x168>
    4028:	d8c12017 	ldw	r3,1152(sp)
    402c:	d8811f17 	ldw	r2,1148(sp)
    4030:	dac12a17 	ldw	r11,1192(sp)
    4034:	1c47883a 	add	r3,r3,r17
    4038:	10800044 	addi	r2,r2,1
    403c:	d8c12015 	stw	r3,1152(sp)
    4040:	42c00015 	stw	r11,0(r8)
    4044:	44400115 	stw	r17,4(r8)
    4048:	d8811f15 	stw	r2,1148(sp)
    404c:	00c001c4 	movi	r3,7
    4050:	1880b416 	blt	r3,r2,4324 <___vfprintf_internal_r+0x428>
    4054:	42000204 	addi	r8,r8,8
    4058:	db012f17 	ldw	r12,1212(sp)
    405c:	6459883a 	add	r12,r12,r17
    4060:	db012f15 	stw	r12,1212(sp)
    4064:	80800007 	ldb	r2,0(r16)
    4068:	1000b526 	beq	r2,zero,4340 <___vfprintf_internal_r+0x444>
    406c:	80800044 	addi	r2,r16,1
    4070:	84000047 	ldb	r16,1(r16)
    4074:	d8012785 	stb	zero,1182(sp)
    4078:	000d883a 	mov	r6,zero
    407c:	027fffc4 	movi	r9,-1
    4080:	d8012e15 	stw	zero,1208(sp)
    4084:	0023883a 	mov	r17,zero
    4088:	01001604 	movi	r4,88
    408c:	01400244 	movi	r5,9
    4090:	02800a84 	movi	r10,42
    4094:	01c01b04 	movi	r7,108
    4098:	10c00044 	addi	r3,r2,1
    409c:	80bff804 	addi	r2,r16,-32
    40a0:	2082f236 	bltu	r4,r2,4c6c <___vfprintf_internal_r+0xd70>
    40a4:	100490ba 	slli	r2,r2,2
    40a8:	02c00034 	movhi	r11,0
    40ac:	5ad02f04 	addi	r11,r11,16572
    40b0:	12c5883a 	add	r2,r2,r11
    40b4:	10800017 	ldw	r2,0(r2)
    40b8:	1000683a 	jmp	r2
    40bc:	00004ab4 	movhi	zero,298
    40c0:	00004c6c 	andhi	zero,zero,305
    40c4:	00004c6c 	andhi	zero,zero,305
    40c8:	00004ad4 	movui	zero,299
    40cc:	00004c6c 	andhi	zero,zero,305
    40d0:	00004c6c 	andhi	zero,zero,305
    40d4:	00004c6c 	andhi	zero,zero,305
    40d8:	00004c6c 	andhi	zero,zero,305
    40dc:	00004c6c 	andhi	zero,zero,305
    40e0:	00004c6c 	andhi	zero,zero,305
    40e4:	00004c30 	cmpltui	zero,zero,304
    40e8:	00004c5c 	xori	zero,zero,305
    40ec:	00004c6c 	andhi	zero,zero,305
    40f0:	00004380 	call	438 <main+0x1dc>
    40f4:	00004390 	cmplti	zero,zero,270
    40f8:	00004c6c 	andhi	zero,zero,305
    40fc:	000043d0 	cmplti	zero,zero,271
    4100:	000048c4 	movi	zero,291
    4104:	000048c4 	movi	zero,291
    4108:	000048c4 	movi	zero,291
    410c:	000048c4 	movi	zero,291
    4110:	000048c4 	movi	zero,291
    4114:	000048c4 	movi	zero,291
    4118:	000048c4 	movi	zero,291
    411c:	000048c4 	movi	zero,291
    4120:	000048c4 	movi	zero,291
    4124:	00004c6c 	andhi	zero,zero,305
    4128:	00004c6c 	andhi	zero,zero,305
    412c:	00004c6c 	andhi	zero,zero,305
    4130:	00004c6c 	andhi	zero,zero,305
    4134:	00004c6c 	andhi	zero,zero,305
    4138:	00004c6c 	andhi	zero,zero,305
    413c:	00004c6c 	andhi	zero,zero,305
    4140:	00004c6c 	andhi	zero,zero,305
    4144:	00004c6c 	andhi	zero,zero,305
    4148:	00004c6c 	andhi	zero,zero,305
    414c:	000048f8 	rdprs	zero,zero,291
    4150:	000043e0 	cmpeqi	zero,zero,271
    4154:	00004c6c 	andhi	zero,zero,305
    4158:	000043e0 	cmpeqi	zero,zero,271
    415c:	00004c6c 	andhi	zero,zero,305
    4160:	00004c6c 	andhi	zero,zero,305
    4164:	00004c6c 	andhi	zero,zero,305
    4168:	00004c6c 	andhi	zero,zero,305
    416c:	00004484 	movi	zero,274
    4170:	00004c6c 	andhi	zero,zero,305
    4174:	00004c6c 	andhi	zero,zero,305
    4178:	00004494 	movui	zero,274
    417c:	00004c6c 	andhi	zero,zero,305
    4180:	00004c6c 	andhi	zero,zero,305
    4184:	00004c6c 	andhi	zero,zero,305
    4188:	00004c6c 	andhi	zero,zero,305
    418c:	00004c6c 	andhi	zero,zero,305
    4190:	00004890 	cmplti	zero,zero,290
    4194:	00004c6c 	andhi	zero,zero,305
    4198:	00004c6c 	andhi	zero,zero,305
    419c:	00004940 	call	494 <main+0x238>
    41a0:	00004c6c 	andhi	zero,zero,305
    41a4:	00004c6c 	andhi	zero,zero,305
    41a8:	00004c6c 	andhi	zero,zero,305
    41ac:	00004c6c 	andhi	zero,zero,305
    41b0:	00004c6c 	andhi	zero,zero,305
    41b4:	00004c6c 	andhi	zero,zero,305
    41b8:	00004c6c 	andhi	zero,zero,305
    41bc:	00004c6c 	andhi	zero,zero,305
    41c0:	00004c6c 	andhi	zero,zero,305
    41c4:	00004c6c 	andhi	zero,zero,305
    41c8:	00004b34 	movhi	zero,300
    41cc:	00004ae4 	muli	zero,zero,299
    41d0:	000043e0 	cmpeqi	zero,zero,271
    41d4:	000043e0 	cmpeqi	zero,zero,271
    41d8:	000043e0 	cmpeqi	zero,zero,271
    41dc:	00004b24 	muli	zero,zero,300
    41e0:	00004ae4 	muli	zero,zero,299
    41e4:	00004c6c 	andhi	zero,zero,305
    41e8:	00004c6c 	andhi	zero,zero,305
    41ec:	00004a2c 	andhi	zero,zero,296
    41f0:	00004c6c 	andhi	zero,zero,305
    41f4:	00004a40 	call	4a4 <main+0x248>
    41f8:	00004a74 	movhi	zero,297
    41fc:	00004b74 	movhi	zero,301
    4200:	0000499c 	xori	zero,zero,294
    4204:	00004c6c 	andhi	zero,zero,305
    4208:	00004bbc 	xorhi	zero,zero,302
    420c:	00004c6c 	andhi	zero,zero,305
    4210:	000049ac 	andhi	zero,zero,294
    4214:	00004c6c 	andhi	zero,zero,305
    4218:	00004c6c 	andhi	zero,zero,305
    421c:	000049ec 	andhi	zero,zero,295
    4220:	db012a17 	ldw	r12,1192(sp)
    4224:	8323c83a 	sub	r17,r16,r12
    4228:	003f7e06 	br	4024 <__alt_mem_sram+0xf7e04024>
    422c:	b009883a 	mov	r4,r22
    4230:	b80b883a 	mov	r5,r23
    4234:	0005f1c0 	call	5f1c <__swsetup_r>
    4238:	10002d1e 	bne	r2,zero,42f0 <___vfprintf_internal_r+0x3f4>
    423c:	b8c0030b 	ldhu	r3,12(r23)
    4240:	01000284 	movi	r4,10
    4244:	1805883a 	mov	r2,r3
    4248:	1080068c 	andi	r2,r2,26
    424c:	113f551e 	bne	r2,r4,3fa4 <__alt_mem_sram+0xf7e03fa4>
    4250:	b880038b 	ldhu	r2,14(r23)
    4254:	113fffcc 	andi	r4,r2,65535
    4258:	2120001c 	xori	r4,r4,32768
    425c:	21200004 	addi	r4,r4,-32768
    4260:	203f5016 	blt	r4,zero,3fa4 <__alt_mem_sram+0xf7e03fa4>
    4264:	bac01917 	ldw	r11,100(r23)
    4268:	ba800717 	ldw	r10,28(r23)
    426c:	ba400917 	ldw	r9,36(r23)
    4270:	d9812a17 	ldw	r6,1192(sp)
    4274:	d9c12d17 	ldw	r7,1204(sp)
    4278:	02010004 	movi	r8,1024
    427c:	18ffff4c 	andi	r3,r3,65533
    4280:	d881078d 	sth	r2,1054(sp)
    4284:	b009883a 	mov	r4,r22
    4288:	d8800404 	addi	r2,sp,16
    428c:	d9410404 	addi	r5,sp,1040
    4290:	d8c1070d 	sth	r3,1052(sp)
    4294:	dac11d15 	stw	r11,1140(sp)
    4298:	da810b15 	stw	r10,1068(sp)
    429c:	da410d15 	stw	r9,1076(sp)
    42a0:	d8810415 	stw	r2,1040(sp)
    42a4:	d8810815 	stw	r2,1056(sp)
    42a8:	da010615 	stw	r8,1048(sp)
    42ac:	da010915 	stw	r8,1060(sp)
    42b0:	d8010a15 	stw	zero,1064(sp)
    42b4:	0003efc0 	call	3efc <___vfprintf_internal_r>
    42b8:	1021883a 	mov	r16,r2
    42bc:	10000416 	blt	r2,zero,42d0 <___vfprintf_internal_r+0x3d4>
    42c0:	b009883a 	mov	r4,r22
    42c4:	d9410404 	addi	r5,sp,1040
    42c8:	00079740 	call	7974 <_fflush_r>
    42cc:	1006ee1e 	bne	r2,zero,5e88 <___vfprintf_internal_r+0x1f8c>
    42d0:	d881070b 	ldhu	r2,1052(sp)
    42d4:	1080100c 	andi	r2,r2,64
    42d8:	10000326 	beq	r2,zero,42e8 <___vfprintf_internal_r+0x3ec>
    42dc:	b880030b 	ldhu	r2,12(r23)
    42e0:	10801014 	ori	r2,r2,64
    42e4:	b880030d 	sth	r2,12(r23)
    42e8:	8005883a 	mov	r2,r16
    42ec:	00000106 	br	42f4 <___vfprintf_internal_r+0x3f8>
    42f0:	00bfffc4 	movi	r2,-1
    42f4:	dfc14917 	ldw	ra,1316(sp)
    42f8:	df014817 	ldw	fp,1312(sp)
    42fc:	ddc14717 	ldw	r23,1308(sp)
    4300:	dd814617 	ldw	r22,1304(sp)
    4304:	dd414517 	ldw	r21,1300(sp)
    4308:	dd014417 	ldw	r20,1296(sp)
    430c:	dcc14317 	ldw	r19,1292(sp)
    4310:	dc814217 	ldw	r18,1288(sp)
    4314:	dc414117 	ldw	r17,1284(sp)
    4318:	dc014017 	ldw	r16,1280(sp)
    431c:	dec14a04 	addi	sp,sp,1320
    4320:	f800283a 	ret
    4324:	b009883a 	mov	r4,r22
    4328:	b80b883a 	mov	r5,r23
    432c:	d9811e04 	addi	r6,sp,1144
    4330:	000b1440 	call	b144 <__sprint_r>
    4334:	1000081e 	bne	r2,zero,4358 <___vfprintf_internal_r+0x45c>
    4338:	da000404 	addi	r8,sp,16
    433c:	003f4606 	br	4058 <__alt_mem_sram+0xf7e04058>
    4340:	d8812017 	ldw	r2,1152(sp)
    4344:	10000426 	beq	r2,zero,4358 <___vfprintf_internal_r+0x45c>
    4348:	b009883a 	mov	r4,r22
    434c:	b80b883a 	mov	r5,r23
    4350:	d9811e04 	addi	r6,sp,1144
    4354:	000b1440 	call	b144 <__sprint_r>
    4358:	b880030b 	ldhu	r2,12(r23)
    435c:	1080100c 	andi	r2,r2,64
    4360:	103fe31e 	bne	r2,zero,42f0 <__alt_mem_sram+0xf7e042f0>
    4364:	d8812f17 	ldw	r2,1212(sp)
    4368:	003fe206 	br	42f4 <__alt_mem_sram+0xf7e042f4>
    436c:	b009883a 	mov	r4,r22
    4370:	0007f1c0 	call	7f1c <__sinit>
    4374:	003ef906 	br	3f5c <__alt_mem_sram+0xf7e03f5c>
    4378:	dc012a17 	ldw	r16,1192(sp)
    437c:	003f3906 	br	4064 <__alt_mem_sram+0xf7e04064>
    4380:	1805883a 	mov	r2,r3
    4384:	8c400114 	ori	r17,r17,4
    4388:	1c000007 	ldb	r16,0(r3)
    438c:	003f4206 	br	4098 <__alt_mem_sram+0xf7e04098>
    4390:	1c000007 	ldb	r16,0(r3)
    4394:	18800044 	addi	r2,r3,1
    4398:	8286b326 	beq	r16,r10,5e68 <___vfprintf_internal_r+0x1f6c>
    439c:	82fff404 	addi	r11,r16,-48
    43a0:	1007883a 	mov	r3,r2
    43a4:	0013883a 	mov	r9,zero
    43a8:	2aff3c36 	bltu	r5,r11,409c <__alt_mem_sram+0xf7e0409c>
    43ac:	1c000007 	ldb	r16,0(r3)
    43b0:	4a4002a4 	muli	r9,r9,10
    43b4:	18c00044 	addi	r3,r3,1
    43b8:	5a53883a 	add	r9,r11,r9
    43bc:	82fff404 	addi	r11,r16,-48
    43c0:	2afffa2e 	bgeu	r5,r11,43ac <__alt_mem_sram+0xf7e043ac>
    43c4:	483f350e 	bge	r9,zero,409c <__alt_mem_sram+0xf7e0409c>
    43c8:	027fffc4 	movi	r9,-1
    43cc:	003f3306 	br	409c <__alt_mem_sram+0xf7e0409c>
    43d0:	8c402014 	ori	r17,r17,128
    43d4:	1805883a 	mov	r2,r3
    43d8:	1c000007 	ldb	r16,0(r3)
    43dc:	003f2e06 	br	4098 <__alt_mem_sram+0xf7e04098>
    43e0:	db012d17 	ldw	r12,1204(sp)
    43e4:	dac12d17 	ldw	r11,1204(sp)
    43e8:	d8c12a15 	stw	r3,1192(sp)
    43ec:	63000017 	ldw	r12,0(r12)
    43f0:	5ac00117 	ldw	r11,4(r11)
    43f4:	d9812785 	stb	r6,1182(sp)
    43f8:	6009883a 	mov	r4,r12
    43fc:	580b883a 	mov	r5,r11
    4400:	db013715 	stw	r12,1244(sp)
    4404:	da013f15 	stw	r8,1276(sp)
    4408:	da413e15 	stw	r9,1272(sp)
    440c:	dac13915 	stw	r11,1252(sp)
    4410:	000ada00 	call	ada0 <__fpclassifyd>
    4414:	db012d17 	ldw	r12,1204(sp)
    4418:	04800044 	movi	r18,1
    441c:	da013f17 	ldw	r8,1276(sp)
    4420:	64c00204 	addi	r19,r12,8
    4424:	da413e17 	ldw	r9,1272(sp)
    4428:	d9013717 	ldw	r4,1244(sp)
    442c:	d9413917 	ldw	r5,1252(sp)
    4430:	1484581e 	bne	r2,r18,5594 <___vfprintf_internal_r+0x1698>
    4434:	000d883a 	mov	r6,zero
    4438:	000f883a 	mov	r7,zero
    443c:	000ed5c0 	call	ed5c <__ledf2>
    4440:	da013f17 	ldw	r8,1276(sp)
    4444:	1005ef16 	blt	r2,zero,5c04 <___vfprintf_internal_r+0x1d08>
    4448:	dd412783 	ldbu	r21,1182(sp)
    444c:	008011c4 	movi	r2,71
    4450:	14053b0e 	bge	r2,r16,5940 <___vfprintf_internal_r+0x1a44>
    4454:	00c00074 	movhi	r3,1
    4458:	18cc6304 	addi	r3,r3,12684
    445c:	d8c13115 	stw	r3,1220(sp)
    4460:	02c000c4 	movi	r11,3
    4464:	00bfdfc4 	movi	r2,-129
    4468:	dac12b15 	stw	r11,1196(sp)
    446c:	88a2703a 	and	r17,r17,r2
    4470:	dcc12d15 	stw	r19,1204(sp)
    4474:	5825883a 	mov	r18,r11
    4478:	d8013215 	stw	zero,1224(sp)
    447c:	d8013415 	stw	zero,1232(sp)
    4480:	00003206 	br	454c <___vfprintf_internal_r+0x650>
    4484:	8c400214 	ori	r17,r17,8
    4488:	1805883a 	mov	r2,r3
    448c:	1c000007 	ldb	r16,0(r3)
    4490:	003f0106 	br	4098 <__alt_mem_sram+0xf7e04098>
    4494:	8c400414 	ori	r17,r17,16
    4498:	d8c12a15 	stw	r3,1192(sp)
    449c:	88c0080c 	andi	r3,r17,32
    44a0:	d8812d17 	ldw	r2,1204(sp)
    44a4:	18017726 	beq	r3,zero,4a84 <___vfprintf_internal_r+0xb88>
    44a8:	db012d17 	ldw	r12,1204(sp)
    44ac:	14c00017 	ldw	r19,0(r2)
    44b0:	17000117 	ldw	fp,4(r2)
    44b4:	63000204 	addi	r12,r12,8
    44b8:	db012d15 	stw	r12,1204(sp)
    44bc:	0005883a 	mov	r2,zero
    44c0:	9f06b03a 	or	r3,r19,fp
    44c4:	d8012785 	stb	zero,1182(sp)
    44c8:	da413215 	stw	r9,1224(sp)
    44cc:	002b883a 	mov	r21,zero
    44d0:	48000216 	blt	r9,zero,44dc <___vfprintf_internal_r+0x5e0>
    44d4:	013fdfc4 	movi	r4,-129
    44d8:	8922703a 	and	r17,r17,r4
    44dc:	1801ed1e 	bne	r3,zero,4c94 <___vfprintf_internal_r+0xd98>
    44e0:	4802e026 	beq	r9,zero,5064 <___vfprintf_internal_r+0x1168>
    44e4:	10803fcc 	andi	r2,r2,255
    44e8:	00c00044 	movi	r3,1
    44ec:	10c20f26 	beq	r2,r3,4d2c <___vfprintf_internal_r+0xe30>
    44f0:	00c00084 	movi	r3,2
    44f4:	10c2fd26 	beq	r2,r3,50ec <___vfprintf_internal_r+0x11f0>
    44f8:	d8c10e04 	addi	r3,sp,1080
    44fc:	9808d0fa 	srli	r4,r19,3
    4500:	e00a977a 	slli	r5,fp,29
    4504:	e038d0fa 	srli	fp,fp,3
    4508:	9cc001cc 	andi	r19,r19,7
    450c:	98800c04 	addi	r2,r19,48
    4510:	18ffffc4 	addi	r3,r3,-1
    4514:	2926b03a 	or	r19,r5,r4
    4518:	18800005 	stb	r2,0(r3)
    451c:	9f08b03a 	or	r4,r19,fp
    4520:	203ff61e 	bne	r4,zero,44fc <__alt_mem_sram+0xf7e044fc>
    4524:	8900004c 	andi	r4,r17,1
    4528:	d8c13115 	stw	r3,1220(sp)
    452c:	2003791e 	bne	r4,zero,5314 <___vfprintf_internal_r+0x1418>
    4530:	dac12817 	ldw	r11,1184(sp)
    4534:	58e5c83a 	sub	r18,r11,r3
    4538:	9005883a 	mov	r2,r18
    453c:	9240010e 	bge	r18,r9,4544 <___vfprintf_internal_r+0x648>
    4540:	4805883a 	mov	r2,r9
    4544:	d8812b15 	stw	r2,1196(sp)
    4548:	d8013415 	stw	zero,1232(sp)
    454c:	a8803fcc 	andi	r2,r21,255
    4550:	1080201c 	xori	r2,r2,128
    4554:	10bfe004 	addi	r2,r2,-128
    4558:	10000326 	beq	r2,zero,4568 <___vfprintf_internal_r+0x66c>
    455c:	db012b17 	ldw	r12,1196(sp)
    4560:	63000044 	addi	r12,r12,1
    4564:	db012b15 	stw	r12,1196(sp)
    4568:	88c0008c 	andi	r3,r17,2
    456c:	d8c12c15 	stw	r3,1200(sp)
    4570:	18000326 	beq	r3,zero,4580 <___vfprintf_internal_r+0x684>
    4574:	dac12b17 	ldw	r11,1196(sp)
    4578:	5ac00084 	addi	r11,r11,2
    457c:	dac12b15 	stw	r11,1196(sp)
    4580:	8b00210c 	andi	r12,r17,132
    4584:	db013015 	stw	r12,1216(sp)
    4588:	6001c01e 	bne	r12,zero,4c8c <___vfprintf_internal_r+0xd90>
    458c:	dac12e17 	ldw	r11,1208(sp)
    4590:	db012b17 	ldw	r12,1196(sp)
    4594:	5b39c83a 	sub	fp,r11,r12
    4598:	0701bc0e 	bge	zero,fp,4c8c <___vfprintf_internal_r+0xd90>
    459c:	02400404 	movi	r9,16
    45a0:	d8c12017 	ldw	r3,1152(sp)
    45a4:	d8811f17 	ldw	r2,1148(sp)
    45a8:	4f05220e 	bge	r9,fp,5a34 <___vfprintf_internal_r+0x1b38>
    45ac:	01400074 	movhi	r5,1
    45b0:	294c7684 	addi	r5,r5,12762
    45b4:	d9413615 	stw	r5,1240(sp)
    45b8:	482b883a 	mov	r21,r9
    45bc:	04c001c4 	movi	r19,7
    45c0:	00000306 	br	45d0 <___vfprintf_internal_r+0x6d4>
    45c4:	e73ffc04 	addi	fp,fp,-16
    45c8:	42000204 	addi	r8,r8,8
    45cc:	af00130e 	bge	r21,fp,461c <___vfprintf_internal_r+0x720>
    45d0:	02c00074 	movhi	r11,1
    45d4:	18c00404 	addi	r3,r3,16
    45d8:	10800044 	addi	r2,r2,1
    45dc:	5acc7684 	addi	r11,r11,12762
    45e0:	42c00015 	stw	r11,0(r8)
    45e4:	45400115 	stw	r21,4(r8)
    45e8:	d8c12015 	stw	r3,1152(sp)
    45ec:	d8811f15 	stw	r2,1148(sp)
    45f0:	98bff40e 	bge	r19,r2,45c4 <__alt_mem_sram+0xf7e045c4>
    45f4:	b009883a 	mov	r4,r22
    45f8:	b80b883a 	mov	r5,r23
    45fc:	d9811e04 	addi	r6,sp,1144
    4600:	000b1440 	call	b144 <__sprint_r>
    4604:	103f541e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    4608:	e73ffc04 	addi	fp,fp,-16
    460c:	d8c12017 	ldw	r3,1152(sp)
    4610:	d8811f17 	ldw	r2,1148(sp)
    4614:	da000404 	addi	r8,sp,16
    4618:	af3fed16 	blt	r21,fp,45d0 <__alt_mem_sram+0xf7e045d0>
    461c:	db013617 	ldw	r12,1240(sp)
    4620:	e0c7883a 	add	r3,fp,r3
    4624:	10800044 	addi	r2,r2,1
    4628:	43000015 	stw	r12,0(r8)
    462c:	47000115 	stw	fp,4(r8)
    4630:	d8c12015 	stw	r3,1152(sp)
    4634:	d8811f15 	stw	r2,1148(sp)
    4638:	010001c4 	movi	r4,7
    463c:	2082f416 	blt	r4,r2,5210 <___vfprintf_internal_r+0x1314>
    4640:	d8812787 	ldb	r2,1182(sp)
    4644:	42000204 	addi	r8,r8,8
    4648:	10000c26 	beq	r2,zero,467c <___vfprintf_internal_r+0x780>
    464c:	d8811f17 	ldw	r2,1148(sp)
    4650:	d9012784 	addi	r4,sp,1182
    4654:	18c00044 	addi	r3,r3,1
    4658:	10800044 	addi	r2,r2,1
    465c:	41000015 	stw	r4,0(r8)
    4660:	01000044 	movi	r4,1
    4664:	41000115 	stw	r4,4(r8)
    4668:	d8c12015 	stw	r3,1152(sp)
    466c:	d8811f15 	stw	r2,1148(sp)
    4670:	010001c4 	movi	r4,7
    4674:	20828d16 	blt	r4,r2,50ac <___vfprintf_internal_r+0x11b0>
    4678:	42000204 	addi	r8,r8,8
    467c:	dac12c17 	ldw	r11,1200(sp)
    4680:	58000c26 	beq	r11,zero,46b4 <___vfprintf_internal_r+0x7b8>
    4684:	d8811f17 	ldw	r2,1148(sp)
    4688:	d9012704 	addi	r4,sp,1180
    468c:	18c00084 	addi	r3,r3,2
    4690:	10800044 	addi	r2,r2,1
    4694:	41000015 	stw	r4,0(r8)
    4698:	01000084 	movi	r4,2
    469c:	41000115 	stw	r4,4(r8)
    46a0:	d8c12015 	stw	r3,1152(sp)
    46a4:	d8811f15 	stw	r2,1148(sp)
    46a8:	010001c4 	movi	r4,7
    46ac:	20828716 	blt	r4,r2,50cc <___vfprintf_internal_r+0x11d0>
    46b0:	42000204 	addi	r8,r8,8
    46b4:	db013017 	ldw	r12,1216(sp)
    46b8:	00802004 	movi	r2,128
    46bc:	6081e926 	beq	r12,r2,4e64 <___vfprintf_internal_r+0xf68>
    46c0:	db013217 	ldw	r12,1224(sp)
    46c4:	64abc83a 	sub	r21,r12,r18
    46c8:	0540260e 	bge	zero,r21,4764 <___vfprintf_internal_r+0x868>
    46cc:	07000404 	movi	fp,16
    46d0:	d8811f17 	ldw	r2,1148(sp)
    46d4:	e5443d0e 	bge	fp,r21,57cc <___vfprintf_internal_r+0x18d0>
    46d8:	01400074 	movhi	r5,1
    46dc:	294c7284 	addi	r5,r5,12746
    46e0:	d9412c15 	stw	r5,1200(sp)
    46e4:	04c001c4 	movi	r19,7
    46e8:	00000306 	br	46f8 <___vfprintf_internal_r+0x7fc>
    46ec:	ad7ffc04 	addi	r21,r21,-16
    46f0:	42000204 	addi	r8,r8,8
    46f4:	e540110e 	bge	fp,r21,473c <___vfprintf_internal_r+0x840>
    46f8:	18c00404 	addi	r3,r3,16
    46fc:	10800044 	addi	r2,r2,1
    4700:	45000015 	stw	r20,0(r8)
    4704:	47000115 	stw	fp,4(r8)
    4708:	d8c12015 	stw	r3,1152(sp)
    470c:	d8811f15 	stw	r2,1148(sp)
    4710:	98bff60e 	bge	r19,r2,46ec <__alt_mem_sram+0xf7e046ec>
    4714:	b009883a 	mov	r4,r22
    4718:	b80b883a 	mov	r5,r23
    471c:	d9811e04 	addi	r6,sp,1144
    4720:	000b1440 	call	b144 <__sprint_r>
    4724:	103f0c1e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    4728:	ad7ffc04 	addi	r21,r21,-16
    472c:	d8c12017 	ldw	r3,1152(sp)
    4730:	d8811f17 	ldw	r2,1148(sp)
    4734:	da000404 	addi	r8,sp,16
    4738:	e57fef16 	blt	fp,r21,46f8 <__alt_mem_sram+0xf7e046f8>
    473c:	dac12c17 	ldw	r11,1200(sp)
    4740:	1d47883a 	add	r3,r3,r21
    4744:	10800044 	addi	r2,r2,1
    4748:	42c00015 	stw	r11,0(r8)
    474c:	45400115 	stw	r21,4(r8)
    4750:	d8c12015 	stw	r3,1152(sp)
    4754:	d8811f15 	stw	r2,1148(sp)
    4758:	010001c4 	movi	r4,7
    475c:	20824b16 	blt	r4,r2,508c <___vfprintf_internal_r+0x1190>
    4760:	42000204 	addi	r8,r8,8
    4764:	8880400c 	andi	r2,r17,256
    4768:	1001761e 	bne	r2,zero,4d44 <___vfprintf_internal_r+0xe48>
    476c:	d8811f17 	ldw	r2,1148(sp)
    4770:	db013117 	ldw	r12,1220(sp)
    4774:	1c87883a 	add	r3,r3,r18
    4778:	10800044 	addi	r2,r2,1
    477c:	43000015 	stw	r12,0(r8)
    4780:	44800115 	stw	r18,4(r8)
    4784:	d8c12015 	stw	r3,1152(sp)
    4788:	d8811f15 	stw	r2,1148(sp)
    478c:	010001c4 	movi	r4,7
    4790:	20822616 	blt	r4,r2,502c <___vfprintf_internal_r+0x1130>
    4794:	42000204 	addi	r8,r8,8
    4798:	8c40010c 	andi	r17,r17,4
    479c:	88003126 	beq	r17,zero,4864 <___vfprintf_internal_r+0x968>
    47a0:	db012e17 	ldw	r12,1208(sp)
    47a4:	dac12b17 	ldw	r11,1196(sp)
    47a8:	62e1c83a 	sub	r16,r12,r11
    47ac:	04002d0e 	bge	zero,r16,4864 <___vfprintf_internal_r+0x968>
    47b0:	04400404 	movi	r17,16
    47b4:	d8811f17 	ldw	r2,1148(sp)
    47b8:	8c04df0e 	bge	r17,r16,5b38 <___vfprintf_internal_r+0x1c3c>
    47bc:	01000074 	movhi	r4,1
    47c0:	210c7684 	addi	r4,r4,12762
    47c4:	d9013615 	stw	r4,1240(sp)
    47c8:	048001c4 	movi	r18,7
    47cc:	00000306 	br	47dc <___vfprintf_internal_r+0x8e0>
    47d0:	843ffc04 	addi	r16,r16,-16
    47d4:	42000204 	addi	r8,r8,8
    47d8:	8c00130e 	bge	r17,r16,4828 <___vfprintf_internal_r+0x92c>
    47dc:	01400074 	movhi	r5,1
    47e0:	18c00404 	addi	r3,r3,16
    47e4:	10800044 	addi	r2,r2,1
    47e8:	294c7684 	addi	r5,r5,12762
    47ec:	41400015 	stw	r5,0(r8)
    47f0:	44400115 	stw	r17,4(r8)
    47f4:	d8c12015 	stw	r3,1152(sp)
    47f8:	d8811f15 	stw	r2,1148(sp)
    47fc:	90bff40e 	bge	r18,r2,47d0 <__alt_mem_sram+0xf7e047d0>
    4800:	b009883a 	mov	r4,r22
    4804:	b80b883a 	mov	r5,r23
    4808:	d9811e04 	addi	r6,sp,1144
    480c:	000b1440 	call	b144 <__sprint_r>
    4810:	103ed11e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    4814:	843ffc04 	addi	r16,r16,-16
    4818:	d8c12017 	ldw	r3,1152(sp)
    481c:	d8811f17 	ldw	r2,1148(sp)
    4820:	da000404 	addi	r8,sp,16
    4824:	8c3fed16 	blt	r17,r16,47dc <__alt_mem_sram+0xf7e047dc>
    4828:	dac13617 	ldw	r11,1240(sp)
    482c:	1c07883a 	add	r3,r3,r16
    4830:	10800044 	addi	r2,r2,1
    4834:	42c00015 	stw	r11,0(r8)
    4838:	44000115 	stw	r16,4(r8)
    483c:	d8c12015 	stw	r3,1152(sp)
    4840:	d8811f15 	stw	r2,1148(sp)
    4844:	010001c4 	movi	r4,7
    4848:	2080060e 	bge	r4,r2,4864 <___vfprintf_internal_r+0x968>
    484c:	b009883a 	mov	r4,r22
    4850:	b80b883a 	mov	r5,r23
    4854:	d9811e04 	addi	r6,sp,1144
    4858:	000b1440 	call	b144 <__sprint_r>
    485c:	103ebe1e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    4860:	d8c12017 	ldw	r3,1152(sp)
    4864:	d8812b17 	ldw	r2,1196(sp)
    4868:	db012e17 	ldw	r12,1208(sp)
    486c:	1300010e 	bge	r2,r12,4874 <___vfprintf_internal_r+0x978>
    4870:	6005883a 	mov	r2,r12
    4874:	dac12f17 	ldw	r11,1212(sp)
    4878:	5897883a 	add	r11,r11,r2
    487c:	dac12f15 	stw	r11,1212(sp)
    4880:	1801f21e 	bne	r3,zero,504c <___vfprintf_internal_r+0x1150>
    4884:	d8011f15 	stw	zero,1148(sp)
    4888:	da000404 	addi	r8,sp,16
    488c:	003dd806 	br	3ff0 <__alt_mem_sram+0xf7e03ff0>
    4890:	8c400414 	ori	r17,r17,16
    4894:	d8c12a15 	stw	r3,1192(sp)
    4898:	88c0080c 	andi	r3,r17,32
    489c:	d8812d17 	ldw	r2,1204(sp)
    48a0:	18004626 	beq	r3,zero,49bc <___vfprintf_internal_r+0xac0>
    48a4:	dac12d17 	ldw	r11,1204(sp)
    48a8:	14c00017 	ldw	r19,0(r2)
    48ac:	17000117 	ldw	fp,4(r2)
    48b0:	5ac00204 	addi	r11,r11,8
    48b4:	dac12d15 	stw	r11,1204(sp)
    48b8:	00800044 	movi	r2,1
    48bc:	9f06b03a 	or	r3,r19,fp
    48c0:	003f0006 	br	44c4 <__alt_mem_sram+0xf7e044c4>
    48c4:	1805883a 	mov	r2,r3
    48c8:	d8012e15 	stw	zero,1208(sp)
    48cc:	82fff404 	addi	r11,r16,-48
    48d0:	0019883a 	mov	r12,zero
    48d4:	14000007 	ldb	r16,0(r2)
    48d8:	630002a4 	muli	r12,r12,10
    48dc:	18c00044 	addi	r3,r3,1
    48e0:	1805883a 	mov	r2,r3
    48e4:	62d9883a 	add	r12,r12,r11
    48e8:	82fff404 	addi	r11,r16,-48
    48ec:	2afff92e 	bgeu	r5,r11,48d4 <__alt_mem_sram+0xf7e048d4>
    48f0:	db012e15 	stw	r12,1208(sp)
    48f4:	003de906 	br	409c <__alt_mem_sram+0xf7e0409c>
    48f8:	8c400414 	ori	r17,r17,16
    48fc:	d8c12a15 	stw	r3,1192(sp)
    4900:	d9812785 	stb	r6,1182(sp)
    4904:	8880080c 	andi	r2,r17,32
    4908:	d8c12d17 	ldw	r3,1204(sp)
    490c:	10007a26 	beq	r2,zero,4af8 <___vfprintf_internal_r+0xbfc>
    4910:	db012d17 	ldw	r12,1204(sp)
    4914:	18800117 	ldw	r2,4(r3)
    4918:	1cc00017 	ldw	r19,0(r3)
    491c:	63000204 	addi	r12,r12,8
    4920:	db012d15 	stw	r12,1204(sp)
    4924:	1039883a 	mov	fp,r2
    4928:	10031016 	blt	r2,zero,556c <___vfprintf_internal_r+0x1670>
    492c:	dd412783 	ldbu	r21,1182(sp)
    4930:	da413215 	stw	r9,1224(sp)
    4934:	00800044 	movi	r2,1
    4938:	9f06b03a 	or	r3,r19,fp
    493c:	003ee406 	br	44d0 <__alt_mem_sram+0xf7e044d0>
    4940:	03000074 	movhi	r12,1
    4944:	630c6604 	addi	r12,r12,12696
    4948:	d8c12a15 	stw	r3,1192(sp)
    494c:	d9812785 	stb	r6,1182(sp)
    4950:	db013b15 	stw	r12,1260(sp)
    4954:	88c0080c 	andi	r3,r17,32
    4958:	d8812d17 	ldw	r2,1204(sp)
    495c:	18002b26 	beq	r3,zero,4a0c <___vfprintf_internal_r+0xb10>
    4960:	dac12d17 	ldw	r11,1204(sp)
    4964:	14c00017 	ldw	r19,0(r2)
    4968:	17000117 	ldw	fp,4(r2)
    496c:	5ac00204 	addi	r11,r11,8
    4970:	dac12d15 	stw	r11,1204(sp)
    4974:	8880004c 	andi	r2,r17,1
    4978:	10025b26 	beq	r2,zero,52e8 <___vfprintf_internal_r+0x13ec>
    497c:	9f06b03a 	or	r3,r19,fp
    4980:	18037026 	beq	r3,zero,5744 <___vfprintf_internal_r+0x1848>
    4984:	00800c04 	movi	r2,48
    4988:	d8812705 	stb	r2,1180(sp)
    498c:	dc012745 	stb	r16,1181(sp)
    4990:	8c400094 	ori	r17,r17,2
    4994:	00800084 	movi	r2,2
    4998:	003eca06 	br	44c4 <__alt_mem_sram+0xf7e044c4>
    499c:	8c400814 	ori	r17,r17,32
    49a0:	1805883a 	mov	r2,r3
    49a4:	1c000007 	ldb	r16,0(r3)
    49a8:	003dbb06 	br	4098 <__alt_mem_sram+0xf7e04098>
    49ac:	d8c12a15 	stw	r3,1192(sp)
    49b0:	88c0080c 	andi	r3,r17,32
    49b4:	d8812d17 	ldw	r2,1204(sp)
    49b8:	183fba1e 	bne	r3,zero,48a4 <__alt_mem_sram+0xf7e048a4>
    49bc:	88c0040c 	andi	r3,r17,16
    49c0:	18024c1e 	bne	r3,zero,52f4 <___vfprintf_internal_r+0x13f8>
    49c4:	88c0100c 	andi	r3,r17,64
    49c8:	18024a26 	beq	r3,zero,52f4 <___vfprintf_internal_r+0x13f8>
    49cc:	dac12d17 	ldw	r11,1204(sp)
    49d0:	14c0000b 	ldhu	r19,0(r2)
    49d4:	0039883a 	mov	fp,zero
    49d8:	5ac00104 	addi	r11,r11,4
    49dc:	dac12d15 	stw	r11,1204(sp)
    49e0:	00800044 	movi	r2,1
    49e4:	9807883a 	mov	r3,r19
    49e8:	003eb606 	br	44c4 <__alt_mem_sram+0xf7e044c4>
    49ec:	00800074 	movhi	r2,1
    49f0:	108c6b04 	addi	r2,r2,12716
    49f4:	d8c12a15 	stw	r3,1192(sp)
    49f8:	d8813b15 	stw	r2,1260(sp)
    49fc:	d9812785 	stb	r6,1182(sp)
    4a00:	88c0080c 	andi	r3,r17,32
    4a04:	d8812d17 	ldw	r2,1204(sp)
    4a08:	183fd51e 	bne	r3,zero,4960 <__alt_mem_sram+0xf7e04960>
    4a0c:	88c0040c 	andi	r3,r17,16
    4a10:	18034126 	beq	r3,zero,5718 <___vfprintf_internal_r+0x181c>
    4a14:	db012d17 	ldw	r12,1204(sp)
    4a18:	14c00017 	ldw	r19,0(r2)
    4a1c:	0039883a 	mov	fp,zero
    4a20:	63000104 	addi	r12,r12,4
    4a24:	db012d15 	stw	r12,1204(sp)
    4a28:	003fd206 	br	4974 <__alt_mem_sram+0xf7e04974>
    4a2c:	1c000007 	ldb	r16,0(r3)
    4a30:	81c3d626 	beq	r16,r7,598c <___vfprintf_internal_r+0x1a90>
    4a34:	8c400414 	ori	r17,r17,16
    4a38:	1805883a 	mov	r2,r3
    4a3c:	003d9606 	br	4098 <__alt_mem_sram+0xf7e04098>
    4a40:	d8c12a15 	stw	r3,1192(sp)
    4a44:	d9812785 	stb	r6,1182(sp)
    4a48:	8880080c 	andi	r2,r17,32
    4a4c:	10033f26 	beq	r2,zero,574c <___vfprintf_internal_r+0x1850>
    4a50:	db012d17 	ldw	r12,1204(sp)
    4a54:	dac12f17 	ldw	r11,1212(sp)
    4a58:	60800017 	ldw	r2,0(r12)
    4a5c:	5807d7fa 	srai	r3,r11,31
    4a60:	63000104 	addi	r12,r12,4
    4a64:	db012d15 	stw	r12,1204(sp)
    4a68:	12c00015 	stw	r11,0(r2)
    4a6c:	10c00115 	stw	r3,4(r2)
    4a70:	003d5f06 	br	3ff0 <__alt_mem_sram+0xf7e03ff0>
    4a74:	d8c12a15 	stw	r3,1192(sp)
    4a78:	88c0080c 	andi	r3,r17,32
    4a7c:	d8812d17 	ldw	r2,1204(sp)
    4a80:	183e891e 	bne	r3,zero,44a8 <__alt_mem_sram+0xf7e044a8>
    4a84:	88c0040c 	andi	r3,r17,16
    4a88:	1801ea1e 	bne	r3,zero,5234 <___vfprintf_internal_r+0x1338>
    4a8c:	88c0100c 	andi	r3,r17,64
    4a90:	1801e826 	beq	r3,zero,5234 <___vfprintf_internal_r+0x1338>
    4a94:	db012d17 	ldw	r12,1204(sp)
    4a98:	14c0000b 	ldhu	r19,0(r2)
    4a9c:	0039883a 	mov	fp,zero
    4aa0:	63000104 	addi	r12,r12,4
    4aa4:	db012d15 	stw	r12,1204(sp)
    4aa8:	0005883a 	mov	r2,zero
    4aac:	9807883a 	mov	r3,r19
    4ab0:	003e8406 	br	44c4 <__alt_mem_sram+0xf7e044c4>
    4ab4:	30803fcc 	andi	r2,r6,255
    4ab8:	1080201c 	xori	r2,r2,128
    4abc:	10bfe004 	addi	r2,r2,-128
    4ac0:	10031d1e 	bne	r2,zero,5738 <___vfprintf_internal_r+0x183c>
    4ac4:	1805883a 	mov	r2,r3
    4ac8:	01800804 	movi	r6,32
    4acc:	1c000007 	ldb	r16,0(r3)
    4ad0:	003d7106 	br	4098 <__alt_mem_sram+0xf7e04098>
    4ad4:	8c400054 	ori	r17,r17,1
    4ad8:	1805883a 	mov	r2,r3
    4adc:	1c000007 	ldb	r16,0(r3)
    4ae0:	003d6d06 	br	4098 <__alt_mem_sram+0xf7e04098>
    4ae4:	d8c12a15 	stw	r3,1192(sp)
    4ae8:	d9812785 	stb	r6,1182(sp)
    4aec:	8880080c 	andi	r2,r17,32
    4af0:	d8c12d17 	ldw	r3,1204(sp)
    4af4:	103f861e 	bne	r2,zero,4910 <__alt_mem_sram+0xf7e04910>
    4af8:	8880040c 	andi	r2,r17,16
    4afc:	1001f31e 	bne	r2,zero,52cc <___vfprintf_internal_r+0x13d0>
    4b00:	8880100c 	andi	r2,r17,64
    4b04:	1001f126 	beq	r2,zero,52cc <___vfprintf_internal_r+0x13d0>
    4b08:	1cc0000f 	ldh	r19,0(r3)
    4b0c:	db012d17 	ldw	r12,1204(sp)
    4b10:	9839d7fa 	srai	fp,r19,31
    4b14:	63000104 	addi	r12,r12,4
    4b18:	db012d15 	stw	r12,1204(sp)
    4b1c:	e005883a 	mov	r2,fp
    4b20:	003f8106 	br	4928 <__alt_mem_sram+0xf7e04928>
    4b24:	8c401014 	ori	r17,r17,64
    4b28:	1805883a 	mov	r2,r3
    4b2c:	1c000007 	ldb	r16,0(r3)
    4b30:	003d5906 	br	4098 <__alt_mem_sram+0xf7e04098>
    4b34:	db012d17 	ldw	r12,1204(sp)
    4b38:	d8c12a15 	stw	r3,1192(sp)
    4b3c:	00c00044 	movi	r3,1
    4b40:	60800017 	ldw	r2,0(r12)
    4b44:	63000104 	addi	r12,r12,4
    4b48:	d8c12b15 	stw	r3,1196(sp)
    4b4c:	d8012785 	stb	zero,1182(sp)
    4b50:	d8810405 	stb	r2,1040(sp)
    4b54:	db012d15 	stw	r12,1204(sp)
    4b58:	dac10404 	addi	r11,sp,1040
    4b5c:	1825883a 	mov	r18,r3
    4b60:	d8013215 	stw	zero,1224(sp)
    4b64:	d8013415 	stw	zero,1232(sp)
    4b68:	dac13115 	stw	r11,1220(sp)
    4b6c:	0005883a 	mov	r2,zero
    4b70:	003e7d06 	br	4568 <__alt_mem_sram+0xf7e04568>
    4b74:	db012d17 	ldw	r12,1204(sp)
    4b78:	00800c04 	movi	r2,48
    4b7c:	d8812705 	stb	r2,1180(sp)
    4b80:	64c00017 	ldw	r19,0(r12)
    4b84:	00801e04 	movi	r2,120
    4b88:	d8812745 	stb	r2,1181(sp)
    4b8c:	00800074 	movhi	r2,1
    4b90:	108c6b04 	addi	r2,r2,12716
    4b94:	63000104 	addi	r12,r12,4
    4b98:	d8c12a15 	stw	r3,1192(sp)
    4b9c:	d8813b15 	stw	r2,1260(sp)
    4ba0:	0039883a 	mov	fp,zero
    4ba4:	8c400094 	ori	r17,r17,2
    4ba8:	db012d15 	stw	r12,1204(sp)
    4bac:	00800084 	movi	r2,2
    4bb0:	04001e04 	movi	r16,120
    4bb4:	9807883a 	mov	r3,r19
    4bb8:	003e4206 	br	44c4 <__alt_mem_sram+0xf7e044c4>
    4bbc:	dac12d17 	ldw	r11,1204(sp)
    4bc0:	db012d17 	ldw	r12,1204(sp)
    4bc4:	d8c12a15 	stw	r3,1192(sp)
    4bc8:	5ac00017 	ldw	r11,0(r11)
    4bcc:	d8012785 	stb	zero,1182(sp)
    4bd0:	64c00104 	addi	r19,r12,4
    4bd4:	dac13115 	stw	r11,1220(sp)
    4bd8:	5803e826 	beq	r11,zero,5b7c <___vfprintf_internal_r+0x1c80>
    4bdc:	d9013117 	ldw	r4,1220(sp)
    4be0:	48037a16 	blt	r9,zero,59cc <___vfprintf_internal_r+0x1ad0>
    4be4:	480d883a 	mov	r6,r9
    4be8:	000b883a 	mov	r5,zero
    4bec:	da013f15 	stw	r8,1276(sp)
    4bf0:	da413e15 	stw	r9,1272(sp)
    4bf4:	00093d40 	call	93d4 <memchr>
    4bf8:	da013f17 	ldw	r8,1276(sp)
    4bfc:	da413e17 	ldw	r9,1272(sp)
    4c00:	10044426 	beq	r2,zero,5d14 <___vfprintf_internal_r+0x1e18>
    4c04:	d8c13117 	ldw	r3,1220(sp)
    4c08:	10e5c83a 	sub	r18,r2,r3
    4c0c:	4c834416 	blt	r9,r18,5920 <___vfprintf_internal_r+0x1a24>
    4c10:	9005883a 	mov	r2,r18
    4c14:	90037216 	blt	r18,zero,59e0 <___vfprintf_internal_r+0x1ae4>
    4c18:	dd412783 	ldbu	r21,1182(sp)
    4c1c:	d8812b15 	stw	r2,1196(sp)
    4c20:	dcc12d15 	stw	r19,1204(sp)
    4c24:	d8013215 	stw	zero,1224(sp)
    4c28:	d8013415 	stw	zero,1232(sp)
    4c2c:	003e4706 	br	454c <__alt_mem_sram+0xf7e0454c>
    4c30:	dac12d17 	ldw	r11,1204(sp)
    4c34:	db012d17 	ldw	r12,1204(sp)
    4c38:	5ac00017 	ldw	r11,0(r11)
    4c3c:	dac12e15 	stw	r11,1208(sp)
    4c40:	62c00104 	addi	r11,r12,4
    4c44:	db012e17 	ldw	r12,1208(sp)
    4c48:	60034a16 	blt	r12,zero,5974 <___vfprintf_internal_r+0x1a78>
    4c4c:	dac12d15 	stw	r11,1204(sp)
    4c50:	1805883a 	mov	r2,r3
    4c54:	1c000007 	ldb	r16,0(r3)
    4c58:	003d0f06 	br	4098 <__alt_mem_sram+0xf7e04098>
    4c5c:	1805883a 	mov	r2,r3
    4c60:	01800ac4 	movi	r6,43
    4c64:	1c000007 	ldb	r16,0(r3)
    4c68:	003d0b06 	br	4098 <__alt_mem_sram+0xf7e04098>
    4c6c:	d8c12a15 	stw	r3,1192(sp)
    4c70:	d9812785 	stb	r6,1182(sp)
    4c74:	803db226 	beq	r16,zero,4340 <__alt_mem_sram+0xf7e04340>
    4c78:	00c00044 	movi	r3,1
    4c7c:	d8c12b15 	stw	r3,1196(sp)
    4c80:	dc010405 	stb	r16,1040(sp)
    4c84:	d8012785 	stb	zero,1182(sp)
    4c88:	003fb306 	br	4b58 <__alt_mem_sram+0xf7e04b58>
    4c8c:	d8c12017 	ldw	r3,1152(sp)
    4c90:	003e6d06 	br	4648 <__alt_mem_sram+0xf7e04648>
    4c94:	10803fcc 	andi	r2,r2,255
    4c98:	00c00044 	movi	r3,1
    4c9c:	10fe141e 	bne	r2,r3,44f0 <__alt_mem_sram+0xf7e044f0>
    4ca0:	e000021e 	bne	fp,zero,4cac <___vfprintf_internal_r+0xdb0>
    4ca4:	00800244 	movi	r2,9
    4ca8:	14c0202e 	bgeu	r2,r19,4d2c <___vfprintf_internal_r+0xe30>
    4cac:	dc012b15 	stw	r16,1196(sp)
    4cb0:	dc412c15 	stw	r17,1200(sp)
    4cb4:	9821883a 	mov	r16,r19
    4cb8:	e023883a 	mov	r17,fp
    4cbc:	dc810e04 	addi	r18,sp,1080
    4cc0:	4027883a 	mov	r19,r8
    4cc4:	4839883a 	mov	fp,r9
    4cc8:	8009883a 	mov	r4,r16
    4ccc:	880b883a 	mov	r5,r17
    4cd0:	01800284 	movi	r6,10
    4cd4:	000f883a 	mov	r7,zero
    4cd8:	000d3d40 	call	d3d4 <__umoddi3>
    4cdc:	10800c04 	addi	r2,r2,48
    4ce0:	94bfffc4 	addi	r18,r18,-1
    4ce4:	8009883a 	mov	r4,r16
    4ce8:	880b883a 	mov	r5,r17
    4cec:	01800284 	movi	r6,10
    4cf0:	000f883a 	mov	r7,zero
    4cf4:	90800005 	stb	r2,0(r18)
    4cf8:	000ce140 	call	ce14 <__udivdi3>
    4cfc:	1021883a 	mov	r16,r2
    4d00:	10c4b03a 	or	r2,r2,r3
    4d04:	1823883a 	mov	r17,r3
    4d08:	103fef1e 	bne	r2,zero,4cc8 <__alt_mem_sram+0xf7e04cc8>
    4d0c:	dac12817 	ldw	r11,1184(sp)
    4d10:	dc813115 	stw	r18,1220(sp)
    4d14:	dc012b17 	ldw	r16,1196(sp)
    4d18:	9811883a 	mov	r8,r19
    4d1c:	dc412c17 	ldw	r17,1200(sp)
    4d20:	e013883a 	mov	r9,fp
    4d24:	5ca5c83a 	sub	r18,r11,r18
    4d28:	003e0306 	br	4538 <__alt_mem_sram+0xf7e04538>
    4d2c:	9cc00c04 	addi	r19,r19,48
    4d30:	d8c10dc4 	addi	r3,sp,1079
    4d34:	dcc10dc5 	stb	r19,1079(sp)
    4d38:	dc813c17 	ldw	r18,1264(sp)
    4d3c:	d8c13115 	stw	r3,1220(sp)
    4d40:	003dfd06 	br	4538 <__alt_mem_sram+0xf7e04538>
    4d44:	00801944 	movi	r2,101
    4d48:	1400710e 	bge	r2,r16,4f10 <___vfprintf_internal_r+0x1014>
    4d4c:	d9013717 	ldw	r4,1244(sp)
    4d50:	d9413917 	ldw	r5,1252(sp)
    4d54:	000d883a 	mov	r6,zero
    4d58:	000f883a 	mov	r7,zero
    4d5c:	d8c13d15 	stw	r3,1268(sp)
    4d60:	da013f15 	stw	r8,1276(sp)
    4d64:	000ebf80 	call	ebf8 <__eqdf2>
    4d68:	d8c13d17 	ldw	r3,1268(sp)
    4d6c:	da013f17 	ldw	r8,1276(sp)
    4d70:	1000ef1e 	bne	r2,zero,5130 <___vfprintf_internal_r+0x1234>
    4d74:	d8811f17 	ldw	r2,1148(sp)
    4d78:	01000074 	movhi	r4,1
    4d7c:	210c7204 	addi	r4,r4,12744
    4d80:	18c00044 	addi	r3,r3,1
    4d84:	10800044 	addi	r2,r2,1
    4d88:	41000015 	stw	r4,0(r8)
    4d8c:	01000044 	movi	r4,1
    4d90:	41000115 	stw	r4,4(r8)
    4d94:	d8c12015 	stw	r3,1152(sp)
    4d98:	d8811f15 	stw	r2,1148(sp)
    4d9c:	010001c4 	movi	r4,7
    4da0:	20828e16 	blt	r4,r2,57dc <___vfprintf_internal_r+0x18e0>
    4da4:	42000204 	addi	r8,r8,8
    4da8:	d8812617 	ldw	r2,1176(sp)
    4dac:	dac13317 	ldw	r11,1228(sp)
    4db0:	12c00216 	blt	r2,r11,4dbc <___vfprintf_internal_r+0xec0>
    4db4:	8880004c 	andi	r2,r17,1
    4db8:	103e7726 	beq	r2,zero,4798 <__alt_mem_sram+0xf7e04798>
    4dbc:	db013817 	ldw	r12,1248(sp)
    4dc0:	d8811f17 	ldw	r2,1148(sp)
    4dc4:	dac13517 	ldw	r11,1236(sp)
    4dc8:	1b07883a 	add	r3,r3,r12
    4dcc:	10800044 	addi	r2,r2,1
    4dd0:	42c00015 	stw	r11,0(r8)
    4dd4:	43000115 	stw	r12,4(r8)
    4dd8:	d8c12015 	stw	r3,1152(sp)
    4ddc:	d8811f15 	stw	r2,1148(sp)
    4de0:	010001c4 	movi	r4,7
    4de4:	2082ed16 	blt	r4,r2,599c <___vfprintf_internal_r+0x1aa0>
    4de8:	42000204 	addi	r8,r8,8
    4dec:	db013317 	ldw	r12,1228(sp)
    4df0:	643fffc4 	addi	r16,r12,-1
    4df4:	043e680e 	bge	zero,r16,4798 <__alt_mem_sram+0xf7e04798>
    4df8:	04800404 	movi	r18,16
    4dfc:	d8811f17 	ldw	r2,1148(sp)
    4e00:	94007e0e 	bge	r18,r16,4ffc <___vfprintf_internal_r+0x1100>
    4e04:	01400074 	movhi	r5,1
    4e08:	294c7284 	addi	r5,r5,12746
    4e0c:	d9412c15 	stw	r5,1200(sp)
    4e10:	054001c4 	movi	r21,7
    4e14:	00000306 	br	4e24 <___vfprintf_internal_r+0xf28>
    4e18:	42000204 	addi	r8,r8,8
    4e1c:	843ffc04 	addi	r16,r16,-16
    4e20:	9400790e 	bge	r18,r16,5008 <___vfprintf_internal_r+0x110c>
    4e24:	18c00404 	addi	r3,r3,16
    4e28:	10800044 	addi	r2,r2,1
    4e2c:	45000015 	stw	r20,0(r8)
    4e30:	44800115 	stw	r18,4(r8)
    4e34:	d8c12015 	stw	r3,1152(sp)
    4e38:	d8811f15 	stw	r2,1148(sp)
    4e3c:	a8bff60e 	bge	r21,r2,4e18 <__alt_mem_sram+0xf7e04e18>
    4e40:	b009883a 	mov	r4,r22
    4e44:	b80b883a 	mov	r5,r23
    4e48:	d9811e04 	addi	r6,sp,1144
    4e4c:	000b1440 	call	b144 <__sprint_r>
    4e50:	103d411e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    4e54:	d8c12017 	ldw	r3,1152(sp)
    4e58:	d8811f17 	ldw	r2,1148(sp)
    4e5c:	da000404 	addi	r8,sp,16
    4e60:	003fee06 	br	4e1c <__alt_mem_sram+0xf7e04e1c>
    4e64:	dac12e17 	ldw	r11,1208(sp)
    4e68:	db012b17 	ldw	r12,1196(sp)
    4e6c:	5b2bc83a 	sub	r21,r11,r12
    4e70:	057e130e 	bge	zero,r21,46c0 <__alt_mem_sram+0xf7e046c0>
    4e74:	07000404 	movi	fp,16
    4e78:	d8811f17 	ldw	r2,1148(sp)
    4e7c:	e543640e 	bge	fp,r21,5c10 <___vfprintf_internal_r+0x1d14>
    4e80:	01400074 	movhi	r5,1
    4e84:	294c7284 	addi	r5,r5,12746
    4e88:	d9412c15 	stw	r5,1200(sp)
    4e8c:	04c001c4 	movi	r19,7
    4e90:	00000306 	br	4ea0 <___vfprintf_internal_r+0xfa4>
    4e94:	ad7ffc04 	addi	r21,r21,-16
    4e98:	42000204 	addi	r8,r8,8
    4e9c:	e540110e 	bge	fp,r21,4ee4 <___vfprintf_internal_r+0xfe8>
    4ea0:	18c00404 	addi	r3,r3,16
    4ea4:	10800044 	addi	r2,r2,1
    4ea8:	45000015 	stw	r20,0(r8)
    4eac:	47000115 	stw	fp,4(r8)
    4eb0:	d8c12015 	stw	r3,1152(sp)
    4eb4:	d8811f15 	stw	r2,1148(sp)
    4eb8:	98bff60e 	bge	r19,r2,4e94 <__alt_mem_sram+0xf7e04e94>
    4ebc:	b009883a 	mov	r4,r22
    4ec0:	b80b883a 	mov	r5,r23
    4ec4:	d9811e04 	addi	r6,sp,1144
    4ec8:	000b1440 	call	b144 <__sprint_r>
    4ecc:	103d221e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    4ed0:	ad7ffc04 	addi	r21,r21,-16
    4ed4:	d8c12017 	ldw	r3,1152(sp)
    4ed8:	d8811f17 	ldw	r2,1148(sp)
    4edc:	da000404 	addi	r8,sp,16
    4ee0:	e57fef16 	blt	fp,r21,4ea0 <__alt_mem_sram+0xf7e04ea0>
    4ee4:	dac12c17 	ldw	r11,1200(sp)
    4ee8:	1d47883a 	add	r3,r3,r21
    4eec:	10800044 	addi	r2,r2,1
    4ef0:	42c00015 	stw	r11,0(r8)
    4ef4:	45400115 	stw	r21,4(r8)
    4ef8:	d8c12015 	stw	r3,1152(sp)
    4efc:	d8811f15 	stw	r2,1148(sp)
    4f00:	010001c4 	movi	r4,7
    4f04:	20819116 	blt	r4,r2,554c <___vfprintf_internal_r+0x1650>
    4f08:	42000204 	addi	r8,r8,8
    4f0c:	003dec06 	br	46c0 <__alt_mem_sram+0xf7e046c0>
    4f10:	db013317 	ldw	r12,1228(sp)
    4f14:	00800044 	movi	r2,1
    4f18:	18c00044 	addi	r3,r3,1
    4f1c:	1301530e 	bge	r2,r12,546c <___vfprintf_internal_r+0x1570>
    4f20:	dc011f17 	ldw	r16,1148(sp)
    4f24:	dac13117 	ldw	r11,1220(sp)
    4f28:	00800044 	movi	r2,1
    4f2c:	84000044 	addi	r16,r16,1
    4f30:	40800115 	stw	r2,4(r8)
    4f34:	42c00015 	stw	r11,0(r8)
    4f38:	d8c12015 	stw	r3,1152(sp)
    4f3c:	dc011f15 	stw	r16,1148(sp)
    4f40:	008001c4 	movi	r2,7
    4f44:	14016b16 	blt	r2,r16,54f4 <___vfprintf_internal_r+0x15f8>
    4f48:	42000204 	addi	r8,r8,8
    4f4c:	db013817 	ldw	r12,1248(sp)
    4f50:	dac13517 	ldw	r11,1236(sp)
    4f54:	84000044 	addi	r16,r16,1
    4f58:	1b07883a 	add	r3,r3,r12
    4f5c:	42c00015 	stw	r11,0(r8)
    4f60:	43000115 	stw	r12,4(r8)
    4f64:	d8c12015 	stw	r3,1152(sp)
    4f68:	dc011f15 	stw	r16,1148(sp)
    4f6c:	008001c4 	movi	r2,7
    4f70:	14016916 	blt	r2,r16,5518 <___vfprintf_internal_r+0x161c>
    4f74:	44800204 	addi	r18,r8,8
    4f78:	d9013717 	ldw	r4,1244(sp)
    4f7c:	d9413917 	ldw	r5,1252(sp)
    4f80:	000d883a 	mov	r6,zero
    4f84:	000f883a 	mov	r7,zero
    4f88:	d8c13d15 	stw	r3,1268(sp)
    4f8c:	000ebf80 	call	ebf8 <__eqdf2>
    4f90:	d8c13d17 	ldw	r3,1268(sp)
    4f94:	db013317 	ldw	r12,1228(sp)
    4f98:	1000ae26 	beq	r2,zero,5254 <___vfprintf_internal_r+0x1358>
    4f9c:	dac13117 	ldw	r11,1220(sp)
    4fa0:	60bfffc4 	addi	r2,r12,-1
    4fa4:	1887883a 	add	r3,r3,r2
    4fa8:	59000044 	addi	r4,r11,1
    4fac:	84000044 	addi	r16,r16,1
    4fb0:	90800115 	stw	r2,4(r18)
    4fb4:	91000015 	stw	r4,0(r18)
    4fb8:	d8c12015 	stw	r3,1152(sp)
    4fbc:	dc011f15 	stw	r16,1148(sp)
    4fc0:	008001c4 	movi	r2,7
    4fc4:	14014216 	blt	r2,r16,54d0 <___vfprintf_internal_r+0x15d4>
    4fc8:	94800204 	addi	r18,r18,8
    4fcc:	dac13a17 	ldw	r11,1256(sp)
    4fd0:	dd4122c4 	addi	r21,sp,1163
    4fd4:	84000044 	addi	r16,r16,1
    4fd8:	58c7883a 	add	r3,r11,r3
    4fdc:	95400015 	stw	r21,0(r18)
    4fe0:	92c00115 	stw	r11,4(r18)
    4fe4:	d8c12015 	stw	r3,1152(sp)
    4fe8:	dc011f15 	stw	r16,1148(sp)
    4fec:	008001c4 	movi	r2,7
    4ff0:	14000e16 	blt	r2,r16,502c <___vfprintf_internal_r+0x1130>
    4ff4:	92000204 	addi	r8,r18,8
    4ff8:	003de706 	br	4798 <__alt_mem_sram+0xf7e04798>
    4ffc:	01000074 	movhi	r4,1
    5000:	210c7284 	addi	r4,r4,12746
    5004:	d9012c15 	stw	r4,1200(sp)
    5008:	dac12c17 	ldw	r11,1200(sp)
    500c:	1c07883a 	add	r3,r3,r16
    5010:	44000115 	stw	r16,4(r8)
    5014:	42c00015 	stw	r11,0(r8)
    5018:	10800044 	addi	r2,r2,1
    501c:	d8c12015 	stw	r3,1152(sp)
    5020:	d8811f15 	stw	r2,1148(sp)
    5024:	010001c4 	movi	r4,7
    5028:	20bdda0e 	bge	r4,r2,4794 <__alt_mem_sram+0xf7e04794>
    502c:	b009883a 	mov	r4,r22
    5030:	b80b883a 	mov	r5,r23
    5034:	d9811e04 	addi	r6,sp,1144
    5038:	000b1440 	call	b144 <__sprint_r>
    503c:	103cc61e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    5040:	d8c12017 	ldw	r3,1152(sp)
    5044:	da000404 	addi	r8,sp,16
    5048:	003dd306 	br	4798 <__alt_mem_sram+0xf7e04798>
    504c:	b009883a 	mov	r4,r22
    5050:	b80b883a 	mov	r5,r23
    5054:	d9811e04 	addi	r6,sp,1144
    5058:	000b1440 	call	b144 <__sprint_r>
    505c:	103e0926 	beq	r2,zero,4884 <__alt_mem_sram+0xf7e04884>
    5060:	003cbd06 	br	4358 <__alt_mem_sram+0xf7e04358>
    5064:	10803fcc 	andi	r2,r2,255
    5068:	1000651e 	bne	r2,zero,5200 <___vfprintf_internal_r+0x1304>
    506c:	8880004c 	andi	r2,r17,1
    5070:	10013226 	beq	r2,zero,553c <___vfprintf_internal_r+0x1640>
    5074:	00800c04 	movi	r2,48
    5078:	d8c10dc4 	addi	r3,sp,1079
    507c:	d8810dc5 	stb	r2,1079(sp)
    5080:	dc813c17 	ldw	r18,1264(sp)
    5084:	d8c13115 	stw	r3,1220(sp)
    5088:	003d2b06 	br	4538 <__alt_mem_sram+0xf7e04538>
    508c:	b009883a 	mov	r4,r22
    5090:	b80b883a 	mov	r5,r23
    5094:	d9811e04 	addi	r6,sp,1144
    5098:	000b1440 	call	b144 <__sprint_r>
    509c:	103cae1e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    50a0:	d8c12017 	ldw	r3,1152(sp)
    50a4:	da000404 	addi	r8,sp,16
    50a8:	003dae06 	br	4764 <__alt_mem_sram+0xf7e04764>
    50ac:	b009883a 	mov	r4,r22
    50b0:	b80b883a 	mov	r5,r23
    50b4:	d9811e04 	addi	r6,sp,1144
    50b8:	000b1440 	call	b144 <__sprint_r>
    50bc:	103ca61e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    50c0:	d8c12017 	ldw	r3,1152(sp)
    50c4:	da000404 	addi	r8,sp,16
    50c8:	003d6c06 	br	467c <__alt_mem_sram+0xf7e0467c>
    50cc:	b009883a 	mov	r4,r22
    50d0:	b80b883a 	mov	r5,r23
    50d4:	d9811e04 	addi	r6,sp,1144
    50d8:	000b1440 	call	b144 <__sprint_r>
    50dc:	103c9e1e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    50e0:	d8c12017 	ldw	r3,1152(sp)
    50e4:	da000404 	addi	r8,sp,16
    50e8:	003d7206 	br	46b4 <__alt_mem_sram+0xf7e046b4>
    50ec:	d9413b17 	ldw	r5,1260(sp)
    50f0:	d8c10e04 	addi	r3,sp,1080
    50f4:	988003cc 	andi	r2,r19,15
    50f8:	e008973a 	slli	r4,fp,28
    50fc:	2885883a 	add	r2,r5,r2
    5100:	9826d13a 	srli	r19,r19,4
    5104:	10800003 	ldbu	r2,0(r2)
    5108:	e038d13a 	srli	fp,fp,4
    510c:	18ffffc4 	addi	r3,r3,-1
    5110:	24e6b03a 	or	r19,r4,r19
    5114:	18800005 	stb	r2,0(r3)
    5118:	9f04b03a 	or	r2,r19,fp
    511c:	103ff51e 	bne	r2,zero,50f4 <__alt_mem_sram+0xf7e050f4>
    5120:	db012817 	ldw	r12,1184(sp)
    5124:	d8c13115 	stw	r3,1220(sp)
    5128:	60e5c83a 	sub	r18,r12,r3
    512c:	003d0206 	br	4538 <__alt_mem_sram+0xf7e04538>
    5130:	dc012617 	ldw	r16,1176(sp)
    5134:	0401b10e 	bge	zero,r16,57fc <___vfprintf_internal_r+0x1900>
    5138:	db013117 	ldw	r12,1220(sp)
    513c:	dac13317 	ldw	r11,1228(sp)
    5140:	62e1883a 	add	r16,r12,r11
    5144:	db013417 	ldw	r12,1232(sp)
    5148:	5825883a 	mov	r18,r11
    514c:	62c0010e 	bge	r12,r11,5154 <___vfprintf_internal_r+0x1258>
    5150:	6025883a 	mov	r18,r12
    5154:	04800b0e 	bge	zero,r18,5184 <___vfprintf_internal_r+0x1288>
    5158:	d8811f17 	ldw	r2,1148(sp)
    515c:	dac13117 	ldw	r11,1220(sp)
    5160:	1c87883a 	add	r3,r3,r18
    5164:	10800044 	addi	r2,r2,1
    5168:	42c00015 	stw	r11,0(r8)
    516c:	44800115 	stw	r18,4(r8)
    5170:	d8c12015 	stw	r3,1152(sp)
    5174:	d8811f15 	stw	r2,1148(sp)
    5178:	010001c4 	movi	r4,7
    517c:	20824f16 	blt	r4,r2,5abc <___vfprintf_internal_r+0x1bc0>
    5180:	42000204 	addi	r8,r8,8
    5184:	90024b16 	blt	r18,zero,5ab4 <___vfprintf_internal_r+0x1bb8>
    5188:	db013417 	ldw	r12,1232(sp)
    518c:	64a5c83a 	sub	r18,r12,r18
    5190:	0480730e 	bge	zero,r18,5360 <___vfprintf_internal_r+0x1464>
    5194:	05400404 	movi	r21,16
    5198:	d8811f17 	ldw	r2,1148(sp)
    519c:	ac817d0e 	bge	r21,r18,5794 <___vfprintf_internal_r+0x1898>
    51a0:	01400074 	movhi	r5,1
    51a4:	294c7284 	addi	r5,r5,12746
    51a8:	d9412c15 	stw	r5,1200(sp)
    51ac:	070001c4 	movi	fp,7
    51b0:	00000306 	br	51c0 <___vfprintf_internal_r+0x12c4>
    51b4:	42000204 	addi	r8,r8,8
    51b8:	94bffc04 	addi	r18,r18,-16
    51bc:	ac81780e 	bge	r21,r18,57a0 <___vfprintf_internal_r+0x18a4>
    51c0:	18c00404 	addi	r3,r3,16
    51c4:	10800044 	addi	r2,r2,1
    51c8:	45000015 	stw	r20,0(r8)
    51cc:	45400115 	stw	r21,4(r8)
    51d0:	d8c12015 	stw	r3,1152(sp)
    51d4:	d8811f15 	stw	r2,1148(sp)
    51d8:	e0bff60e 	bge	fp,r2,51b4 <__alt_mem_sram+0xf7e051b4>
    51dc:	b009883a 	mov	r4,r22
    51e0:	b80b883a 	mov	r5,r23
    51e4:	d9811e04 	addi	r6,sp,1144
    51e8:	000b1440 	call	b144 <__sprint_r>
    51ec:	103c5a1e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    51f0:	d8c12017 	ldw	r3,1152(sp)
    51f4:	d8811f17 	ldw	r2,1148(sp)
    51f8:	da000404 	addi	r8,sp,16
    51fc:	003fee06 	br	51b8 <__alt_mem_sram+0xf7e051b8>
    5200:	dac10e04 	addi	r11,sp,1080
    5204:	0025883a 	mov	r18,zero
    5208:	dac13115 	stw	r11,1220(sp)
    520c:	003cca06 	br	4538 <__alt_mem_sram+0xf7e04538>
    5210:	b009883a 	mov	r4,r22
    5214:	b80b883a 	mov	r5,r23
    5218:	d9811e04 	addi	r6,sp,1144
    521c:	000b1440 	call	b144 <__sprint_r>
    5220:	103c4d1e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    5224:	d8c12017 	ldw	r3,1152(sp)
    5228:	d8812787 	ldb	r2,1182(sp)
    522c:	da000404 	addi	r8,sp,16
    5230:	003d0506 	br	4648 <__alt_mem_sram+0xf7e04648>
    5234:	dac12d17 	ldw	r11,1204(sp)
    5238:	14c00017 	ldw	r19,0(r2)
    523c:	0039883a 	mov	fp,zero
    5240:	5ac00104 	addi	r11,r11,4
    5244:	dac12d15 	stw	r11,1204(sp)
    5248:	0005883a 	mov	r2,zero
    524c:	9807883a 	mov	r3,r19
    5250:	003c9c06 	br	44c4 <__alt_mem_sram+0xf7e044c4>
    5254:	657fffc4 	addi	r21,r12,-1
    5258:	057f5c0e 	bge	zero,r21,4fcc <__alt_mem_sram+0xf7e04fcc>
    525c:	07000404 	movi	fp,16
    5260:	e5408f0e 	bge	fp,r21,54a0 <___vfprintf_internal_r+0x15a4>
    5264:	01000074 	movhi	r4,1
    5268:	210c7284 	addi	r4,r4,12746
    526c:	d9012c15 	stw	r4,1200(sp)
    5270:	01c001c4 	movi	r7,7
    5274:	00000306 	br	5284 <___vfprintf_internal_r+0x1388>
    5278:	94800204 	addi	r18,r18,8
    527c:	ad7ffc04 	addi	r21,r21,-16
    5280:	e5408a0e 	bge	fp,r21,54ac <___vfprintf_internal_r+0x15b0>
    5284:	18c00404 	addi	r3,r3,16
    5288:	84000044 	addi	r16,r16,1
    528c:	95000015 	stw	r20,0(r18)
    5290:	97000115 	stw	fp,4(r18)
    5294:	d8c12015 	stw	r3,1152(sp)
    5298:	dc011f15 	stw	r16,1148(sp)
    529c:	3c3ff60e 	bge	r7,r16,5278 <__alt_mem_sram+0xf7e05278>
    52a0:	b009883a 	mov	r4,r22
    52a4:	b80b883a 	mov	r5,r23
    52a8:	d9811e04 	addi	r6,sp,1144
    52ac:	d9c13d15 	stw	r7,1268(sp)
    52b0:	000b1440 	call	b144 <__sprint_r>
    52b4:	d9c13d17 	ldw	r7,1268(sp)
    52b8:	103c271e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    52bc:	d8c12017 	ldw	r3,1152(sp)
    52c0:	dc011f17 	ldw	r16,1148(sp)
    52c4:	dc800404 	addi	r18,sp,16
    52c8:	003fec06 	br	527c <__alt_mem_sram+0xf7e0527c>
    52cc:	1cc00017 	ldw	r19,0(r3)
    52d0:	dac12d17 	ldw	r11,1204(sp)
    52d4:	9839d7fa 	srai	fp,r19,31
    52d8:	5ac00104 	addi	r11,r11,4
    52dc:	dac12d15 	stw	r11,1204(sp)
    52e0:	e005883a 	mov	r2,fp
    52e4:	003d9006 	br	4928 <__alt_mem_sram+0xf7e04928>
    52e8:	00800084 	movi	r2,2
    52ec:	9f06b03a 	or	r3,r19,fp
    52f0:	003c7406 	br	44c4 <__alt_mem_sram+0xf7e044c4>
    52f4:	db012d17 	ldw	r12,1204(sp)
    52f8:	14c00017 	ldw	r19,0(r2)
    52fc:	0039883a 	mov	fp,zero
    5300:	63000104 	addi	r12,r12,4
    5304:	db012d15 	stw	r12,1204(sp)
    5308:	00800044 	movi	r2,1
    530c:	9807883a 	mov	r3,r19
    5310:	003c6c06 	br	44c4 <__alt_mem_sram+0xf7e044c4>
    5314:	10803fcc 	andi	r2,r2,255
    5318:	1080201c 	xori	r2,r2,128
    531c:	10bfe004 	addi	r2,r2,-128
    5320:	01000c04 	movi	r4,48
    5324:	1101a526 	beq	r2,r4,59bc <___vfprintf_internal_r+0x1ac0>
    5328:	dac13117 	ldw	r11,1220(sp)
    532c:	db012817 	ldw	r12,1184(sp)
    5330:	193fffc5 	stb	r4,-1(r3)
    5334:	5affffc4 	addi	r11,r11,-1
    5338:	dac13115 	stw	r11,1220(sp)
    533c:	62e5c83a 	sub	r18,r12,r11
    5340:	003c7d06 	br	4538 <__alt_mem_sram+0xf7e04538>
    5344:	b009883a 	mov	r4,r22
    5348:	b80b883a 	mov	r5,r23
    534c:	d9811e04 	addi	r6,sp,1144
    5350:	000b1440 	call	b144 <__sprint_r>
    5354:	103c001e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    5358:	d8c12017 	ldw	r3,1152(sp)
    535c:	da000404 	addi	r8,sp,16
    5360:	db013117 	ldw	r12,1220(sp)
    5364:	dac13417 	ldw	r11,1232(sp)
    5368:	d8812617 	ldw	r2,1176(sp)
    536c:	62e5883a 	add	r18,r12,r11
    5370:	db013317 	ldw	r12,1228(sp)
    5374:	13000216 	blt	r2,r12,5380 <___vfprintf_internal_r+0x1484>
    5378:	8900004c 	andi	r4,r17,1
    537c:	20000c26 	beq	r4,zero,53b0 <___vfprintf_internal_r+0x14b4>
    5380:	dac13817 	ldw	r11,1248(sp)
    5384:	d9011f17 	ldw	r4,1148(sp)
    5388:	db013517 	ldw	r12,1236(sp)
    538c:	1ac7883a 	add	r3,r3,r11
    5390:	21000044 	addi	r4,r4,1
    5394:	43000015 	stw	r12,0(r8)
    5398:	42c00115 	stw	r11,4(r8)
    539c:	d8c12015 	stw	r3,1152(sp)
    53a0:	d9011f15 	stw	r4,1148(sp)
    53a4:	014001c4 	movi	r5,7
    53a8:	2901cc16 	blt	r5,r4,5adc <___vfprintf_internal_r+0x1be0>
    53ac:	42000204 	addi	r8,r8,8
    53b0:	dac13317 	ldw	r11,1228(sp)
    53b4:	8489c83a 	sub	r4,r16,r18
    53b8:	5885c83a 	sub	r2,r11,r2
    53bc:	1021883a 	mov	r16,r2
    53c0:	2080010e 	bge	r4,r2,53c8 <___vfprintf_internal_r+0x14cc>
    53c4:	2021883a 	mov	r16,r4
    53c8:	04000a0e 	bge	zero,r16,53f4 <___vfprintf_internal_r+0x14f8>
    53cc:	d9011f17 	ldw	r4,1148(sp)
    53d0:	1c07883a 	add	r3,r3,r16
    53d4:	44800015 	stw	r18,0(r8)
    53d8:	21000044 	addi	r4,r4,1
    53dc:	44000115 	stw	r16,4(r8)
    53e0:	d8c12015 	stw	r3,1152(sp)
    53e4:	d9011f15 	stw	r4,1148(sp)
    53e8:	014001c4 	movi	r5,7
    53ec:	2901d616 	blt	r5,r4,5b48 <___vfprintf_internal_r+0x1c4c>
    53f0:	42000204 	addi	r8,r8,8
    53f4:	8001df16 	blt	r16,zero,5b74 <___vfprintf_internal_r+0x1c78>
    53f8:	1421c83a 	sub	r16,r2,r16
    53fc:	043ce60e 	bge	zero,r16,4798 <__alt_mem_sram+0xf7e04798>
    5400:	04800404 	movi	r18,16
    5404:	d8811f17 	ldw	r2,1148(sp)
    5408:	943efc0e 	bge	r18,r16,4ffc <__alt_mem_sram+0xf7e04ffc>
    540c:	01400074 	movhi	r5,1
    5410:	294c7284 	addi	r5,r5,12746
    5414:	d9412c15 	stw	r5,1200(sp)
    5418:	054001c4 	movi	r21,7
    541c:	00000306 	br	542c <___vfprintf_internal_r+0x1530>
    5420:	42000204 	addi	r8,r8,8
    5424:	843ffc04 	addi	r16,r16,-16
    5428:	943ef70e 	bge	r18,r16,5008 <__alt_mem_sram+0xf7e05008>
    542c:	18c00404 	addi	r3,r3,16
    5430:	10800044 	addi	r2,r2,1
    5434:	45000015 	stw	r20,0(r8)
    5438:	44800115 	stw	r18,4(r8)
    543c:	d8c12015 	stw	r3,1152(sp)
    5440:	d8811f15 	stw	r2,1148(sp)
    5444:	a8bff60e 	bge	r21,r2,5420 <__alt_mem_sram+0xf7e05420>
    5448:	b009883a 	mov	r4,r22
    544c:	b80b883a 	mov	r5,r23
    5450:	d9811e04 	addi	r6,sp,1144
    5454:	000b1440 	call	b144 <__sprint_r>
    5458:	103bbf1e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    545c:	d8c12017 	ldw	r3,1152(sp)
    5460:	d8811f17 	ldw	r2,1148(sp)
    5464:	da000404 	addi	r8,sp,16
    5468:	003fee06 	br	5424 <__alt_mem_sram+0xf7e05424>
    546c:	8888703a 	and	r4,r17,r2
    5470:	203eab1e 	bne	r4,zero,4f20 <__alt_mem_sram+0xf7e04f20>
    5474:	dc011f17 	ldw	r16,1148(sp)
    5478:	db013117 	ldw	r12,1220(sp)
    547c:	40800115 	stw	r2,4(r8)
    5480:	84000044 	addi	r16,r16,1
    5484:	43000015 	stw	r12,0(r8)
    5488:	d8c12015 	stw	r3,1152(sp)
    548c:	dc011f15 	stw	r16,1148(sp)
    5490:	008001c4 	movi	r2,7
    5494:	14000e16 	blt	r2,r16,54d0 <___vfprintf_internal_r+0x15d4>
    5498:	44800204 	addi	r18,r8,8
    549c:	003ecb06 	br	4fcc <__alt_mem_sram+0xf7e04fcc>
    54a0:	00800074 	movhi	r2,1
    54a4:	108c7284 	addi	r2,r2,12746
    54a8:	d8812c15 	stw	r2,1200(sp)
    54ac:	dac12c17 	ldw	r11,1200(sp)
    54b0:	1d47883a 	add	r3,r3,r21
    54b4:	84000044 	addi	r16,r16,1
    54b8:	92c00015 	stw	r11,0(r18)
    54bc:	95400115 	stw	r21,4(r18)
    54c0:	d8c12015 	stw	r3,1152(sp)
    54c4:	dc011f15 	stw	r16,1148(sp)
    54c8:	008001c4 	movi	r2,7
    54cc:	143ebe0e 	bge	r2,r16,4fc8 <__alt_mem_sram+0xf7e04fc8>
    54d0:	b009883a 	mov	r4,r22
    54d4:	b80b883a 	mov	r5,r23
    54d8:	d9811e04 	addi	r6,sp,1144
    54dc:	000b1440 	call	b144 <__sprint_r>
    54e0:	103b9d1e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    54e4:	d8c12017 	ldw	r3,1152(sp)
    54e8:	dc011f17 	ldw	r16,1148(sp)
    54ec:	dc800404 	addi	r18,sp,16
    54f0:	003eb606 	br	4fcc <__alt_mem_sram+0xf7e04fcc>
    54f4:	b009883a 	mov	r4,r22
    54f8:	b80b883a 	mov	r5,r23
    54fc:	d9811e04 	addi	r6,sp,1144
    5500:	000b1440 	call	b144 <__sprint_r>
    5504:	103b941e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    5508:	d8c12017 	ldw	r3,1152(sp)
    550c:	dc011f17 	ldw	r16,1148(sp)
    5510:	da000404 	addi	r8,sp,16
    5514:	003e8d06 	br	4f4c <__alt_mem_sram+0xf7e04f4c>
    5518:	b009883a 	mov	r4,r22
    551c:	b80b883a 	mov	r5,r23
    5520:	d9811e04 	addi	r6,sp,1144
    5524:	000b1440 	call	b144 <__sprint_r>
    5528:	103b8b1e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    552c:	d8c12017 	ldw	r3,1152(sp)
    5530:	dc011f17 	ldw	r16,1148(sp)
    5534:	dc800404 	addi	r18,sp,16
    5538:	003e8f06 	br	4f78 <__alt_mem_sram+0xf7e04f78>
    553c:	db010e04 	addi	r12,sp,1080
    5540:	0025883a 	mov	r18,zero
    5544:	db013115 	stw	r12,1220(sp)
    5548:	003bfb06 	br	4538 <__alt_mem_sram+0xf7e04538>
    554c:	b009883a 	mov	r4,r22
    5550:	b80b883a 	mov	r5,r23
    5554:	d9811e04 	addi	r6,sp,1144
    5558:	000b1440 	call	b144 <__sprint_r>
    555c:	103b7e1e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    5560:	d8c12017 	ldw	r3,1152(sp)
    5564:	da000404 	addi	r8,sp,16
    5568:	003c5506 	br	46c0 <__alt_mem_sram+0xf7e046c0>
    556c:	04e7c83a 	sub	r19,zero,r19
    5570:	9804c03a 	cmpne	r2,r19,zero
    5574:	0739c83a 	sub	fp,zero,fp
    5578:	e0b9c83a 	sub	fp,fp,r2
    557c:	05400b44 	movi	r21,45
    5580:	dd412785 	stb	r21,1182(sp)
    5584:	da413215 	stw	r9,1224(sp)
    5588:	00800044 	movi	r2,1
    558c:	9f06b03a 	or	r3,r19,fp
    5590:	003bcf06 	br	44d0 <__alt_mem_sram+0xf7e044d0>
    5594:	da013f15 	stw	r8,1276(sp)
    5598:	da413e15 	stw	r9,1272(sp)
    559c:	000ada00 	call	ada0 <__fpclassifyd>
    55a0:	da013f17 	ldw	r8,1276(sp)
    55a4:	da413e17 	ldw	r9,1272(sp)
    55a8:	1000ce26 	beq	r2,zero,58e4 <___vfprintf_internal_r+0x19e8>
    55ac:	057ff7c4 	movi	r21,-33
    55b0:	00bfffc4 	movi	r2,-1
    55b4:	856a703a 	and	r21,r16,r21
    55b8:	4881f026 	beq	r9,r2,5d7c <___vfprintf_internal_r+0x1e80>
    55bc:	008011c4 	movi	r2,71
    55c0:	a881e526 	beq	r21,r2,5d58 <___vfprintf_internal_r+0x1e5c>
    55c4:	db013917 	ldw	r12,1252(sp)
    55c8:	8ac04014 	ori	r11,r17,256
    55cc:	dac12d15 	stw	r11,1204(sp)
    55d0:	6001e416 	blt	r12,zero,5d64 <___vfprintf_internal_r+0x1e68>
    55d4:	dc813917 	ldw	r18,1252(sp)
    55d8:	d8012b05 	stb	zero,1196(sp)
    55dc:	00801984 	movi	r2,102
    55e0:	80811826 	beq	r16,r2,5a44 <___vfprintf_internal_r+0x1b48>
    55e4:	00801184 	movi	r2,70
    55e8:	80811626 	beq	r16,r2,5a44 <___vfprintf_internal_r+0x1b48>
    55ec:	00801144 	movi	r2,69
    55f0:	a881e026 	beq	r21,r2,5d74 <___vfprintf_internal_r+0x1e78>
    55f4:	4839883a 	mov	fp,r9
    55f8:	d8812604 	addi	r2,sp,1176
    55fc:	d8800115 	stw	r2,4(sp)
    5600:	d9413717 	ldw	r5,1244(sp)
    5604:	d8812504 	addi	r2,sp,1172
    5608:	d8800215 	stw	r2,8(sp)
    560c:	d8812104 	addi	r2,sp,1156
    5610:	df000015 	stw	fp,0(sp)
    5614:	d8800315 	stw	r2,12(sp)
    5618:	b009883a 	mov	r4,r22
    561c:	900d883a 	mov	r6,r18
    5620:	01c00084 	movi	r7,2
    5624:	da013f15 	stw	r8,1276(sp)
    5628:	da413e15 	stw	r9,1272(sp)
    562c:	000624c0 	call	624c <_dtoa_r>
    5630:	d8813115 	stw	r2,1220(sp)
    5634:	008019c4 	movi	r2,103
    5638:	da013f17 	ldw	r8,1276(sp)
    563c:	da413e17 	ldw	r9,1272(sp)
    5640:	80800226 	beq	r16,r2,564c <___vfprintf_internal_r+0x1750>
    5644:	008011c4 	movi	r2,71
    5648:	8081101e 	bne	r16,r2,5a8c <___vfprintf_internal_r+0x1b90>
    564c:	8880004c 	andi	r2,r17,1
    5650:	1001df26 	beq	r2,zero,5dd0 <___vfprintf_internal_r+0x1ed4>
    5654:	db013117 	ldw	r12,1220(sp)
    5658:	6715883a 	add	r10,r12,fp
    565c:	d9013717 	ldw	r4,1244(sp)
    5660:	900b883a 	mov	r5,r18
    5664:	000d883a 	mov	r6,zero
    5668:	000f883a 	mov	r7,zero
    566c:	da013f15 	stw	r8,1276(sp)
    5670:	da413e15 	stw	r9,1272(sp)
    5674:	da813d15 	stw	r10,1268(sp)
    5678:	000ebf80 	call	ebf8 <__eqdf2>
    567c:	da013f17 	ldw	r8,1276(sp)
    5680:	da413e17 	ldw	r9,1272(sp)
    5684:	da813d17 	ldw	r10,1268(sp)
    5688:	10016526 	beq	r2,zero,5c20 <___vfprintf_internal_r+0x1d24>
    568c:	d8812117 	ldw	r2,1156(sp)
    5690:	1280062e 	bgeu	r2,r10,56ac <___vfprintf_internal_r+0x17b0>
    5694:	01000c04 	movi	r4,48
    5698:	10c00044 	addi	r3,r2,1
    569c:	d8c12115 	stw	r3,1156(sp)
    56a0:	11000005 	stb	r4,0(r2)
    56a4:	d8812117 	ldw	r2,1156(sp)
    56a8:	12bffb36 	bltu	r2,r10,5698 <__alt_mem_sram+0xf7e05698>
    56ac:	db013117 	ldw	r12,1220(sp)
    56b0:	1305c83a 	sub	r2,r2,r12
    56b4:	d8813315 	stw	r2,1228(sp)
    56b8:	008011c4 	movi	r2,71
    56bc:	a8814a26 	beq	r21,r2,5be8 <___vfprintf_internal_r+0x1cec>
    56c0:	00801944 	movi	r2,101
    56c4:	14020a0e 	bge	r2,r16,5ef0 <___vfprintf_internal_r+0x1ff4>
    56c8:	00801984 	movi	r2,102
    56cc:	8081b626 	beq	r16,r2,5da8 <___vfprintf_internal_r+0x1eac>
    56d0:	db012617 	ldw	r12,1176(sp)
    56d4:	db013415 	stw	r12,1232(sp)
    56d8:	db013417 	ldw	r12,1232(sp)
    56dc:	dac13317 	ldw	r11,1228(sp)
    56e0:	62c1a816 	blt	r12,r11,5d84 <___vfprintf_internal_r+0x1e88>
    56e4:	8c40004c 	andi	r17,r17,1
    56e8:	8801ca1e 	bne	r17,zero,5e14 <___vfprintf_internal_r+0x1f18>
    56ec:	6005883a 	mov	r2,r12
    56f0:	6001b516 	blt	r12,zero,5dc8 <___vfprintf_internal_r+0x1ecc>
    56f4:	dc813417 	ldw	r18,1232(sp)
    56f8:	df012b07 	ldb	fp,1196(sp)
    56fc:	e001321e 	bne	fp,zero,5bc8 <___vfprintf_internal_r+0x1ccc>
    5700:	dc412d17 	ldw	r17,1204(sp)
    5704:	dd412783 	ldbu	r21,1182(sp)
    5708:	d8812b15 	stw	r2,1196(sp)
    570c:	dcc12d15 	stw	r19,1204(sp)
    5710:	d8013215 	stw	zero,1224(sp)
    5714:	003b8d06 	br	454c <__alt_mem_sram+0xf7e0454c>
    5718:	88c0100c 	andi	r3,r17,64
    571c:	18008226 	beq	r3,zero,5928 <___vfprintf_internal_r+0x1a2c>
    5720:	dac12d17 	ldw	r11,1204(sp)
    5724:	14c0000b 	ldhu	r19,0(r2)
    5728:	0039883a 	mov	fp,zero
    572c:	5ac00104 	addi	r11,r11,4
    5730:	dac12d15 	stw	r11,1204(sp)
    5734:	003c8f06 	br	4974 <__alt_mem_sram+0xf7e04974>
    5738:	1c000007 	ldb	r16,0(r3)
    573c:	1805883a 	mov	r2,r3
    5740:	003a5506 	br	4098 <__alt_mem_sram+0xf7e04098>
    5744:	00800084 	movi	r2,2
    5748:	003b5e06 	br	44c4 <__alt_mem_sram+0xf7e044c4>
    574c:	8880040c 	andi	r2,r17,16
    5750:	1000091e 	bne	r2,zero,5778 <___vfprintf_internal_r+0x187c>
    5754:	8c40100c 	andi	r17,r17,64
    5758:	88000726 	beq	r17,zero,5778 <___vfprintf_internal_r+0x187c>
    575c:	db012d17 	ldw	r12,1204(sp)
    5760:	dac12f17 	ldw	r11,1212(sp)
    5764:	60800017 	ldw	r2,0(r12)
    5768:	63000104 	addi	r12,r12,4
    576c:	db012d15 	stw	r12,1204(sp)
    5770:	12c0000d 	sth	r11,0(r2)
    5774:	003a1e06 	br	3ff0 <__alt_mem_sram+0xf7e03ff0>
    5778:	db012d17 	ldw	r12,1204(sp)
    577c:	dac12f17 	ldw	r11,1212(sp)
    5780:	60800017 	ldw	r2,0(r12)
    5784:	63000104 	addi	r12,r12,4
    5788:	db012d15 	stw	r12,1204(sp)
    578c:	12c00015 	stw	r11,0(r2)
    5790:	003a1706 	br	3ff0 <__alt_mem_sram+0xf7e03ff0>
    5794:	01000074 	movhi	r4,1
    5798:	210c7284 	addi	r4,r4,12746
    579c:	d9012c15 	stw	r4,1200(sp)
    57a0:	dac12c17 	ldw	r11,1200(sp)
    57a4:	1c87883a 	add	r3,r3,r18
    57a8:	10800044 	addi	r2,r2,1
    57ac:	42c00015 	stw	r11,0(r8)
    57b0:	44800115 	stw	r18,4(r8)
    57b4:	d8c12015 	stw	r3,1152(sp)
    57b8:	d8811f15 	stw	r2,1148(sp)
    57bc:	010001c4 	movi	r4,7
    57c0:	20bee016 	blt	r4,r2,5344 <__alt_mem_sram+0xf7e05344>
    57c4:	42000204 	addi	r8,r8,8
    57c8:	003ee506 	br	5360 <__alt_mem_sram+0xf7e05360>
    57cc:	01000074 	movhi	r4,1
    57d0:	210c7284 	addi	r4,r4,12746
    57d4:	d9012c15 	stw	r4,1200(sp)
    57d8:	003bd806 	br	473c <__alt_mem_sram+0xf7e0473c>
    57dc:	b009883a 	mov	r4,r22
    57e0:	b80b883a 	mov	r5,r23
    57e4:	d9811e04 	addi	r6,sp,1144
    57e8:	000b1440 	call	b144 <__sprint_r>
    57ec:	103ada1e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    57f0:	d8c12017 	ldw	r3,1152(sp)
    57f4:	da000404 	addi	r8,sp,16
    57f8:	003d6b06 	br	4da8 <__alt_mem_sram+0xf7e04da8>
    57fc:	d8811f17 	ldw	r2,1148(sp)
    5800:	03000074 	movhi	r12,1
    5804:	01000044 	movi	r4,1
    5808:	18c00044 	addi	r3,r3,1
    580c:	10800044 	addi	r2,r2,1
    5810:	630c7204 	addi	r12,r12,12744
    5814:	41000115 	stw	r4,4(r8)
    5818:	43000015 	stw	r12,0(r8)
    581c:	d8c12015 	stw	r3,1152(sp)
    5820:	d8811f15 	stw	r2,1148(sp)
    5824:	010001c4 	movi	r4,7
    5828:	20804916 	blt	r4,r2,5950 <___vfprintf_internal_r+0x1a54>
    582c:	42000204 	addi	r8,r8,8
    5830:	8000041e 	bne	r16,zero,5844 <___vfprintf_internal_r+0x1948>
    5834:	dac13317 	ldw	r11,1228(sp)
    5838:	5800021e 	bne	r11,zero,5844 <___vfprintf_internal_r+0x1948>
    583c:	8880004c 	andi	r2,r17,1
    5840:	103bd526 	beq	r2,zero,4798 <__alt_mem_sram+0xf7e04798>
    5844:	db013817 	ldw	r12,1248(sp)
    5848:	d8811f17 	ldw	r2,1148(sp)
    584c:	dac13517 	ldw	r11,1236(sp)
    5850:	1b07883a 	add	r3,r3,r12
    5854:	10800044 	addi	r2,r2,1
    5858:	42c00015 	stw	r11,0(r8)
    585c:	43000115 	stw	r12,4(r8)
    5860:	d8c12015 	stw	r3,1152(sp)
    5864:	d8811f15 	stw	r2,1148(sp)
    5868:	010001c4 	movi	r4,7
    586c:	20813016 	blt	r4,r2,5d30 <___vfprintf_internal_r+0x1e34>
    5870:	42000204 	addi	r8,r8,8
    5874:	0421c83a 	sub	r16,zero,r16
    5878:	0400630e 	bge	zero,r16,5a08 <___vfprintf_internal_r+0x1b0c>
    587c:	04800404 	movi	r18,16
    5880:	94009f0e 	bge	r18,r16,5b00 <___vfprintf_internal_r+0x1c04>
    5884:	01000074 	movhi	r4,1
    5888:	210c7284 	addi	r4,r4,12746
    588c:	d9012c15 	stw	r4,1200(sp)
    5890:	054001c4 	movi	r21,7
    5894:	00000306 	br	58a4 <___vfprintf_internal_r+0x19a8>
    5898:	42000204 	addi	r8,r8,8
    589c:	843ffc04 	addi	r16,r16,-16
    58a0:	94009a0e 	bge	r18,r16,5b0c <___vfprintf_internal_r+0x1c10>
    58a4:	18c00404 	addi	r3,r3,16
    58a8:	10800044 	addi	r2,r2,1
    58ac:	45000015 	stw	r20,0(r8)
    58b0:	44800115 	stw	r18,4(r8)
    58b4:	d8c12015 	stw	r3,1152(sp)
    58b8:	d8811f15 	stw	r2,1148(sp)
    58bc:	a8bff60e 	bge	r21,r2,5898 <__alt_mem_sram+0xf7e05898>
    58c0:	b009883a 	mov	r4,r22
    58c4:	b80b883a 	mov	r5,r23
    58c8:	d9811e04 	addi	r6,sp,1144
    58cc:	000b1440 	call	b144 <__sprint_r>
    58d0:	103aa11e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    58d4:	d8c12017 	ldw	r3,1152(sp)
    58d8:	d8811f17 	ldw	r2,1148(sp)
    58dc:	da000404 	addi	r8,sp,16
    58e0:	003fee06 	br	589c <__alt_mem_sram+0xf7e0589c>
    58e4:	008011c4 	movi	r2,71
    58e8:	1400b316 	blt	r2,r16,5bb8 <___vfprintf_internal_r+0x1cbc>
    58ec:	03000074 	movhi	r12,1
    58f0:	630c6404 	addi	r12,r12,12688
    58f4:	db013115 	stw	r12,1220(sp)
    58f8:	00c000c4 	movi	r3,3
    58fc:	00bfdfc4 	movi	r2,-129
    5900:	d8c12b15 	stw	r3,1196(sp)
    5904:	88a2703a 	and	r17,r17,r2
    5908:	dd412783 	ldbu	r21,1182(sp)
    590c:	dcc12d15 	stw	r19,1204(sp)
    5910:	1825883a 	mov	r18,r3
    5914:	d8013215 	stw	zero,1224(sp)
    5918:	d8013415 	stw	zero,1232(sp)
    591c:	003b0b06 	br	454c <__alt_mem_sram+0xf7e0454c>
    5920:	4825883a 	mov	r18,r9
    5924:	003cba06 	br	4c10 <__alt_mem_sram+0xf7e04c10>
    5928:	db012d17 	ldw	r12,1204(sp)
    592c:	14c00017 	ldw	r19,0(r2)
    5930:	0039883a 	mov	fp,zero
    5934:	63000104 	addi	r12,r12,4
    5938:	db012d15 	stw	r12,1204(sp)
    593c:	003c0d06 	br	4974 <__alt_mem_sram+0xf7e04974>
    5940:	00800074 	movhi	r2,1
    5944:	108c6204 	addi	r2,r2,12680
    5948:	d8813115 	stw	r2,1220(sp)
    594c:	003ac406 	br	4460 <__alt_mem_sram+0xf7e04460>
    5950:	b009883a 	mov	r4,r22
    5954:	b80b883a 	mov	r5,r23
    5958:	d9811e04 	addi	r6,sp,1144
    595c:	000b1440 	call	b144 <__sprint_r>
    5960:	103a7d1e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    5964:	dc012617 	ldw	r16,1176(sp)
    5968:	d8c12017 	ldw	r3,1152(sp)
    596c:	da000404 	addi	r8,sp,16
    5970:	003faf06 	br	5830 <__alt_mem_sram+0xf7e05830>
    5974:	db012e17 	ldw	r12,1208(sp)
    5978:	1805883a 	mov	r2,r3
    597c:	dac12d15 	stw	r11,1204(sp)
    5980:	0319c83a 	sub	r12,zero,r12
    5984:	db012e15 	stw	r12,1208(sp)
    5988:	003a7e06 	br	4384 <__alt_mem_sram+0xf7e04384>
    598c:	18800044 	addi	r2,r3,1
    5990:	8c400814 	ori	r17,r17,32
    5994:	1c000047 	ldb	r16,1(r3)
    5998:	0039bf06 	br	4098 <__alt_mem_sram+0xf7e04098>
    599c:	b009883a 	mov	r4,r22
    59a0:	b80b883a 	mov	r5,r23
    59a4:	d9811e04 	addi	r6,sp,1144
    59a8:	000b1440 	call	b144 <__sprint_r>
    59ac:	103a6a1e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    59b0:	d8c12017 	ldw	r3,1152(sp)
    59b4:	da000404 	addi	r8,sp,16
    59b8:	003d0c06 	br	4dec <__alt_mem_sram+0xf7e04dec>
    59bc:	db012817 	ldw	r12,1184(sp)
    59c0:	d8c13117 	ldw	r3,1220(sp)
    59c4:	60e5c83a 	sub	r18,r12,r3
    59c8:	003adb06 	br	4538 <__alt_mem_sram+0xf7e04538>
    59cc:	da013f15 	stw	r8,1276(sp)
    59d0:	0003e640 	call	3e64 <strlen>
    59d4:	1025883a 	mov	r18,r2
    59d8:	da013f17 	ldw	r8,1276(sp)
    59dc:	903c8e0e 	bge	r18,zero,4c18 <__alt_mem_sram+0xf7e04c18>
    59e0:	0005883a 	mov	r2,zero
    59e4:	003c8c06 	br	4c18 <__alt_mem_sram+0xf7e04c18>
    59e8:	b009883a 	mov	r4,r22
    59ec:	b80b883a 	mov	r5,r23
    59f0:	d9811e04 	addi	r6,sp,1144
    59f4:	000b1440 	call	b144 <__sprint_r>
    59f8:	103a571e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    59fc:	d8c12017 	ldw	r3,1152(sp)
    5a00:	d8811f17 	ldw	r2,1148(sp)
    5a04:	da000404 	addi	r8,sp,16
    5a08:	db013317 	ldw	r12,1228(sp)
    5a0c:	dac13117 	ldw	r11,1220(sp)
    5a10:	10800044 	addi	r2,r2,1
    5a14:	60c7883a 	add	r3,r12,r3
    5a18:	42c00015 	stw	r11,0(r8)
    5a1c:	43000115 	stw	r12,4(r8)
    5a20:	d8c12015 	stw	r3,1152(sp)
    5a24:	d8811f15 	stw	r2,1148(sp)
    5a28:	010001c4 	movi	r4,7
    5a2c:	20bb590e 	bge	r4,r2,4794 <__alt_mem_sram+0xf7e04794>
    5a30:	003d7e06 	br	502c <__alt_mem_sram+0xf7e0502c>
    5a34:	01000074 	movhi	r4,1
    5a38:	210c7684 	addi	r4,r4,12762
    5a3c:	d9013615 	stw	r4,1240(sp)
    5a40:	003af606 	br	461c <__alt_mem_sram+0xf7e0461c>
    5a44:	d8812604 	addi	r2,sp,1176
    5a48:	d8800115 	stw	r2,4(sp)
    5a4c:	d9413717 	ldw	r5,1244(sp)
    5a50:	d8812504 	addi	r2,sp,1172
    5a54:	d8800215 	stw	r2,8(sp)
    5a58:	d8812104 	addi	r2,sp,1156
    5a5c:	da400015 	stw	r9,0(sp)
    5a60:	d8800315 	stw	r2,12(sp)
    5a64:	b009883a 	mov	r4,r22
    5a68:	900d883a 	mov	r6,r18
    5a6c:	01c000c4 	movi	r7,3
    5a70:	da013f15 	stw	r8,1276(sp)
    5a74:	da413e15 	stw	r9,1272(sp)
    5a78:	000624c0 	call	624c <_dtoa_r>
    5a7c:	da413e17 	ldw	r9,1272(sp)
    5a80:	da013f17 	ldw	r8,1276(sp)
    5a84:	d8813115 	stw	r2,1220(sp)
    5a88:	4839883a 	mov	fp,r9
    5a8c:	dac13117 	ldw	r11,1220(sp)
    5a90:	00801184 	movi	r2,70
    5a94:	5f15883a 	add	r10,r11,fp
    5a98:	a8bef01e 	bne	r21,r2,565c <__alt_mem_sram+0xf7e0565c>
    5a9c:	59000007 	ldb	r4,0(r11)
    5aa0:	00800c04 	movi	r2,48
    5aa4:	2080e026 	beq	r4,r2,5e28 <___vfprintf_internal_r+0x1f2c>
    5aa8:	d8c12617 	ldw	r3,1176(sp)
    5aac:	50d5883a 	add	r10,r10,r3
    5ab0:	003eea06 	br	565c <__alt_mem_sram+0xf7e0565c>
    5ab4:	0025883a 	mov	r18,zero
    5ab8:	003db306 	br	5188 <__alt_mem_sram+0xf7e05188>
    5abc:	b009883a 	mov	r4,r22
    5ac0:	b80b883a 	mov	r5,r23
    5ac4:	d9811e04 	addi	r6,sp,1144
    5ac8:	000b1440 	call	b144 <__sprint_r>
    5acc:	103a221e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    5ad0:	d8c12017 	ldw	r3,1152(sp)
    5ad4:	da000404 	addi	r8,sp,16
    5ad8:	003daa06 	br	5184 <__alt_mem_sram+0xf7e05184>
    5adc:	b009883a 	mov	r4,r22
    5ae0:	b80b883a 	mov	r5,r23
    5ae4:	d9811e04 	addi	r6,sp,1144
    5ae8:	000b1440 	call	b144 <__sprint_r>
    5aec:	103a1a1e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    5af0:	d8812617 	ldw	r2,1176(sp)
    5af4:	d8c12017 	ldw	r3,1152(sp)
    5af8:	da000404 	addi	r8,sp,16
    5afc:	003e2c06 	br	53b0 <__alt_mem_sram+0xf7e053b0>
    5b00:	03000074 	movhi	r12,1
    5b04:	630c7284 	addi	r12,r12,12746
    5b08:	db012c15 	stw	r12,1200(sp)
    5b0c:	dac12c17 	ldw	r11,1200(sp)
    5b10:	1c07883a 	add	r3,r3,r16
    5b14:	10800044 	addi	r2,r2,1
    5b18:	42c00015 	stw	r11,0(r8)
    5b1c:	44000115 	stw	r16,4(r8)
    5b20:	d8c12015 	stw	r3,1152(sp)
    5b24:	d8811f15 	stw	r2,1148(sp)
    5b28:	010001c4 	movi	r4,7
    5b2c:	20bfae16 	blt	r4,r2,59e8 <__alt_mem_sram+0xf7e059e8>
    5b30:	42000204 	addi	r8,r8,8
    5b34:	003fb406 	br	5a08 <__alt_mem_sram+0xf7e05a08>
    5b38:	03000074 	movhi	r12,1
    5b3c:	630c7684 	addi	r12,r12,12762
    5b40:	db013615 	stw	r12,1240(sp)
    5b44:	003b3806 	br	4828 <__alt_mem_sram+0xf7e04828>
    5b48:	b009883a 	mov	r4,r22
    5b4c:	b80b883a 	mov	r5,r23
    5b50:	d9811e04 	addi	r6,sp,1144
    5b54:	000b1440 	call	b144 <__sprint_r>
    5b58:	1039ff1e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    5b5c:	d8812617 	ldw	r2,1176(sp)
    5b60:	db013317 	ldw	r12,1228(sp)
    5b64:	d8c12017 	ldw	r3,1152(sp)
    5b68:	da000404 	addi	r8,sp,16
    5b6c:	6085c83a 	sub	r2,r12,r2
    5b70:	003e2006 	br	53f4 <__alt_mem_sram+0xf7e053f4>
    5b74:	0021883a 	mov	r16,zero
    5b78:	003e1f06 	br	53f8 <__alt_mem_sram+0xf7e053f8>
    5b7c:	00800184 	movi	r2,6
    5b80:	1240012e 	bgeu	r2,r9,5b88 <___vfprintf_internal_r+0x1c8c>
    5b84:	1013883a 	mov	r9,r2
    5b88:	4825883a 	mov	r18,r9
    5b8c:	4805883a 	mov	r2,r9
    5b90:	48009e16 	blt	r9,zero,5e0c <___vfprintf_internal_r+0x1f10>
    5b94:	d8812b15 	stw	r2,1196(sp)
    5b98:	00800074 	movhi	r2,1
    5b9c:	108c7004 	addi	r2,r2,12736
    5ba0:	d8813115 	stw	r2,1220(sp)
    5ba4:	dcc12d15 	stw	r19,1204(sp)
    5ba8:	d8013215 	stw	zero,1224(sp)
    5bac:	d8013415 	stw	zero,1232(sp)
    5bb0:	0005883a 	mov	r2,zero
    5bb4:	003a6c06 	br	4568 <__alt_mem_sram+0xf7e04568>
    5bb8:	00800074 	movhi	r2,1
    5bbc:	108c6504 	addi	r2,r2,12692
    5bc0:	d8813115 	stw	r2,1220(sp)
    5bc4:	003f4c06 	br	58f8 <__alt_mem_sram+0xf7e058f8>
    5bc8:	00c00b44 	movi	r3,45
    5bcc:	d8812b15 	stw	r2,1196(sp)
    5bd0:	dc412d17 	ldw	r17,1204(sp)
    5bd4:	d8c12785 	stb	r3,1182(sp)
    5bd8:	dcc12d15 	stw	r19,1204(sp)
    5bdc:	d8013215 	stw	zero,1224(sp)
    5be0:	00800b44 	movi	r2,45
    5be4:	003a5d06 	br	455c <__alt_mem_sram+0xf7e0455c>
    5be8:	d8c12617 	ldw	r3,1176(sp)
    5bec:	00bfff44 	movi	r2,-3
    5bf0:	18800d16 	blt	r3,r2,5c28 <___vfprintf_internal_r+0x1d2c>
    5bf4:	48c00c16 	blt	r9,r3,5c28 <___vfprintf_internal_r+0x1d2c>
    5bf8:	d8c13415 	stw	r3,1232(sp)
    5bfc:	040019c4 	movi	r16,103
    5c00:	003eb506 	br	56d8 <__alt_mem_sram+0xf7e056d8>
    5c04:	05400b44 	movi	r21,45
    5c08:	dd412785 	stb	r21,1182(sp)
    5c0c:	003a0f06 	br	444c <__alt_mem_sram+0xf7e0444c>
    5c10:	01000074 	movhi	r4,1
    5c14:	210c7284 	addi	r4,r4,12746
    5c18:	d9012c15 	stw	r4,1200(sp)
    5c1c:	003cb106 	br	4ee4 <__alt_mem_sram+0xf7e04ee4>
    5c20:	5005883a 	mov	r2,r10
    5c24:	003ea106 	br	56ac <__alt_mem_sram+0xf7e056ac>
    5c28:	843fff84 	addi	r16,r16,-2
    5c2c:	1f3fffc4 	addi	fp,r3,-1
    5c30:	df012615 	stw	fp,1176(sp)
    5c34:	dc0122c5 	stb	r16,1163(sp)
    5c38:	e0009516 	blt	fp,zero,5e90 <___vfprintf_internal_r+0x1f94>
    5c3c:	00800ac4 	movi	r2,43
    5c40:	d8812305 	stb	r2,1164(sp)
    5c44:	00800244 	movi	r2,9
    5c48:	1700690e 	bge	r2,fp,5df0 <___vfprintf_internal_r+0x1ef4>
    5c4c:	dd4122c4 	addi	r21,sp,1163
    5c50:	dc012c15 	stw	r16,1200(sp)
    5c54:	8825883a 	mov	r18,r17
    5c58:	a821883a 	mov	r16,r21
    5c5c:	4023883a 	mov	r17,r8
    5c60:	e009883a 	mov	r4,fp
    5c64:	01400284 	movi	r5,10
    5c68:	000da240 	call	da24 <__modsi3>
    5c6c:	10800c04 	addi	r2,r2,48
    5c70:	843fffc4 	addi	r16,r16,-1
    5c74:	e009883a 	mov	r4,fp
    5c78:	01400284 	movi	r5,10
    5c7c:	80800005 	stb	r2,0(r16)
    5c80:	000d9d00 	call	d9d0 <__divsi3>
    5c84:	1039883a 	mov	fp,r2
    5c88:	00800244 	movi	r2,9
    5c8c:	173ff416 	blt	r2,fp,5c60 <__alt_mem_sram+0xf7e05c60>
    5c90:	8811883a 	mov	r8,r17
    5c94:	e0800c04 	addi	r2,fp,48
    5c98:	9023883a 	mov	r17,r18
    5c9c:	8025883a 	mov	r18,r16
    5ca0:	913fffc4 	addi	r4,r18,-1
    5ca4:	90bfffc5 	stb	r2,-1(r18)
    5ca8:	dc012c17 	ldw	r16,1200(sp)
    5cac:	25408e2e 	bgeu	r4,r21,5ee8 <___vfprintf_internal_r+0x1fec>
    5cb0:	d9412384 	addi	r5,sp,1166
    5cb4:	2c8bc83a 	sub	r5,r5,r18
    5cb8:	d8c12344 	addi	r3,sp,1165
    5cbc:	a94b883a 	add	r5,r21,r5
    5cc0:	00000106 	br	5cc8 <___vfprintf_internal_r+0x1dcc>
    5cc4:	20800003 	ldbu	r2,0(r4)
    5cc8:	18800005 	stb	r2,0(r3)
    5ccc:	18c00044 	addi	r3,r3,1
    5cd0:	21000044 	addi	r4,r4,1
    5cd4:	197ffb1e 	bne	r3,r5,5cc4 <__alt_mem_sram+0xf7e05cc4>
    5cd8:	d8812304 	addi	r2,sp,1164
    5cdc:	1485c83a 	sub	r2,r2,r18
    5ce0:	d8c12344 	addi	r3,sp,1165
    5ce4:	1885883a 	add	r2,r3,r2
    5ce8:	dac13317 	ldw	r11,1228(sp)
    5cec:	156bc83a 	sub	r21,r2,r21
    5cf0:	dd413a15 	stw	r21,1256(sp)
    5cf4:	00800044 	movi	r2,1
    5cf8:	5d65883a 	add	r18,r11,r21
    5cfc:	12c0770e 	bge	r2,r11,5edc <___vfprintf_internal_r+0x1fe0>
    5d00:	94800044 	addi	r18,r18,1
    5d04:	9005883a 	mov	r2,r18
    5d08:	90007216 	blt	r18,zero,5ed4 <___vfprintf_internal_r+0x1fd8>
    5d0c:	d8013415 	stw	zero,1232(sp)
    5d10:	003e7906 	br	56f8 <__alt_mem_sram+0xf7e056f8>
    5d14:	da412b15 	stw	r9,1196(sp)
    5d18:	dd412783 	ldbu	r21,1182(sp)
    5d1c:	4825883a 	mov	r18,r9
    5d20:	dcc12d15 	stw	r19,1204(sp)
    5d24:	d8013215 	stw	zero,1224(sp)
    5d28:	d8013415 	stw	zero,1232(sp)
    5d2c:	003a0706 	br	454c <__alt_mem_sram+0xf7e0454c>
    5d30:	b009883a 	mov	r4,r22
    5d34:	b80b883a 	mov	r5,r23
    5d38:	d9811e04 	addi	r6,sp,1144
    5d3c:	000b1440 	call	b144 <__sprint_r>
    5d40:	1039851e 	bne	r2,zero,4358 <__alt_mem_sram+0xf7e04358>
    5d44:	dc012617 	ldw	r16,1176(sp)
    5d48:	d8c12017 	ldw	r3,1152(sp)
    5d4c:	d8811f17 	ldw	r2,1148(sp)
    5d50:	da000404 	addi	r8,sp,16
    5d54:	003ec706 	br	5874 <__alt_mem_sram+0xf7e05874>
    5d58:	483e1a1e 	bne	r9,zero,55c4 <__alt_mem_sram+0xf7e055c4>
    5d5c:	9013883a 	mov	r9,r18
    5d60:	003e1806 	br	55c4 <__alt_mem_sram+0xf7e055c4>
    5d64:	00c00b44 	movi	r3,45
    5d68:	64a0003c 	xorhi	r18,r12,32768
    5d6c:	d8c12b05 	stb	r3,1196(sp)
    5d70:	003e1a06 	br	55dc <__alt_mem_sram+0xf7e055dc>
    5d74:	4f000044 	addi	fp,r9,1
    5d78:	003e1f06 	br	55f8 <__alt_mem_sram+0xf7e055f8>
    5d7c:	02400184 	movi	r9,6
    5d80:	003e1006 	br	55c4 <__alt_mem_sram+0xf7e055c4>
    5d84:	d8c13417 	ldw	r3,1232(sp)
    5d88:	00c04b0e 	bge	zero,r3,5eb8 <___vfprintf_internal_r+0x1fbc>
    5d8c:	04800044 	movi	r18,1
    5d90:	dac13317 	ldw	r11,1228(sp)
    5d94:	92e5883a 	add	r18,r18,r11
    5d98:	9005883a 	mov	r2,r18
    5d9c:	903e560e 	bge	r18,zero,56f8 <__alt_mem_sram+0xf7e056f8>
    5da0:	0005883a 	mov	r2,zero
    5da4:	003e5406 	br	56f8 <__alt_mem_sram+0xf7e056f8>
    5da8:	d8c12617 	ldw	r3,1176(sp)
    5dac:	d8c13415 	stw	r3,1232(sp)
    5db0:	00c03b0e 	bge	zero,r3,5ea0 <___vfprintf_internal_r+0x1fa4>
    5db4:	4800081e 	bne	r9,zero,5dd8 <___vfprintf_internal_r+0x1edc>
    5db8:	8c40004c 	andi	r17,r17,1
    5dbc:	8800061e 	bne	r17,zero,5dd8 <___vfprintf_internal_r+0x1edc>
    5dc0:	1805883a 	mov	r2,r3
    5dc4:	183e4b0e 	bge	r3,zero,56f4 <__alt_mem_sram+0xf7e056f4>
    5dc8:	0005883a 	mov	r2,zero
    5dcc:	003e4906 	br	56f4 <__alt_mem_sram+0xf7e056f4>
    5dd0:	d8812117 	ldw	r2,1156(sp)
    5dd4:	003e3506 	br	56ac <__alt_mem_sram+0xf7e056ac>
    5dd8:	dac13417 	ldw	r11,1232(sp)
    5ddc:	4a400044 	addi	r9,r9,1
    5de0:	5a65883a 	add	r18,r11,r9
    5de4:	9005883a 	mov	r2,r18
    5de8:	903e430e 	bge	r18,zero,56f8 <__alt_mem_sram+0xf7e056f8>
    5dec:	003fec06 	br	5da0 <__alt_mem_sram+0xf7e05da0>
    5df0:	00800c04 	movi	r2,48
    5df4:	e0c00c04 	addi	r3,fp,48
    5df8:	d8812345 	stb	r2,1165(sp)
    5dfc:	d8c12385 	stb	r3,1166(sp)
    5e00:	d88123c4 	addi	r2,sp,1167
    5e04:	dd4122c4 	addi	r21,sp,1163
    5e08:	003fb706 	br	5ce8 <__alt_mem_sram+0xf7e05ce8>
    5e0c:	0005883a 	mov	r2,zero
    5e10:	003f6006 	br	5b94 <__alt_mem_sram+0xf7e05b94>
    5e14:	db013417 	ldw	r12,1232(sp)
    5e18:	64800044 	addi	r18,r12,1
    5e1c:	9005883a 	mov	r2,r18
    5e20:	903e350e 	bge	r18,zero,56f8 <__alt_mem_sram+0xf7e056f8>
    5e24:	003fde06 	br	5da0 <__alt_mem_sram+0xf7e05da0>
    5e28:	d9013717 	ldw	r4,1244(sp)
    5e2c:	900b883a 	mov	r5,r18
    5e30:	000d883a 	mov	r6,zero
    5e34:	000f883a 	mov	r7,zero
    5e38:	da013f15 	stw	r8,1276(sp)
    5e3c:	da413e15 	stw	r9,1272(sp)
    5e40:	da813d15 	stw	r10,1268(sp)
    5e44:	000ebf80 	call	ebf8 <__eqdf2>
    5e48:	da013f17 	ldw	r8,1276(sp)
    5e4c:	da413e17 	ldw	r9,1272(sp)
    5e50:	da813d17 	ldw	r10,1268(sp)
    5e54:	103f1426 	beq	r2,zero,5aa8 <__alt_mem_sram+0xf7e05aa8>
    5e58:	00800044 	movi	r2,1
    5e5c:	1707c83a 	sub	r3,r2,fp
    5e60:	d8c12615 	stw	r3,1176(sp)
    5e64:	003f1106 	br	5aac <__alt_mem_sram+0xf7e05aac>
    5e68:	dac12d17 	ldw	r11,1204(sp)
    5e6c:	5a400017 	ldw	r9,0(r11)
    5e70:	5ac00104 	addi	r11,r11,4
    5e74:	dac12d15 	stw	r11,1204(sp)
    5e78:	483ec60e 	bge	r9,zero,5994 <__alt_mem_sram+0xf7e05994>
    5e7c:	027fffc4 	movi	r9,-1
    5e80:	1c000047 	ldb	r16,1(r3)
    5e84:	00388406 	br	4098 <__alt_mem_sram+0xf7e04098>
    5e88:	043fffc4 	movi	r16,-1
    5e8c:	00391006 	br	42d0 <__alt_mem_sram+0xf7e042d0>
    5e90:	00800b44 	movi	r2,45
    5e94:	0739c83a 	sub	fp,zero,fp
    5e98:	d8812305 	stb	r2,1164(sp)
    5e9c:	003f6906 	br	5c44 <__alt_mem_sram+0xf7e05c44>
    5ea0:	4800081e 	bne	r9,zero,5ec4 <___vfprintf_internal_r+0x1fc8>
    5ea4:	8c40004c 	andi	r17,r17,1
    5ea8:	8800061e 	bne	r17,zero,5ec4 <___vfprintf_internal_r+0x1fc8>
    5eac:	00800044 	movi	r2,1
    5eb0:	1025883a 	mov	r18,r2
    5eb4:	003e1006 	br	56f8 <__alt_mem_sram+0xf7e056f8>
    5eb8:	04800084 	movi	r18,2
    5ebc:	90e5c83a 	sub	r18,r18,r3
    5ec0:	003fb306 	br	5d90 <__alt_mem_sram+0xf7e05d90>
    5ec4:	4c800084 	addi	r18,r9,2
    5ec8:	9005883a 	mov	r2,r18
    5ecc:	903e0a0e 	bge	r18,zero,56f8 <__alt_mem_sram+0xf7e056f8>
    5ed0:	003fb306 	br	5da0 <__alt_mem_sram+0xf7e05da0>
    5ed4:	0005883a 	mov	r2,zero
    5ed8:	003f8c06 	br	5d0c <__alt_mem_sram+0xf7e05d0c>
    5edc:	88a2703a 	and	r17,r17,r2
    5ee0:	883f8826 	beq	r17,zero,5d04 <__alt_mem_sram+0xf7e05d04>
    5ee4:	003f8606 	br	5d00 <__alt_mem_sram+0xf7e05d00>
    5ee8:	d8812344 	addi	r2,sp,1165
    5eec:	003f7e06 	br	5ce8 <__alt_mem_sram+0xf7e05ce8>
    5ef0:	d8c12617 	ldw	r3,1176(sp)
    5ef4:	003f4d06 	br	5c2c <__alt_mem_sram+0xf7e05c2c>

00005ef8 <__vfprintf_internal>:
    5ef8:	2007883a 	mov	r3,r4
    5efc:	01000074 	movhi	r4,1
    5f00:	2113cb04 	addi	r4,r4,20268
    5f04:	21000017 	ldw	r4,0(r4)
    5f08:	2805883a 	mov	r2,r5
    5f0c:	300f883a 	mov	r7,r6
    5f10:	180b883a 	mov	r5,r3
    5f14:	100d883a 	mov	r6,r2
    5f18:	0003efc1 	jmpi	3efc <___vfprintf_internal_r>

00005f1c <__swsetup_r>:
    5f1c:	00800074 	movhi	r2,1
    5f20:	defffd04 	addi	sp,sp,-12
    5f24:	1093cb04 	addi	r2,r2,20268
    5f28:	dc400115 	stw	r17,4(sp)
    5f2c:	2023883a 	mov	r17,r4
    5f30:	11000017 	ldw	r4,0(r2)
    5f34:	dc000015 	stw	r16,0(sp)
    5f38:	dfc00215 	stw	ra,8(sp)
    5f3c:	2821883a 	mov	r16,r5
    5f40:	20000226 	beq	r4,zero,5f4c <__swsetup_r+0x30>
    5f44:	20c00e17 	ldw	r3,56(r4)
    5f48:	18002e26 	beq	r3,zero,6004 <__swsetup_r+0xe8>
    5f4c:	8080030b 	ldhu	r2,12(r16)
    5f50:	10c0020c 	andi	r3,r2,8
    5f54:	100d883a 	mov	r6,r2
    5f58:	18000f26 	beq	r3,zero,5f98 <__swsetup_r+0x7c>
    5f5c:	80c00417 	ldw	r3,16(r16)
    5f60:	18001526 	beq	r3,zero,5fb8 <__swsetup_r+0x9c>
    5f64:	1100004c 	andi	r4,r2,1
    5f68:	20001c1e 	bne	r4,zero,5fdc <__swsetup_r+0xc0>
    5f6c:	1080008c 	andi	r2,r2,2
    5f70:	1000261e 	bne	r2,zero,600c <__swsetup_r+0xf0>
    5f74:	80800517 	ldw	r2,20(r16)
    5f78:	80800215 	stw	r2,8(r16)
    5f7c:	18001c26 	beq	r3,zero,5ff0 <__swsetup_r+0xd4>
    5f80:	0005883a 	mov	r2,zero
    5f84:	dfc00217 	ldw	ra,8(sp)
    5f88:	dc400117 	ldw	r17,4(sp)
    5f8c:	dc000017 	ldw	r16,0(sp)
    5f90:	dec00304 	addi	sp,sp,12
    5f94:	f800283a 	ret
    5f98:	3080040c 	andi	r2,r6,16
    5f9c:	10001726 	beq	r2,zero,5ffc <__swsetup_r+0xe0>
    5fa0:	3080010c 	andi	r2,r6,4
    5fa4:	10001b1e 	bne	r2,zero,6014 <__swsetup_r+0xf8>
    5fa8:	80c00417 	ldw	r3,16(r16)
    5fac:	30800214 	ori	r2,r6,8
    5fb0:	8080030d 	sth	r2,12(r16)
    5fb4:	183feb1e 	bne	r3,zero,5f64 <__alt_mem_sram+0xf7e05f64>
    5fb8:	1140a00c 	andi	r5,r2,640
    5fbc:	01008004 	movi	r4,512
    5fc0:	293fe826 	beq	r5,r4,5f64 <__alt_mem_sram+0xf7e05f64>
    5fc4:	8809883a 	mov	r4,r17
    5fc8:	800b883a 	mov	r5,r16
    5fcc:	0008a740 	call	8a74 <__smakebuf_r>
    5fd0:	8080030b 	ldhu	r2,12(r16)
    5fd4:	80c00417 	ldw	r3,16(r16)
    5fd8:	003fe206 	br	5f64 <__alt_mem_sram+0xf7e05f64>
    5fdc:	80800517 	ldw	r2,20(r16)
    5fe0:	80000215 	stw	zero,8(r16)
    5fe4:	0085c83a 	sub	r2,zero,r2
    5fe8:	80800615 	stw	r2,24(r16)
    5fec:	183fe41e 	bne	r3,zero,5f80 <__alt_mem_sram+0xf7e05f80>
    5ff0:	8080030b 	ldhu	r2,12(r16)
    5ff4:	1080200c 	andi	r2,r2,128
    5ff8:	103fe226 	beq	r2,zero,5f84 <__alt_mem_sram+0xf7e05f84>
    5ffc:	00bfffc4 	movi	r2,-1
    6000:	003fe006 	br	5f84 <__alt_mem_sram+0xf7e05f84>
    6004:	0007f1c0 	call	7f1c <__sinit>
    6008:	003fd006 	br	5f4c <__alt_mem_sram+0xf7e05f4c>
    600c:	0005883a 	mov	r2,zero
    6010:	003fd906 	br	5f78 <__alt_mem_sram+0xf7e05f78>
    6014:	81400c17 	ldw	r5,48(r16)
    6018:	28000626 	beq	r5,zero,6034 <__swsetup_r+0x118>
    601c:	80801004 	addi	r2,r16,64
    6020:	28800326 	beq	r5,r2,6030 <__swsetup_r+0x114>
    6024:	8809883a 	mov	r4,r17
    6028:	00080900 	call	8090 <_free_r>
    602c:	8180030b 	ldhu	r6,12(r16)
    6030:	80000c15 	stw	zero,48(r16)
    6034:	80c00417 	ldw	r3,16(r16)
    6038:	00bff6c4 	movi	r2,-37
    603c:	118c703a 	and	r6,r2,r6
    6040:	80000115 	stw	zero,4(r16)
    6044:	80c00015 	stw	r3,0(r16)
    6048:	003fd806 	br	5fac <__alt_mem_sram+0xf7e05fac>

0000604c <quorem>:
    604c:	defff704 	addi	sp,sp,-36
    6050:	dc800215 	stw	r18,8(sp)
    6054:	20800417 	ldw	r2,16(r4)
    6058:	2c800417 	ldw	r18,16(r5)
    605c:	dfc00815 	stw	ra,32(sp)
    6060:	ddc00715 	stw	r23,28(sp)
    6064:	dd800615 	stw	r22,24(sp)
    6068:	dd400515 	stw	r21,20(sp)
    606c:	dd000415 	stw	r20,16(sp)
    6070:	dcc00315 	stw	r19,12(sp)
    6074:	dc400115 	stw	r17,4(sp)
    6078:	dc000015 	stw	r16,0(sp)
    607c:	14807116 	blt	r2,r18,6244 <quorem+0x1f8>
    6080:	94bfffc4 	addi	r18,r18,-1
    6084:	94ad883a 	add	r22,r18,r18
    6088:	b5ad883a 	add	r22,r22,r22
    608c:	2c400504 	addi	r17,r5,20
    6090:	8da9883a 	add	r20,r17,r22
    6094:	25400504 	addi	r21,r4,20
    6098:	282f883a 	mov	r23,r5
    609c:	adad883a 	add	r22,r21,r22
    60a0:	a1400017 	ldw	r5,0(r20)
    60a4:	2021883a 	mov	r16,r4
    60a8:	b1000017 	ldw	r4,0(r22)
    60ac:	29400044 	addi	r5,r5,1
    60b0:	000da800 	call	da80 <__udivsi3>
    60b4:	1027883a 	mov	r19,r2
    60b8:	10002c26 	beq	r2,zero,616c <quorem+0x120>
    60bc:	a813883a 	mov	r9,r21
    60c0:	8811883a 	mov	r8,r17
    60c4:	0009883a 	mov	r4,zero
    60c8:	000d883a 	mov	r6,zero
    60cc:	41c00017 	ldw	r7,0(r8)
    60d0:	49400017 	ldw	r5,0(r9)
    60d4:	42000104 	addi	r8,r8,4
    60d8:	38bfffcc 	andi	r2,r7,65535
    60dc:	14c5383a 	mul	r2,r2,r19
    60e0:	380ed43a 	srli	r7,r7,16
    60e4:	28ffffcc 	andi	r3,r5,65535
    60e8:	2085883a 	add	r2,r4,r2
    60ec:	1008d43a 	srli	r4,r2,16
    60f0:	3ccf383a 	mul	r7,r7,r19
    60f4:	198d883a 	add	r6,r3,r6
    60f8:	10ffffcc 	andi	r3,r2,65535
    60fc:	30c7c83a 	sub	r3,r6,r3
    6100:	280ad43a 	srli	r5,r5,16
    6104:	21c9883a 	add	r4,r4,r7
    6108:	180dd43a 	srai	r6,r3,16
    610c:	20bfffcc 	andi	r2,r4,65535
    6110:	288bc83a 	sub	r5,r5,r2
    6114:	298b883a 	add	r5,r5,r6
    6118:	280e943a 	slli	r7,r5,16
    611c:	18ffffcc 	andi	r3,r3,65535
    6120:	2008d43a 	srli	r4,r4,16
    6124:	38ceb03a 	or	r7,r7,r3
    6128:	49c00015 	stw	r7,0(r9)
    612c:	280dd43a 	srai	r6,r5,16
    6130:	4a400104 	addi	r9,r9,4
    6134:	a23fe52e 	bgeu	r20,r8,60cc <__alt_mem_sram+0xf7e060cc>
    6138:	b0800017 	ldw	r2,0(r22)
    613c:	10000b1e 	bne	r2,zero,616c <quorem+0x120>
    6140:	b0bfff04 	addi	r2,r22,-4
    6144:	a880082e 	bgeu	r21,r2,6168 <quorem+0x11c>
    6148:	b0ffff17 	ldw	r3,-4(r22)
    614c:	18000326 	beq	r3,zero,615c <quorem+0x110>
    6150:	00000506 	br	6168 <quorem+0x11c>
    6154:	10c00017 	ldw	r3,0(r2)
    6158:	1800031e 	bne	r3,zero,6168 <quorem+0x11c>
    615c:	10bfff04 	addi	r2,r2,-4
    6160:	94bfffc4 	addi	r18,r18,-1
    6164:	a8bffb36 	bltu	r21,r2,6154 <__alt_mem_sram+0xf7e06154>
    6168:	84800415 	stw	r18,16(r16)
    616c:	8009883a 	mov	r4,r16
    6170:	b80b883a 	mov	r5,r23
    6174:	000a1340 	call	a134 <__mcmp>
    6178:	10002616 	blt	r2,zero,6214 <quorem+0x1c8>
    617c:	9cc00044 	addi	r19,r19,1
    6180:	a80d883a 	mov	r6,r21
    6184:	000b883a 	mov	r5,zero
    6188:	31000017 	ldw	r4,0(r6)
    618c:	88800017 	ldw	r2,0(r17)
    6190:	31800104 	addi	r6,r6,4
    6194:	20ffffcc 	andi	r3,r4,65535
    6198:	194b883a 	add	r5,r3,r5
    619c:	10ffffcc 	andi	r3,r2,65535
    61a0:	28c7c83a 	sub	r3,r5,r3
    61a4:	1004d43a 	srli	r2,r2,16
    61a8:	2008d43a 	srli	r4,r4,16
    61ac:	180bd43a 	srai	r5,r3,16
    61b0:	18ffffcc 	andi	r3,r3,65535
    61b4:	2089c83a 	sub	r4,r4,r2
    61b8:	2149883a 	add	r4,r4,r5
    61bc:	2004943a 	slli	r2,r4,16
    61c0:	8c400104 	addi	r17,r17,4
    61c4:	200bd43a 	srai	r5,r4,16
    61c8:	10c6b03a 	or	r3,r2,r3
    61cc:	30ffff15 	stw	r3,-4(r6)
    61d0:	a47fed2e 	bgeu	r20,r17,6188 <__alt_mem_sram+0xf7e06188>
    61d4:	9485883a 	add	r2,r18,r18
    61d8:	1085883a 	add	r2,r2,r2
    61dc:	a887883a 	add	r3,r21,r2
    61e0:	18800017 	ldw	r2,0(r3)
    61e4:	10000b1e 	bne	r2,zero,6214 <quorem+0x1c8>
    61e8:	18bfff04 	addi	r2,r3,-4
    61ec:	a880082e 	bgeu	r21,r2,6210 <quorem+0x1c4>
    61f0:	18ffff17 	ldw	r3,-4(r3)
    61f4:	18000326 	beq	r3,zero,6204 <quorem+0x1b8>
    61f8:	00000506 	br	6210 <quorem+0x1c4>
    61fc:	10c00017 	ldw	r3,0(r2)
    6200:	1800031e 	bne	r3,zero,6210 <quorem+0x1c4>
    6204:	10bfff04 	addi	r2,r2,-4
    6208:	94bfffc4 	addi	r18,r18,-1
    620c:	a8bffb36 	bltu	r21,r2,61fc <__alt_mem_sram+0xf7e061fc>
    6210:	84800415 	stw	r18,16(r16)
    6214:	9805883a 	mov	r2,r19
    6218:	dfc00817 	ldw	ra,32(sp)
    621c:	ddc00717 	ldw	r23,28(sp)
    6220:	dd800617 	ldw	r22,24(sp)
    6224:	dd400517 	ldw	r21,20(sp)
    6228:	dd000417 	ldw	r20,16(sp)
    622c:	dcc00317 	ldw	r19,12(sp)
    6230:	dc800217 	ldw	r18,8(sp)
    6234:	dc400117 	ldw	r17,4(sp)
    6238:	dc000017 	ldw	r16,0(sp)
    623c:	dec00904 	addi	sp,sp,36
    6240:	f800283a 	ret
    6244:	0005883a 	mov	r2,zero
    6248:	003ff306 	br	6218 <__alt_mem_sram+0xf7e06218>

0000624c <_dtoa_r>:
    624c:	20801017 	ldw	r2,64(r4)
    6250:	deffde04 	addi	sp,sp,-136
    6254:	dd401d15 	stw	r21,116(sp)
    6258:	dcc01b15 	stw	r19,108(sp)
    625c:	dc801a15 	stw	r18,104(sp)
    6260:	dc401915 	stw	r17,100(sp)
    6264:	dc001815 	stw	r16,96(sp)
    6268:	dfc02115 	stw	ra,132(sp)
    626c:	df002015 	stw	fp,128(sp)
    6270:	ddc01f15 	stw	r23,124(sp)
    6274:	dd801e15 	stw	r22,120(sp)
    6278:	dd001c15 	stw	r20,112(sp)
    627c:	d9c00315 	stw	r7,12(sp)
    6280:	2021883a 	mov	r16,r4
    6284:	302b883a 	mov	r21,r6
    6288:	2825883a 	mov	r18,r5
    628c:	dc402417 	ldw	r17,144(sp)
    6290:	3027883a 	mov	r19,r6
    6294:	10000826 	beq	r2,zero,62b8 <_dtoa_r+0x6c>
    6298:	21801117 	ldw	r6,68(r4)
    629c:	00c00044 	movi	r3,1
    62a0:	100b883a 	mov	r5,r2
    62a4:	1986983a 	sll	r3,r3,r6
    62a8:	11800115 	stw	r6,4(r2)
    62ac:	10c00215 	stw	r3,8(r2)
    62b0:	000991c0 	call	991c <_Bfree>
    62b4:	80001015 	stw	zero,64(r16)
    62b8:	a8002d16 	blt	r21,zero,6370 <_dtoa_r+0x124>
    62bc:	88000015 	stw	zero,0(r17)
    62c0:	a8dffc2c 	andhi	r3,r21,32752
    62c4:	009ffc34 	movhi	r2,32752
    62c8:	18801b26 	beq	r3,r2,6338 <_dtoa_r+0xec>
    62cc:	9009883a 	mov	r4,r18
    62d0:	980b883a 	mov	r5,r19
    62d4:	000d883a 	mov	r6,zero
    62d8:	000f883a 	mov	r7,zero
    62dc:	000ebf80 	call	ebf8 <__eqdf2>
    62e0:	10002a1e 	bne	r2,zero,638c <_dtoa_r+0x140>
    62e4:	d8c02317 	ldw	r3,140(sp)
    62e8:	d9002517 	ldw	r4,148(sp)
    62ec:	00800044 	movi	r2,1
    62f0:	18800015 	stw	r2,0(r3)
    62f4:	2001a226 	beq	r4,zero,6980 <_dtoa_r+0x734>
    62f8:	00800074 	movhi	r2,1
    62fc:	108c7244 	addi	r2,r2,12745
    6300:	20800015 	stw	r2,0(r4)
    6304:	10bfffc4 	addi	r2,r2,-1
    6308:	dfc02117 	ldw	ra,132(sp)
    630c:	df002017 	ldw	fp,128(sp)
    6310:	ddc01f17 	ldw	r23,124(sp)
    6314:	dd801e17 	ldw	r22,120(sp)
    6318:	dd401d17 	ldw	r21,116(sp)
    631c:	dd001c17 	ldw	r20,112(sp)
    6320:	dcc01b17 	ldw	r19,108(sp)
    6324:	dc801a17 	ldw	r18,104(sp)
    6328:	dc401917 	ldw	r17,100(sp)
    632c:	dc001817 	ldw	r16,96(sp)
    6330:	dec02204 	addi	sp,sp,136
    6334:	f800283a 	ret
    6338:	d8c02317 	ldw	r3,140(sp)
    633c:	0089c3c4 	movi	r2,9999
    6340:	18800015 	stw	r2,0(r3)
    6344:	90017c26 	beq	r18,zero,6938 <_dtoa_r+0x6ec>
    6348:	00800074 	movhi	r2,1
    634c:	108c7e04 	addi	r2,r2,12792
    6350:	d9002517 	ldw	r4,148(sp)
    6354:	203fec26 	beq	r4,zero,6308 <__alt_mem_sram+0xf7e06308>
    6358:	10c000c7 	ldb	r3,3(r2)
    635c:	18017d1e 	bne	r3,zero,6954 <_dtoa_r+0x708>
    6360:	10c000c4 	addi	r3,r2,3
    6364:	d9802517 	ldw	r6,148(sp)
    6368:	30c00015 	stw	r3,0(r6)
    636c:	003fe606 	br	6308 <__alt_mem_sram+0xf7e06308>
    6370:	04e00034 	movhi	r19,32768
    6374:	9cffffc4 	addi	r19,r19,-1
    6378:	00800044 	movi	r2,1
    637c:	ace6703a 	and	r19,r21,r19
    6380:	88800015 	stw	r2,0(r17)
    6384:	982b883a 	mov	r21,r19
    6388:	003fcd06 	br	62c0 <__alt_mem_sram+0xf7e062c0>
    638c:	d8800204 	addi	r2,sp,8
    6390:	a822d53a 	srli	r17,r21,20
    6394:	d8800015 	stw	r2,0(sp)
    6398:	8009883a 	mov	r4,r16
    639c:	900b883a 	mov	r5,r18
    63a0:	980d883a 	mov	r6,r19
    63a4:	d9c00104 	addi	r7,sp,4
    63a8:	000a4a80 	call	a4a8 <__d2b>
    63ac:	1039883a 	mov	fp,r2
    63b0:	88016a1e 	bne	r17,zero,695c <_dtoa_r+0x710>
    63b4:	dd000217 	ldw	r20,8(sp)
    63b8:	dc400117 	ldw	r17,4(sp)
    63bc:	00befbc4 	movi	r2,-1041
    63c0:	a463883a 	add	r17,r20,r17
    63c4:	8882ea16 	blt	r17,r2,6f70 <_dtoa_r+0xd24>
    63c8:	00bf0384 	movi	r2,-1010
    63cc:	1445c83a 	sub	r2,r2,r17
    63d0:	89010484 	addi	r4,r17,1042
    63d4:	a8aa983a 	sll	r21,r21,r2
    63d8:	9108d83a 	srl	r4,r18,r4
    63dc:	a908b03a 	or	r4,r21,r4
    63e0:	000ff880 	call	ff88 <__floatunsidf>
    63e4:	017f8434 	movhi	r5,65040
    63e8:	01800044 	movi	r6,1
    63ec:	1009883a 	mov	r4,r2
    63f0:	194b883a 	add	r5,r3,r5
    63f4:	8c7fffc4 	addi	r17,r17,-1
    63f8:	d9800f15 	stw	r6,60(sp)
    63fc:	000d883a 	mov	r6,zero
    6400:	01cffe34 	movhi	r7,16376
    6404:	000f5600 	call	f560 <__subdf3>
    6408:	0198dbf4 	movhi	r6,25455
    640c:	01cff4f4 	movhi	r7,16339
    6410:	1009883a 	mov	r4,r2
    6414:	180b883a 	mov	r5,r3
    6418:	3190d844 	addi	r6,r6,17249
    641c:	39e1e9c4 	addi	r7,r7,-30809
    6420:	000ee3c0 	call	ee3c <__muldf3>
    6424:	01a2d874 	movhi	r6,35681
    6428:	01cff1f4 	movhi	r7,16327
    642c:	180b883a 	mov	r5,r3
    6430:	31b22cc4 	addi	r6,r6,-14157
    6434:	39e28a04 	addi	r7,r7,-30168
    6438:	1009883a 	mov	r4,r2
    643c:	000da900 	call	da90 <__adddf3>
    6440:	8809883a 	mov	r4,r17
    6444:	102d883a 	mov	r22,r2
    6448:	182b883a 	mov	r21,r3
    644c:	000feb80 	call	feb8 <__floatsidf>
    6450:	019427f4 	movhi	r6,20639
    6454:	01cff4f4 	movhi	r7,16339
    6458:	1009883a 	mov	r4,r2
    645c:	180b883a 	mov	r5,r3
    6460:	319e7ec4 	addi	r6,r6,31227
    6464:	39d104c4 	addi	r7,r7,17427
    6468:	000ee3c0 	call	ee3c <__muldf3>
    646c:	b009883a 	mov	r4,r22
    6470:	a80b883a 	mov	r5,r21
    6474:	100d883a 	mov	r6,r2
    6478:	180f883a 	mov	r7,r3
    647c:	000da900 	call	da90 <__adddf3>
    6480:	1009883a 	mov	r4,r2
    6484:	180b883a 	mov	r5,r3
    6488:	102d883a 	mov	r22,r2
    648c:	182b883a 	mov	r21,r3
    6490:	000fe300 	call	fe30 <__fixdfsi>
    6494:	b009883a 	mov	r4,r22
    6498:	a80b883a 	mov	r5,r21
    649c:	000d883a 	mov	r6,zero
    64a0:	000f883a 	mov	r7,zero
    64a4:	d8800515 	stw	r2,20(sp)
    64a8:	000ed5c0 	call	ed5c <__ledf2>
    64ac:	10023116 	blt	r2,zero,6d74 <_dtoa_r+0xb28>
    64b0:	d8c00517 	ldw	r3,20(sp)
    64b4:	00800584 	movi	r2,22
    64b8:	10c21f36 	bltu	r2,r3,6d38 <_dtoa_r+0xaec>
    64bc:	180490fa 	slli	r2,r3,3
    64c0:	00c00074 	movhi	r3,1
    64c4:	18cc9a04 	addi	r3,r3,12904
    64c8:	1885883a 	add	r2,r3,r2
    64cc:	11000017 	ldw	r4,0(r2)
    64d0:	11400117 	ldw	r5,4(r2)
    64d4:	900d883a 	mov	r6,r18
    64d8:	980f883a 	mov	r7,r19
    64dc:	000ec7c0 	call	ec7c <__gedf2>
    64e0:	0082a70e 	bge	zero,r2,6f80 <_dtoa_r+0xd34>
    64e4:	d9000517 	ldw	r4,20(sp)
    64e8:	d8000c15 	stw	zero,48(sp)
    64ec:	213fffc4 	addi	r4,r4,-1
    64f0:	d9000515 	stw	r4,20(sp)
    64f4:	a463c83a 	sub	r17,r20,r17
    64f8:	8dbfffc4 	addi	r22,r17,-1
    64fc:	b0021916 	blt	r22,zero,6d64 <_dtoa_r+0xb18>
    6500:	d8000815 	stw	zero,32(sp)
    6504:	d8800517 	ldw	r2,20(sp)
    6508:	10020e16 	blt	r2,zero,6d44 <_dtoa_r+0xaf8>
    650c:	b0ad883a 	add	r22,r22,r2
    6510:	d8800a15 	stw	r2,40(sp)
    6514:	d8000915 	stw	zero,36(sp)
    6518:	d8c00317 	ldw	r3,12(sp)
    651c:	00800244 	movi	r2,9
    6520:	10c11a36 	bltu	r2,r3,698c <_dtoa_r+0x740>
    6524:	00800144 	movi	r2,5
    6528:	10c4fc0e 	bge	r2,r3,791c <_dtoa_r+0x16d0>
    652c:	18ffff04 	addi	r3,r3,-4
    6530:	d8c00315 	stw	r3,12(sp)
    6534:	0029883a 	mov	r20,zero
    6538:	d9800317 	ldw	r6,12(sp)
    653c:	008000c4 	movi	r2,3
    6540:	3083bd26 	beq	r6,r2,7438 <_dtoa_r+0x11ec>
    6544:	1183670e 	bge	r2,r6,72e4 <_dtoa_r+0x1098>
    6548:	d8c00317 	ldw	r3,12(sp)
    654c:	00800104 	movi	r2,4
    6550:	1882e726 	beq	r3,r2,70f0 <_dtoa_r+0xea4>
    6554:	00800144 	movi	r2,5
    6558:	1884f21e 	bne	r3,r2,7924 <_dtoa_r+0x16d8>
    655c:	00800044 	movi	r2,1
    6560:	d8800b15 	stw	r2,44(sp)
    6564:	d8c02217 	ldw	r3,136(sp)
    6568:	d9000517 	ldw	r4,20(sp)
    656c:	1907883a 	add	r3,r3,r4
    6570:	19800044 	addi	r6,r3,1
    6574:	d8c00d15 	stw	r3,52(sp)
    6578:	d9800615 	stw	r6,24(sp)
    657c:	0183c30e 	bge	zero,r6,748c <_dtoa_r+0x1240>
    6580:	d9800617 	ldw	r6,24(sp)
    6584:	3023883a 	mov	r17,r6
    6588:	80001115 	stw	zero,68(r16)
    658c:	008005c4 	movi	r2,23
    6590:	1184f62e 	bgeu	r2,r6,796c <_dtoa_r+0x1720>
    6594:	00c00044 	movi	r3,1
    6598:	00800104 	movi	r2,4
    659c:	1085883a 	add	r2,r2,r2
    65a0:	11000504 	addi	r4,r2,20
    65a4:	180b883a 	mov	r5,r3
    65a8:	18c00044 	addi	r3,r3,1
    65ac:	313ffb2e 	bgeu	r6,r4,659c <__alt_mem_sram+0xf7e0659c>
    65b0:	81401115 	stw	r5,68(r16)
    65b4:	8009883a 	mov	r4,r16
    65b8:	00098740 	call	9874 <_Balloc>
    65bc:	d8800715 	stw	r2,28(sp)
    65c0:	80801015 	stw	r2,64(r16)
    65c4:	00800384 	movi	r2,14
    65c8:	1440fd36 	bltu	r2,r17,69c0 <_dtoa_r+0x774>
    65cc:	a000fc26 	beq	r20,zero,69c0 <_dtoa_r+0x774>
    65d0:	d8800517 	ldw	r2,20(sp)
    65d4:	0083b90e 	bge	zero,r2,74bc <_dtoa_r+0x1270>
    65d8:	d8c00517 	ldw	r3,20(sp)
    65dc:	108003cc 	andi	r2,r2,15
    65e0:	100490fa 	slli	r2,r2,3
    65e4:	182fd13a 	srai	r23,r3,4
    65e8:	00c00074 	movhi	r3,1
    65ec:	18cc9a04 	addi	r3,r3,12904
    65f0:	1885883a 	add	r2,r3,r2
    65f4:	b8c0040c 	andi	r3,r23,16
    65f8:	12c00017 	ldw	r11,0(r2)
    65fc:	12800117 	ldw	r10,4(r2)
    6600:	18039726 	beq	r3,zero,7460 <_dtoa_r+0x1214>
    6604:	00800074 	movhi	r2,1
    6608:	108c9004 	addi	r2,r2,12864
    660c:	11800817 	ldw	r6,32(r2)
    6610:	11c00917 	ldw	r7,36(r2)
    6614:	9009883a 	mov	r4,r18
    6618:	980b883a 	mov	r5,r19
    661c:	da801615 	stw	r10,88(sp)
    6620:	dac01515 	stw	r11,84(sp)
    6624:	000e32c0 	call	e32c <__divdf3>
    6628:	da801617 	ldw	r10,88(sp)
    662c:	dac01517 	ldw	r11,84(sp)
    6630:	bdc003cc 	andi	r23,r23,15
    6634:	044000c4 	movi	r17,3
    6638:	d8800e15 	stw	r2,56(sp)
    663c:	182b883a 	mov	r21,r3
    6640:	b8001126 	beq	r23,zero,6688 <_dtoa_r+0x43c>
    6644:	05000074 	movhi	r20,1
    6648:	a50c9004 	addi	r20,r20,12864
    664c:	5805883a 	mov	r2,r11
    6650:	5007883a 	mov	r3,r10
    6654:	b980004c 	andi	r6,r23,1
    6658:	1009883a 	mov	r4,r2
    665c:	b82fd07a 	srai	r23,r23,1
    6660:	180b883a 	mov	r5,r3
    6664:	30000426 	beq	r6,zero,6678 <_dtoa_r+0x42c>
    6668:	a1800017 	ldw	r6,0(r20)
    666c:	a1c00117 	ldw	r7,4(r20)
    6670:	8c400044 	addi	r17,r17,1
    6674:	000ee3c0 	call	ee3c <__muldf3>
    6678:	a5000204 	addi	r20,r20,8
    667c:	b83ff51e 	bne	r23,zero,6654 <__alt_mem_sram+0xf7e06654>
    6680:	1017883a 	mov	r11,r2
    6684:	1815883a 	mov	r10,r3
    6688:	d9000e17 	ldw	r4,56(sp)
    668c:	a80b883a 	mov	r5,r21
    6690:	580d883a 	mov	r6,r11
    6694:	500f883a 	mov	r7,r10
    6698:	000e32c0 	call	e32c <__divdf3>
    669c:	1029883a 	mov	r20,r2
    66a0:	182b883a 	mov	r21,r3
    66a4:	d9800c17 	ldw	r6,48(sp)
    66a8:	30000626 	beq	r6,zero,66c4 <_dtoa_r+0x478>
    66ac:	a009883a 	mov	r4,r20
    66b0:	a80b883a 	mov	r5,r21
    66b4:	000d883a 	mov	r6,zero
    66b8:	01cffc34 	movhi	r7,16368
    66bc:	000ed5c0 	call	ed5c <__ledf2>
    66c0:	10043216 	blt	r2,zero,778c <_dtoa_r+0x1540>
    66c4:	8809883a 	mov	r4,r17
    66c8:	000feb80 	call	feb8 <__floatsidf>
    66cc:	1009883a 	mov	r4,r2
    66d0:	180b883a 	mov	r5,r3
    66d4:	a00d883a 	mov	r6,r20
    66d8:	a80f883a 	mov	r7,r21
    66dc:	000ee3c0 	call	ee3c <__muldf3>
    66e0:	000d883a 	mov	r6,zero
    66e4:	1009883a 	mov	r4,r2
    66e8:	180b883a 	mov	r5,r3
    66ec:	01d00734 	movhi	r7,16412
    66f0:	000da900 	call	da90 <__adddf3>
    66f4:	1023883a 	mov	r17,r2
    66f8:	d9800617 	ldw	r6,24(sp)
    66fc:	00bf3034 	movhi	r2,64704
    6700:	1885883a 	add	r2,r3,r2
    6704:	d8800e15 	stw	r2,56(sp)
    6708:	30032e26 	beq	r6,zero,73c4 <_dtoa_r+0x1178>
    670c:	d8c00517 	ldw	r3,20(sp)
    6710:	da800617 	ldw	r10,24(sp)
    6714:	d8c01215 	stw	r3,72(sp)
    6718:	d9000b17 	ldw	r4,44(sp)
    671c:	2003b026 	beq	r4,zero,75e0 <_dtoa_r+0x1394>
    6720:	50bfffc4 	addi	r2,r10,-1
    6724:	100490fa 	slli	r2,r2,3
    6728:	00c00074 	movhi	r3,1
    672c:	18cc9a04 	addi	r3,r3,12904
    6730:	1885883a 	add	r2,r3,r2
    6734:	11800017 	ldw	r6,0(r2)
    6738:	11c00117 	ldw	r7,4(r2)
    673c:	d8800717 	ldw	r2,28(sp)
    6740:	0009883a 	mov	r4,zero
    6744:	014ff834 	movhi	r5,16352
    6748:	da801615 	stw	r10,88(sp)
    674c:	15c00044 	addi	r23,r2,1
    6750:	000e32c0 	call	e32c <__divdf3>
    6754:	d9c00e17 	ldw	r7,56(sp)
    6758:	880d883a 	mov	r6,r17
    675c:	1009883a 	mov	r4,r2
    6760:	180b883a 	mov	r5,r3
    6764:	000f5600 	call	f560 <__subdf3>
    6768:	a80b883a 	mov	r5,r21
    676c:	a009883a 	mov	r4,r20
    6770:	d8c01015 	stw	r3,64(sp)
    6774:	d8800e15 	stw	r2,56(sp)
    6778:	000fe300 	call	fe30 <__fixdfsi>
    677c:	1009883a 	mov	r4,r2
    6780:	d8801715 	stw	r2,92(sp)
    6784:	000feb80 	call	feb8 <__floatsidf>
    6788:	a009883a 	mov	r4,r20
    678c:	a80b883a 	mov	r5,r21
    6790:	100d883a 	mov	r6,r2
    6794:	180f883a 	mov	r7,r3
    6798:	000f5600 	call	f560 <__subdf3>
    679c:	da001717 	ldw	r8,92(sp)
    67a0:	1829883a 	mov	r20,r3
    67a4:	d8c00717 	ldw	r3,28(sp)
    67a8:	d9000e17 	ldw	r4,56(sp)
    67ac:	d9401017 	ldw	r5,64(sp)
    67b0:	42000c04 	addi	r8,r8,48
    67b4:	1023883a 	mov	r17,r2
    67b8:	1a000005 	stb	r8,0(r3)
    67bc:	880d883a 	mov	r6,r17
    67c0:	a00f883a 	mov	r7,r20
    67c4:	402b883a 	mov	r21,r8
    67c8:	000ec7c0 	call	ec7c <__gedf2>
    67cc:	00844516 	blt	zero,r2,78e4 <_dtoa_r+0x1698>
    67d0:	0009883a 	mov	r4,zero
    67d4:	014ffc34 	movhi	r5,16368
    67d8:	880d883a 	mov	r6,r17
    67dc:	a00f883a 	mov	r7,r20
    67e0:	000f5600 	call	f560 <__subdf3>
    67e4:	d9000e17 	ldw	r4,56(sp)
    67e8:	d9401017 	ldw	r5,64(sp)
    67ec:	100d883a 	mov	r6,r2
    67f0:	180f883a 	mov	r7,r3
    67f4:	000ec7c0 	call	ec7c <__gedf2>
    67f8:	da801617 	ldw	r10,88(sp)
    67fc:	00843616 	blt	zero,r2,78d8 <_dtoa_r+0x168c>
    6800:	00800044 	movi	r2,1
    6804:	12806e0e 	bge	r2,r10,69c0 <_dtoa_r+0x774>
    6808:	d9000717 	ldw	r4,28(sp)
    680c:	dd801315 	stw	r22,76(sp)
    6810:	dc001115 	stw	r16,68(sp)
    6814:	2295883a 	add	r10,r4,r10
    6818:	dcc01415 	stw	r19,80(sp)
    681c:	502d883a 	mov	r22,r10
    6820:	dcc01017 	ldw	r19,64(sp)
    6824:	b821883a 	mov	r16,r23
    6828:	dc801015 	stw	r18,64(sp)
    682c:	dc800e17 	ldw	r18,56(sp)
    6830:	00000906 	br	6858 <_dtoa_r+0x60c>
    6834:	000f5600 	call	f560 <__subdf3>
    6838:	1009883a 	mov	r4,r2
    683c:	180b883a 	mov	r5,r3
    6840:	900d883a 	mov	r6,r18
    6844:	980f883a 	mov	r7,r19
    6848:	000ed5c0 	call	ed5c <__ledf2>
    684c:	10040e16 	blt	r2,zero,7888 <_dtoa_r+0x163c>
    6850:	b821883a 	mov	r16,r23
    6854:	bd841026 	beq	r23,r22,7898 <_dtoa_r+0x164c>
    6858:	9009883a 	mov	r4,r18
    685c:	980b883a 	mov	r5,r19
    6860:	000d883a 	mov	r6,zero
    6864:	01d00934 	movhi	r7,16420
    6868:	000ee3c0 	call	ee3c <__muldf3>
    686c:	000d883a 	mov	r6,zero
    6870:	01d00934 	movhi	r7,16420
    6874:	8809883a 	mov	r4,r17
    6878:	a00b883a 	mov	r5,r20
    687c:	1025883a 	mov	r18,r2
    6880:	1827883a 	mov	r19,r3
    6884:	000ee3c0 	call	ee3c <__muldf3>
    6888:	180b883a 	mov	r5,r3
    688c:	1009883a 	mov	r4,r2
    6890:	1823883a 	mov	r17,r3
    6894:	1029883a 	mov	r20,r2
    6898:	000fe300 	call	fe30 <__fixdfsi>
    689c:	1009883a 	mov	r4,r2
    68a0:	102b883a 	mov	r21,r2
    68a4:	000feb80 	call	feb8 <__floatsidf>
    68a8:	a009883a 	mov	r4,r20
    68ac:	880b883a 	mov	r5,r17
    68b0:	100d883a 	mov	r6,r2
    68b4:	180f883a 	mov	r7,r3
    68b8:	000f5600 	call	f560 <__subdf3>
    68bc:	ad400c04 	addi	r21,r21,48
    68c0:	1009883a 	mov	r4,r2
    68c4:	180b883a 	mov	r5,r3
    68c8:	900d883a 	mov	r6,r18
    68cc:	980f883a 	mov	r7,r19
    68d0:	85400005 	stb	r21,0(r16)
    68d4:	1023883a 	mov	r17,r2
    68d8:	1829883a 	mov	r20,r3
    68dc:	000ed5c0 	call	ed5c <__ledf2>
    68e0:	bdc00044 	addi	r23,r23,1
    68e4:	0009883a 	mov	r4,zero
    68e8:	014ffc34 	movhi	r5,16368
    68ec:	880d883a 	mov	r6,r17
    68f0:	a00f883a 	mov	r7,r20
    68f4:	103fcf0e 	bge	r2,zero,6834 <__alt_mem_sram+0xf7e06834>
    68f8:	d9801217 	ldw	r6,72(sp)
    68fc:	dc001117 	ldw	r16,68(sp)
    6900:	d9800515 	stw	r6,20(sp)
    6904:	8009883a 	mov	r4,r16
    6908:	e00b883a 	mov	r5,fp
    690c:	000991c0 	call	991c <_Bfree>
    6910:	d8c00517 	ldw	r3,20(sp)
    6914:	d9002317 	ldw	r4,140(sp)
    6918:	d9802517 	ldw	r6,148(sp)
    691c:	b8000005 	stb	zero,0(r23)
    6920:	18800044 	addi	r2,r3,1
    6924:	20800015 	stw	r2,0(r4)
    6928:	30027226 	beq	r6,zero,72f4 <_dtoa_r+0x10a8>
    692c:	35c00015 	stw	r23,0(r6)
    6930:	d8800717 	ldw	r2,28(sp)
    6934:	003e7406 	br	6308 <__alt_mem_sram+0xf7e06308>
    6938:	00800434 	movhi	r2,16
    693c:	10bfffc4 	addi	r2,r2,-1
    6940:	a8aa703a 	and	r21,r21,r2
    6944:	a83e801e 	bne	r21,zero,6348 <__alt_mem_sram+0xf7e06348>
    6948:	00800074 	movhi	r2,1
    694c:	108c7b04 	addi	r2,r2,12780
    6950:	003e7f06 	br	6350 <__alt_mem_sram+0xf7e06350>
    6954:	10c00204 	addi	r3,r2,8
    6958:	003e8206 	br	6364 <__alt_mem_sram+0xf7e06364>
    695c:	01400434 	movhi	r5,16
    6960:	297fffc4 	addi	r5,r5,-1
    6964:	994a703a 	and	r5,r19,r5
    6968:	9009883a 	mov	r4,r18
    696c:	8c7f0044 	addi	r17,r17,-1023
    6970:	294ffc34 	orhi	r5,r5,16368
    6974:	dd000217 	ldw	r20,8(sp)
    6978:	d8000f15 	stw	zero,60(sp)
    697c:	003e9f06 	br	63fc <__alt_mem_sram+0xf7e063fc>
    6980:	00800074 	movhi	r2,1
    6984:	108c7204 	addi	r2,r2,12744
    6988:	003e5f06 	br	6308 <__alt_mem_sram+0xf7e06308>
    698c:	80001115 	stw	zero,68(r16)
    6990:	8009883a 	mov	r4,r16
    6994:	000b883a 	mov	r5,zero
    6998:	00098740 	call	9874 <_Balloc>
    699c:	01bfffc4 	movi	r6,-1
    69a0:	d8800715 	stw	r2,28(sp)
    69a4:	80801015 	stw	r2,64(r16)
    69a8:	00800044 	movi	r2,1
    69ac:	d9800615 	stw	r6,24(sp)
    69b0:	d8800b15 	stw	r2,44(sp)
    69b4:	d8002215 	stw	zero,136(sp)
    69b8:	d9800d15 	stw	r6,52(sp)
    69bc:	d8000315 	stw	zero,12(sp)
    69c0:	d8800117 	ldw	r2,4(sp)
    69c4:	10008e16 	blt	r2,zero,6c00 <_dtoa_r+0x9b4>
    69c8:	d9000517 	ldw	r4,20(sp)
    69cc:	00c00384 	movi	r3,14
    69d0:	19008b16 	blt	r3,r4,6c00 <_dtoa_r+0x9b4>
    69d4:	200490fa 	slli	r2,r4,3
    69d8:	00c00074 	movhi	r3,1
    69dc:	d9802217 	ldw	r6,136(sp)
    69e0:	18cc9a04 	addi	r3,r3,12904
    69e4:	1885883a 	add	r2,r3,r2
    69e8:	14400017 	ldw	r17,0(r2)
    69ec:	15000117 	ldw	r20,4(r2)
    69f0:	3001c716 	blt	r6,zero,7110 <_dtoa_r+0xec4>
    69f4:	880d883a 	mov	r6,r17
    69f8:	a00f883a 	mov	r7,r20
    69fc:	9009883a 	mov	r4,r18
    6a00:	980b883a 	mov	r5,r19
    6a04:	000e32c0 	call	e32c <__divdf3>
    6a08:	180b883a 	mov	r5,r3
    6a0c:	1009883a 	mov	r4,r2
    6a10:	000fe300 	call	fe30 <__fixdfsi>
    6a14:	1009883a 	mov	r4,r2
    6a18:	102d883a 	mov	r22,r2
    6a1c:	000feb80 	call	feb8 <__floatsidf>
    6a20:	1009883a 	mov	r4,r2
    6a24:	180b883a 	mov	r5,r3
    6a28:	880d883a 	mov	r6,r17
    6a2c:	a00f883a 	mov	r7,r20
    6a30:	000ee3c0 	call	ee3c <__muldf3>
    6a34:	9009883a 	mov	r4,r18
    6a38:	980b883a 	mov	r5,r19
    6a3c:	100d883a 	mov	r6,r2
    6a40:	180f883a 	mov	r7,r3
    6a44:	000f5600 	call	f560 <__subdf3>
    6a48:	d9000717 	ldw	r4,28(sp)
    6a4c:	d9800617 	ldw	r6,24(sp)
    6a50:	180b883a 	mov	r5,r3
    6a54:	b0c00c04 	addi	r3,r22,48
    6a58:	20c00005 	stb	r3,0(r4)
    6a5c:	25c00044 	addi	r23,r4,1
    6a60:	01000044 	movi	r4,1
    6a64:	1011883a 	mov	r8,r2
    6a68:	2807883a 	mov	r3,r5
    6a6c:	31003d26 	beq	r6,r4,6b64 <_dtoa_r+0x918>
    6a70:	000d883a 	mov	r6,zero
    6a74:	01d00934 	movhi	r7,16420
    6a78:	1009883a 	mov	r4,r2
    6a7c:	000ee3c0 	call	ee3c <__muldf3>
    6a80:	1009883a 	mov	r4,r2
    6a84:	180b883a 	mov	r5,r3
    6a88:	000d883a 	mov	r6,zero
    6a8c:	000f883a 	mov	r7,zero
    6a90:	1027883a 	mov	r19,r2
    6a94:	182b883a 	mov	r21,r3
    6a98:	000ebf80 	call	ebf8 <__eqdf2>
    6a9c:	103f9926 	beq	r2,zero,6904 <__alt_mem_sram+0xf7e06904>
    6aa0:	d8c00617 	ldw	r3,24(sp)
    6aa4:	d9000717 	ldw	r4,28(sp)
    6aa8:	b825883a 	mov	r18,r23
    6aac:	18bfffc4 	addi	r2,r3,-1
    6ab0:	20ad883a 	add	r22,r4,r2
    6ab4:	dc000315 	stw	r16,12(sp)
    6ab8:	00000a06 	br	6ae4 <_dtoa_r+0x898>
    6abc:	000ee3c0 	call	ee3c <__muldf3>
    6ac0:	1009883a 	mov	r4,r2
    6ac4:	180b883a 	mov	r5,r3
    6ac8:	000d883a 	mov	r6,zero
    6acc:	000f883a 	mov	r7,zero
    6ad0:	1027883a 	mov	r19,r2
    6ad4:	182b883a 	mov	r21,r3
    6ad8:	b825883a 	mov	r18,r23
    6adc:	000ebf80 	call	ebf8 <__eqdf2>
    6ae0:	10022626 	beq	r2,zero,737c <_dtoa_r+0x1130>
    6ae4:	880d883a 	mov	r6,r17
    6ae8:	a00f883a 	mov	r7,r20
    6aec:	9809883a 	mov	r4,r19
    6af0:	a80b883a 	mov	r5,r21
    6af4:	000e32c0 	call	e32c <__divdf3>
    6af8:	180b883a 	mov	r5,r3
    6afc:	1009883a 	mov	r4,r2
    6b00:	000fe300 	call	fe30 <__fixdfsi>
    6b04:	1009883a 	mov	r4,r2
    6b08:	1021883a 	mov	r16,r2
    6b0c:	000feb80 	call	feb8 <__floatsidf>
    6b10:	1009883a 	mov	r4,r2
    6b14:	180b883a 	mov	r5,r3
    6b18:	880d883a 	mov	r6,r17
    6b1c:	a00f883a 	mov	r7,r20
    6b20:	000ee3c0 	call	ee3c <__muldf3>
    6b24:	9809883a 	mov	r4,r19
    6b28:	a80b883a 	mov	r5,r21
    6b2c:	100d883a 	mov	r6,r2
    6b30:	180f883a 	mov	r7,r3
    6b34:	000f5600 	call	f560 <__subdf3>
    6b38:	82000c04 	addi	r8,r16,48
    6b3c:	92000005 	stb	r8,0(r18)
    6b40:	1009883a 	mov	r4,r2
    6b44:	180b883a 	mov	r5,r3
    6b48:	000d883a 	mov	r6,zero
    6b4c:	01d00934 	movhi	r7,16420
    6b50:	1011883a 	mov	r8,r2
    6b54:	bdc00044 	addi	r23,r23,1
    6b58:	95bfd81e 	bne	r18,r22,6abc <__alt_mem_sram+0xf7e06abc>
    6b5c:	802d883a 	mov	r22,r16
    6b60:	dc000317 	ldw	r16,12(sp)
    6b64:	4009883a 	mov	r4,r8
    6b68:	180b883a 	mov	r5,r3
    6b6c:	400d883a 	mov	r6,r8
    6b70:	180f883a 	mov	r7,r3
    6b74:	000da900 	call	da90 <__adddf3>
    6b78:	8809883a 	mov	r4,r17
    6b7c:	a00b883a 	mov	r5,r20
    6b80:	100d883a 	mov	r6,r2
    6b84:	180f883a 	mov	r7,r3
    6b88:	1027883a 	mov	r19,r2
    6b8c:	1825883a 	mov	r18,r3
    6b90:	000ed5c0 	call	ed5c <__ledf2>
    6b94:	10000816 	blt	r2,zero,6bb8 <_dtoa_r+0x96c>
    6b98:	8809883a 	mov	r4,r17
    6b9c:	a00b883a 	mov	r5,r20
    6ba0:	980d883a 	mov	r6,r19
    6ba4:	900f883a 	mov	r7,r18
    6ba8:	000ebf80 	call	ebf8 <__eqdf2>
    6bac:	103f551e 	bne	r2,zero,6904 <__alt_mem_sram+0xf7e06904>
    6bb0:	b580004c 	andi	r22,r22,1
    6bb4:	b03f5326 	beq	r22,zero,6904 <__alt_mem_sram+0xf7e06904>
    6bb8:	bd7fffc3 	ldbu	r21,-1(r23)
    6bbc:	b8bfffc4 	addi	r2,r23,-1
    6bc0:	1007883a 	mov	r3,r2
    6bc4:	01400e44 	movi	r5,57
    6bc8:	d9800717 	ldw	r6,28(sp)
    6bcc:	00000506 	br	6be4 <_dtoa_r+0x998>
    6bd0:	18ffffc4 	addi	r3,r3,-1
    6bd4:	30825e26 	beq	r6,r2,7550 <_dtoa_r+0x1304>
    6bd8:	1d400003 	ldbu	r21,0(r3)
    6bdc:	102f883a 	mov	r23,r2
    6be0:	10bfffc4 	addi	r2,r2,-1
    6be4:	a9003fcc 	andi	r4,r21,255
    6be8:	2100201c 	xori	r4,r4,128
    6bec:	213fe004 	addi	r4,r4,-128
    6bf0:	217ff726 	beq	r4,r5,6bd0 <__alt_mem_sram+0xf7e06bd0>
    6bf4:	aa000044 	addi	r8,r21,1
    6bf8:	12000005 	stb	r8,0(r2)
    6bfc:	003f4106 	br	6904 <__alt_mem_sram+0xf7e06904>
    6c00:	d8c00b17 	ldw	r3,44(sp)
    6c04:	18006726 	beq	r3,zero,6da4 <_dtoa_r+0xb58>
    6c08:	d9000317 	ldw	r4,12(sp)
    6c0c:	00c00044 	movi	r3,1
    6c10:	19016a0e 	bge	r3,r4,71bc <_dtoa_r+0xf70>
    6c14:	d8800617 	ldw	r2,24(sp)
    6c18:	d8c00917 	ldw	r3,36(sp)
    6c1c:	157fffc4 	addi	r21,r2,-1
    6c20:	1d420716 	blt	r3,r21,7440 <_dtoa_r+0x11f4>
    6c24:	1d6bc83a 	sub	r21,r3,r21
    6c28:	d8800617 	ldw	r2,24(sp)
    6c2c:	1002c716 	blt	r2,zero,774c <_dtoa_r+0x1500>
    6c30:	dd000817 	ldw	r20,32(sp)
    6c34:	d8800617 	ldw	r2,24(sp)
    6c38:	d9800817 	ldw	r6,32(sp)
    6c3c:	8009883a 	mov	r4,r16
    6c40:	01400044 	movi	r5,1
    6c44:	308d883a 	add	r6,r6,r2
    6c48:	d9800815 	stw	r6,32(sp)
    6c4c:	b0ad883a 	add	r22,r22,r2
    6c50:	0009c740 	call	9c74 <__i2b>
    6c54:	1023883a 	mov	r17,r2
    6c58:	a0000826 	beq	r20,zero,6c7c <_dtoa_r+0xa30>
    6c5c:	0580070e 	bge	zero,r22,6c7c <_dtoa_r+0xa30>
    6c60:	b005883a 	mov	r2,r22
    6c64:	a5812016 	blt	r20,r22,70e8 <_dtoa_r+0xe9c>
    6c68:	d8c00817 	ldw	r3,32(sp)
    6c6c:	a0a9c83a 	sub	r20,r20,r2
    6c70:	b0adc83a 	sub	r22,r22,r2
    6c74:	1887c83a 	sub	r3,r3,r2
    6c78:	d8c00815 	stw	r3,32(sp)
    6c7c:	d9000917 	ldw	r4,36(sp)
    6c80:	0100140e 	bge	zero,r4,6cd4 <_dtoa_r+0xa88>
    6c84:	d9800b17 	ldw	r6,44(sp)
    6c88:	3001e526 	beq	r6,zero,7420 <_dtoa_r+0x11d4>
    6c8c:	05400e0e 	bge	zero,r21,6cc8 <_dtoa_r+0xa7c>
    6c90:	880b883a 	mov	r5,r17
    6c94:	8009883a 	mov	r4,r16
    6c98:	a80d883a 	mov	r6,r21
    6c9c:	0009eac0 	call	9eac <__pow5mult>
    6ca0:	e00d883a 	mov	r6,fp
    6ca4:	8009883a 	mov	r4,r16
    6ca8:	100b883a 	mov	r5,r2
    6cac:	1023883a 	mov	r17,r2
    6cb0:	0009cb00 	call	9cb0 <__multiply>
    6cb4:	102f883a 	mov	r23,r2
    6cb8:	e00b883a 	mov	r5,fp
    6cbc:	8009883a 	mov	r4,r16
    6cc0:	000991c0 	call	991c <_Bfree>
    6cc4:	b839883a 	mov	fp,r23
    6cc8:	d8800917 	ldw	r2,36(sp)
    6ccc:	154dc83a 	sub	r6,r2,r21
    6cd0:	3001281e 	bne	r6,zero,7174 <_dtoa_r+0xf28>
    6cd4:	05c00044 	movi	r23,1
    6cd8:	8009883a 	mov	r4,r16
    6cdc:	b80b883a 	mov	r5,r23
    6ce0:	0009c740 	call	9c74 <__i2b>
    6ce4:	d8c00a17 	ldw	r3,40(sp)
    6ce8:	102b883a 	mov	r21,r2
    6cec:	00c0310e 	bge	zero,r3,6db4 <_dtoa_r+0xb68>
    6cf0:	8009883a 	mov	r4,r16
    6cf4:	100b883a 	mov	r5,r2
    6cf8:	180d883a 	mov	r6,r3
    6cfc:	0009eac0 	call	9eac <__pow5mult>
    6d00:	d9000317 	ldw	r4,12(sp)
    6d04:	102b883a 	mov	r21,r2
    6d08:	b9011f0e 	bge	r23,r4,7188 <_dtoa_r+0xf3c>
    6d0c:	0027883a 	mov	r19,zero
    6d10:	a8800417 	ldw	r2,16(r21)
    6d14:	10800104 	addi	r2,r2,4
    6d18:	1085883a 	add	r2,r2,r2
    6d1c:	1085883a 	add	r2,r2,r2
    6d20:	a885883a 	add	r2,r21,r2
    6d24:	11000017 	ldw	r4,0(r2)
    6d28:	0009b5c0 	call	9b5c <__hi0bits>
    6d2c:	00c00804 	movi	r3,32
    6d30:	1885c83a 	sub	r2,r3,r2
    6d34:	00002506 	br	6dcc <_dtoa_r+0xb80>
    6d38:	01800044 	movi	r6,1
    6d3c:	d9800c15 	stw	r6,48(sp)
    6d40:	003dec06 	br	64f4 <__alt_mem_sram+0xf7e064f4>
    6d44:	d8c00817 	ldw	r3,32(sp)
    6d48:	d9000517 	ldw	r4,20(sp)
    6d4c:	d8000a15 	stw	zero,40(sp)
    6d50:	1907c83a 	sub	r3,r3,r4
    6d54:	010dc83a 	sub	r6,zero,r4
    6d58:	d8c00815 	stw	r3,32(sp)
    6d5c:	d9800915 	stw	r6,36(sp)
    6d60:	003ded06 	br	6518 <__alt_mem_sram+0xf7e06518>
    6d64:	05adc83a 	sub	r22,zero,r22
    6d68:	dd800815 	stw	r22,32(sp)
    6d6c:	002d883a 	mov	r22,zero
    6d70:	003de406 	br	6504 <__alt_mem_sram+0xf7e06504>
    6d74:	d9000517 	ldw	r4,20(sp)
    6d78:	000feb80 	call	feb8 <__floatsidf>
    6d7c:	1009883a 	mov	r4,r2
    6d80:	180b883a 	mov	r5,r3
    6d84:	b00d883a 	mov	r6,r22
    6d88:	a80f883a 	mov	r7,r21
    6d8c:	000ebf80 	call	ebf8 <__eqdf2>
    6d90:	103dc726 	beq	r2,zero,64b0 <__alt_mem_sram+0xf7e064b0>
    6d94:	d8800517 	ldw	r2,20(sp)
    6d98:	10bfffc4 	addi	r2,r2,-1
    6d9c:	d8800515 	stw	r2,20(sp)
    6da0:	003dc306 	br	64b0 <__alt_mem_sram+0xf7e064b0>
    6da4:	dd400917 	ldw	r21,36(sp)
    6da8:	dd000817 	ldw	r20,32(sp)
    6dac:	0023883a 	mov	r17,zero
    6db0:	003fa906 	br	6c58 <__alt_mem_sram+0xf7e06c58>
    6db4:	d9800317 	ldw	r6,12(sp)
    6db8:	b981670e 	bge	r23,r6,7358 <_dtoa_r+0x110c>
    6dbc:	0027883a 	mov	r19,zero
    6dc0:	d8c00a17 	ldw	r3,40(sp)
    6dc4:	183fd21e 	bne	r3,zero,6d10 <__alt_mem_sram+0xf7e06d10>
    6dc8:	00800044 	movi	r2,1
    6dcc:	1585883a 	add	r2,r2,r22
    6dd0:	108007cc 	andi	r2,r2,31
    6dd4:	10005f26 	beq	r2,zero,6f54 <_dtoa_r+0xd08>
    6dd8:	00c00804 	movi	r3,32
    6ddc:	1887c83a 	sub	r3,r3,r2
    6de0:	01000104 	movi	r4,4
    6de4:	20c2dd0e 	bge	r4,r3,795c <_dtoa_r+0x1710>
    6de8:	d9000817 	ldw	r4,32(sp)
    6dec:	00c00704 	movi	r3,28
    6df0:	1885c83a 	sub	r2,r3,r2
    6df4:	2089883a 	add	r4,r4,r2
    6df8:	d9000815 	stw	r4,32(sp)
    6dfc:	a0a9883a 	add	r20,r20,r2
    6e00:	b0ad883a 	add	r22,r22,r2
    6e04:	d8800817 	ldw	r2,32(sp)
    6e08:	0080050e 	bge	zero,r2,6e20 <_dtoa_r+0xbd4>
    6e0c:	e00b883a 	mov	r5,fp
    6e10:	8009883a 	mov	r4,r16
    6e14:	100d883a 	mov	r6,r2
    6e18:	0009fec0 	call	9fec <__lshift>
    6e1c:	1039883a 	mov	fp,r2
    6e20:	0580050e 	bge	zero,r22,6e38 <_dtoa_r+0xbec>
    6e24:	a80b883a 	mov	r5,r21
    6e28:	8009883a 	mov	r4,r16
    6e2c:	b00d883a 	mov	r6,r22
    6e30:	0009fec0 	call	9fec <__lshift>
    6e34:	102b883a 	mov	r21,r2
    6e38:	d8c00c17 	ldw	r3,48(sp)
    6e3c:	1801161e 	bne	r3,zero,7298 <_dtoa_r+0x104c>
    6e40:	d8c00617 	ldw	r3,24(sp)
    6e44:	00c12d0e 	bge	zero,r3,72fc <_dtoa_r+0x10b0>
    6e48:	d8c00b17 	ldw	r3,44(sp)
    6e4c:	1800571e 	bne	r3,zero,6fac <_dtoa_r+0xd60>
    6e50:	dc800717 	ldw	r18,28(sp)
    6e54:	dcc00617 	ldw	r19,24(sp)
    6e58:	9029883a 	mov	r20,r18
    6e5c:	00000206 	br	6e68 <_dtoa_r+0xc1c>
    6e60:	00099440 	call	9944 <__multadd>
    6e64:	1039883a 	mov	fp,r2
    6e68:	e009883a 	mov	r4,fp
    6e6c:	a80b883a 	mov	r5,r21
    6e70:	000604c0 	call	604c <quorem>
    6e74:	10800c04 	addi	r2,r2,48
    6e78:	90800005 	stb	r2,0(r18)
    6e7c:	94800044 	addi	r18,r18,1
    6e80:	9507c83a 	sub	r3,r18,r20
    6e84:	8009883a 	mov	r4,r16
    6e88:	e00b883a 	mov	r5,fp
    6e8c:	01800284 	movi	r6,10
    6e90:	000f883a 	mov	r7,zero
    6e94:	1cfff216 	blt	r3,r19,6e60 <__alt_mem_sram+0xf7e06e60>
    6e98:	1011883a 	mov	r8,r2
    6e9c:	d8800617 	ldw	r2,24(sp)
    6ea0:	00822e0e 	bge	zero,r2,775c <_dtoa_r+0x1510>
    6ea4:	d9000717 	ldw	r4,28(sp)
    6ea8:	0025883a 	mov	r18,zero
    6eac:	20af883a 	add	r23,r4,r2
    6eb0:	e00b883a 	mov	r5,fp
    6eb4:	01800044 	movi	r6,1
    6eb8:	8009883a 	mov	r4,r16
    6ebc:	da001715 	stw	r8,92(sp)
    6ec0:	0009fec0 	call	9fec <__lshift>
    6ec4:	1009883a 	mov	r4,r2
    6ec8:	a80b883a 	mov	r5,r21
    6ecc:	1039883a 	mov	fp,r2
    6ed0:	000a1340 	call	a134 <__mcmp>
    6ed4:	da001717 	ldw	r8,92(sp)
    6ed8:	00816e0e 	bge	zero,r2,7494 <_dtoa_r+0x1248>
    6edc:	b93fffc3 	ldbu	r4,-1(r23)
    6ee0:	b8bfffc4 	addi	r2,r23,-1
    6ee4:	1007883a 	mov	r3,r2
    6ee8:	01800e44 	movi	r6,57
    6eec:	d9c00717 	ldw	r7,28(sp)
    6ef0:	00000506 	br	6f08 <_dtoa_r+0xcbc>
    6ef4:	18ffffc4 	addi	r3,r3,-1
    6ef8:	38811926 	beq	r7,r2,7360 <_dtoa_r+0x1114>
    6efc:	19000003 	ldbu	r4,0(r3)
    6f00:	102f883a 	mov	r23,r2
    6f04:	10bfffc4 	addi	r2,r2,-1
    6f08:	21403fcc 	andi	r5,r4,255
    6f0c:	2940201c 	xori	r5,r5,128
    6f10:	297fe004 	addi	r5,r5,-128
    6f14:	29bff726 	beq	r5,r6,6ef4 <__alt_mem_sram+0xf7e06ef4>
    6f18:	21000044 	addi	r4,r4,1
    6f1c:	11000005 	stb	r4,0(r2)
    6f20:	8009883a 	mov	r4,r16
    6f24:	a80b883a 	mov	r5,r21
    6f28:	000991c0 	call	991c <_Bfree>
    6f2c:	883e7526 	beq	r17,zero,6904 <__alt_mem_sram+0xf7e06904>
    6f30:	90000426 	beq	r18,zero,6f44 <_dtoa_r+0xcf8>
    6f34:	94400326 	beq	r18,r17,6f44 <_dtoa_r+0xcf8>
    6f38:	8009883a 	mov	r4,r16
    6f3c:	900b883a 	mov	r5,r18
    6f40:	000991c0 	call	991c <_Bfree>
    6f44:	8009883a 	mov	r4,r16
    6f48:	880b883a 	mov	r5,r17
    6f4c:	000991c0 	call	991c <_Bfree>
    6f50:	003e6c06 	br	6904 <__alt_mem_sram+0xf7e06904>
    6f54:	00800704 	movi	r2,28
    6f58:	d9800817 	ldw	r6,32(sp)
    6f5c:	a0a9883a 	add	r20,r20,r2
    6f60:	b0ad883a 	add	r22,r22,r2
    6f64:	308d883a 	add	r6,r6,r2
    6f68:	d9800815 	stw	r6,32(sp)
    6f6c:	003fa506 	br	6e04 <__alt_mem_sram+0xf7e06e04>
    6f70:	013efb84 	movi	r4,-1042
    6f74:	246bc83a 	sub	r21,r4,r17
    6f78:	9548983a 	sll	r4,r18,r21
    6f7c:	003d1806 	br	63e0 <__alt_mem_sram+0xf7e063e0>
    6f80:	d8000c15 	stw	zero,48(sp)
    6f84:	003d5b06 	br	64f4 <__alt_mem_sram+0xf7e064f4>
    6f88:	880b883a 	mov	r5,r17
    6f8c:	8009883a 	mov	r4,r16
    6f90:	01800284 	movi	r6,10
    6f94:	000f883a 	mov	r7,zero
    6f98:	00099440 	call	9944 <__multadd>
    6f9c:	1023883a 	mov	r17,r2
    6fa0:	d8800d17 	ldw	r2,52(sp)
    6fa4:	0082550e 	bge	zero,r2,78fc <_dtoa_r+0x16b0>
    6fa8:	d8800615 	stw	r2,24(sp)
    6fac:	0500050e 	bge	zero,r20,6fc4 <_dtoa_r+0xd78>
    6fb0:	880b883a 	mov	r5,r17
    6fb4:	8009883a 	mov	r4,r16
    6fb8:	a00d883a 	mov	r6,r20
    6fbc:	0009fec0 	call	9fec <__lshift>
    6fc0:	1023883a 	mov	r17,r2
    6fc4:	98016a1e 	bne	r19,zero,7570 <_dtoa_r+0x1324>
    6fc8:	8829883a 	mov	r20,r17
    6fcc:	d9000617 	ldw	r4,24(sp)
    6fd0:	dcc00717 	ldw	r19,28(sp)
    6fd4:	9480004c 	andi	r18,r18,1
    6fd8:	20bfffc4 	addi	r2,r4,-1
    6fdc:	9885883a 	add	r2,r19,r2
    6fe0:	d8800415 	stw	r2,16(sp)
    6fe4:	dc800615 	stw	r18,24(sp)
    6fe8:	e009883a 	mov	r4,fp
    6fec:	a80b883a 	mov	r5,r21
    6ff0:	000604c0 	call	604c <quorem>
    6ff4:	e009883a 	mov	r4,fp
    6ff8:	880b883a 	mov	r5,r17
    6ffc:	102f883a 	mov	r23,r2
    7000:	000a1340 	call	a134 <__mcmp>
    7004:	8009883a 	mov	r4,r16
    7008:	a80b883a 	mov	r5,r21
    700c:	a00d883a 	mov	r6,r20
    7010:	102d883a 	mov	r22,r2
    7014:	000a1940 	call	a194 <__mdiff>
    7018:	1007883a 	mov	r3,r2
    701c:	10800317 	ldw	r2,12(r2)
    7020:	bc800c04 	addi	r18,r23,48
    7024:	1000971e 	bne	r2,zero,7284 <_dtoa_r+0x1038>
    7028:	180b883a 	mov	r5,r3
    702c:	e009883a 	mov	r4,fp
    7030:	d8c01515 	stw	r3,84(sp)
    7034:	000a1340 	call	a134 <__mcmp>
    7038:	d8c01517 	ldw	r3,84(sp)
    703c:	8009883a 	mov	r4,r16
    7040:	d8801515 	stw	r2,84(sp)
    7044:	180b883a 	mov	r5,r3
    7048:	000991c0 	call	991c <_Bfree>
    704c:	d8801517 	ldw	r2,84(sp)
    7050:	1000041e 	bne	r2,zero,7064 <_dtoa_r+0xe18>
    7054:	d9800317 	ldw	r6,12(sp)
    7058:	3000021e 	bne	r6,zero,7064 <_dtoa_r+0xe18>
    705c:	d8c00617 	ldw	r3,24(sp)
    7060:	18007626 	beq	r3,zero,723c <_dtoa_r+0xff0>
    7064:	b0005b16 	blt	r22,zero,71d4 <_dtoa_r+0xf88>
    7068:	b000041e 	bne	r22,zero,707c <_dtoa_r+0xe30>
    706c:	d9000317 	ldw	r4,12(sp)
    7070:	2000021e 	bne	r4,zero,707c <_dtoa_r+0xe30>
    7074:	d8c00617 	ldw	r3,24(sp)
    7078:	18005626 	beq	r3,zero,71d4 <_dtoa_r+0xf88>
    707c:	00814d16 	blt	zero,r2,75b4 <_dtoa_r+0x1368>
    7080:	d8c00417 	ldw	r3,16(sp)
    7084:	9d800044 	addi	r22,r19,1
    7088:	9c800005 	stb	r18,0(r19)
    708c:	b02f883a 	mov	r23,r22
    7090:	98c14c26 	beq	r19,r3,75c4 <_dtoa_r+0x1378>
    7094:	e00b883a 	mov	r5,fp
    7098:	8009883a 	mov	r4,r16
    709c:	01800284 	movi	r6,10
    70a0:	000f883a 	mov	r7,zero
    70a4:	00099440 	call	9944 <__multadd>
    70a8:	1039883a 	mov	fp,r2
    70ac:	8d006d26 	beq	r17,r20,7264 <_dtoa_r+0x1018>
    70b0:	880b883a 	mov	r5,r17
    70b4:	01800284 	movi	r6,10
    70b8:	000f883a 	mov	r7,zero
    70bc:	8009883a 	mov	r4,r16
    70c0:	00099440 	call	9944 <__multadd>
    70c4:	a00b883a 	mov	r5,r20
    70c8:	8009883a 	mov	r4,r16
    70cc:	01800284 	movi	r6,10
    70d0:	000f883a 	mov	r7,zero
    70d4:	1023883a 	mov	r17,r2
    70d8:	00099440 	call	9944 <__multadd>
    70dc:	1029883a 	mov	r20,r2
    70e0:	b027883a 	mov	r19,r22
    70e4:	003fc006 	br	6fe8 <__alt_mem_sram+0xf7e06fe8>
    70e8:	a005883a 	mov	r2,r20
    70ec:	003ede06 	br	6c68 <__alt_mem_sram+0xf7e06c68>
    70f0:	01000044 	movi	r4,1
    70f4:	d9000b15 	stw	r4,44(sp)
    70f8:	d9802217 	ldw	r6,136(sp)
    70fc:	0180dc0e 	bge	zero,r6,7470 <_dtoa_r+0x1224>
    7100:	3023883a 	mov	r17,r6
    7104:	d9800d15 	stw	r6,52(sp)
    7108:	d9800615 	stw	r6,24(sp)
    710c:	003d1e06 	br	6588 <__alt_mem_sram+0xf7e06588>
    7110:	d8800617 	ldw	r2,24(sp)
    7114:	00be3716 	blt	zero,r2,69f4 <__alt_mem_sram+0xf7e069f4>
    7118:	1000be1e 	bne	r2,zero,7414 <_dtoa_r+0x11c8>
    711c:	8809883a 	mov	r4,r17
    7120:	a00b883a 	mov	r5,r20
    7124:	000d883a 	mov	r6,zero
    7128:	01d00534 	movhi	r7,16404
    712c:	000ee3c0 	call	ee3c <__muldf3>
    7130:	1009883a 	mov	r4,r2
    7134:	180b883a 	mov	r5,r3
    7138:	900d883a 	mov	r6,r18
    713c:	980f883a 	mov	r7,r19
    7140:	000ec7c0 	call	ec7c <__gedf2>
    7144:	002b883a 	mov	r21,zero
    7148:	0023883a 	mov	r17,zero
    714c:	10007a16 	blt	r2,zero,7338 <_dtoa_r+0x10ec>
    7150:	d9002217 	ldw	r4,136(sp)
    7154:	ddc00717 	ldw	r23,28(sp)
    7158:	0108303a 	nor	r4,zero,r4
    715c:	d9000515 	stw	r4,20(sp)
    7160:	8009883a 	mov	r4,r16
    7164:	a80b883a 	mov	r5,r21
    7168:	000991c0 	call	991c <_Bfree>
    716c:	883f751e 	bne	r17,zero,6f44 <__alt_mem_sram+0xf7e06f44>
    7170:	003de406 	br	6904 <__alt_mem_sram+0xf7e06904>
    7174:	e00b883a 	mov	r5,fp
    7178:	8009883a 	mov	r4,r16
    717c:	0009eac0 	call	9eac <__pow5mult>
    7180:	1039883a 	mov	fp,r2
    7184:	003ed306 	br	6cd4 <__alt_mem_sram+0xf7e06cd4>
    7188:	903ee01e 	bne	r18,zero,6d0c <__alt_mem_sram+0xf7e06d0c>
    718c:	00800434 	movhi	r2,16
    7190:	10bfffc4 	addi	r2,r2,-1
    7194:	9884703a 	and	r2,r19,r2
    7198:	103f081e 	bne	r2,zero,6dbc <__alt_mem_sram+0xf7e06dbc>
    719c:	9cdffc2c 	andhi	r19,r19,32752
    71a0:	983f0626 	beq	r19,zero,6dbc <__alt_mem_sram+0xf7e06dbc>
    71a4:	d8800817 	ldw	r2,32(sp)
    71a8:	b5800044 	addi	r22,r22,1
    71ac:	04c00044 	movi	r19,1
    71b0:	10800044 	addi	r2,r2,1
    71b4:	d8800815 	stw	r2,32(sp)
    71b8:	003f0106 	br	6dc0 <__alt_mem_sram+0xf7e06dc0>
    71bc:	d9800f17 	ldw	r6,60(sp)
    71c0:	30016826 	beq	r6,zero,7764 <_dtoa_r+0x1518>
    71c4:	10810cc4 	addi	r2,r2,1075
    71c8:	dd400917 	ldw	r21,36(sp)
    71cc:	dd000817 	ldw	r20,32(sp)
    71d0:	003e9906 	br	6c38 <__alt_mem_sram+0xf7e06c38>
    71d4:	9011883a 	mov	r8,r18
    71d8:	4007883a 	mov	r3,r8
    71dc:	e02d883a 	mov	r22,fp
    71e0:	0080100e 	bge	zero,r2,7224 <_dtoa_r+0xfd8>
    71e4:	01800044 	movi	r6,1
    71e8:	8009883a 	mov	r4,r16
    71ec:	e00b883a 	mov	r5,fp
    71f0:	da001515 	stw	r8,84(sp)
    71f4:	da001715 	stw	r8,92(sp)
    71f8:	0009fec0 	call	9fec <__lshift>
    71fc:	1009883a 	mov	r4,r2
    7200:	a80b883a 	mov	r5,r21
    7204:	102d883a 	mov	r22,r2
    7208:	000a1340 	call	a134 <__mcmp>
    720c:	d8c01517 	ldw	r3,84(sp)
    7210:	da001717 	ldw	r8,92(sp)
    7214:	0081a50e 	bge	zero,r2,78ac <_dtoa_r+0x1660>
    7218:	00800e44 	movi	r2,57
    721c:	40817b26 	beq	r8,r2,780c <_dtoa_r+0x15c0>
    7220:	40c00044 	addi	r3,r8,1
    7224:	8825883a 	mov	r18,r17
    7228:	9dc00044 	addi	r23,r19,1
    722c:	98c00005 	stb	r3,0(r19)
    7230:	a023883a 	mov	r17,r20
    7234:	b039883a 	mov	fp,r22
    7238:	003f3906 	br	6f20 <__alt_mem_sram+0xf7e06f20>
    723c:	00800e44 	movi	r2,57
    7240:	9011883a 	mov	r8,r18
    7244:	90817226 	beq	r18,r2,7810 <_dtoa_r+0x15c4>
    7248:	0580010e 	bge	zero,r22,7250 <_dtoa_r+0x1004>
    724c:	ba000c44 	addi	r8,r23,49
    7250:	8825883a 	mov	r18,r17
    7254:	9dc00044 	addi	r23,r19,1
    7258:	9a000005 	stb	r8,0(r19)
    725c:	a023883a 	mov	r17,r20
    7260:	003f2f06 	br	6f20 <__alt_mem_sram+0xf7e06f20>
    7264:	880b883a 	mov	r5,r17
    7268:	8009883a 	mov	r4,r16
    726c:	01800284 	movi	r6,10
    7270:	000f883a 	mov	r7,zero
    7274:	00099440 	call	9944 <__multadd>
    7278:	1023883a 	mov	r17,r2
    727c:	1029883a 	mov	r20,r2
    7280:	003f9706 	br	70e0 <__alt_mem_sram+0xf7e070e0>
    7284:	8009883a 	mov	r4,r16
    7288:	180b883a 	mov	r5,r3
    728c:	000991c0 	call	991c <_Bfree>
    7290:	00800044 	movi	r2,1
    7294:	003f7306 	br	7064 <__alt_mem_sram+0xf7e07064>
    7298:	e009883a 	mov	r4,fp
    729c:	a80b883a 	mov	r5,r21
    72a0:	000a1340 	call	a134 <__mcmp>
    72a4:	103ee60e 	bge	r2,zero,6e40 <__alt_mem_sram+0xf7e06e40>
    72a8:	8009883a 	mov	r4,r16
    72ac:	e00b883a 	mov	r5,fp
    72b0:	01800284 	movi	r6,10
    72b4:	000f883a 	mov	r7,zero
    72b8:	00099440 	call	9944 <__multadd>
    72bc:	d9000517 	ldw	r4,20(sp)
    72c0:	d9800b17 	ldw	r6,44(sp)
    72c4:	1039883a 	mov	fp,r2
    72c8:	213fffc4 	addi	r4,r4,-1
    72cc:	d9000515 	stw	r4,20(sp)
    72d0:	303f2d1e 	bne	r6,zero,6f88 <__alt_mem_sram+0xf7e06f88>
    72d4:	d9000d17 	ldw	r4,52(sp)
    72d8:	0101780e 	bge	zero,r4,78bc <_dtoa_r+0x1670>
    72dc:	d9000615 	stw	r4,24(sp)
    72e0:	003edb06 	br	6e50 <__alt_mem_sram+0xf7e06e50>
    72e4:	00800084 	movi	r2,2
    72e8:	30818e1e 	bne	r6,r2,7924 <_dtoa_r+0x16d8>
    72ec:	d8000b15 	stw	zero,44(sp)
    72f0:	003f8106 	br	70f8 <__alt_mem_sram+0xf7e070f8>
    72f4:	d8800717 	ldw	r2,28(sp)
    72f8:	003c0306 	br	6308 <__alt_mem_sram+0xf7e06308>
    72fc:	d9000317 	ldw	r4,12(sp)
    7300:	00800084 	movi	r2,2
    7304:	113ed00e 	bge	r2,r4,6e48 <__alt_mem_sram+0xf7e06e48>
    7308:	d8c00617 	ldw	r3,24(sp)
    730c:	183f901e 	bne	r3,zero,7150 <__alt_mem_sram+0xf7e07150>
    7310:	a80b883a 	mov	r5,r21
    7314:	8009883a 	mov	r4,r16
    7318:	01800144 	movi	r6,5
    731c:	000f883a 	mov	r7,zero
    7320:	00099440 	call	9944 <__multadd>
    7324:	e009883a 	mov	r4,fp
    7328:	100b883a 	mov	r5,r2
    732c:	102b883a 	mov	r21,r2
    7330:	000a1340 	call	a134 <__mcmp>
    7334:	00bf860e 	bge	zero,r2,7150 <__alt_mem_sram+0xf7e07150>
    7338:	d9800717 	ldw	r6,28(sp)
    733c:	00800c44 	movi	r2,49
    7340:	30800005 	stb	r2,0(r6)
    7344:	d8800517 	ldw	r2,20(sp)
    7348:	35c00044 	addi	r23,r6,1
    734c:	10800044 	addi	r2,r2,1
    7350:	d8800515 	stw	r2,20(sp)
    7354:	003f8206 	br	7160 <__alt_mem_sram+0xf7e07160>
    7358:	903e981e 	bne	r18,zero,6dbc <__alt_mem_sram+0xf7e06dbc>
    735c:	003f8b06 	br	718c <__alt_mem_sram+0xf7e0718c>
    7360:	d9800517 	ldw	r6,20(sp)
    7364:	d8c00717 	ldw	r3,28(sp)
    7368:	00800c44 	movi	r2,49
    736c:	31800044 	addi	r6,r6,1
    7370:	d9800515 	stw	r6,20(sp)
    7374:	18800005 	stb	r2,0(r3)
    7378:	003ee906 	br	6f20 <__alt_mem_sram+0xf7e06f20>
    737c:	dc000317 	ldw	r16,12(sp)
    7380:	003d6006 	br	6904 <__alt_mem_sram+0xf7e06904>
    7384:	8809883a 	mov	r4,r17
    7388:	000feb80 	call	feb8 <__floatsidf>
    738c:	a009883a 	mov	r4,r20
    7390:	a80b883a 	mov	r5,r21
    7394:	100d883a 	mov	r6,r2
    7398:	180f883a 	mov	r7,r3
    739c:	000ee3c0 	call	ee3c <__muldf3>
    73a0:	1009883a 	mov	r4,r2
    73a4:	180b883a 	mov	r5,r3
    73a8:	000d883a 	mov	r6,zero
    73ac:	01d00734 	movhi	r7,16412
    73b0:	000da900 	call	da90 <__adddf3>
    73b4:	1023883a 	mov	r17,r2
    73b8:	00bf3034 	movhi	r2,64704
    73bc:	1885883a 	add	r2,r3,r2
    73c0:	d8800e15 	stw	r2,56(sp)
    73c4:	a009883a 	mov	r4,r20
    73c8:	a80b883a 	mov	r5,r21
    73cc:	000d883a 	mov	r6,zero
    73d0:	01d00534 	movhi	r7,16404
    73d4:	000f5600 	call	f560 <__subdf3>
    73d8:	d9c00e17 	ldw	r7,56(sp)
    73dc:	1009883a 	mov	r4,r2
    73e0:	180b883a 	mov	r5,r3
    73e4:	880d883a 	mov	r6,r17
    73e8:	102b883a 	mov	r21,r2
    73ec:	1829883a 	mov	r20,r3
    73f0:	000ec7c0 	call	ec7c <__gedf2>
    73f4:	00807716 	blt	zero,r2,75d4 <_dtoa_r+0x1388>
    73f8:	d8800e17 	ldw	r2,56(sp)
    73fc:	a809883a 	mov	r4,r21
    7400:	a00b883a 	mov	r5,r20
    7404:	11e0003c 	xorhi	r7,r2,32768
    7408:	880d883a 	mov	r6,r17
    740c:	000ed5c0 	call	ed5c <__ledf2>
    7410:	103d6b0e 	bge	r2,zero,69c0 <__alt_mem_sram+0xf7e069c0>
    7414:	002b883a 	mov	r21,zero
    7418:	0023883a 	mov	r17,zero
    741c:	003f4c06 	br	7150 <__alt_mem_sram+0xf7e07150>
    7420:	d9800917 	ldw	r6,36(sp)
    7424:	e00b883a 	mov	r5,fp
    7428:	8009883a 	mov	r4,r16
    742c:	0009eac0 	call	9eac <__pow5mult>
    7430:	1039883a 	mov	fp,r2
    7434:	003e2706 	br	6cd4 <__alt_mem_sram+0xf7e06cd4>
    7438:	d8000b15 	stw	zero,44(sp)
    743c:	003c4906 	br	6564 <__alt_mem_sram+0xf7e06564>
    7440:	d9000917 	ldw	r4,36(sp)
    7444:	d9800a17 	ldw	r6,40(sp)
    7448:	dd400915 	stw	r21,36(sp)
    744c:	a905c83a 	sub	r2,r21,r4
    7450:	308d883a 	add	r6,r6,r2
    7454:	d9800a15 	stw	r6,40(sp)
    7458:	002b883a 	mov	r21,zero
    745c:	003df206 	br	6c28 <__alt_mem_sram+0xf7e06c28>
    7460:	dc800e15 	stw	r18,56(sp)
    7464:	982b883a 	mov	r21,r19
    7468:	04400084 	movi	r17,2
    746c:	003c7406 	br	6640 <__alt_mem_sram+0xf7e06640>
    7470:	04400044 	movi	r17,1
    7474:	dc400d15 	stw	r17,52(sp)
    7478:	dc400615 	stw	r17,24(sp)
    747c:	dc402215 	stw	r17,136(sp)
    7480:	80001115 	stw	zero,68(r16)
    7484:	000b883a 	mov	r5,zero
    7488:	003c4a06 	br	65b4 <__alt_mem_sram+0xf7e065b4>
    748c:	3023883a 	mov	r17,r6
    7490:	003ffb06 	br	7480 <__alt_mem_sram+0xf7e07480>
    7494:	1000021e 	bne	r2,zero,74a0 <_dtoa_r+0x1254>
    7498:	4200004c 	andi	r8,r8,1
    749c:	403e8f1e 	bne	r8,zero,6edc <__alt_mem_sram+0xf7e06edc>
    74a0:	01000c04 	movi	r4,48
    74a4:	00000106 	br	74ac <_dtoa_r+0x1260>
    74a8:	102f883a 	mov	r23,r2
    74ac:	b8bfffc4 	addi	r2,r23,-1
    74b0:	10c00007 	ldb	r3,0(r2)
    74b4:	193ffc26 	beq	r3,r4,74a8 <__alt_mem_sram+0xf7e074a8>
    74b8:	003e9906 	br	6f20 <__alt_mem_sram+0xf7e06f20>
    74bc:	d9000517 	ldw	r4,20(sp)
    74c0:	012fc83a 	sub	r23,zero,r4
    74c4:	b800ad26 	beq	r23,zero,777c <_dtoa_r+0x1530>
    74c8:	b88003cc 	andi	r2,r23,15
    74cc:	100490fa 	slli	r2,r2,3
    74d0:	00c00074 	movhi	r3,1
    74d4:	18cc9a04 	addi	r3,r3,12904
    74d8:	1885883a 	add	r2,r3,r2
    74dc:	11800017 	ldw	r6,0(r2)
    74e0:	11c00117 	ldw	r7,4(r2)
    74e4:	b82fd13a 	srai	r23,r23,4
    74e8:	9009883a 	mov	r4,r18
    74ec:	980b883a 	mov	r5,r19
    74f0:	000ee3c0 	call	ee3c <__muldf3>
    74f4:	1029883a 	mov	r20,r2
    74f8:	182b883a 	mov	r21,r3
    74fc:	b800f426 	beq	r23,zero,78d0 <_dtoa_r+0x1684>
    7500:	02000074 	movhi	r8,1
    7504:	420c9004 	addi	r8,r8,12864
    7508:	8029883a 	mov	r20,r16
    750c:	04400084 	movi	r17,2
    7510:	4021883a 	mov	r16,r8
    7514:	b980004c 	andi	r6,r23,1
    7518:	1009883a 	mov	r4,r2
    751c:	b82fd07a 	srai	r23,r23,1
    7520:	180b883a 	mov	r5,r3
    7524:	30000426 	beq	r6,zero,7538 <_dtoa_r+0x12ec>
    7528:	81800017 	ldw	r6,0(r16)
    752c:	81c00117 	ldw	r7,4(r16)
    7530:	8c400044 	addi	r17,r17,1
    7534:	000ee3c0 	call	ee3c <__muldf3>
    7538:	84000204 	addi	r16,r16,8
    753c:	b83ff51e 	bne	r23,zero,7514 <__alt_mem_sram+0xf7e07514>
    7540:	a021883a 	mov	r16,r20
    7544:	182b883a 	mov	r21,r3
    7548:	1029883a 	mov	r20,r2
    754c:	003c5506 	br	66a4 <__alt_mem_sram+0xf7e066a4>
    7550:	d9800517 	ldw	r6,20(sp)
    7554:	d9000717 	ldw	r4,28(sp)
    7558:	00c00c04 	movi	r3,48
    755c:	31800044 	addi	r6,r6,1
    7560:	d9800515 	stw	r6,20(sp)
    7564:	20c00005 	stb	r3,0(r4)
    7568:	02000c44 	movi	r8,49
    756c:	003da206 	br	6bf8 <__alt_mem_sram+0xf7e06bf8>
    7570:	89400117 	ldw	r5,4(r17)
    7574:	8009883a 	mov	r4,r16
    7578:	00098740 	call	9874 <_Balloc>
    757c:	89800417 	ldw	r6,16(r17)
    7580:	11000304 	addi	r4,r2,12
    7584:	89400304 	addi	r5,r17,12
    7588:	31800084 	addi	r6,r6,2
    758c:	318d883a 	add	r6,r6,r6
    7590:	318d883a 	add	r6,r6,r6
    7594:	1027883a 	mov	r19,r2
    7598:	00094bc0 	call	94bc <memcpy>
    759c:	8009883a 	mov	r4,r16
    75a0:	980b883a 	mov	r5,r19
    75a4:	01800044 	movi	r6,1
    75a8:	0009fec0 	call	9fec <__lshift>
    75ac:	1029883a 	mov	r20,r2
    75b0:	003e8606 	br	6fcc <__alt_mem_sram+0xf7e06fcc>
    75b4:	00800e44 	movi	r2,57
    75b8:	90809526 	beq	r18,r2,7810 <_dtoa_r+0x15c4>
    75bc:	92000044 	addi	r8,r18,1
    75c0:	003f2306 	br	7250 <__alt_mem_sram+0xf7e07250>
    75c4:	9011883a 	mov	r8,r18
    75c8:	8825883a 	mov	r18,r17
    75cc:	a023883a 	mov	r17,r20
    75d0:	003e3706 	br	6eb0 <__alt_mem_sram+0xf7e06eb0>
    75d4:	002b883a 	mov	r21,zero
    75d8:	0023883a 	mov	r17,zero
    75dc:	003f5606 	br	7338 <__alt_mem_sram+0xf7e07338>
    75e0:	51bfffc4 	addi	r6,r10,-1
    75e4:	300490fa 	slli	r2,r6,3
    75e8:	00c00074 	movhi	r3,1
    75ec:	18cc9a04 	addi	r3,r3,12904
    75f0:	1885883a 	add	r2,r3,r2
    75f4:	d9c00e17 	ldw	r7,56(sp)
    75f8:	11000017 	ldw	r4,0(r2)
    75fc:	11400117 	ldw	r5,4(r2)
    7600:	d8800717 	ldw	r2,28(sp)
    7604:	d9801015 	stw	r6,64(sp)
    7608:	880d883a 	mov	r6,r17
    760c:	da801615 	stw	r10,88(sp)
    7610:	15c00044 	addi	r23,r2,1
    7614:	000ee3c0 	call	ee3c <__muldf3>
    7618:	a80b883a 	mov	r5,r21
    761c:	a009883a 	mov	r4,r20
    7620:	d8c01115 	stw	r3,68(sp)
    7624:	d8800e15 	stw	r2,56(sp)
    7628:	000fe300 	call	fe30 <__fixdfsi>
    762c:	1009883a 	mov	r4,r2
    7630:	1023883a 	mov	r17,r2
    7634:	000feb80 	call	feb8 <__floatsidf>
    7638:	a009883a 	mov	r4,r20
    763c:	a80b883a 	mov	r5,r21
    7640:	100d883a 	mov	r6,r2
    7644:	180f883a 	mov	r7,r3
    7648:	000f5600 	call	f560 <__subdf3>
    764c:	1813883a 	mov	r9,r3
    7650:	d8c00717 	ldw	r3,28(sp)
    7654:	8c400c04 	addi	r17,r17,48
    7658:	1011883a 	mov	r8,r2
    765c:	1c400005 	stb	r17,0(r3)
    7660:	da801617 	ldw	r10,88(sp)
    7664:	00800044 	movi	r2,1
    7668:	50802326 	beq	r10,r2,76f8 <_dtoa_r+0x14ac>
    766c:	d8800717 	ldw	r2,28(sp)
    7670:	b82b883a 	mov	r21,r23
    7674:	dc001315 	stw	r16,76(sp)
    7678:	12a9883a 	add	r20,r2,r10
    767c:	4807883a 	mov	r3,r9
    7680:	4005883a 	mov	r2,r8
    7684:	dc801415 	stw	r18,80(sp)
    7688:	000d883a 	mov	r6,zero
    768c:	01d00934 	movhi	r7,16420
    7690:	1009883a 	mov	r4,r2
    7694:	180b883a 	mov	r5,r3
    7698:	000ee3c0 	call	ee3c <__muldf3>
    769c:	180b883a 	mov	r5,r3
    76a0:	1009883a 	mov	r4,r2
    76a4:	1821883a 	mov	r16,r3
    76a8:	1025883a 	mov	r18,r2
    76ac:	000fe300 	call	fe30 <__fixdfsi>
    76b0:	1009883a 	mov	r4,r2
    76b4:	1023883a 	mov	r17,r2
    76b8:	000feb80 	call	feb8 <__floatsidf>
    76bc:	9009883a 	mov	r4,r18
    76c0:	800b883a 	mov	r5,r16
    76c4:	100d883a 	mov	r6,r2
    76c8:	180f883a 	mov	r7,r3
    76cc:	8c400c04 	addi	r17,r17,48
    76d0:	000f5600 	call	f560 <__subdf3>
    76d4:	ad400044 	addi	r21,r21,1
    76d8:	ac7fffc5 	stb	r17,-1(r21)
    76dc:	ad3fea1e 	bne	r21,r20,7688 <__alt_mem_sram+0xf7e07688>
    76e0:	1813883a 	mov	r9,r3
    76e4:	d8c01017 	ldw	r3,64(sp)
    76e8:	dc001317 	ldw	r16,76(sp)
    76ec:	dc801417 	ldw	r18,80(sp)
    76f0:	1011883a 	mov	r8,r2
    76f4:	b8ef883a 	add	r23,r23,r3
    76f8:	d9000e17 	ldw	r4,56(sp)
    76fc:	d9401117 	ldw	r5,68(sp)
    7700:	000d883a 	mov	r6,zero
    7704:	01cff834 	movhi	r7,16352
    7708:	da001715 	stw	r8,92(sp)
    770c:	da401515 	stw	r9,84(sp)
    7710:	000da900 	call	da90 <__adddf3>
    7714:	da001717 	ldw	r8,92(sp)
    7718:	da401517 	ldw	r9,84(sp)
    771c:	1009883a 	mov	r4,r2
    7720:	400d883a 	mov	r6,r8
    7724:	480f883a 	mov	r7,r9
    7728:	180b883a 	mov	r5,r3
    772c:	000ed5c0 	call	ed5c <__ledf2>
    7730:	da001717 	ldw	r8,92(sp)
    7734:	da401517 	ldw	r9,84(sp)
    7738:	10003b0e 	bge	r2,zero,7828 <_dtoa_r+0x15dc>
    773c:	d9001217 	ldw	r4,72(sp)
    7740:	bd7fffc3 	ldbu	r21,-1(r23)
    7744:	d9000515 	stw	r4,20(sp)
    7748:	003d1c06 	br	6bbc <__alt_mem_sram+0xf7e06bbc>
    774c:	d8c00817 	ldw	r3,32(sp)
    7750:	18a9c83a 	sub	r20,r3,r2
    7754:	0005883a 	mov	r2,zero
    7758:	003d3706 	br	6c38 <__alt_mem_sram+0xf7e06c38>
    775c:	00800044 	movi	r2,1
    7760:	003dd006 	br	6ea4 <__alt_mem_sram+0xf7e06ea4>
    7764:	d8c00217 	ldw	r3,8(sp)
    7768:	00800d84 	movi	r2,54
    776c:	dd400917 	ldw	r21,36(sp)
    7770:	10c5c83a 	sub	r2,r2,r3
    7774:	dd000817 	ldw	r20,32(sp)
    7778:	003d2f06 	br	6c38 <__alt_mem_sram+0xf7e06c38>
    777c:	9029883a 	mov	r20,r18
    7780:	982b883a 	mov	r21,r19
    7784:	04400084 	movi	r17,2
    7788:	003bc606 	br	66a4 <__alt_mem_sram+0xf7e066a4>
    778c:	d8800617 	ldw	r2,24(sp)
    7790:	103efc26 	beq	r2,zero,7384 <__alt_mem_sram+0xf7e07384>
    7794:	d8c00d17 	ldw	r3,52(sp)
    7798:	00fc890e 	bge	zero,r3,69c0 <__alt_mem_sram+0xf7e069c0>
    779c:	a80b883a 	mov	r5,r21
    77a0:	a009883a 	mov	r4,r20
    77a4:	000d883a 	mov	r6,zero
    77a8:	01d00934 	movhi	r7,16420
    77ac:	000ee3c0 	call	ee3c <__muldf3>
    77b0:	89000044 	addi	r4,r17,1
    77b4:	1029883a 	mov	r20,r2
    77b8:	182b883a 	mov	r21,r3
    77bc:	000feb80 	call	feb8 <__floatsidf>
    77c0:	a009883a 	mov	r4,r20
    77c4:	a80b883a 	mov	r5,r21
    77c8:	100d883a 	mov	r6,r2
    77cc:	180f883a 	mov	r7,r3
    77d0:	000ee3c0 	call	ee3c <__muldf3>
    77d4:	1009883a 	mov	r4,r2
    77d8:	180b883a 	mov	r5,r3
    77dc:	000d883a 	mov	r6,zero
    77e0:	01d00734 	movhi	r7,16412
    77e4:	000da900 	call	da90 <__adddf3>
    77e8:	d9000517 	ldw	r4,20(sp)
    77ec:	1023883a 	mov	r17,r2
    77f0:	00bf3034 	movhi	r2,64704
    77f4:	213fffc4 	addi	r4,r4,-1
    77f8:	1885883a 	add	r2,r3,r2
    77fc:	d9001215 	stw	r4,72(sp)
    7800:	d8800e15 	stw	r2,56(sp)
    7804:	da800d17 	ldw	r10,52(sp)
    7808:	003bc306 	br	6718 <__alt_mem_sram+0xf7e06718>
    780c:	b039883a 	mov	fp,r22
    7810:	01000e44 	movi	r4,57
    7814:	8825883a 	mov	r18,r17
    7818:	9dc00044 	addi	r23,r19,1
    781c:	99000005 	stb	r4,0(r19)
    7820:	a023883a 	mov	r17,r20
    7824:	003dae06 	br	6ee0 <__alt_mem_sram+0xf7e06ee0>
    7828:	d9800e17 	ldw	r6,56(sp)
    782c:	d9c01117 	ldw	r7,68(sp)
    7830:	0009883a 	mov	r4,zero
    7834:	014ff834 	movhi	r5,16352
    7838:	da001715 	stw	r8,92(sp)
    783c:	da401515 	stw	r9,84(sp)
    7840:	000f5600 	call	f560 <__subdf3>
    7844:	da001717 	ldw	r8,92(sp)
    7848:	da401517 	ldw	r9,84(sp)
    784c:	1009883a 	mov	r4,r2
    7850:	180b883a 	mov	r5,r3
    7854:	400d883a 	mov	r6,r8
    7858:	480f883a 	mov	r7,r9
    785c:	000ec7c0 	call	ec7c <__gedf2>
    7860:	00bc570e 	bge	zero,r2,69c0 <__alt_mem_sram+0xf7e069c0>
    7864:	01000c04 	movi	r4,48
    7868:	00000106 	br	7870 <_dtoa_r+0x1624>
    786c:	102f883a 	mov	r23,r2
    7870:	b8bfffc4 	addi	r2,r23,-1
    7874:	10c00007 	ldb	r3,0(r2)
    7878:	193ffc26 	beq	r3,r4,786c <__alt_mem_sram+0xf7e0786c>
    787c:	d9801217 	ldw	r6,72(sp)
    7880:	d9800515 	stw	r6,20(sp)
    7884:	003c1f06 	br	6904 <__alt_mem_sram+0xf7e06904>
    7888:	d8801217 	ldw	r2,72(sp)
    788c:	dc001117 	ldw	r16,68(sp)
    7890:	d8800515 	stw	r2,20(sp)
    7894:	003cc906 	br	6bbc <__alt_mem_sram+0xf7e06bbc>
    7898:	dd801317 	ldw	r22,76(sp)
    789c:	dc001117 	ldw	r16,68(sp)
    78a0:	dcc01417 	ldw	r19,80(sp)
    78a4:	dc801017 	ldw	r18,64(sp)
    78a8:	003c4506 	br	69c0 <__alt_mem_sram+0xf7e069c0>
    78ac:	103e5d1e 	bne	r2,zero,7224 <__alt_mem_sram+0xf7e07224>
    78b0:	4080004c 	andi	r2,r8,1
    78b4:	103e5b26 	beq	r2,zero,7224 <__alt_mem_sram+0xf7e07224>
    78b8:	003e5706 	br	7218 <__alt_mem_sram+0xf7e07218>
    78bc:	d8c00317 	ldw	r3,12(sp)
    78c0:	00800084 	movi	r2,2
    78c4:	10c00a16 	blt	r2,r3,78f0 <_dtoa_r+0x16a4>
    78c8:	d9000d17 	ldw	r4,52(sp)
    78cc:	003e8306 	br	72dc <__alt_mem_sram+0xf7e072dc>
    78d0:	04400084 	movi	r17,2
    78d4:	003b7306 	br	66a4 <__alt_mem_sram+0xf7e066a4>
    78d8:	d9801217 	ldw	r6,72(sp)
    78dc:	d9800515 	stw	r6,20(sp)
    78e0:	003cb606 	br	6bbc <__alt_mem_sram+0xf7e06bbc>
    78e4:	d9001217 	ldw	r4,72(sp)
    78e8:	d9000515 	stw	r4,20(sp)
    78ec:	003c0506 	br	6904 <__alt_mem_sram+0xf7e06904>
    78f0:	d9800d17 	ldw	r6,52(sp)
    78f4:	d9800615 	stw	r6,24(sp)
    78f8:	003e8306 	br	7308 <__alt_mem_sram+0xf7e07308>
    78fc:	d9800317 	ldw	r6,12(sp)
    7900:	00800084 	movi	r2,2
    7904:	11800216 	blt	r2,r6,7910 <_dtoa_r+0x16c4>
    7908:	d8800d17 	ldw	r2,52(sp)
    790c:	003da606 	br	6fa8 <__alt_mem_sram+0xf7e06fa8>
    7910:	d8800d17 	ldw	r2,52(sp)
    7914:	d8800615 	stw	r2,24(sp)
    7918:	003e7b06 	br	7308 <__alt_mem_sram+0xf7e07308>
    791c:	05000044 	movi	r20,1
    7920:	003b0506 	br	6538 <__alt_mem_sram+0xf7e06538>
    7924:	8009883a 	mov	r4,r16
    7928:	80001115 	stw	zero,68(r16)
    792c:	000b883a 	mov	r5,zero
    7930:	00098740 	call	9874 <_Balloc>
    7934:	d8800715 	stw	r2,28(sp)
    7938:	d8c00717 	ldw	r3,28(sp)
    793c:	00bfffc4 	movi	r2,-1
    7940:	01000044 	movi	r4,1
    7944:	d8800615 	stw	r2,24(sp)
    7948:	80c01015 	stw	r3,64(r16)
    794c:	d9000b15 	stw	r4,44(sp)
    7950:	d8002215 	stw	zero,136(sp)
    7954:	d8800d15 	stw	r2,52(sp)
    7958:	003c1906 	br	69c0 <__alt_mem_sram+0xf7e069c0>
    795c:	193d2926 	beq	r3,r4,6e04 <__alt_mem_sram+0xf7e06e04>
    7960:	00c00f04 	movi	r3,60
    7964:	1885c83a 	sub	r2,r3,r2
    7968:	003d7b06 	br	6f58 <__alt_mem_sram+0xf7e06f58>
    796c:	000b883a 	mov	r5,zero
    7970:	003b1006 	br	65b4 <__alt_mem_sram+0xf7e065b4>

00007974 <_fflush_r>:
    7974:	defffb04 	addi	sp,sp,-20
    7978:	dcc00315 	stw	r19,12(sp)
    797c:	dc000015 	stw	r16,0(sp)
    7980:	dfc00415 	stw	ra,16(sp)
    7984:	dc800215 	stw	r18,8(sp)
    7988:	dc400115 	stw	r17,4(sp)
    798c:	2027883a 	mov	r19,r4
    7990:	2821883a 	mov	r16,r5
    7994:	20000226 	beq	r4,zero,79a0 <_fflush_r+0x2c>
    7998:	20800e17 	ldw	r2,56(r4)
    799c:	10005326 	beq	r2,zero,7aec <_fflush_r+0x178>
    79a0:	8080030b 	ldhu	r2,12(r16)
    79a4:	10ffffcc 	andi	r3,r2,65535
    79a8:	18e0001c 	xori	r3,r3,32768
    79ac:	18e00004 	addi	r3,r3,-32768
    79b0:	18002c26 	beq	r3,zero,7a64 <_fflush_r+0xf0>
    79b4:	10c0020c 	andi	r3,r2,8
    79b8:	1800321e 	bne	r3,zero,7a84 <_fflush_r+0x110>
    79bc:	80c00117 	ldw	r3,4(r16)
    79c0:	10820014 	ori	r2,r2,2048
    79c4:	8080030d 	sth	r2,12(r16)
    79c8:	00c0570e 	bge	zero,r3,7b28 <_fflush_r+0x1b4>
    79cc:	82000a17 	ldw	r8,40(r16)
    79d0:	40002426 	beq	r8,zero,7a64 <_fflush_r+0xf0>
    79d4:	9c400017 	ldw	r17,0(r19)
    79d8:	10c4000c 	andi	r3,r2,4096
    79dc:	98000015 	stw	zero,0(r19)
    79e0:	18004626 	beq	r3,zero,7afc <_fflush_r+0x188>
    79e4:	81801417 	ldw	r6,80(r16)
    79e8:	10c0010c 	andi	r3,r2,4
    79ec:	18000626 	beq	r3,zero,7a08 <_fflush_r+0x94>
    79f0:	80c00117 	ldw	r3,4(r16)
    79f4:	80800c17 	ldw	r2,48(r16)
    79f8:	30cdc83a 	sub	r6,r6,r3
    79fc:	10000226 	beq	r2,zero,7a08 <_fflush_r+0x94>
    7a00:	80800f17 	ldw	r2,60(r16)
    7a04:	308dc83a 	sub	r6,r6,r2
    7a08:	81400717 	ldw	r5,28(r16)
    7a0c:	9809883a 	mov	r4,r19
    7a10:	000f883a 	mov	r7,zero
    7a14:	403ee83a 	callr	r8
    7a18:	00ffffc4 	movi	r3,-1
    7a1c:	10c04526 	beq	r2,r3,7b34 <_fflush_r+0x1c0>
    7a20:	80c0030b 	ldhu	r3,12(r16)
    7a24:	81000417 	ldw	r4,16(r16)
    7a28:	80000115 	stw	zero,4(r16)
    7a2c:	197dffcc 	andi	r5,r3,63487
    7a30:	8140030d 	sth	r5,12(r16)
    7a34:	81000015 	stw	r4,0(r16)
    7a38:	18c4000c 	andi	r3,r3,4096
    7a3c:	18000126 	beq	r3,zero,7a44 <_fflush_r+0xd0>
    7a40:	80801415 	stw	r2,80(r16)
    7a44:	81400c17 	ldw	r5,48(r16)
    7a48:	9c400015 	stw	r17,0(r19)
    7a4c:	28000526 	beq	r5,zero,7a64 <_fflush_r+0xf0>
    7a50:	80801004 	addi	r2,r16,64
    7a54:	28800226 	beq	r5,r2,7a60 <_fflush_r+0xec>
    7a58:	9809883a 	mov	r4,r19
    7a5c:	00080900 	call	8090 <_free_r>
    7a60:	80000c15 	stw	zero,48(r16)
    7a64:	0005883a 	mov	r2,zero
    7a68:	dfc00417 	ldw	ra,16(sp)
    7a6c:	dcc00317 	ldw	r19,12(sp)
    7a70:	dc800217 	ldw	r18,8(sp)
    7a74:	dc400117 	ldw	r17,4(sp)
    7a78:	dc000017 	ldw	r16,0(sp)
    7a7c:	dec00504 	addi	sp,sp,20
    7a80:	f800283a 	ret
    7a84:	84800417 	ldw	r18,16(r16)
    7a88:	903ff626 	beq	r18,zero,7a64 <__alt_mem_sram+0xf7e07a64>
    7a8c:	84400017 	ldw	r17,0(r16)
    7a90:	108000cc 	andi	r2,r2,3
    7a94:	84800015 	stw	r18,0(r16)
    7a98:	8ca3c83a 	sub	r17,r17,r18
    7a9c:	10001526 	beq	r2,zero,7af4 <_fflush_r+0x180>
    7aa0:	0005883a 	mov	r2,zero
    7aa4:	80800215 	stw	r2,8(r16)
    7aa8:	04400316 	blt	zero,r17,7ab8 <_fflush_r+0x144>
    7aac:	003fed06 	br	7a64 <__alt_mem_sram+0xf7e07a64>
    7ab0:	90a5883a 	add	r18,r18,r2
    7ab4:	047feb0e 	bge	zero,r17,7a64 <__alt_mem_sram+0xf7e07a64>
    7ab8:	80800917 	ldw	r2,36(r16)
    7abc:	81400717 	ldw	r5,28(r16)
    7ac0:	880f883a 	mov	r7,r17
    7ac4:	900d883a 	mov	r6,r18
    7ac8:	9809883a 	mov	r4,r19
    7acc:	103ee83a 	callr	r2
    7ad0:	88a3c83a 	sub	r17,r17,r2
    7ad4:	00bff616 	blt	zero,r2,7ab0 <__alt_mem_sram+0xf7e07ab0>
    7ad8:	80c0030b 	ldhu	r3,12(r16)
    7adc:	00bfffc4 	movi	r2,-1
    7ae0:	18c01014 	ori	r3,r3,64
    7ae4:	80c0030d 	sth	r3,12(r16)
    7ae8:	003fdf06 	br	7a68 <__alt_mem_sram+0xf7e07a68>
    7aec:	0007f1c0 	call	7f1c <__sinit>
    7af0:	003fab06 	br	79a0 <__alt_mem_sram+0xf7e079a0>
    7af4:	80800517 	ldw	r2,20(r16)
    7af8:	003fea06 	br	7aa4 <__alt_mem_sram+0xf7e07aa4>
    7afc:	81400717 	ldw	r5,28(r16)
    7b00:	000d883a 	mov	r6,zero
    7b04:	9809883a 	mov	r4,r19
    7b08:	01c00044 	movi	r7,1
    7b0c:	403ee83a 	callr	r8
    7b10:	100d883a 	mov	r6,r2
    7b14:	00bfffc4 	movi	r2,-1
    7b18:	30801326 	beq	r6,r2,7b68 <_fflush_r+0x1f4>
    7b1c:	8080030b 	ldhu	r2,12(r16)
    7b20:	82000a17 	ldw	r8,40(r16)
    7b24:	003fb006 	br	79e8 <__alt_mem_sram+0xf7e079e8>
    7b28:	80c00f17 	ldw	r3,60(r16)
    7b2c:	00ffa716 	blt	zero,r3,79cc <__alt_mem_sram+0xf7e079cc>
    7b30:	003fcc06 	br	7a64 <__alt_mem_sram+0xf7e07a64>
    7b34:	98c00017 	ldw	r3,0(r19)
    7b38:	183fb926 	beq	r3,zero,7a20 <__alt_mem_sram+0xf7e07a20>
    7b3c:	01000744 	movi	r4,29
    7b40:	19000226 	beq	r3,r4,7b4c <_fflush_r+0x1d8>
    7b44:	01000584 	movi	r4,22
    7b48:	1900101e 	bne	r3,r4,7b8c <_fflush_r+0x218>
    7b4c:	8080030b 	ldhu	r2,12(r16)
    7b50:	80c00417 	ldw	r3,16(r16)
    7b54:	80000115 	stw	zero,4(r16)
    7b58:	10bdffcc 	andi	r2,r2,63487
    7b5c:	8080030d 	sth	r2,12(r16)
    7b60:	80c00015 	stw	r3,0(r16)
    7b64:	003fb706 	br	7a44 <__alt_mem_sram+0xf7e07a44>
    7b68:	98800017 	ldw	r2,0(r19)
    7b6c:	103feb26 	beq	r2,zero,7b1c <__alt_mem_sram+0xf7e07b1c>
    7b70:	00c00744 	movi	r3,29
    7b74:	10c00226 	beq	r2,r3,7b80 <_fflush_r+0x20c>
    7b78:	00c00584 	movi	r3,22
    7b7c:	10ffd61e 	bne	r2,r3,7ad8 <__alt_mem_sram+0xf7e07ad8>
    7b80:	9c400015 	stw	r17,0(r19)
    7b84:	0005883a 	mov	r2,zero
    7b88:	003fb706 	br	7a68 <__alt_mem_sram+0xf7e07a68>
    7b8c:	80c0030b 	ldhu	r3,12(r16)
    7b90:	18c01014 	ori	r3,r3,64
    7b94:	80c0030d 	sth	r3,12(r16)
    7b98:	003fb306 	br	7a68 <__alt_mem_sram+0xf7e07a68>

00007b9c <fflush>:
    7b9c:	20000526 	beq	r4,zero,7bb4 <fflush+0x18>
    7ba0:	00800074 	movhi	r2,1
    7ba4:	1093cb04 	addi	r2,r2,20268
    7ba8:	200b883a 	mov	r5,r4
    7bac:	11000017 	ldw	r4,0(r2)
    7bb0:	00079741 	jmpi	7974 <_fflush_r>
    7bb4:	00800074 	movhi	r2,1
    7bb8:	1093ca04 	addi	r2,r2,20264
    7bbc:	11000017 	ldw	r4,0(r2)
    7bc0:	01400034 	movhi	r5,0
    7bc4:	295e5d04 	addi	r5,r5,31092
    7bc8:	00088dc1 	jmpi	88dc <_fwalk_reent>

00007bcc <__fp_lock>:
    7bcc:	0005883a 	mov	r2,zero
    7bd0:	f800283a 	ret

00007bd4 <__fp_unlock>:
    7bd4:	0005883a 	mov	r2,zero
    7bd8:	f800283a 	ret

00007bdc <_cleanup_r>:
    7bdc:	01400074 	movhi	r5,1
    7be0:	2971d404 	addi	r5,r5,-14512
    7be4:	00088241 	jmpi	8824 <_fwalk>

00007be8 <__sinit.part.1>:
    7be8:	defff604 	addi	sp,sp,-40
    7bec:	00c00034 	movhi	r3,0
    7bf0:	dfc00915 	stw	ra,36(sp)
    7bf4:	df000815 	stw	fp,32(sp)
    7bf8:	ddc00715 	stw	r23,28(sp)
    7bfc:	dd800615 	stw	r22,24(sp)
    7c00:	dd400515 	stw	r21,20(sp)
    7c04:	dd000415 	stw	r20,16(sp)
    7c08:	dcc00315 	stw	r19,12(sp)
    7c0c:	dc800215 	stw	r18,8(sp)
    7c10:	dc400115 	stw	r17,4(sp)
    7c14:	dc000015 	stw	r16,0(sp)
    7c18:	18def704 	addi	r3,r3,31708
    7c1c:	24000117 	ldw	r16,4(r4)
    7c20:	20c00f15 	stw	r3,60(r4)
    7c24:	07000044 	movi	fp,1
    7c28:	00c000c4 	movi	r3,3
    7c2c:	2080bb04 	addi	r2,r4,748
    7c30:	20c0b915 	stw	r3,740(r4)
    7c34:	27000e15 	stw	fp,56(r4)
    7c38:	2080ba15 	stw	r2,744(r4)
    7c3c:	2000b815 	stw	zero,736(r4)
    7c40:	05c00204 	movi	r23,8
    7c44:	00800104 	movi	r2,4
    7c48:	2025883a 	mov	r18,r4
    7c4c:	b80d883a 	mov	r6,r23
    7c50:	81001704 	addi	r4,r16,92
    7c54:	000b883a 	mov	r5,zero
    7c58:	80000015 	stw	zero,0(r16)
    7c5c:	80000115 	stw	zero,4(r16)
    7c60:	80000215 	stw	zero,8(r16)
    7c64:	8080030d 	sth	r2,12(r16)
    7c68:	80001915 	stw	zero,100(r16)
    7c6c:	8000038d 	sth	zero,14(r16)
    7c70:	80000415 	stw	zero,16(r16)
    7c74:	80000515 	stw	zero,20(r16)
    7c78:	80000615 	stw	zero,24(r16)
    7c7c:	00097500 	call	9750 <memset>
    7c80:	05800074 	movhi	r22,1
    7c84:	94400217 	ldw	r17,8(r18)
    7c88:	05400074 	movhi	r21,1
    7c8c:	05000074 	movhi	r20,1
    7c90:	04c00074 	movhi	r19,1
    7c94:	b5ab9a04 	addi	r22,r22,-20888
    7c98:	ad6bb104 	addi	r21,r21,-20796
    7c9c:	a52bd004 	addi	r20,r20,-20672
    7ca0:	9cebe704 	addi	r19,r19,-20580
    7ca4:	85800815 	stw	r22,32(r16)
    7ca8:	85400915 	stw	r21,36(r16)
    7cac:	85000a15 	stw	r20,40(r16)
    7cb0:	84c00b15 	stw	r19,44(r16)
    7cb4:	84000715 	stw	r16,28(r16)
    7cb8:	00800284 	movi	r2,10
    7cbc:	89001704 	addi	r4,r17,92
    7cc0:	b80d883a 	mov	r6,r23
    7cc4:	000b883a 	mov	r5,zero
    7cc8:	88000015 	stw	zero,0(r17)
    7ccc:	88000115 	stw	zero,4(r17)
    7cd0:	88000215 	stw	zero,8(r17)
    7cd4:	8880030d 	sth	r2,12(r17)
    7cd8:	88001915 	stw	zero,100(r17)
    7cdc:	8f00038d 	sth	fp,14(r17)
    7ce0:	88000415 	stw	zero,16(r17)
    7ce4:	88000515 	stw	zero,20(r17)
    7ce8:	88000615 	stw	zero,24(r17)
    7cec:	00097500 	call	9750 <memset>
    7cf0:	94000317 	ldw	r16,12(r18)
    7cf4:	00800484 	movi	r2,18
    7cf8:	8c400715 	stw	r17,28(r17)
    7cfc:	8d800815 	stw	r22,32(r17)
    7d00:	8d400915 	stw	r21,36(r17)
    7d04:	8d000a15 	stw	r20,40(r17)
    7d08:	8cc00b15 	stw	r19,44(r17)
    7d0c:	8080030d 	sth	r2,12(r16)
    7d10:	00800084 	movi	r2,2
    7d14:	80000015 	stw	zero,0(r16)
    7d18:	80000115 	stw	zero,4(r16)
    7d1c:	80000215 	stw	zero,8(r16)
    7d20:	80001915 	stw	zero,100(r16)
    7d24:	8080038d 	sth	r2,14(r16)
    7d28:	80000415 	stw	zero,16(r16)
    7d2c:	80000515 	stw	zero,20(r16)
    7d30:	80000615 	stw	zero,24(r16)
    7d34:	81001704 	addi	r4,r16,92
    7d38:	000b883a 	mov	r5,zero
    7d3c:	b80d883a 	mov	r6,r23
    7d40:	00097500 	call	9750 <memset>
    7d44:	84000715 	stw	r16,28(r16)
    7d48:	85800815 	stw	r22,32(r16)
    7d4c:	85400915 	stw	r21,36(r16)
    7d50:	85000a15 	stw	r20,40(r16)
    7d54:	84c00b15 	stw	r19,44(r16)
    7d58:	dfc00917 	ldw	ra,36(sp)
    7d5c:	df000817 	ldw	fp,32(sp)
    7d60:	ddc00717 	ldw	r23,28(sp)
    7d64:	dd800617 	ldw	r22,24(sp)
    7d68:	dd400517 	ldw	r21,20(sp)
    7d6c:	dd000417 	ldw	r20,16(sp)
    7d70:	dcc00317 	ldw	r19,12(sp)
    7d74:	dc800217 	ldw	r18,8(sp)
    7d78:	dc400117 	ldw	r17,4(sp)
    7d7c:	dc000017 	ldw	r16,0(sp)
    7d80:	dec00a04 	addi	sp,sp,40
    7d84:	f800283a 	ret

00007d88 <__sfmoreglue>:
    7d88:	defffc04 	addi	sp,sp,-16
    7d8c:	dc400115 	stw	r17,4(sp)
    7d90:	2c401a24 	muli	r17,r5,104
    7d94:	dc800215 	stw	r18,8(sp)
    7d98:	2825883a 	mov	r18,r5
    7d9c:	89400304 	addi	r5,r17,12
    7da0:	dc000015 	stw	r16,0(sp)
    7da4:	dfc00315 	stw	ra,12(sp)
    7da8:	0008c2c0 	call	8c2c <_malloc_r>
    7dac:	1021883a 	mov	r16,r2
    7db0:	10000726 	beq	r2,zero,7dd0 <__sfmoreglue+0x48>
    7db4:	11000304 	addi	r4,r2,12
    7db8:	10000015 	stw	zero,0(r2)
    7dbc:	14800115 	stw	r18,4(r2)
    7dc0:	11000215 	stw	r4,8(r2)
    7dc4:	000b883a 	mov	r5,zero
    7dc8:	880d883a 	mov	r6,r17
    7dcc:	00097500 	call	9750 <memset>
    7dd0:	8005883a 	mov	r2,r16
    7dd4:	dfc00317 	ldw	ra,12(sp)
    7dd8:	dc800217 	ldw	r18,8(sp)
    7ddc:	dc400117 	ldw	r17,4(sp)
    7de0:	dc000017 	ldw	r16,0(sp)
    7de4:	dec00404 	addi	sp,sp,16
    7de8:	f800283a 	ret

00007dec <__sfp>:
    7dec:	00800074 	movhi	r2,1
    7df0:	defffb04 	addi	sp,sp,-20
    7df4:	1093ca04 	addi	r2,r2,20264
    7df8:	dc800215 	stw	r18,8(sp)
    7dfc:	14800017 	ldw	r18,0(r2)
    7e00:	dcc00315 	stw	r19,12(sp)
    7e04:	dfc00415 	stw	ra,16(sp)
    7e08:	90800e17 	ldw	r2,56(r18)
    7e0c:	dc400115 	stw	r17,4(sp)
    7e10:	dc000015 	stw	r16,0(sp)
    7e14:	2027883a 	mov	r19,r4
    7e18:	1000021e 	bne	r2,zero,7e24 <__sfp+0x38>
    7e1c:	9009883a 	mov	r4,r18
    7e20:	0007be80 	call	7be8 <__sinit.part.1>
    7e24:	9480b804 	addi	r18,r18,736
    7e28:	047fffc4 	movi	r17,-1
    7e2c:	91400117 	ldw	r5,4(r18)
    7e30:	94000217 	ldw	r16,8(r18)
    7e34:	297fffc4 	addi	r5,r5,-1
    7e38:	28000a16 	blt	r5,zero,7e64 <__sfp+0x78>
    7e3c:	8080030f 	ldh	r2,12(r16)
    7e40:	10000c26 	beq	r2,zero,7e74 <__sfp+0x88>
    7e44:	80c01d04 	addi	r3,r16,116
    7e48:	00000206 	br	7e54 <__sfp+0x68>
    7e4c:	18bfe60f 	ldh	r2,-104(r3)
    7e50:	10000826 	beq	r2,zero,7e74 <__sfp+0x88>
    7e54:	297fffc4 	addi	r5,r5,-1
    7e58:	1c3ffd04 	addi	r16,r3,-12
    7e5c:	18c01a04 	addi	r3,r3,104
    7e60:	2c7ffa1e 	bne	r5,r17,7e4c <__alt_mem_sram+0xf7e07e4c>
    7e64:	90800017 	ldw	r2,0(r18)
    7e68:	10001d26 	beq	r2,zero,7ee0 <__sfp+0xf4>
    7e6c:	1025883a 	mov	r18,r2
    7e70:	003fee06 	br	7e2c <__alt_mem_sram+0xf7e07e2c>
    7e74:	00bfffc4 	movi	r2,-1
    7e78:	8080038d 	sth	r2,14(r16)
    7e7c:	00800044 	movi	r2,1
    7e80:	8080030d 	sth	r2,12(r16)
    7e84:	80001915 	stw	zero,100(r16)
    7e88:	80000015 	stw	zero,0(r16)
    7e8c:	80000215 	stw	zero,8(r16)
    7e90:	80000115 	stw	zero,4(r16)
    7e94:	80000415 	stw	zero,16(r16)
    7e98:	80000515 	stw	zero,20(r16)
    7e9c:	80000615 	stw	zero,24(r16)
    7ea0:	81001704 	addi	r4,r16,92
    7ea4:	000b883a 	mov	r5,zero
    7ea8:	01800204 	movi	r6,8
    7eac:	00097500 	call	9750 <memset>
    7eb0:	8005883a 	mov	r2,r16
    7eb4:	80000c15 	stw	zero,48(r16)
    7eb8:	80000d15 	stw	zero,52(r16)
    7ebc:	80001115 	stw	zero,68(r16)
    7ec0:	80001215 	stw	zero,72(r16)
    7ec4:	dfc00417 	ldw	ra,16(sp)
    7ec8:	dcc00317 	ldw	r19,12(sp)
    7ecc:	dc800217 	ldw	r18,8(sp)
    7ed0:	dc400117 	ldw	r17,4(sp)
    7ed4:	dc000017 	ldw	r16,0(sp)
    7ed8:	dec00504 	addi	sp,sp,20
    7edc:	f800283a 	ret
    7ee0:	9809883a 	mov	r4,r19
    7ee4:	01400104 	movi	r5,4
    7ee8:	0007d880 	call	7d88 <__sfmoreglue>
    7eec:	90800015 	stw	r2,0(r18)
    7ef0:	103fde1e 	bne	r2,zero,7e6c <__alt_mem_sram+0xf7e07e6c>
    7ef4:	00800304 	movi	r2,12
    7ef8:	98800015 	stw	r2,0(r19)
    7efc:	0005883a 	mov	r2,zero
    7f00:	003ff006 	br	7ec4 <__alt_mem_sram+0xf7e07ec4>

00007f04 <_cleanup>:
    7f04:	00800074 	movhi	r2,1
    7f08:	1093ca04 	addi	r2,r2,20264
    7f0c:	11000017 	ldw	r4,0(r2)
    7f10:	01400074 	movhi	r5,1
    7f14:	2971d404 	addi	r5,r5,-14512
    7f18:	00088241 	jmpi	8824 <_fwalk>

00007f1c <__sinit>:
    7f1c:	20800e17 	ldw	r2,56(r4)
    7f20:	10000126 	beq	r2,zero,7f28 <__sinit+0xc>
    7f24:	f800283a 	ret
    7f28:	0007be81 	jmpi	7be8 <__sinit.part.1>

00007f2c <__sfp_lock_acquire>:
    7f2c:	f800283a 	ret

00007f30 <__sfp_lock_release>:
    7f30:	f800283a 	ret

00007f34 <__sinit_lock_acquire>:
    7f34:	f800283a 	ret

00007f38 <__sinit_lock_release>:
    7f38:	f800283a 	ret

00007f3c <__fp_lock_all>:
    7f3c:	00800074 	movhi	r2,1
    7f40:	1093cb04 	addi	r2,r2,20268
    7f44:	11000017 	ldw	r4,0(r2)
    7f48:	01400034 	movhi	r5,0
    7f4c:	295ef304 	addi	r5,r5,31692
    7f50:	00088241 	jmpi	8824 <_fwalk>

00007f54 <__fp_unlock_all>:
    7f54:	00800074 	movhi	r2,1
    7f58:	1093cb04 	addi	r2,r2,20268
    7f5c:	11000017 	ldw	r4,0(r2)
    7f60:	01400034 	movhi	r5,0
    7f64:	295ef504 	addi	r5,r5,31700
    7f68:	00088241 	jmpi	8824 <_fwalk>

00007f6c <_malloc_trim_r>:
    7f6c:	defffb04 	addi	sp,sp,-20
    7f70:	dcc00315 	stw	r19,12(sp)
    7f74:	04c00074 	movhi	r19,1
    7f78:	dc800215 	stw	r18,8(sp)
    7f7c:	dc400115 	stw	r17,4(sp)
    7f80:	dc000015 	stw	r16,0(sp)
    7f84:	dfc00415 	stw	ra,16(sp)
    7f88:	2821883a 	mov	r16,r5
    7f8c:	9cce4604 	addi	r19,r19,14616
    7f90:	2025883a 	mov	r18,r4
    7f94:	00106500 	call	10650 <__malloc_lock>
    7f98:	98800217 	ldw	r2,8(r19)
    7f9c:	14400117 	ldw	r17,4(r2)
    7fa0:	00bfff04 	movi	r2,-4
    7fa4:	88a2703a 	and	r17,r17,r2
    7fa8:	8c21c83a 	sub	r16,r17,r16
    7fac:	8403fbc4 	addi	r16,r16,4079
    7fb0:	8020d33a 	srli	r16,r16,12
    7fb4:	0083ffc4 	movi	r2,4095
    7fb8:	843fffc4 	addi	r16,r16,-1
    7fbc:	8020933a 	slli	r16,r16,12
    7fc0:	1400060e 	bge	r2,r16,7fdc <_malloc_trim_r+0x70>
    7fc4:	9009883a 	mov	r4,r18
    7fc8:	000b883a 	mov	r5,zero
    7fcc:	000ae140 	call	ae14 <_sbrk_r>
    7fd0:	98c00217 	ldw	r3,8(r19)
    7fd4:	1c47883a 	add	r3,r3,r17
    7fd8:	10c00a26 	beq	r2,r3,8004 <_malloc_trim_r+0x98>
    7fdc:	9009883a 	mov	r4,r18
    7fe0:	00106700 	call	10670 <__malloc_unlock>
    7fe4:	0005883a 	mov	r2,zero
    7fe8:	dfc00417 	ldw	ra,16(sp)
    7fec:	dcc00317 	ldw	r19,12(sp)
    7ff0:	dc800217 	ldw	r18,8(sp)
    7ff4:	dc400117 	ldw	r17,4(sp)
    7ff8:	dc000017 	ldw	r16,0(sp)
    7ffc:	dec00504 	addi	sp,sp,20
    8000:	f800283a 	ret
    8004:	9009883a 	mov	r4,r18
    8008:	040bc83a 	sub	r5,zero,r16
    800c:	000ae140 	call	ae14 <_sbrk_r>
    8010:	00ffffc4 	movi	r3,-1
    8014:	10c00d26 	beq	r2,r3,804c <_malloc_trim_r+0xe0>
    8018:	00c00074 	movhi	r3,1
    801c:	18daa304 	addi	r3,r3,27276
    8020:	18800017 	ldw	r2,0(r3)
    8024:	99000217 	ldw	r4,8(r19)
    8028:	8c23c83a 	sub	r17,r17,r16
    802c:	8c400054 	ori	r17,r17,1
    8030:	1421c83a 	sub	r16,r2,r16
    8034:	24400115 	stw	r17,4(r4)
    8038:	9009883a 	mov	r4,r18
    803c:	1c000015 	stw	r16,0(r3)
    8040:	00106700 	call	10670 <__malloc_unlock>
    8044:	00800044 	movi	r2,1
    8048:	003fe706 	br	7fe8 <__alt_mem_sram+0xf7e07fe8>
    804c:	9009883a 	mov	r4,r18
    8050:	000b883a 	mov	r5,zero
    8054:	000ae140 	call	ae14 <_sbrk_r>
    8058:	99000217 	ldw	r4,8(r19)
    805c:	014003c4 	movi	r5,15
    8060:	1107c83a 	sub	r3,r2,r4
    8064:	28ffdd0e 	bge	r5,r3,7fdc <__alt_mem_sram+0xf7e07fdc>
    8068:	01400074 	movhi	r5,1
    806c:	2953cd04 	addi	r5,r5,20276
    8070:	29400017 	ldw	r5,0(r5)
    8074:	18c00054 	ori	r3,r3,1
    8078:	20c00115 	stw	r3,4(r4)
    807c:	00c00074 	movhi	r3,1
    8080:	1145c83a 	sub	r2,r2,r5
    8084:	18daa304 	addi	r3,r3,27276
    8088:	18800015 	stw	r2,0(r3)
    808c:	003fd306 	br	7fdc <__alt_mem_sram+0xf7e07fdc>

00008090 <_free_r>:
    8090:	28004c26 	beq	r5,zero,81c4 <_free_r+0x134>
    8094:	defffd04 	addi	sp,sp,-12
    8098:	dc400115 	stw	r17,4(sp)
    809c:	dc000015 	stw	r16,0(sp)
    80a0:	2023883a 	mov	r17,r4
    80a4:	2821883a 	mov	r16,r5
    80a8:	dfc00215 	stw	ra,8(sp)
    80ac:	00106500 	call	10650 <__malloc_lock>
    80b0:	813fff17 	ldw	r4,-4(r16)
    80b4:	00bfff84 	movi	r2,-2
    80b8:	02400074 	movhi	r9,1
    80bc:	81bffe04 	addi	r6,r16,-8
    80c0:	2084703a 	and	r2,r4,r2
    80c4:	4a4e4604 	addi	r9,r9,14616
    80c8:	308b883a 	add	r5,r6,r2
    80cc:	2a000117 	ldw	r8,4(r5)
    80d0:	49c00217 	ldw	r7,8(r9)
    80d4:	00ffff04 	movi	r3,-4
    80d8:	40c6703a 	and	r3,r8,r3
    80dc:	39405326 	beq	r7,r5,822c <_free_r+0x19c>
    80e0:	28c00115 	stw	r3,4(r5)
    80e4:	2100004c 	andi	r4,r4,1
    80e8:	2000091e 	bne	r4,zero,8110 <_free_r+0x80>
    80ec:	81fffe17 	ldw	r7,-8(r16)
    80f0:	4a000204 	addi	r8,r9,8
    80f4:	31cdc83a 	sub	r6,r6,r7
    80f8:	31000217 	ldw	r4,8(r6)
    80fc:	11c5883a 	add	r2,r2,r7
    8100:	22006126 	beq	r4,r8,8288 <_free_r+0x1f8>
    8104:	31c00317 	ldw	r7,12(r6)
    8108:	21c00315 	stw	r7,12(r4)
    810c:	39000215 	stw	r4,8(r7)
    8110:	28c9883a 	add	r4,r5,r3
    8114:	21c00117 	ldw	r7,4(r4)
    8118:	39c0004c 	andi	r7,r7,1
    811c:	38000d1e 	bne	r7,zero,8154 <_free_r+0xc4>
    8120:	29000217 	ldw	r4,8(r5)
    8124:	10c5883a 	add	r2,r2,r3
    8128:	00c00074 	movhi	r3,1
    812c:	18ce4804 	addi	r3,r3,14624
    8130:	20c07526 	beq	r4,r3,8308 <_free_r+0x278>
    8134:	29c00317 	ldw	r7,12(r5)
    8138:	11400054 	ori	r5,r2,1
    813c:	3087883a 	add	r3,r6,r2
    8140:	21c00315 	stw	r7,12(r4)
    8144:	39000215 	stw	r4,8(r7)
    8148:	31400115 	stw	r5,4(r6)
    814c:	18800015 	stw	r2,0(r3)
    8150:	00000406 	br	8164 <_free_r+0xd4>
    8154:	10c00054 	ori	r3,r2,1
    8158:	30c00115 	stw	r3,4(r6)
    815c:	3087883a 	add	r3,r6,r2
    8160:	18800015 	stw	r2,0(r3)
    8164:	00c07fc4 	movi	r3,511
    8168:	18801736 	bltu	r3,r2,81c8 <_free_r+0x138>
    816c:	1004d0fa 	srli	r2,r2,3
    8170:	01400044 	movi	r5,1
    8174:	49000117 	ldw	r4,4(r9)
    8178:	1087883a 	add	r3,r2,r2
    817c:	18c7883a 	add	r3,r3,r3
    8180:	1005d0ba 	srai	r2,r2,2
    8184:	18c7883a 	add	r3,r3,r3
    8188:	1a47883a 	add	r3,r3,r9
    818c:	19c00217 	ldw	r7,8(r3)
    8190:	2884983a 	sll	r2,r5,r2
    8194:	30c00315 	stw	r3,12(r6)
    8198:	31c00215 	stw	r7,8(r6)
    819c:	1104b03a 	or	r2,r2,r4
    81a0:	19800215 	stw	r6,8(r3)
    81a4:	48800115 	stw	r2,4(r9)
    81a8:	39800315 	stw	r6,12(r7)
    81ac:	8809883a 	mov	r4,r17
    81b0:	dfc00217 	ldw	ra,8(sp)
    81b4:	dc400117 	ldw	r17,4(sp)
    81b8:	dc000017 	ldw	r16,0(sp)
    81bc:	dec00304 	addi	sp,sp,12
    81c0:	00106701 	jmpi	10670 <__malloc_unlock>
    81c4:	f800283a 	ret
    81c8:	1006d27a 	srli	r3,r2,9
    81cc:	01000104 	movi	r4,4
    81d0:	20c04036 	bltu	r4,r3,82d4 <_free_r+0x244>
    81d4:	1006d1ba 	srli	r3,r2,6
    81d8:	19400e04 	addi	r5,r3,56
    81dc:	2947883a 	add	r3,r5,r5
    81e0:	18c7883a 	add	r3,r3,r3
    81e4:	18c7883a 	add	r3,r3,r3
    81e8:	1a49883a 	add	r4,r3,r9
    81ec:	20c00217 	ldw	r3,8(r4)
    81f0:	01c00074 	movhi	r7,1
    81f4:	39ce4604 	addi	r7,r7,14616
    81f8:	19003b26 	beq	r3,r4,82e8 <_free_r+0x258>
    81fc:	01ffff04 	movi	r7,-4
    8200:	19400117 	ldw	r5,4(r3)
    8204:	29ca703a 	and	r5,r5,r7
    8208:	1140022e 	bgeu	r2,r5,8214 <_free_r+0x184>
    820c:	18c00217 	ldw	r3,8(r3)
    8210:	20fffb1e 	bne	r4,r3,8200 <__alt_mem_sram+0xf7e08200>
    8214:	18800317 	ldw	r2,12(r3)
    8218:	30800315 	stw	r2,12(r6)
    821c:	30c00215 	stw	r3,8(r6)
    8220:	11800215 	stw	r6,8(r2)
    8224:	19800315 	stw	r6,12(r3)
    8228:	003fe006 	br	81ac <__alt_mem_sram+0xf7e081ac>
    822c:	2100004c 	andi	r4,r4,1
    8230:	1885883a 	add	r2,r3,r2
    8234:	2000071e 	bne	r4,zero,8254 <_free_r+0x1c4>
    8238:	817ffe17 	ldw	r5,-8(r16)
    823c:	314dc83a 	sub	r6,r6,r5
    8240:	30c00317 	ldw	r3,12(r6)
    8244:	31000217 	ldw	r4,8(r6)
    8248:	1145883a 	add	r2,r2,r5
    824c:	20c00315 	stw	r3,12(r4)
    8250:	19000215 	stw	r4,8(r3)
    8254:	10c00054 	ori	r3,r2,1
    8258:	30c00115 	stw	r3,4(r6)
    825c:	00c00074 	movhi	r3,1
    8260:	18d3ce04 	addi	r3,r3,20280
    8264:	18c00017 	ldw	r3,0(r3)
    8268:	49800215 	stw	r6,8(r9)
    826c:	10ffcf36 	bltu	r2,r3,81ac <__alt_mem_sram+0xf7e081ac>
    8270:	00800074 	movhi	r2,1
    8274:	109a9b04 	addi	r2,r2,27244
    8278:	11400017 	ldw	r5,0(r2)
    827c:	8809883a 	mov	r4,r17
    8280:	0007f6c0 	call	7f6c <_malloc_trim_r>
    8284:	003fc906 	br	81ac <__alt_mem_sram+0xf7e081ac>
    8288:	28c9883a 	add	r4,r5,r3
    828c:	21000117 	ldw	r4,4(r4)
    8290:	2100004c 	andi	r4,r4,1
    8294:	20000a1e 	bne	r4,zero,82c0 <_free_r+0x230>
    8298:	29000317 	ldw	r4,12(r5)
    829c:	29400217 	ldw	r5,8(r5)
    82a0:	10c5883a 	add	r2,r2,r3
    82a4:	10c00054 	ori	r3,r2,1
    82a8:	29000315 	stw	r4,12(r5)
    82ac:	21400215 	stw	r5,8(r4)
    82b0:	30c00115 	stw	r3,4(r6)
    82b4:	308d883a 	add	r6,r6,r2
    82b8:	30800015 	stw	r2,0(r6)
    82bc:	003fbb06 	br	81ac <__alt_mem_sram+0xf7e081ac>
    82c0:	10c00054 	ori	r3,r2,1
    82c4:	30c00115 	stw	r3,4(r6)
    82c8:	308d883a 	add	r6,r6,r2
    82cc:	30800015 	stw	r2,0(r6)
    82d0:	003fb606 	br	81ac <__alt_mem_sram+0xf7e081ac>
    82d4:	01000504 	movi	r4,20
    82d8:	20c01436 	bltu	r4,r3,832c <_free_r+0x29c>
    82dc:	194016c4 	addi	r5,r3,91
    82e0:	2947883a 	add	r3,r5,r5
    82e4:	003fbe06 	br	81e0 <__alt_mem_sram+0xf7e081e0>
    82e8:	280bd0ba 	srai	r5,r5,2
    82ec:	00800044 	movi	r2,1
    82f0:	39000117 	ldw	r4,4(r7)
    82f4:	114a983a 	sll	r5,r2,r5
    82f8:	1805883a 	mov	r2,r3
    82fc:	2908b03a 	or	r4,r5,r4
    8300:	39000115 	stw	r4,4(r7)
    8304:	003fc406 	br	8218 <__alt_mem_sram+0xf7e08218>
    8308:	49800515 	stw	r6,20(r9)
    830c:	49800415 	stw	r6,16(r9)
    8310:	10c00054 	ori	r3,r2,1
    8314:	31000315 	stw	r4,12(r6)
    8318:	31000215 	stw	r4,8(r6)
    831c:	30c00115 	stw	r3,4(r6)
    8320:	308d883a 	add	r6,r6,r2
    8324:	30800015 	stw	r2,0(r6)
    8328:	003fa006 	br	81ac <__alt_mem_sram+0xf7e081ac>
    832c:	01001504 	movi	r4,84
    8330:	20c00436 	bltu	r4,r3,8344 <_free_r+0x2b4>
    8334:	1006d33a 	srli	r3,r2,12
    8338:	19401b84 	addi	r5,r3,110
    833c:	2947883a 	add	r3,r5,r5
    8340:	003fa706 	br	81e0 <__alt_mem_sram+0xf7e081e0>
    8344:	01005504 	movi	r4,340
    8348:	20c00436 	bltu	r4,r3,835c <_free_r+0x2cc>
    834c:	1006d3fa 	srli	r3,r2,15
    8350:	19401dc4 	addi	r5,r3,119
    8354:	2947883a 	add	r3,r5,r5
    8358:	003fa106 	br	81e0 <__alt_mem_sram+0xf7e081e0>
    835c:	01015504 	movi	r4,1364
    8360:	20c00436 	bltu	r4,r3,8374 <_free_r+0x2e4>
    8364:	1006d4ba 	srli	r3,r2,18
    8368:	19401f04 	addi	r5,r3,124
    836c:	2947883a 	add	r3,r5,r5
    8370:	003f9b06 	br	81e0 <__alt_mem_sram+0xf7e081e0>
    8374:	00c03f04 	movi	r3,252
    8378:	01401f84 	movi	r5,126
    837c:	003f9806 	br	81e0 <__alt_mem_sram+0xf7e081e0>

00008380 <__sfvwrite_r>:
    8380:	30800217 	ldw	r2,8(r6)
    8384:	10004526 	beq	r2,zero,849c <__sfvwrite_r+0x11c>
    8388:	28c0030b 	ldhu	r3,12(r5)
    838c:	defff404 	addi	sp,sp,-48
    8390:	dd400715 	stw	r21,28(sp)
    8394:	dcc00515 	stw	r19,20(sp)
    8398:	dc000215 	stw	r16,8(sp)
    839c:	dfc00b15 	stw	ra,44(sp)
    83a0:	df000a15 	stw	fp,40(sp)
    83a4:	ddc00915 	stw	r23,36(sp)
    83a8:	dd800815 	stw	r22,32(sp)
    83ac:	dd000615 	stw	r20,24(sp)
    83b0:	dc800415 	stw	r18,16(sp)
    83b4:	dc400315 	stw	r17,12(sp)
    83b8:	1880020c 	andi	r2,r3,8
    83bc:	2821883a 	mov	r16,r5
    83c0:	202b883a 	mov	r21,r4
    83c4:	3027883a 	mov	r19,r6
    83c8:	10002526 	beq	r2,zero,8460 <__sfvwrite_r+0xe0>
    83cc:	28800417 	ldw	r2,16(r5)
    83d0:	10002326 	beq	r2,zero,8460 <__sfvwrite_r+0xe0>
    83d4:	1880008c 	andi	r2,r3,2
    83d8:	9c400017 	ldw	r17,0(r19)
    83dc:	10003126 	beq	r2,zero,84a4 <__sfvwrite_r+0x124>
    83e0:	0029883a 	mov	r20,zero
    83e4:	0025883a 	mov	r18,zero
    83e8:	05810004 	movi	r22,1024
    83ec:	a00d883a 	mov	r6,r20
    83f0:	a809883a 	mov	r4,r21
    83f4:	90002526 	beq	r18,zero,848c <__sfvwrite_r+0x10c>
    83f8:	900f883a 	mov	r7,r18
    83fc:	81400717 	ldw	r5,28(r16)
    8400:	b480012e 	bgeu	r22,r18,8408 <__sfvwrite_r+0x88>
    8404:	01c10004 	movi	r7,1024
    8408:	80800917 	ldw	r2,36(r16)
    840c:	103ee83a 	callr	r2
    8410:	0080510e 	bge	zero,r2,8558 <__sfvwrite_r+0x1d8>
    8414:	98c00217 	ldw	r3,8(r19)
    8418:	a0a9883a 	add	r20,r20,r2
    841c:	90a5c83a 	sub	r18,r18,r2
    8420:	1885c83a 	sub	r2,r3,r2
    8424:	98800215 	stw	r2,8(r19)
    8428:	103ff01e 	bne	r2,zero,83ec <__alt_mem_sram+0xf7e083ec>
    842c:	0005883a 	mov	r2,zero
    8430:	dfc00b17 	ldw	ra,44(sp)
    8434:	df000a17 	ldw	fp,40(sp)
    8438:	ddc00917 	ldw	r23,36(sp)
    843c:	dd800817 	ldw	r22,32(sp)
    8440:	dd400717 	ldw	r21,28(sp)
    8444:	dd000617 	ldw	r20,24(sp)
    8448:	dcc00517 	ldw	r19,20(sp)
    844c:	dc800417 	ldw	r18,16(sp)
    8450:	dc400317 	ldw	r17,12(sp)
    8454:	dc000217 	ldw	r16,8(sp)
    8458:	dec00c04 	addi	sp,sp,48
    845c:	f800283a 	ret
    8460:	a809883a 	mov	r4,r21
    8464:	800b883a 	mov	r5,r16
    8468:	0005f1c0 	call	5f1c <__swsetup_r>
    846c:	80c0030b 	ldhu	r3,12(r16)
    8470:	103fd826 	beq	r2,zero,83d4 <__alt_mem_sram+0xf7e083d4>
    8474:	18c01014 	ori	r3,r3,64
    8478:	80c0030d 	sth	r3,12(r16)
    847c:	00c00244 	movi	r3,9
    8480:	00bfffc4 	movi	r2,-1
    8484:	a8c00015 	stw	r3,0(r21)
    8488:	003fe906 	br	8430 <__alt_mem_sram+0xf7e08430>
    848c:	8d000017 	ldw	r20,0(r17)
    8490:	8c800117 	ldw	r18,4(r17)
    8494:	8c400204 	addi	r17,r17,8
    8498:	003fd406 	br	83ec <__alt_mem_sram+0xf7e083ec>
    849c:	0005883a 	mov	r2,zero
    84a0:	f800283a 	ret
    84a4:	1880004c 	andi	r2,r3,1
    84a8:	1000301e 	bne	r2,zero,856c <__sfvwrite_r+0x1ec>
    84ac:	002f883a 	mov	r23,zero
    84b0:	0025883a 	mov	r18,zero
    84b4:	90001c26 	beq	r18,zero,8528 <__sfvwrite_r+0x1a8>
    84b8:	1880800c 	andi	r2,r3,512
    84bc:	85000217 	ldw	r20,8(r16)
    84c0:	10006c26 	beq	r2,zero,8674 <__sfvwrite_r+0x2f4>
    84c4:	a02d883a 	mov	r22,r20
    84c8:	95008536 	bltu	r18,r20,86e0 <__sfvwrite_r+0x360>
    84cc:	1881200c 	andi	r2,r3,1152
    84d0:	10009d1e 	bne	r2,zero,8748 <__sfvwrite_r+0x3c8>
    84d4:	81000017 	ldw	r4,0(r16)
    84d8:	a039883a 	mov	fp,r20
    84dc:	9029883a 	mov	r20,r18
    84e0:	b80b883a 	mov	r5,r23
    84e4:	b00d883a 	mov	r6,r22
    84e8:	00095f40 	call	95f4 <memmove>
    84ec:	80c00217 	ldw	r3,8(r16)
    84f0:	81000017 	ldw	r4,0(r16)
    84f4:	9005883a 	mov	r2,r18
    84f8:	1f39c83a 	sub	fp,r3,fp
    84fc:	258f883a 	add	r7,r4,r22
    8500:	87000215 	stw	fp,8(r16)
    8504:	81c00015 	stw	r7,0(r16)
    8508:	98c00217 	ldw	r3,8(r19)
    850c:	b8af883a 	add	r23,r23,r2
    8510:	90a5c83a 	sub	r18,r18,r2
    8514:	1d05c83a 	sub	r2,r3,r20
    8518:	98800215 	stw	r2,8(r19)
    851c:	103fc326 	beq	r2,zero,842c <__alt_mem_sram+0xf7e0842c>
    8520:	80c0030b 	ldhu	r3,12(r16)
    8524:	903fe41e 	bne	r18,zero,84b8 <__alt_mem_sram+0xf7e084b8>
    8528:	8dc00017 	ldw	r23,0(r17)
    852c:	8c800117 	ldw	r18,4(r17)
    8530:	8c400204 	addi	r17,r17,8
    8534:	003fdf06 	br	84b4 <__alt_mem_sram+0xf7e084b4>
    8538:	000a8000 	call	a800 <_realloc_r>
    853c:	102d883a 	mov	r22,r2
    8540:	1000a01e 	bne	r2,zero,87c4 <__sfvwrite_r+0x444>
    8544:	81400417 	ldw	r5,16(r16)
    8548:	a809883a 	mov	r4,r21
    854c:	00080900 	call	8090 <_free_r>
    8550:	00800304 	movi	r2,12
    8554:	a8800015 	stw	r2,0(r21)
    8558:	80c0030b 	ldhu	r3,12(r16)
    855c:	00bfffc4 	movi	r2,-1
    8560:	18c01014 	ori	r3,r3,64
    8564:	80c0030d 	sth	r3,12(r16)
    8568:	003fb106 	br	8430 <__alt_mem_sram+0xf7e08430>
    856c:	0029883a 	mov	r20,zero
    8570:	0011883a 	mov	r8,zero
    8574:	0039883a 	mov	fp,zero
    8578:	0025883a 	mov	r18,zero
    857c:	90001f26 	beq	r18,zero,85fc <__sfvwrite_r+0x27c>
    8580:	40006826 	beq	r8,zero,8724 <__sfvwrite_r+0x3a4>
    8584:	a02f883a 	mov	r23,r20
    8588:	9500012e 	bgeu	r18,r20,8590 <__sfvwrite_r+0x210>
    858c:	902f883a 	mov	r23,r18
    8590:	81000017 	ldw	r4,0(r16)
    8594:	80800417 	ldw	r2,16(r16)
    8598:	b82d883a 	mov	r22,r23
    859c:	81800217 	ldw	r6,8(r16)
    85a0:	81c00517 	ldw	r7,20(r16)
    85a4:	1100022e 	bgeu	r2,r4,85b0 <__sfvwrite_r+0x230>
    85a8:	31c7883a 	add	r3,r6,r7
    85ac:	1dc01816 	blt	r3,r23,8610 <__sfvwrite_r+0x290>
    85b0:	b9c03f16 	blt	r23,r7,86b0 <__sfvwrite_r+0x330>
    85b4:	80800917 	ldw	r2,36(r16)
    85b8:	81400717 	ldw	r5,28(r16)
    85bc:	a809883a 	mov	r4,r21
    85c0:	da000115 	stw	r8,4(sp)
    85c4:	e00d883a 	mov	r6,fp
    85c8:	103ee83a 	callr	r2
    85cc:	102d883a 	mov	r22,r2
    85d0:	da000117 	ldw	r8,4(sp)
    85d4:	00bfe00e 	bge	zero,r2,8558 <__alt_mem_sram+0xf7e08558>
    85d8:	a5a9c83a 	sub	r20,r20,r22
    85dc:	a0001f26 	beq	r20,zero,865c <__sfvwrite_r+0x2dc>
    85e0:	98800217 	ldw	r2,8(r19)
    85e4:	e5b9883a 	add	fp,fp,r22
    85e8:	95a5c83a 	sub	r18,r18,r22
    85ec:	15adc83a 	sub	r22,r2,r22
    85f0:	9d800215 	stw	r22,8(r19)
    85f4:	b03f8d26 	beq	r22,zero,842c <__alt_mem_sram+0xf7e0842c>
    85f8:	903fe11e 	bne	r18,zero,8580 <__alt_mem_sram+0xf7e08580>
    85fc:	8f000017 	ldw	fp,0(r17)
    8600:	8c800117 	ldw	r18,4(r17)
    8604:	0011883a 	mov	r8,zero
    8608:	8c400204 	addi	r17,r17,8
    860c:	003fdb06 	br	857c <__alt_mem_sram+0xf7e0857c>
    8610:	180d883a 	mov	r6,r3
    8614:	e00b883a 	mov	r5,fp
    8618:	da000115 	stw	r8,4(sp)
    861c:	d8c00015 	stw	r3,0(sp)
    8620:	00095f40 	call	95f4 <memmove>
    8624:	d8c00017 	ldw	r3,0(sp)
    8628:	80800017 	ldw	r2,0(r16)
    862c:	a809883a 	mov	r4,r21
    8630:	800b883a 	mov	r5,r16
    8634:	10c5883a 	add	r2,r2,r3
    8638:	80800015 	stw	r2,0(r16)
    863c:	d8c00015 	stw	r3,0(sp)
    8640:	00079740 	call	7974 <_fflush_r>
    8644:	d8c00017 	ldw	r3,0(sp)
    8648:	da000117 	ldw	r8,4(sp)
    864c:	103fc21e 	bne	r2,zero,8558 <__alt_mem_sram+0xf7e08558>
    8650:	182d883a 	mov	r22,r3
    8654:	a5a9c83a 	sub	r20,r20,r22
    8658:	a03fe11e 	bne	r20,zero,85e0 <__alt_mem_sram+0xf7e085e0>
    865c:	a809883a 	mov	r4,r21
    8660:	800b883a 	mov	r5,r16
    8664:	00079740 	call	7974 <_fflush_r>
    8668:	103fbb1e 	bne	r2,zero,8558 <__alt_mem_sram+0xf7e08558>
    866c:	0011883a 	mov	r8,zero
    8670:	003fdb06 	br	85e0 <__alt_mem_sram+0xf7e085e0>
    8674:	81000017 	ldw	r4,0(r16)
    8678:	80800417 	ldw	r2,16(r16)
    867c:	1100012e 	bgeu	r2,r4,8684 <__sfvwrite_r+0x304>
    8680:	a4805a36 	bltu	r20,r18,87ec <__sfvwrite_r+0x46c>
    8684:	81c00517 	ldw	r7,20(r16)
    8688:	91c01a36 	bltu	r18,r7,86f4 <__sfvwrite_r+0x374>
    868c:	80800917 	ldw	r2,36(r16)
    8690:	81400717 	ldw	r5,28(r16)
    8694:	a809883a 	mov	r4,r21
    8698:	b80d883a 	mov	r6,r23
    869c:	103ee83a 	callr	r2
    86a0:	1029883a 	mov	r20,r2
    86a4:	00bfac0e 	bge	zero,r2,8558 <__alt_mem_sram+0xf7e08558>
    86a8:	a005883a 	mov	r2,r20
    86ac:	003f9606 	br	8508 <__alt_mem_sram+0xf7e08508>
    86b0:	b80d883a 	mov	r6,r23
    86b4:	e00b883a 	mov	r5,fp
    86b8:	da000115 	stw	r8,4(sp)
    86bc:	00095f40 	call	95f4 <memmove>
    86c0:	80800217 	ldw	r2,8(r16)
    86c4:	80c00017 	ldw	r3,0(r16)
    86c8:	da000117 	ldw	r8,4(sp)
    86cc:	15c5c83a 	sub	r2,r2,r23
    86d0:	1def883a 	add	r23,r3,r23
    86d4:	80800215 	stw	r2,8(r16)
    86d8:	85c00015 	stw	r23,0(r16)
    86dc:	003fbe06 	br	85d8 <__alt_mem_sram+0xf7e085d8>
    86e0:	81000017 	ldw	r4,0(r16)
    86e4:	9039883a 	mov	fp,r18
    86e8:	9029883a 	mov	r20,r18
    86ec:	902d883a 	mov	r22,r18
    86f0:	003f7b06 	br	84e0 <__alt_mem_sram+0xf7e084e0>
    86f4:	b80b883a 	mov	r5,r23
    86f8:	900d883a 	mov	r6,r18
    86fc:	00095f40 	call	95f4 <memmove>
    8700:	80c00217 	ldw	r3,8(r16)
    8704:	80800017 	ldw	r2,0(r16)
    8708:	9029883a 	mov	r20,r18
    870c:	1c87c83a 	sub	r3,r3,r18
    8710:	1485883a 	add	r2,r2,r18
    8714:	80800015 	stw	r2,0(r16)
    8718:	80c00215 	stw	r3,8(r16)
    871c:	9005883a 	mov	r2,r18
    8720:	003f7906 	br	8508 <__alt_mem_sram+0xf7e08508>
    8724:	e009883a 	mov	r4,fp
    8728:	01400284 	movi	r5,10
    872c:	900d883a 	mov	r6,r18
    8730:	00093d40 	call	93d4 <memchr>
    8734:	10003826 	beq	r2,zero,8818 <__sfvwrite_r+0x498>
    8738:	10800044 	addi	r2,r2,1
    873c:	1729c83a 	sub	r20,r2,fp
    8740:	02000044 	movi	r8,1
    8744:	003f8f06 	br	8584 <__alt_mem_sram+0xf7e08584>
    8748:	80800517 	ldw	r2,20(r16)
    874c:	81400417 	ldw	r5,16(r16)
    8750:	87000017 	ldw	fp,0(r16)
    8754:	10a9883a 	add	r20,r2,r2
    8758:	a085883a 	add	r2,r20,r2
    875c:	1028d7fa 	srli	r20,r2,31
    8760:	e179c83a 	sub	fp,fp,r5
    8764:	e1000044 	addi	r4,fp,1
    8768:	a085883a 	add	r2,r20,r2
    876c:	1029d07a 	srai	r20,r2,1
    8770:	2485883a 	add	r2,r4,r18
    8774:	a00d883a 	mov	r6,r20
    8778:	a080022e 	bgeu	r20,r2,8784 <__sfvwrite_r+0x404>
    877c:	1029883a 	mov	r20,r2
    8780:	100d883a 	mov	r6,r2
    8784:	18c1000c 	andi	r3,r3,1024
    8788:	a809883a 	mov	r4,r21
    878c:	183f6a26 	beq	r3,zero,8538 <__alt_mem_sram+0xf7e08538>
    8790:	300b883a 	mov	r5,r6
    8794:	0008c2c0 	call	8c2c <_malloc_r>
    8798:	102d883a 	mov	r22,r2
    879c:	103f6c26 	beq	r2,zero,8550 <__alt_mem_sram+0xf7e08550>
    87a0:	81400417 	ldw	r5,16(r16)
    87a4:	1009883a 	mov	r4,r2
    87a8:	e00d883a 	mov	r6,fp
    87ac:	00094bc0 	call	94bc <memcpy>
    87b0:	8080030b 	ldhu	r2,12(r16)
    87b4:	00fedfc4 	movi	r3,-1153
    87b8:	10c4703a 	and	r2,r2,r3
    87bc:	10802014 	ori	r2,r2,128
    87c0:	8080030d 	sth	r2,12(r16)
    87c4:	b709883a 	add	r4,r22,fp
    87c8:	a707c83a 	sub	r3,r20,fp
    87cc:	85800415 	stw	r22,16(r16)
    87d0:	85000515 	stw	r20,20(r16)
    87d4:	81000015 	stw	r4,0(r16)
    87d8:	9039883a 	mov	fp,r18
    87dc:	80c00215 	stw	r3,8(r16)
    87e0:	9029883a 	mov	r20,r18
    87e4:	902d883a 	mov	r22,r18
    87e8:	003f3d06 	br	84e0 <__alt_mem_sram+0xf7e084e0>
    87ec:	b80b883a 	mov	r5,r23
    87f0:	a00d883a 	mov	r6,r20
    87f4:	00095f40 	call	95f4 <memmove>
    87f8:	80800017 	ldw	r2,0(r16)
    87fc:	a809883a 	mov	r4,r21
    8800:	800b883a 	mov	r5,r16
    8804:	1505883a 	add	r2,r2,r20
    8808:	80800015 	stw	r2,0(r16)
    880c:	00079740 	call	7974 <_fflush_r>
    8810:	103fa526 	beq	r2,zero,86a8 <__alt_mem_sram+0xf7e086a8>
    8814:	003f5006 	br	8558 <__alt_mem_sram+0xf7e08558>
    8818:	95000044 	addi	r20,r18,1
    881c:	02000044 	movi	r8,1
    8820:	003f5806 	br	8584 <__alt_mem_sram+0xf7e08584>

00008824 <_fwalk>:
    8824:	defff804 	addi	sp,sp,-32
    8828:	dd400515 	stw	r21,20(sp)
    882c:	2540b804 	addi	r21,r4,736
    8830:	dd800615 	stw	r22,24(sp)
    8834:	dd000415 	stw	r20,16(sp)
    8838:	dfc00715 	stw	ra,28(sp)
    883c:	dcc00315 	stw	r19,12(sp)
    8840:	dc800215 	stw	r18,8(sp)
    8844:	dc400115 	stw	r17,4(sp)
    8848:	dc000015 	stw	r16,0(sp)
    884c:	2829883a 	mov	r20,r5
    8850:	002d883a 	mov	r22,zero
    8854:	0007f2c0 	call	7f2c <__sfp_lock_acquire>
    8858:	a8001426 	beq	r21,zero,88ac <_fwalk+0x88>
    885c:	04ffffc4 	movi	r19,-1
    8860:	ac400117 	ldw	r17,4(r21)
    8864:	ac800217 	ldw	r18,8(r21)
    8868:	8c7fffc4 	addi	r17,r17,-1
    886c:	88000d16 	blt	r17,zero,88a4 <_fwalk+0x80>
    8870:	94000304 	addi	r16,r18,12
    8874:	94800384 	addi	r18,r18,14
    8878:	80c0000f 	ldh	r3,0(r16)
    887c:	8c7fffc4 	addi	r17,r17,-1
    8880:	813ffd04 	addi	r4,r16,-12
    8884:	18000426 	beq	r3,zero,8898 <_fwalk+0x74>
    8888:	90c0000f 	ldh	r3,0(r18)
    888c:	1cc00226 	beq	r3,r19,8898 <_fwalk+0x74>
    8890:	a03ee83a 	callr	r20
    8894:	b0acb03a 	or	r22,r22,r2
    8898:	84001a04 	addi	r16,r16,104
    889c:	94801a04 	addi	r18,r18,104
    88a0:	8cfff51e 	bne	r17,r19,8878 <__alt_mem_sram+0xf7e08878>
    88a4:	ad400017 	ldw	r21,0(r21)
    88a8:	a83fed1e 	bne	r21,zero,8860 <__alt_mem_sram+0xf7e08860>
    88ac:	0007f300 	call	7f30 <__sfp_lock_release>
    88b0:	b005883a 	mov	r2,r22
    88b4:	dfc00717 	ldw	ra,28(sp)
    88b8:	dd800617 	ldw	r22,24(sp)
    88bc:	dd400517 	ldw	r21,20(sp)
    88c0:	dd000417 	ldw	r20,16(sp)
    88c4:	dcc00317 	ldw	r19,12(sp)
    88c8:	dc800217 	ldw	r18,8(sp)
    88cc:	dc400117 	ldw	r17,4(sp)
    88d0:	dc000017 	ldw	r16,0(sp)
    88d4:	dec00804 	addi	sp,sp,32
    88d8:	f800283a 	ret

000088dc <_fwalk_reent>:
    88dc:	defff804 	addi	sp,sp,-32
    88e0:	dd400515 	stw	r21,20(sp)
    88e4:	2540b804 	addi	r21,r4,736
    88e8:	dd800615 	stw	r22,24(sp)
    88ec:	dd000415 	stw	r20,16(sp)
    88f0:	dcc00315 	stw	r19,12(sp)
    88f4:	dfc00715 	stw	ra,28(sp)
    88f8:	dc800215 	stw	r18,8(sp)
    88fc:	dc400115 	stw	r17,4(sp)
    8900:	dc000015 	stw	r16,0(sp)
    8904:	2027883a 	mov	r19,r4
    8908:	2829883a 	mov	r20,r5
    890c:	002d883a 	mov	r22,zero
    8910:	0007f2c0 	call	7f2c <__sfp_lock_acquire>
    8914:	a8001326 	beq	r21,zero,8964 <_fwalk_reent+0x88>
    8918:	04bfffc4 	movi	r18,-1
    891c:	ac400117 	ldw	r17,4(r21)
    8920:	ac000217 	ldw	r16,8(r21)
    8924:	8c7fffc4 	addi	r17,r17,-1
    8928:	88000c16 	blt	r17,zero,895c <_fwalk_reent+0x80>
    892c:	84000304 	addi	r16,r16,12
    8930:	80c0000f 	ldh	r3,0(r16)
    8934:	8c7fffc4 	addi	r17,r17,-1
    8938:	817ffd04 	addi	r5,r16,-12
    893c:	18000526 	beq	r3,zero,8954 <_fwalk_reent+0x78>
    8940:	80c0008f 	ldh	r3,2(r16)
    8944:	9809883a 	mov	r4,r19
    8948:	1c800226 	beq	r3,r18,8954 <_fwalk_reent+0x78>
    894c:	a03ee83a 	callr	r20
    8950:	b0acb03a 	or	r22,r22,r2
    8954:	84001a04 	addi	r16,r16,104
    8958:	8cbff51e 	bne	r17,r18,8930 <__alt_mem_sram+0xf7e08930>
    895c:	ad400017 	ldw	r21,0(r21)
    8960:	a83fee1e 	bne	r21,zero,891c <__alt_mem_sram+0xf7e0891c>
    8964:	0007f300 	call	7f30 <__sfp_lock_release>
    8968:	b005883a 	mov	r2,r22
    896c:	dfc00717 	ldw	ra,28(sp)
    8970:	dd800617 	ldw	r22,24(sp)
    8974:	dd400517 	ldw	r21,20(sp)
    8978:	dd000417 	ldw	r20,16(sp)
    897c:	dcc00317 	ldw	r19,12(sp)
    8980:	dc800217 	ldw	r18,8(sp)
    8984:	dc400117 	ldw	r17,4(sp)
    8988:	dc000017 	ldw	r16,0(sp)
    898c:	dec00804 	addi	sp,sp,32
    8990:	f800283a 	ret

00008994 <_setlocale_r>:
    8994:	30001b26 	beq	r6,zero,8a04 <_setlocale_r+0x70>
    8998:	01400074 	movhi	r5,1
    899c:	defffe04 	addi	sp,sp,-8
    89a0:	294c8004 	addi	r5,r5,12800
    89a4:	3009883a 	mov	r4,r6
    89a8:	dc000015 	stw	r16,0(sp)
    89ac:	dfc00115 	stw	ra,4(sp)
    89b0:	3021883a 	mov	r16,r6
    89b4:	000afa40 	call	afa4 <strcmp>
    89b8:	1000061e 	bne	r2,zero,89d4 <_setlocale_r+0x40>
    89bc:	00800074 	movhi	r2,1
    89c0:	108c7f04 	addi	r2,r2,12796
    89c4:	dfc00117 	ldw	ra,4(sp)
    89c8:	dc000017 	ldw	r16,0(sp)
    89cc:	dec00204 	addi	sp,sp,8
    89d0:	f800283a 	ret
    89d4:	01400074 	movhi	r5,1
    89d8:	294c7f04 	addi	r5,r5,12796
    89dc:	8009883a 	mov	r4,r16
    89e0:	000afa40 	call	afa4 <strcmp>
    89e4:	103ff526 	beq	r2,zero,89bc <__alt_mem_sram+0xf7e089bc>
    89e8:	01400074 	movhi	r5,1
    89ec:	294c6a04 	addi	r5,r5,12712
    89f0:	8009883a 	mov	r4,r16
    89f4:	000afa40 	call	afa4 <strcmp>
    89f8:	103ff026 	beq	r2,zero,89bc <__alt_mem_sram+0xf7e089bc>
    89fc:	0005883a 	mov	r2,zero
    8a00:	003ff006 	br	89c4 <__alt_mem_sram+0xf7e089c4>
    8a04:	00800074 	movhi	r2,1
    8a08:	108c7f04 	addi	r2,r2,12796
    8a0c:	f800283a 	ret

00008a10 <__locale_charset>:
    8a10:	00800074 	movhi	r2,1
    8a14:	108e3004 	addi	r2,r2,14528
    8a18:	f800283a 	ret

00008a1c <__locale_mb_cur_max>:
    8a1c:	00800074 	movhi	r2,1
    8a20:	1093cc04 	addi	r2,r2,20272
    8a24:	10800017 	ldw	r2,0(r2)
    8a28:	f800283a 	ret

00008a2c <__locale_msgcharset>:
    8a2c:	00800074 	movhi	r2,1
    8a30:	108e2804 	addi	r2,r2,14496
    8a34:	f800283a 	ret

00008a38 <__locale_cjk_lang>:
    8a38:	0005883a 	mov	r2,zero
    8a3c:	f800283a 	ret

00008a40 <_localeconv_r>:
    8a40:	00800074 	movhi	r2,1
    8a44:	108e3804 	addi	r2,r2,14560
    8a48:	f800283a 	ret

00008a4c <setlocale>:
    8a4c:	00c00074 	movhi	r3,1
    8a50:	18d3cb04 	addi	r3,r3,20268
    8a54:	2005883a 	mov	r2,r4
    8a58:	19000017 	ldw	r4,0(r3)
    8a5c:	280d883a 	mov	r6,r5
    8a60:	100b883a 	mov	r5,r2
    8a64:	00089941 	jmpi	8994 <_setlocale_r>

00008a68 <localeconv>:
    8a68:	00800074 	movhi	r2,1
    8a6c:	108e3804 	addi	r2,r2,14560
    8a70:	f800283a 	ret

00008a74 <__smakebuf_r>:
    8a74:	2880030b 	ldhu	r2,12(r5)
    8a78:	10c0008c 	andi	r3,r2,2
    8a7c:	1800401e 	bne	r3,zero,8b80 <__smakebuf_r+0x10c>
    8a80:	deffec04 	addi	sp,sp,-80
    8a84:	dc000f15 	stw	r16,60(sp)
    8a88:	2821883a 	mov	r16,r5
    8a8c:	2940038f 	ldh	r5,14(r5)
    8a90:	dc401015 	stw	r17,64(sp)
    8a94:	dfc01315 	stw	ra,76(sp)
    8a98:	dcc01215 	stw	r19,72(sp)
    8a9c:	dc801115 	stw	r18,68(sp)
    8aa0:	2023883a 	mov	r17,r4
    8aa4:	28001b16 	blt	r5,zero,8b14 <__smakebuf_r+0xa0>
    8aa8:	d80d883a 	mov	r6,sp
    8aac:	000c9400 	call	c940 <_fstat_r>
    8ab0:	10001716 	blt	r2,zero,8b10 <__smakebuf_r+0x9c>
    8ab4:	d8800117 	ldw	r2,4(sp)
    8ab8:	00e00014 	movui	r3,32768
    8abc:	10bc000c 	andi	r2,r2,61440
    8ac0:	10c03726 	beq	r2,r3,8ba0 <__smakebuf_r+0x12c>
    8ac4:	80c0030b 	ldhu	r3,12(r16)
    8ac8:	18c20014 	ori	r3,r3,2048
    8acc:	80c0030d 	sth	r3,12(r16)
    8ad0:	00c80004 	movi	r3,8192
    8ad4:	10c03c1e 	bne	r2,r3,8bc8 <__smakebuf_r+0x154>
    8ad8:	8140038f 	ldh	r5,14(r16)
    8adc:	8809883a 	mov	r4,r17
    8ae0:	000c9980 	call	c998 <_isatty_r>
    8ae4:	10004e26 	beq	r2,zero,8c20 <__smakebuf_r+0x1ac>
    8ae8:	8080030b 	ldhu	r2,12(r16)
    8aec:	04c00044 	movi	r19,1
    8af0:	80c010c4 	addi	r3,r16,67
    8af4:	14c4b03a 	or	r2,r2,r19
    8af8:	8080030d 	sth	r2,12(r16)
    8afc:	80c00015 	stw	r3,0(r16)
    8b00:	80c00415 	stw	r3,16(r16)
    8b04:	84c00515 	stw	r19,20(r16)
    8b08:	04810004 	movi	r18,1024
    8b0c:	00000706 	br	8b2c <__smakebuf_r+0xb8>
    8b10:	8080030b 	ldhu	r2,12(r16)
    8b14:	10c0200c 	andi	r3,r2,128
    8b18:	18001f1e 	bne	r3,zero,8b98 <__smakebuf_r+0x124>
    8b1c:	04810004 	movi	r18,1024
    8b20:	10820014 	ori	r2,r2,2048
    8b24:	8080030d 	sth	r2,12(r16)
    8b28:	0027883a 	mov	r19,zero
    8b2c:	8809883a 	mov	r4,r17
    8b30:	900b883a 	mov	r5,r18
    8b34:	0008c2c0 	call	8c2c <_malloc_r>
    8b38:	10002e26 	beq	r2,zero,8bf4 <__smakebuf_r+0x180>
    8b3c:	80c0030b 	ldhu	r3,12(r16)
    8b40:	01000034 	movhi	r4,0
    8b44:	211ef704 	addi	r4,r4,31708
    8b48:	89000f15 	stw	r4,60(r17)
    8b4c:	18c02014 	ori	r3,r3,128
    8b50:	80c0030d 	sth	r3,12(r16)
    8b54:	80800015 	stw	r2,0(r16)
    8b58:	80800415 	stw	r2,16(r16)
    8b5c:	84800515 	stw	r18,20(r16)
    8b60:	98001c1e 	bne	r19,zero,8bd4 <__smakebuf_r+0x160>
    8b64:	dfc01317 	ldw	ra,76(sp)
    8b68:	dcc01217 	ldw	r19,72(sp)
    8b6c:	dc801117 	ldw	r18,68(sp)
    8b70:	dc401017 	ldw	r17,64(sp)
    8b74:	dc000f17 	ldw	r16,60(sp)
    8b78:	dec01404 	addi	sp,sp,80
    8b7c:	f800283a 	ret
    8b80:	288010c4 	addi	r2,r5,67
    8b84:	28800015 	stw	r2,0(r5)
    8b88:	28800415 	stw	r2,16(r5)
    8b8c:	00800044 	movi	r2,1
    8b90:	28800515 	stw	r2,20(r5)
    8b94:	f800283a 	ret
    8b98:	04801004 	movi	r18,64
    8b9c:	003fe006 	br	8b20 <__alt_mem_sram+0xf7e08b20>
    8ba0:	81000a17 	ldw	r4,40(r16)
    8ba4:	00c00074 	movhi	r3,1
    8ba8:	18ebd004 	addi	r3,r3,-20672
    8bac:	20ffc51e 	bne	r4,r3,8ac4 <__alt_mem_sram+0xf7e08ac4>
    8bb0:	80c0030b 	ldhu	r3,12(r16)
    8bb4:	01010004 	movi	r4,1024
    8bb8:	81001315 	stw	r4,76(r16)
    8bbc:	1906b03a 	or	r3,r3,r4
    8bc0:	80c0030d 	sth	r3,12(r16)
    8bc4:	003fc206 	br	8ad0 <__alt_mem_sram+0xf7e08ad0>
    8bc8:	0027883a 	mov	r19,zero
    8bcc:	04810004 	movi	r18,1024
    8bd0:	003fd606 	br	8b2c <__alt_mem_sram+0xf7e08b2c>
    8bd4:	8140038f 	ldh	r5,14(r16)
    8bd8:	8809883a 	mov	r4,r17
    8bdc:	000c9980 	call	c998 <_isatty_r>
    8be0:	103fe026 	beq	r2,zero,8b64 <__alt_mem_sram+0xf7e08b64>
    8be4:	8080030b 	ldhu	r2,12(r16)
    8be8:	10800054 	ori	r2,r2,1
    8bec:	8080030d 	sth	r2,12(r16)
    8bf0:	003fdc06 	br	8b64 <__alt_mem_sram+0xf7e08b64>
    8bf4:	8080030b 	ldhu	r2,12(r16)
    8bf8:	10c0800c 	andi	r3,r2,512
    8bfc:	183fd91e 	bne	r3,zero,8b64 <__alt_mem_sram+0xf7e08b64>
    8c00:	10800094 	ori	r2,r2,2
    8c04:	80c010c4 	addi	r3,r16,67
    8c08:	8080030d 	sth	r2,12(r16)
    8c0c:	00800044 	movi	r2,1
    8c10:	80c00015 	stw	r3,0(r16)
    8c14:	80c00415 	stw	r3,16(r16)
    8c18:	80800515 	stw	r2,20(r16)
    8c1c:	003fd106 	br	8b64 <__alt_mem_sram+0xf7e08b64>
    8c20:	04c00044 	movi	r19,1
    8c24:	04810004 	movi	r18,1024
    8c28:	003fc006 	br	8b2c <__alt_mem_sram+0xf7e08b2c>

00008c2c <_malloc_r>:
    8c2c:	defff504 	addi	sp,sp,-44
    8c30:	dc800315 	stw	r18,12(sp)
    8c34:	dfc00a15 	stw	ra,40(sp)
    8c38:	df000915 	stw	fp,36(sp)
    8c3c:	ddc00815 	stw	r23,32(sp)
    8c40:	dd800715 	stw	r22,28(sp)
    8c44:	dd400615 	stw	r21,24(sp)
    8c48:	dd000515 	stw	r20,20(sp)
    8c4c:	dcc00415 	stw	r19,16(sp)
    8c50:	dc400215 	stw	r17,8(sp)
    8c54:	dc000115 	stw	r16,4(sp)
    8c58:	288002c4 	addi	r2,r5,11
    8c5c:	00c00584 	movi	r3,22
    8c60:	2025883a 	mov	r18,r4
    8c64:	18802a2e 	bgeu	r3,r2,8d10 <_malloc_r+0xe4>
    8c68:	047ffe04 	movi	r17,-8
    8c6c:	1462703a 	and	r17,r2,r17
    8c70:	88009e16 	blt	r17,zero,8eec <_malloc_r+0x2c0>
    8c74:	89409d36 	bltu	r17,r5,8eec <_malloc_r+0x2c0>
    8c78:	00106500 	call	10650 <__malloc_lock>
    8c7c:	00807dc4 	movi	r2,503
    8c80:	14402736 	bltu	r2,r17,8d20 <_malloc_r+0xf4>
    8c84:	8806d0fa 	srli	r3,r17,3
    8c88:	04c00074 	movhi	r19,1
    8c8c:	9cce4604 	addi	r19,r19,14616
    8c90:	18c5883a 	add	r2,r3,r3
    8c94:	1085883a 	add	r2,r2,r2
    8c98:	1085883a 	add	r2,r2,r2
    8c9c:	9885883a 	add	r2,r19,r2
    8ca0:	14000317 	ldw	r16,12(r2)
    8ca4:	80814a26 	beq	r16,r2,91d0 <_malloc_r+0x5a4>
    8ca8:	80c00117 	ldw	r3,4(r16)
    8cac:	81000317 	ldw	r4,12(r16)
    8cb0:	00bfff04 	movi	r2,-4
    8cb4:	1884703a 	and	r2,r3,r2
    8cb8:	81400217 	ldw	r5,8(r16)
    8cbc:	8085883a 	add	r2,r16,r2
    8cc0:	10c00117 	ldw	r3,4(r2)
    8cc4:	29000315 	stw	r4,12(r5)
    8cc8:	21400215 	stw	r5,8(r4)
    8ccc:	18c00054 	ori	r3,r3,1
    8cd0:	10c00115 	stw	r3,4(r2)
    8cd4:	9009883a 	mov	r4,r18
    8cd8:	00106700 	call	10670 <__malloc_unlock>
    8cdc:	80800204 	addi	r2,r16,8
    8ce0:	dfc00a17 	ldw	ra,40(sp)
    8ce4:	df000917 	ldw	fp,36(sp)
    8ce8:	ddc00817 	ldw	r23,32(sp)
    8cec:	dd800717 	ldw	r22,28(sp)
    8cf0:	dd400617 	ldw	r21,24(sp)
    8cf4:	dd000517 	ldw	r20,20(sp)
    8cf8:	dcc00417 	ldw	r19,16(sp)
    8cfc:	dc800317 	ldw	r18,12(sp)
    8d00:	dc400217 	ldw	r17,8(sp)
    8d04:	dc000117 	ldw	r16,4(sp)
    8d08:	dec00b04 	addi	sp,sp,44
    8d0c:	f800283a 	ret
    8d10:	04400404 	movi	r17,16
    8d14:	89407536 	bltu	r17,r5,8eec <_malloc_r+0x2c0>
    8d18:	00106500 	call	10650 <__malloc_lock>
    8d1c:	003fd906 	br	8c84 <__alt_mem_sram+0xf7e08c84>
    8d20:	8806d27a 	srli	r3,r17,9
    8d24:	18007526 	beq	r3,zero,8efc <_malloc_r+0x2d0>
    8d28:	00800104 	movi	r2,4
    8d2c:	10c0ef36 	bltu	r2,r3,90ec <_malloc_r+0x4c0>
    8d30:	8806d1ba 	srli	r3,r17,6
    8d34:	19c00e04 	addi	r7,r3,56
    8d38:	39cb883a 	add	r5,r7,r7
    8d3c:	04c00074 	movhi	r19,1
    8d40:	294b883a 	add	r5,r5,r5
    8d44:	9cce4604 	addi	r19,r19,14616
    8d48:	294b883a 	add	r5,r5,r5
    8d4c:	994b883a 	add	r5,r19,r5
    8d50:	2c000317 	ldw	r16,12(r5)
    8d54:	2c000e26 	beq	r5,r16,8d90 <_malloc_r+0x164>
    8d58:	80800117 	ldw	r2,4(r16)
    8d5c:	01bfff04 	movi	r6,-4
    8d60:	010003c4 	movi	r4,15
    8d64:	1184703a 	and	r2,r2,r6
    8d68:	1447c83a 	sub	r3,r2,r17
    8d6c:	20c00716 	blt	r4,r3,8d8c <_malloc_r+0x160>
    8d70:	1800650e 	bge	r3,zero,8f08 <_malloc_r+0x2dc>
    8d74:	84000317 	ldw	r16,12(r16)
    8d78:	2c000526 	beq	r5,r16,8d90 <_malloc_r+0x164>
    8d7c:	80800117 	ldw	r2,4(r16)
    8d80:	1184703a 	and	r2,r2,r6
    8d84:	1447c83a 	sub	r3,r2,r17
    8d88:	20fff90e 	bge	r4,r3,8d70 <__alt_mem_sram+0xf7e08d70>
    8d8c:	39ffffc4 	addi	r7,r7,-1
    8d90:	38c00044 	addi	r3,r7,1
    8d94:	01800074 	movhi	r6,1
    8d98:	9c000417 	ldw	r16,16(r19)
    8d9c:	318e4604 	addi	r6,r6,14616
    8da0:	32400204 	addi	r9,r6,8
    8da4:	82410326 	beq	r16,r9,91b4 <_malloc_r+0x588>
    8da8:	81000117 	ldw	r4,4(r16)
    8dac:	00bfff04 	movi	r2,-4
    8db0:	208e703a 	and	r7,r4,r2
    8db4:	3c45c83a 	sub	r2,r7,r17
    8db8:	010003c4 	movi	r4,15
    8dbc:	2080ee16 	blt	r4,r2,9178 <_malloc_r+0x54c>
    8dc0:	32400515 	stw	r9,20(r6)
    8dc4:	32400415 	stw	r9,16(r6)
    8dc8:	1000510e 	bge	r2,zero,8f10 <_malloc_r+0x2e4>
    8dcc:	00807fc4 	movi	r2,511
    8dd0:	11c0ce36 	bltu	r2,r7,910c <_malloc_r+0x4e0>
    8dd4:	3808d0fa 	srli	r4,r7,3
    8dd8:	01c00044 	movi	r7,1
    8ddc:	30800117 	ldw	r2,4(r6)
    8de0:	210b883a 	add	r5,r4,r4
    8de4:	294b883a 	add	r5,r5,r5
    8de8:	2009d0ba 	srai	r4,r4,2
    8dec:	294b883a 	add	r5,r5,r5
    8df0:	298b883a 	add	r5,r5,r6
    8df4:	2a000217 	ldw	r8,8(r5)
    8df8:	3908983a 	sll	r4,r7,r4
    8dfc:	81400315 	stw	r5,12(r16)
    8e00:	82000215 	stw	r8,8(r16)
    8e04:	2088b03a 	or	r4,r4,r2
    8e08:	2c000215 	stw	r16,8(r5)
    8e0c:	31000115 	stw	r4,4(r6)
    8e10:	44000315 	stw	r16,12(r8)
    8e14:	1805d0ba 	srai	r2,r3,2
    8e18:	01400044 	movi	r5,1
    8e1c:	288a983a 	sll	r5,r5,r2
    8e20:	21404336 	bltu	r4,r5,8f30 <_malloc_r+0x304>
    8e24:	2144703a 	and	r2,r4,r5
    8e28:	10000a1e 	bne	r2,zero,8e54 <_malloc_r+0x228>
    8e2c:	00bfff04 	movi	r2,-4
    8e30:	294b883a 	add	r5,r5,r5
    8e34:	1886703a 	and	r3,r3,r2
    8e38:	2144703a 	and	r2,r4,r5
    8e3c:	18c00104 	addi	r3,r3,4
    8e40:	1000041e 	bne	r2,zero,8e54 <_malloc_r+0x228>
    8e44:	294b883a 	add	r5,r5,r5
    8e48:	2144703a 	and	r2,r4,r5
    8e4c:	18c00104 	addi	r3,r3,4
    8e50:	103ffc26 	beq	r2,zero,8e44 <__alt_mem_sram+0xf7e08e44>
    8e54:	023fff04 	movi	r8,-4
    8e58:	01c003c4 	movi	r7,15
    8e5c:	18c5883a 	add	r2,r3,r3
    8e60:	1085883a 	add	r2,r2,r2
    8e64:	1085883a 	add	r2,r2,r2
    8e68:	9895883a 	add	r10,r19,r2
    8e6c:	52c00304 	addi	r11,r10,12
    8e70:	1819883a 	mov	r12,r3
    8e74:	5c000017 	ldw	r16,0(r11)
    8e78:	59bffd04 	addi	r6,r11,-12
    8e7c:	8180041e 	bne	r16,r6,8e90 <_malloc_r+0x264>
    8e80:	0000ce06 	br	91bc <_malloc_r+0x590>
    8e84:	2000d70e 	bge	r4,zero,91e4 <_malloc_r+0x5b8>
    8e88:	84000317 	ldw	r16,12(r16)
    8e8c:	8180cb26 	beq	r16,r6,91bc <_malloc_r+0x590>
    8e90:	80800117 	ldw	r2,4(r16)
    8e94:	1204703a 	and	r2,r2,r8
    8e98:	1449c83a 	sub	r4,r2,r17
    8e9c:	393ff90e 	bge	r7,r4,8e84 <__alt_mem_sram+0xf7e08e84>
    8ea0:	80800317 	ldw	r2,12(r16)
    8ea4:	80c00217 	ldw	r3,8(r16)
    8ea8:	89400054 	ori	r5,r17,1
    8eac:	81400115 	stw	r5,4(r16)
    8eb0:	18800315 	stw	r2,12(r3)
    8eb4:	10c00215 	stw	r3,8(r2)
    8eb8:	8463883a 	add	r17,r16,r17
    8ebc:	9c400515 	stw	r17,20(r19)
    8ec0:	9c400415 	stw	r17,16(r19)
    8ec4:	20800054 	ori	r2,r4,1
    8ec8:	88800115 	stw	r2,4(r17)
    8ecc:	8a400315 	stw	r9,12(r17)
    8ed0:	8a400215 	stw	r9,8(r17)
    8ed4:	8923883a 	add	r17,r17,r4
    8ed8:	89000015 	stw	r4,0(r17)
    8edc:	9009883a 	mov	r4,r18
    8ee0:	00106700 	call	10670 <__malloc_unlock>
    8ee4:	80800204 	addi	r2,r16,8
    8ee8:	003f7d06 	br	8ce0 <__alt_mem_sram+0xf7e08ce0>
    8eec:	00800304 	movi	r2,12
    8ef0:	90800015 	stw	r2,0(r18)
    8ef4:	0005883a 	mov	r2,zero
    8ef8:	003f7906 	br	8ce0 <__alt_mem_sram+0xf7e08ce0>
    8efc:	01401f84 	movi	r5,126
    8f00:	01c00fc4 	movi	r7,63
    8f04:	003f8d06 	br	8d3c <__alt_mem_sram+0xf7e08d3c>
    8f08:	81000317 	ldw	r4,12(r16)
    8f0c:	003f6a06 	br	8cb8 <__alt_mem_sram+0xf7e08cb8>
    8f10:	81c5883a 	add	r2,r16,r7
    8f14:	10c00117 	ldw	r3,4(r2)
    8f18:	9009883a 	mov	r4,r18
    8f1c:	18c00054 	ori	r3,r3,1
    8f20:	10c00115 	stw	r3,4(r2)
    8f24:	00106700 	call	10670 <__malloc_unlock>
    8f28:	80800204 	addi	r2,r16,8
    8f2c:	003f6c06 	br	8ce0 <__alt_mem_sram+0xf7e08ce0>
    8f30:	9c000217 	ldw	r16,8(r19)
    8f34:	00bfff04 	movi	r2,-4
    8f38:	85800117 	ldw	r22,4(r16)
    8f3c:	b0ac703a 	and	r22,r22,r2
    8f40:	b4400336 	bltu	r22,r17,8f50 <_malloc_r+0x324>
    8f44:	b445c83a 	sub	r2,r22,r17
    8f48:	00c003c4 	movi	r3,15
    8f4c:	18805d16 	blt	r3,r2,90c4 <_malloc_r+0x498>
    8f50:	05c00074 	movhi	r23,1
    8f54:	00800074 	movhi	r2,1
    8f58:	bdd3cd04 	addi	r23,r23,20276
    8f5c:	109a9b04 	addi	r2,r2,27244
    8f60:	15400017 	ldw	r21,0(r2)
    8f64:	b9000017 	ldw	r4,0(r23)
    8f68:	00ffffc4 	movi	r3,-1
    8f6c:	858d883a 	add	r6,r16,r22
    8f70:	8d6b883a 	add	r21,r17,r21
    8f74:	20c0e426 	beq	r4,r3,9308 <_malloc_r+0x6dc>
    8f78:	ad4403c4 	addi	r21,r21,4111
    8f7c:	00fc0004 	movi	r3,-4096
    8f80:	a8ea703a 	and	r21,r21,r3
    8f84:	9009883a 	mov	r4,r18
    8f88:	a80b883a 	mov	r5,r21
    8f8c:	d9800015 	stw	r6,0(sp)
    8f90:	000ae140 	call	ae14 <_sbrk_r>
    8f94:	00ffffc4 	movi	r3,-1
    8f98:	1029883a 	mov	r20,r2
    8f9c:	d9800017 	ldw	r6,0(sp)
    8fa0:	10c0a426 	beq	r2,r3,9234 <_malloc_r+0x608>
    8fa4:	1180a236 	bltu	r2,r6,9230 <_malloc_r+0x604>
    8fa8:	07000074 	movhi	fp,1
    8fac:	e71aa304 	addi	fp,fp,27276
    8fb0:	e0c00017 	ldw	r3,0(fp)
    8fb4:	a8c7883a 	add	r3,r21,r3
    8fb8:	e0c00015 	stw	r3,0(fp)
    8fbc:	3500da26 	beq	r6,r20,9328 <_malloc_r+0x6fc>
    8fc0:	b9000017 	ldw	r4,0(r23)
    8fc4:	00bfffc4 	movi	r2,-1
    8fc8:	2080e426 	beq	r4,r2,935c <_malloc_r+0x730>
    8fcc:	a185c83a 	sub	r2,r20,r6
    8fd0:	1885883a 	add	r2,r3,r2
    8fd4:	e0800015 	stw	r2,0(fp)
    8fd8:	a0c001cc 	andi	r3,r20,7
    8fdc:	1800b526 	beq	r3,zero,92b4 <_malloc_r+0x688>
    8fe0:	a0e9c83a 	sub	r20,r20,r3
    8fe4:	00840204 	movi	r2,4104
    8fe8:	a5000204 	addi	r20,r20,8
    8fec:	10c7c83a 	sub	r3,r2,r3
    8ff0:	a545883a 	add	r2,r20,r21
    8ff4:	1083ffcc 	andi	r2,r2,4095
    8ff8:	18abc83a 	sub	r21,r3,r2
    8ffc:	9009883a 	mov	r4,r18
    9000:	a80b883a 	mov	r5,r21
    9004:	000ae140 	call	ae14 <_sbrk_r>
    9008:	00ffffc4 	movi	r3,-1
    900c:	10c0d026 	beq	r2,r3,9350 <_malloc_r+0x724>
    9010:	1507c83a 	sub	r3,r2,r20
    9014:	a8c7883a 	add	r3,r21,r3
    9018:	18c00054 	ori	r3,r3,1
    901c:	e0800017 	ldw	r2,0(fp)
    9020:	9d000215 	stw	r20,8(r19)
    9024:	a0c00115 	stw	r3,4(r20)
    9028:	a887883a 	add	r3,r21,r2
    902c:	e0c00015 	stw	r3,0(fp)
    9030:	84c00e26 	beq	r16,r19,906c <_malloc_r+0x440>
    9034:	018003c4 	movi	r6,15
    9038:	3580a02e 	bgeu	r6,r22,92bc <_malloc_r+0x690>
    903c:	81400117 	ldw	r5,4(r16)
    9040:	013ffe04 	movi	r4,-8
    9044:	b0bffd04 	addi	r2,r22,-12
    9048:	1104703a 	and	r2,r2,r4
    904c:	2900004c 	andi	r4,r5,1
    9050:	1108b03a 	or	r4,r2,r4
    9054:	81000115 	stw	r4,4(r16)
    9058:	01400144 	movi	r5,5
    905c:	8089883a 	add	r4,r16,r2
    9060:	21400115 	stw	r5,4(r4)
    9064:	21400215 	stw	r5,8(r4)
    9068:	3080c036 	bltu	r6,r2,936c <_malloc_r+0x740>
    906c:	00800074 	movhi	r2,1
    9070:	109a9a04 	addi	r2,r2,27240
    9074:	11000017 	ldw	r4,0(r2)
    9078:	20c0012e 	bgeu	r4,r3,9080 <_malloc_r+0x454>
    907c:	10c00015 	stw	r3,0(r2)
    9080:	00800074 	movhi	r2,1
    9084:	109a9904 	addi	r2,r2,27236
    9088:	11000017 	ldw	r4,0(r2)
    908c:	9c000217 	ldw	r16,8(r19)
    9090:	20c0012e 	bgeu	r4,r3,9098 <_malloc_r+0x46c>
    9094:	10c00015 	stw	r3,0(r2)
    9098:	80c00117 	ldw	r3,4(r16)
    909c:	00bfff04 	movi	r2,-4
    90a0:	1886703a 	and	r3,r3,r2
    90a4:	1c45c83a 	sub	r2,r3,r17
    90a8:	1c400236 	bltu	r3,r17,90b4 <_malloc_r+0x488>
    90ac:	00c003c4 	movi	r3,15
    90b0:	18800416 	blt	r3,r2,90c4 <_malloc_r+0x498>
    90b4:	9009883a 	mov	r4,r18
    90b8:	00106700 	call	10670 <__malloc_unlock>
    90bc:	0005883a 	mov	r2,zero
    90c0:	003f0706 	br	8ce0 <__alt_mem_sram+0xf7e08ce0>
    90c4:	88c00054 	ori	r3,r17,1
    90c8:	80c00115 	stw	r3,4(r16)
    90cc:	8463883a 	add	r17,r16,r17
    90d0:	10800054 	ori	r2,r2,1
    90d4:	9c400215 	stw	r17,8(r19)
    90d8:	88800115 	stw	r2,4(r17)
    90dc:	9009883a 	mov	r4,r18
    90e0:	00106700 	call	10670 <__malloc_unlock>
    90e4:	80800204 	addi	r2,r16,8
    90e8:	003efd06 	br	8ce0 <__alt_mem_sram+0xf7e08ce0>
    90ec:	00800504 	movi	r2,20
    90f0:	10c0482e 	bgeu	r2,r3,9214 <_malloc_r+0x5e8>
    90f4:	00801504 	movi	r2,84
    90f8:	10c06836 	bltu	r2,r3,929c <_malloc_r+0x670>
    90fc:	8806d33a 	srli	r3,r17,12
    9100:	19c01b84 	addi	r7,r3,110
    9104:	39cb883a 	add	r5,r7,r7
    9108:	003f0c06 	br	8d3c <__alt_mem_sram+0xf7e08d3c>
    910c:	3804d27a 	srli	r2,r7,9
    9110:	01000104 	movi	r4,4
    9114:	2080422e 	bgeu	r4,r2,9220 <_malloc_r+0x5f4>
    9118:	01000504 	movi	r4,20
    911c:	20807c36 	bltu	r4,r2,9310 <_malloc_r+0x6e4>
    9120:	110016c4 	addi	r4,r2,91
    9124:	210b883a 	add	r5,r4,r4
    9128:	294b883a 	add	r5,r5,r5
    912c:	294b883a 	add	r5,r5,r5
    9130:	994b883a 	add	r5,r19,r5
    9134:	28800217 	ldw	r2,8(r5)
    9138:	02000074 	movhi	r8,1
    913c:	420e4604 	addi	r8,r8,14616
    9140:	11406326 	beq	r2,r5,92d0 <_malloc_r+0x6a4>
    9144:	01bfff04 	movi	r6,-4
    9148:	11000117 	ldw	r4,4(r2)
    914c:	2188703a 	and	r4,r4,r6
    9150:	3900022e 	bgeu	r7,r4,915c <_malloc_r+0x530>
    9154:	10800217 	ldw	r2,8(r2)
    9158:	28bffb1e 	bne	r5,r2,9148 <__alt_mem_sram+0xf7e09148>
    915c:	11800317 	ldw	r6,12(r2)
    9160:	99000117 	ldw	r4,4(r19)
    9164:	81800315 	stw	r6,12(r16)
    9168:	80800215 	stw	r2,8(r16)
    916c:	34000215 	stw	r16,8(r6)
    9170:	14000315 	stw	r16,12(r2)
    9174:	003f2706 	br	8e14 <__alt_mem_sram+0xf7e08e14>
    9178:	88c00054 	ori	r3,r17,1
    917c:	80c00115 	stw	r3,4(r16)
    9180:	8463883a 	add	r17,r16,r17
    9184:	34400515 	stw	r17,20(r6)
    9188:	34400415 	stw	r17,16(r6)
    918c:	10c00054 	ori	r3,r2,1
    9190:	8a400315 	stw	r9,12(r17)
    9194:	8a400215 	stw	r9,8(r17)
    9198:	88c00115 	stw	r3,4(r17)
    919c:	88a3883a 	add	r17,r17,r2
    91a0:	88800015 	stw	r2,0(r17)
    91a4:	9009883a 	mov	r4,r18
    91a8:	00106700 	call	10670 <__malloc_unlock>
    91ac:	80800204 	addi	r2,r16,8
    91b0:	003ecb06 	br	8ce0 <__alt_mem_sram+0xf7e08ce0>
    91b4:	31000117 	ldw	r4,4(r6)
    91b8:	003f1606 	br	8e14 <__alt_mem_sram+0xf7e08e14>
    91bc:	63000044 	addi	r12,r12,1
    91c0:	608000cc 	andi	r2,r12,3
    91c4:	5ac00204 	addi	r11,r11,8
    91c8:	103f2a1e 	bne	r2,zero,8e74 <__alt_mem_sram+0xf7e08e74>
    91cc:	00002106 	br	9254 <_malloc_r+0x628>
    91d0:	80800204 	addi	r2,r16,8
    91d4:	84000517 	ldw	r16,20(r16)
    91d8:	143eb31e 	bne	r2,r16,8ca8 <__alt_mem_sram+0xf7e08ca8>
    91dc:	18c00084 	addi	r3,r3,2
    91e0:	003eec06 	br	8d94 <__alt_mem_sram+0xf7e08d94>
    91e4:	8085883a 	add	r2,r16,r2
    91e8:	10c00117 	ldw	r3,4(r2)
    91ec:	81000317 	ldw	r4,12(r16)
    91f0:	81400217 	ldw	r5,8(r16)
    91f4:	18c00054 	ori	r3,r3,1
    91f8:	10c00115 	stw	r3,4(r2)
    91fc:	29000315 	stw	r4,12(r5)
    9200:	21400215 	stw	r5,8(r4)
    9204:	9009883a 	mov	r4,r18
    9208:	00106700 	call	10670 <__malloc_unlock>
    920c:	80800204 	addi	r2,r16,8
    9210:	003eb306 	br	8ce0 <__alt_mem_sram+0xf7e08ce0>
    9214:	19c016c4 	addi	r7,r3,91
    9218:	39cb883a 	add	r5,r7,r7
    921c:	003ec706 	br	8d3c <__alt_mem_sram+0xf7e08d3c>
    9220:	3804d1ba 	srli	r2,r7,6
    9224:	11000e04 	addi	r4,r2,56
    9228:	210b883a 	add	r5,r4,r4
    922c:	003fbe06 	br	9128 <__alt_mem_sram+0xf7e09128>
    9230:	84ff5d26 	beq	r16,r19,8fa8 <__alt_mem_sram+0xf7e08fa8>
    9234:	9c000217 	ldw	r16,8(r19)
    9238:	00bfff04 	movi	r2,-4
    923c:	80c00117 	ldw	r3,4(r16)
    9240:	1886703a 	and	r3,r3,r2
    9244:	003f9706 	br	90a4 <__alt_mem_sram+0xf7e090a4>
    9248:	52800017 	ldw	r10,0(r10)
    924c:	18ffffc4 	addi	r3,r3,-1
    9250:	50805c1e 	bne	r10,r2,93c4 <_malloc_r+0x798>
    9254:	190000cc 	andi	r4,r3,3
    9258:	50bffe04 	addi	r2,r10,-8
    925c:	203ffa1e 	bne	r4,zero,9248 <__alt_mem_sram+0xf7e09248>
    9260:	98800117 	ldw	r2,4(r19)
    9264:	0146303a 	nor	r3,zero,r5
    9268:	1884703a 	and	r2,r3,r2
    926c:	98800115 	stw	r2,4(r19)
    9270:	294b883a 	add	r5,r5,r5
    9274:	117f2e36 	bltu	r2,r5,8f30 <__alt_mem_sram+0xf7e08f30>
    9278:	283f2d26 	beq	r5,zero,8f30 <__alt_mem_sram+0xf7e08f30>
    927c:	1146703a 	and	r3,r2,r5
    9280:	1800521e 	bne	r3,zero,93cc <_malloc_r+0x7a0>
    9284:	6007883a 	mov	r3,r12
    9288:	294b883a 	add	r5,r5,r5
    928c:	1148703a 	and	r4,r2,r5
    9290:	18c00104 	addi	r3,r3,4
    9294:	203ffc26 	beq	r4,zero,9288 <__alt_mem_sram+0xf7e09288>
    9298:	003ef006 	br	8e5c <__alt_mem_sram+0xf7e08e5c>
    929c:	00805504 	movi	r2,340
    92a0:	10c01336 	bltu	r2,r3,92f0 <_malloc_r+0x6c4>
    92a4:	8806d3fa 	srli	r3,r17,15
    92a8:	19c01dc4 	addi	r7,r3,119
    92ac:	39cb883a 	add	r5,r7,r7
    92b0:	003ea206 	br	8d3c <__alt_mem_sram+0xf7e08d3c>
    92b4:	00c40004 	movi	r3,4096
    92b8:	003f4d06 	br	8ff0 <__alt_mem_sram+0xf7e08ff0>
    92bc:	00800044 	movi	r2,1
    92c0:	a0800115 	stw	r2,4(r20)
    92c4:	a021883a 	mov	r16,r20
    92c8:	0007883a 	mov	r3,zero
    92cc:	003f7506 	br	90a4 <__alt_mem_sram+0xf7e090a4>
    92d0:	200bd0ba 	srai	r5,r4,2
    92d4:	01800044 	movi	r6,1
    92d8:	41000117 	ldw	r4,4(r8)
    92dc:	314a983a 	sll	r5,r6,r5
    92e0:	100d883a 	mov	r6,r2
    92e4:	2908b03a 	or	r4,r5,r4
    92e8:	41000115 	stw	r4,4(r8)
    92ec:	003f9d06 	br	9164 <__alt_mem_sram+0xf7e09164>
    92f0:	00815504 	movi	r2,1364
    92f4:	10c01336 	bltu	r2,r3,9344 <_malloc_r+0x718>
    92f8:	8806d4ba 	srli	r3,r17,18
    92fc:	19c01f04 	addi	r7,r3,124
    9300:	39cb883a 	add	r5,r7,r7
    9304:	003e8d06 	br	8d3c <__alt_mem_sram+0xf7e08d3c>
    9308:	ad400404 	addi	r21,r21,16
    930c:	003f1d06 	br	8f84 <__alt_mem_sram+0xf7e08f84>
    9310:	01001504 	movi	r4,84
    9314:	20801c36 	bltu	r4,r2,9388 <_malloc_r+0x75c>
    9318:	3804d33a 	srli	r2,r7,12
    931c:	11001b84 	addi	r4,r2,110
    9320:	210b883a 	add	r5,r4,r4
    9324:	003f8006 	br	9128 <__alt_mem_sram+0xf7e09128>
    9328:	3083ffcc 	andi	r2,r6,4095
    932c:	103f241e 	bne	r2,zero,8fc0 <__alt_mem_sram+0xf7e08fc0>
    9330:	99000217 	ldw	r4,8(r19)
    9334:	ad85883a 	add	r2,r21,r22
    9338:	10800054 	ori	r2,r2,1
    933c:	20800115 	stw	r2,4(r4)
    9340:	003f4a06 	br	906c <__alt_mem_sram+0xf7e0906c>
    9344:	01403f04 	movi	r5,252
    9348:	01c01f84 	movi	r7,126
    934c:	003e7b06 	br	8d3c <__alt_mem_sram+0xf7e08d3c>
    9350:	00c00044 	movi	r3,1
    9354:	002b883a 	mov	r21,zero
    9358:	003f3006 	br	901c <__alt_mem_sram+0xf7e0901c>
    935c:	00800074 	movhi	r2,1
    9360:	1093cd04 	addi	r2,r2,20276
    9364:	15000015 	stw	r20,0(r2)
    9368:	003f1b06 	br	8fd8 <__alt_mem_sram+0xf7e08fd8>
    936c:	9009883a 	mov	r4,r18
    9370:	81400204 	addi	r5,r16,8
    9374:	00080900 	call	8090 <_free_r>
    9378:	00800074 	movhi	r2,1
    937c:	109aa304 	addi	r2,r2,27276
    9380:	10c00017 	ldw	r3,0(r2)
    9384:	003f3906 	br	906c <__alt_mem_sram+0xf7e0906c>
    9388:	01005504 	movi	r4,340
    938c:	20800436 	bltu	r4,r2,93a0 <_malloc_r+0x774>
    9390:	3804d3fa 	srli	r2,r7,15
    9394:	11001dc4 	addi	r4,r2,119
    9398:	210b883a 	add	r5,r4,r4
    939c:	003f6206 	br	9128 <__alt_mem_sram+0xf7e09128>
    93a0:	01015504 	movi	r4,1364
    93a4:	20800436 	bltu	r4,r2,93b8 <_malloc_r+0x78c>
    93a8:	3804d4ba 	srli	r2,r7,18
    93ac:	11001f04 	addi	r4,r2,124
    93b0:	210b883a 	add	r5,r4,r4
    93b4:	003f5c06 	br	9128 <__alt_mem_sram+0xf7e09128>
    93b8:	01403f04 	movi	r5,252
    93bc:	01001f84 	movi	r4,126
    93c0:	003f5906 	br	9128 <__alt_mem_sram+0xf7e09128>
    93c4:	98800117 	ldw	r2,4(r19)
    93c8:	003fa906 	br	9270 <__alt_mem_sram+0xf7e09270>
    93cc:	6007883a 	mov	r3,r12
    93d0:	003ea206 	br	8e5c <__alt_mem_sram+0xf7e08e5c>

000093d4 <memchr>:
    93d4:	208000cc 	andi	r2,r4,3
    93d8:	280f883a 	mov	r7,r5
    93dc:	10003526 	beq	r2,zero,94b4 <memchr+0xe0>
    93e0:	30bfffc4 	addi	r2,r6,-1
    93e4:	30001b26 	beq	r6,zero,9454 <memchr+0x80>
    93e8:	21800003 	ldbu	r6,0(r4)
    93ec:	28c03fcc 	andi	r3,r5,255
    93f0:	30c01a26 	beq	r6,r3,945c <memchr+0x88>
    93f4:	180d883a 	mov	r6,r3
    93f8:	00000406 	br	940c <memchr+0x38>
    93fc:	10001526 	beq	r2,zero,9454 <memchr+0x80>
    9400:	20c00003 	ldbu	r3,0(r4)
    9404:	10bfffc4 	addi	r2,r2,-1
    9408:	19801426 	beq	r3,r6,945c <memchr+0x88>
    940c:	21000044 	addi	r4,r4,1
    9410:	20c000cc 	andi	r3,r4,3
    9414:	183ff91e 	bne	r3,zero,93fc <__alt_mem_sram+0xf7e093fc>
    9418:	024000c4 	movi	r9,3
    941c:	48801136 	bltu	r9,r2,9464 <memchr+0x90>
    9420:	10000c26 	beq	r2,zero,9454 <memchr+0x80>
    9424:	20c00003 	ldbu	r3,0(r4)
    9428:	29403fcc 	andi	r5,r5,255
    942c:	19400b26 	beq	r3,r5,945c <memchr+0x88>
    9430:	20c00044 	addi	r3,r4,1
    9434:	2085883a 	add	r2,r4,r2
    9438:	39803fcc 	andi	r6,r7,255
    943c:	00000306 	br	944c <memchr+0x78>
    9440:	18c00044 	addi	r3,r3,1
    9444:	197fffc3 	ldbu	r5,-1(r3)
    9448:	29800426 	beq	r5,r6,945c <memchr+0x88>
    944c:	1809883a 	mov	r4,r3
    9450:	18bffb1e 	bne	r3,r2,9440 <__alt_mem_sram+0xf7e09440>
    9454:	0005883a 	mov	r2,zero
    9458:	f800283a 	ret
    945c:	2005883a 	mov	r2,r4
    9460:	f800283a 	ret
    9464:	28c03fcc 	andi	r3,r5,255
    9468:	1810923a 	slli	r8,r3,8
    946c:	02ffbff4 	movhi	r11,65279
    9470:	02a02074 	movhi	r10,32897
    9474:	40c6b03a 	or	r3,r8,r3
    9478:	1810943a 	slli	r8,r3,16
    947c:	5affbfc4 	addi	r11,r11,-257
    9480:	52a02004 	addi	r10,r10,-32640
    9484:	40d0b03a 	or	r8,r8,r3
    9488:	20c00017 	ldw	r3,0(r4)
    948c:	40c6f03a 	xor	r3,r8,r3
    9490:	1acd883a 	add	r6,r3,r11
    9494:	00c6303a 	nor	r3,zero,r3
    9498:	30c6703a 	and	r3,r6,r3
    949c:	1a86703a 	and	r3,r3,r10
    94a0:	183fdf1e 	bne	r3,zero,9420 <__alt_mem_sram+0xf7e09420>
    94a4:	10bfff04 	addi	r2,r2,-4
    94a8:	21000104 	addi	r4,r4,4
    94ac:	48bff636 	bltu	r9,r2,9488 <__alt_mem_sram+0xf7e09488>
    94b0:	003fdb06 	br	9420 <__alt_mem_sram+0xf7e09420>
    94b4:	3005883a 	mov	r2,r6
    94b8:	003fd706 	br	9418 <__alt_mem_sram+0xf7e09418>

000094bc <memcpy>:
    94bc:	deffff04 	addi	sp,sp,-4
    94c0:	dc000015 	stw	r16,0(sp)
    94c4:	00c003c4 	movi	r3,15
    94c8:	2005883a 	mov	r2,r4
    94cc:	1980432e 	bgeu	r3,r6,95dc <memcpy+0x120>
    94d0:	2146b03a 	or	r3,r4,r5
    94d4:	18c000cc 	andi	r3,r3,3
    94d8:	1800421e 	bne	r3,zero,95e4 <memcpy+0x128>
    94dc:	343ffc04 	addi	r16,r6,-16
    94e0:	8020d13a 	srli	r16,r16,4
    94e4:	28c00104 	addi	r3,r5,4
    94e8:	23400104 	addi	r13,r4,4
    94ec:	801e913a 	slli	r15,r16,4
    94f0:	2b000204 	addi	r12,r5,8
    94f4:	22c00204 	addi	r11,r4,8
    94f8:	7bc00504 	addi	r15,r15,20
    94fc:	2a800304 	addi	r10,r5,12
    9500:	22400304 	addi	r9,r4,12
    9504:	2bdf883a 	add	r15,r5,r15
    9508:	2811883a 	mov	r8,r5
    950c:	200f883a 	mov	r7,r4
    9510:	41000017 	ldw	r4,0(r8)
    9514:	39c00404 	addi	r7,r7,16
    9518:	18c00404 	addi	r3,r3,16
    951c:	393ffc15 	stw	r4,-16(r7)
    9520:	1bbffc17 	ldw	r14,-16(r3)
    9524:	6b400404 	addi	r13,r13,16
    9528:	5ac00404 	addi	r11,r11,16
    952c:	6bbffc15 	stw	r14,-16(r13)
    9530:	63800017 	ldw	r14,0(r12)
    9534:	4a400404 	addi	r9,r9,16
    9538:	42000404 	addi	r8,r8,16
    953c:	5bbffc15 	stw	r14,-16(r11)
    9540:	53800017 	ldw	r14,0(r10)
    9544:	63000404 	addi	r12,r12,16
    9548:	52800404 	addi	r10,r10,16
    954c:	4bbffc15 	stw	r14,-16(r9)
    9550:	1bffef1e 	bne	r3,r15,9510 <__alt_mem_sram+0xf7e09510>
    9554:	81c00044 	addi	r7,r16,1
    9558:	380e913a 	slli	r7,r7,4
    955c:	310003cc 	andi	r4,r6,15
    9560:	02c000c4 	movi	r11,3
    9564:	11c7883a 	add	r3,r2,r7
    9568:	29cb883a 	add	r5,r5,r7
    956c:	59001f2e 	bgeu	r11,r4,95ec <memcpy+0x130>
    9570:	1813883a 	mov	r9,r3
    9574:	2811883a 	mov	r8,r5
    9578:	200f883a 	mov	r7,r4
    957c:	42800017 	ldw	r10,0(r8)
    9580:	4a400104 	addi	r9,r9,4
    9584:	39ffff04 	addi	r7,r7,-4
    9588:	4abfff15 	stw	r10,-4(r9)
    958c:	42000104 	addi	r8,r8,4
    9590:	59fffa36 	bltu	r11,r7,957c <__alt_mem_sram+0xf7e0957c>
    9594:	213fff04 	addi	r4,r4,-4
    9598:	2008d0ba 	srli	r4,r4,2
    959c:	318000cc 	andi	r6,r6,3
    95a0:	21000044 	addi	r4,r4,1
    95a4:	2109883a 	add	r4,r4,r4
    95a8:	2109883a 	add	r4,r4,r4
    95ac:	1907883a 	add	r3,r3,r4
    95b0:	290b883a 	add	r5,r5,r4
    95b4:	30000626 	beq	r6,zero,95d0 <memcpy+0x114>
    95b8:	198d883a 	add	r6,r3,r6
    95bc:	29c00003 	ldbu	r7,0(r5)
    95c0:	18c00044 	addi	r3,r3,1
    95c4:	29400044 	addi	r5,r5,1
    95c8:	19ffffc5 	stb	r7,-1(r3)
    95cc:	19bffb1e 	bne	r3,r6,95bc <__alt_mem_sram+0xf7e095bc>
    95d0:	dc000017 	ldw	r16,0(sp)
    95d4:	dec00104 	addi	sp,sp,4
    95d8:	f800283a 	ret
    95dc:	2007883a 	mov	r3,r4
    95e0:	003ff406 	br	95b4 <__alt_mem_sram+0xf7e095b4>
    95e4:	2007883a 	mov	r3,r4
    95e8:	003ff306 	br	95b8 <__alt_mem_sram+0xf7e095b8>
    95ec:	200d883a 	mov	r6,r4
    95f0:	003ff006 	br	95b4 <__alt_mem_sram+0xf7e095b4>

000095f4 <memmove>:
    95f4:	2005883a 	mov	r2,r4
    95f8:	29000b2e 	bgeu	r5,r4,9628 <memmove+0x34>
    95fc:	298f883a 	add	r7,r5,r6
    9600:	21c0092e 	bgeu	r4,r7,9628 <memmove+0x34>
    9604:	2187883a 	add	r3,r4,r6
    9608:	198bc83a 	sub	r5,r3,r6
    960c:	30004b26 	beq	r6,zero,973c <memmove+0x148>
    9610:	39ffffc4 	addi	r7,r7,-1
    9614:	39000003 	ldbu	r4,0(r7)
    9618:	18ffffc4 	addi	r3,r3,-1
    961c:	19000005 	stb	r4,0(r3)
    9620:	197ffb1e 	bne	r3,r5,9610 <__alt_mem_sram+0xf7e09610>
    9624:	f800283a 	ret
    9628:	00c003c4 	movi	r3,15
    962c:	1980412e 	bgeu	r3,r6,9734 <memmove+0x140>
    9630:	1146b03a 	or	r3,r2,r5
    9634:	18c000cc 	andi	r3,r3,3
    9638:	1800411e 	bne	r3,zero,9740 <memmove+0x14c>
    963c:	33fffc04 	addi	r15,r6,-16
    9640:	781ed13a 	srli	r15,r15,4
    9644:	28c00104 	addi	r3,r5,4
    9648:	13400104 	addi	r13,r2,4
    964c:	781c913a 	slli	r14,r15,4
    9650:	2b000204 	addi	r12,r5,8
    9654:	12c00204 	addi	r11,r2,8
    9658:	73800504 	addi	r14,r14,20
    965c:	2a800304 	addi	r10,r5,12
    9660:	12400304 	addi	r9,r2,12
    9664:	2b9d883a 	add	r14,r5,r14
    9668:	2811883a 	mov	r8,r5
    966c:	100f883a 	mov	r7,r2
    9670:	41000017 	ldw	r4,0(r8)
    9674:	39c00404 	addi	r7,r7,16
    9678:	18c00404 	addi	r3,r3,16
    967c:	393ffc15 	stw	r4,-16(r7)
    9680:	193ffc17 	ldw	r4,-16(r3)
    9684:	6b400404 	addi	r13,r13,16
    9688:	5ac00404 	addi	r11,r11,16
    968c:	693ffc15 	stw	r4,-16(r13)
    9690:	61000017 	ldw	r4,0(r12)
    9694:	4a400404 	addi	r9,r9,16
    9698:	42000404 	addi	r8,r8,16
    969c:	593ffc15 	stw	r4,-16(r11)
    96a0:	51000017 	ldw	r4,0(r10)
    96a4:	63000404 	addi	r12,r12,16
    96a8:	52800404 	addi	r10,r10,16
    96ac:	493ffc15 	stw	r4,-16(r9)
    96b0:	1bbfef1e 	bne	r3,r14,9670 <__alt_mem_sram+0xf7e09670>
    96b4:	79000044 	addi	r4,r15,1
    96b8:	2008913a 	slli	r4,r4,4
    96bc:	328003cc 	andi	r10,r6,15
    96c0:	02c000c4 	movi	r11,3
    96c4:	1107883a 	add	r3,r2,r4
    96c8:	290b883a 	add	r5,r5,r4
    96cc:	5a801e2e 	bgeu	r11,r10,9748 <memmove+0x154>
    96d0:	1813883a 	mov	r9,r3
    96d4:	2811883a 	mov	r8,r5
    96d8:	500f883a 	mov	r7,r10
    96dc:	41000017 	ldw	r4,0(r8)
    96e0:	4a400104 	addi	r9,r9,4
    96e4:	39ffff04 	addi	r7,r7,-4
    96e8:	493fff15 	stw	r4,-4(r9)
    96ec:	42000104 	addi	r8,r8,4
    96f0:	59fffa36 	bltu	r11,r7,96dc <__alt_mem_sram+0xf7e096dc>
    96f4:	513fff04 	addi	r4,r10,-4
    96f8:	2008d0ba 	srli	r4,r4,2
    96fc:	318000cc 	andi	r6,r6,3
    9700:	21000044 	addi	r4,r4,1
    9704:	2109883a 	add	r4,r4,r4
    9708:	2109883a 	add	r4,r4,r4
    970c:	1907883a 	add	r3,r3,r4
    9710:	290b883a 	add	r5,r5,r4
    9714:	30000926 	beq	r6,zero,973c <memmove+0x148>
    9718:	198d883a 	add	r6,r3,r6
    971c:	29c00003 	ldbu	r7,0(r5)
    9720:	18c00044 	addi	r3,r3,1
    9724:	29400044 	addi	r5,r5,1
    9728:	19ffffc5 	stb	r7,-1(r3)
    972c:	19bffb1e 	bne	r3,r6,971c <__alt_mem_sram+0xf7e0971c>
    9730:	f800283a 	ret
    9734:	1007883a 	mov	r3,r2
    9738:	003ff606 	br	9714 <__alt_mem_sram+0xf7e09714>
    973c:	f800283a 	ret
    9740:	1007883a 	mov	r3,r2
    9744:	003ff406 	br	9718 <__alt_mem_sram+0xf7e09718>
    9748:	500d883a 	mov	r6,r10
    974c:	003ff106 	br	9714 <__alt_mem_sram+0xf7e09714>

00009750 <memset>:
    9750:	20c000cc 	andi	r3,r4,3
    9754:	2005883a 	mov	r2,r4
    9758:	18004326 	beq	r3,zero,9868 <memset+0x118>
    975c:	31ffffc4 	addi	r7,r6,-1
    9760:	30004026 	beq	r6,zero,9864 <memset+0x114>
    9764:	2813883a 	mov	r9,r5
    9768:	200d883a 	mov	r6,r4
    976c:	2007883a 	mov	r3,r4
    9770:	00000406 	br	9784 <memset+0x34>
    9774:	3a3fffc4 	addi	r8,r7,-1
    9778:	31800044 	addi	r6,r6,1
    977c:	38003926 	beq	r7,zero,9864 <memset+0x114>
    9780:	400f883a 	mov	r7,r8
    9784:	18c00044 	addi	r3,r3,1
    9788:	32400005 	stb	r9,0(r6)
    978c:	1a0000cc 	andi	r8,r3,3
    9790:	403ff81e 	bne	r8,zero,9774 <__alt_mem_sram+0xf7e09774>
    9794:	010000c4 	movi	r4,3
    9798:	21c02d2e 	bgeu	r4,r7,9850 <memset+0x100>
    979c:	29803fcc 	andi	r6,r5,255
    97a0:	3008923a 	slli	r4,r6,8
    97a4:	218cb03a 	or	r6,r4,r6
    97a8:	3008943a 	slli	r4,r6,16
    97ac:	218cb03a 	or	r6,r4,r6
    97b0:	010003c4 	movi	r4,15
    97b4:	21c0182e 	bgeu	r4,r7,9818 <memset+0xc8>
    97b8:	3b3ffc04 	addi	r12,r7,-16
    97bc:	6018d13a 	srli	r12,r12,4
    97c0:	1a000104 	addi	r8,r3,4
    97c4:	1ac00204 	addi	r11,r3,8
    97c8:	6008913a 	slli	r4,r12,4
    97cc:	1a800304 	addi	r10,r3,12
    97d0:	1813883a 	mov	r9,r3
    97d4:	21000504 	addi	r4,r4,20
    97d8:	1909883a 	add	r4,r3,r4
    97dc:	49800015 	stw	r6,0(r9)
    97e0:	41800015 	stw	r6,0(r8)
    97e4:	59800015 	stw	r6,0(r11)
    97e8:	51800015 	stw	r6,0(r10)
    97ec:	42000404 	addi	r8,r8,16
    97f0:	4a400404 	addi	r9,r9,16
    97f4:	5ac00404 	addi	r11,r11,16
    97f8:	52800404 	addi	r10,r10,16
    97fc:	413ff71e 	bne	r8,r4,97dc <__alt_mem_sram+0xf7e097dc>
    9800:	63000044 	addi	r12,r12,1
    9804:	6018913a 	slli	r12,r12,4
    9808:	39c003cc 	andi	r7,r7,15
    980c:	010000c4 	movi	r4,3
    9810:	1b07883a 	add	r3,r3,r12
    9814:	21c00e2e 	bgeu	r4,r7,9850 <memset+0x100>
    9818:	1813883a 	mov	r9,r3
    981c:	3811883a 	mov	r8,r7
    9820:	010000c4 	movi	r4,3
    9824:	49800015 	stw	r6,0(r9)
    9828:	423fff04 	addi	r8,r8,-4
    982c:	4a400104 	addi	r9,r9,4
    9830:	223ffc36 	bltu	r4,r8,9824 <__alt_mem_sram+0xf7e09824>
    9834:	393fff04 	addi	r4,r7,-4
    9838:	2008d0ba 	srli	r4,r4,2
    983c:	39c000cc 	andi	r7,r7,3
    9840:	21000044 	addi	r4,r4,1
    9844:	2109883a 	add	r4,r4,r4
    9848:	2109883a 	add	r4,r4,r4
    984c:	1907883a 	add	r3,r3,r4
    9850:	38000426 	beq	r7,zero,9864 <memset+0x114>
    9854:	19cf883a 	add	r7,r3,r7
    9858:	19400005 	stb	r5,0(r3)
    985c:	18c00044 	addi	r3,r3,1
    9860:	19fffd1e 	bne	r3,r7,9858 <__alt_mem_sram+0xf7e09858>
    9864:	f800283a 	ret
    9868:	2007883a 	mov	r3,r4
    986c:	300f883a 	mov	r7,r6
    9870:	003fc806 	br	9794 <__alt_mem_sram+0xf7e09794>

00009874 <_Balloc>:
    9874:	20801317 	ldw	r2,76(r4)
    9878:	defffc04 	addi	sp,sp,-16
    987c:	dc400115 	stw	r17,4(sp)
    9880:	dc000015 	stw	r16,0(sp)
    9884:	dfc00315 	stw	ra,12(sp)
    9888:	dc800215 	stw	r18,8(sp)
    988c:	2023883a 	mov	r17,r4
    9890:	2821883a 	mov	r16,r5
    9894:	10000f26 	beq	r2,zero,98d4 <_Balloc+0x60>
    9898:	8407883a 	add	r3,r16,r16
    989c:	18c7883a 	add	r3,r3,r3
    98a0:	10c7883a 	add	r3,r2,r3
    98a4:	18800017 	ldw	r2,0(r3)
    98a8:	10001126 	beq	r2,zero,98f0 <_Balloc+0x7c>
    98ac:	11000017 	ldw	r4,0(r2)
    98b0:	19000015 	stw	r4,0(r3)
    98b4:	10000415 	stw	zero,16(r2)
    98b8:	10000315 	stw	zero,12(r2)
    98bc:	dfc00317 	ldw	ra,12(sp)
    98c0:	dc800217 	ldw	r18,8(sp)
    98c4:	dc400117 	ldw	r17,4(sp)
    98c8:	dc000017 	ldw	r16,0(sp)
    98cc:	dec00404 	addi	sp,sp,16
    98d0:	f800283a 	ret
    98d4:	01400104 	movi	r5,4
    98d8:	01800844 	movi	r6,33
    98dc:	000c58c0 	call	c58c <_calloc_r>
    98e0:	88801315 	stw	r2,76(r17)
    98e4:	103fec1e 	bne	r2,zero,9898 <__alt_mem_sram+0xf7e09898>
    98e8:	0005883a 	mov	r2,zero
    98ec:	003ff306 	br	98bc <__alt_mem_sram+0xf7e098bc>
    98f0:	01400044 	movi	r5,1
    98f4:	2c24983a 	sll	r18,r5,r16
    98f8:	8809883a 	mov	r4,r17
    98fc:	91800144 	addi	r6,r18,5
    9900:	318d883a 	add	r6,r6,r6
    9904:	318d883a 	add	r6,r6,r6
    9908:	000c58c0 	call	c58c <_calloc_r>
    990c:	103ff626 	beq	r2,zero,98e8 <__alt_mem_sram+0xf7e098e8>
    9910:	14000115 	stw	r16,4(r2)
    9914:	14800215 	stw	r18,8(r2)
    9918:	003fe606 	br	98b4 <__alt_mem_sram+0xf7e098b4>

0000991c <_Bfree>:
    991c:	28000826 	beq	r5,zero,9940 <_Bfree+0x24>
    9920:	28c00117 	ldw	r3,4(r5)
    9924:	20801317 	ldw	r2,76(r4)
    9928:	18c7883a 	add	r3,r3,r3
    992c:	18c7883a 	add	r3,r3,r3
    9930:	10c5883a 	add	r2,r2,r3
    9934:	10c00017 	ldw	r3,0(r2)
    9938:	28c00015 	stw	r3,0(r5)
    993c:	11400015 	stw	r5,0(r2)
    9940:	f800283a 	ret

00009944 <__multadd>:
    9944:	defffa04 	addi	sp,sp,-24
    9948:	dc000115 	stw	r16,4(sp)
    994c:	2c000417 	ldw	r16,16(r5)
    9950:	dc800315 	stw	r18,12(sp)
    9954:	dc400215 	stw	r17,8(sp)
    9958:	dfc00515 	stw	ra,20(sp)
    995c:	dcc00415 	stw	r19,16(sp)
    9960:	2823883a 	mov	r17,r5
    9964:	2025883a 	mov	r18,r4
    9968:	2a400504 	addi	r9,r5,20
    996c:	0015883a 	mov	r10,zero
    9970:	4a000017 	ldw	r8,0(r9)
    9974:	4a400104 	addi	r9,r9,4
    9978:	52800044 	addi	r10,r10,1
    997c:	40ffffcc 	andi	r3,r8,65535
    9980:	1987383a 	mul	r3,r3,r6
    9984:	4010d43a 	srli	r8,r8,16
    9988:	19cf883a 	add	r7,r3,r7
    998c:	4191383a 	mul	r8,r8,r6
    9990:	3816d43a 	srli	r11,r7,16
    9994:	38ffffcc 	andi	r3,r7,65535
    9998:	5a0f883a 	add	r7,r11,r8
    999c:	3810943a 	slli	r8,r7,16
    99a0:	380ed43a 	srli	r7,r7,16
    99a4:	40c7883a 	add	r3,r8,r3
    99a8:	48ffff15 	stw	r3,-4(r9)
    99ac:	543ff016 	blt	r10,r16,9970 <__alt_mem_sram+0xf7e09970>
    99b0:	38000926 	beq	r7,zero,99d8 <__multadd+0x94>
    99b4:	88800217 	ldw	r2,8(r17)
    99b8:	80800f0e 	bge	r16,r2,99f8 <__multadd+0xb4>
    99bc:	80800144 	addi	r2,r16,5
    99c0:	1085883a 	add	r2,r2,r2
    99c4:	1085883a 	add	r2,r2,r2
    99c8:	8885883a 	add	r2,r17,r2
    99cc:	11c00015 	stw	r7,0(r2)
    99d0:	84000044 	addi	r16,r16,1
    99d4:	8c000415 	stw	r16,16(r17)
    99d8:	8805883a 	mov	r2,r17
    99dc:	dfc00517 	ldw	ra,20(sp)
    99e0:	dcc00417 	ldw	r19,16(sp)
    99e4:	dc800317 	ldw	r18,12(sp)
    99e8:	dc400217 	ldw	r17,8(sp)
    99ec:	dc000117 	ldw	r16,4(sp)
    99f0:	dec00604 	addi	sp,sp,24
    99f4:	f800283a 	ret
    99f8:	89400117 	ldw	r5,4(r17)
    99fc:	9009883a 	mov	r4,r18
    9a00:	d9c00015 	stw	r7,0(sp)
    9a04:	29400044 	addi	r5,r5,1
    9a08:	00098740 	call	9874 <_Balloc>
    9a0c:	89800417 	ldw	r6,16(r17)
    9a10:	89400304 	addi	r5,r17,12
    9a14:	11000304 	addi	r4,r2,12
    9a18:	31800084 	addi	r6,r6,2
    9a1c:	318d883a 	add	r6,r6,r6
    9a20:	318d883a 	add	r6,r6,r6
    9a24:	1027883a 	mov	r19,r2
    9a28:	00094bc0 	call	94bc <memcpy>
    9a2c:	89000117 	ldw	r4,4(r17)
    9a30:	90c01317 	ldw	r3,76(r18)
    9a34:	d9c00017 	ldw	r7,0(sp)
    9a38:	2109883a 	add	r4,r4,r4
    9a3c:	2109883a 	add	r4,r4,r4
    9a40:	1907883a 	add	r3,r3,r4
    9a44:	18800017 	ldw	r2,0(r3)
    9a48:	88800015 	stw	r2,0(r17)
    9a4c:	1c400015 	stw	r17,0(r3)
    9a50:	9823883a 	mov	r17,r19
    9a54:	003fd906 	br	99bc <__alt_mem_sram+0xf7e099bc>

00009a58 <__s2b>:
    9a58:	defff904 	addi	sp,sp,-28
    9a5c:	dc400115 	stw	r17,4(sp)
    9a60:	dc000015 	stw	r16,0(sp)
    9a64:	2023883a 	mov	r17,r4
    9a68:	2821883a 	mov	r16,r5
    9a6c:	39000204 	addi	r4,r7,8
    9a70:	01400244 	movi	r5,9
    9a74:	dcc00315 	stw	r19,12(sp)
    9a78:	dc800215 	stw	r18,8(sp)
    9a7c:	dfc00615 	stw	ra,24(sp)
    9a80:	dd400515 	stw	r21,20(sp)
    9a84:	dd000415 	stw	r20,16(sp)
    9a88:	3825883a 	mov	r18,r7
    9a8c:	3027883a 	mov	r19,r6
    9a90:	000d9d00 	call	d9d0 <__divsi3>
    9a94:	00c00044 	movi	r3,1
    9a98:	000b883a 	mov	r5,zero
    9a9c:	1880030e 	bge	r3,r2,9aac <__s2b+0x54>
    9aa0:	18c7883a 	add	r3,r3,r3
    9aa4:	29400044 	addi	r5,r5,1
    9aa8:	18bffd16 	blt	r3,r2,9aa0 <__alt_mem_sram+0xf7e09aa0>
    9aac:	8809883a 	mov	r4,r17
    9ab0:	00098740 	call	9874 <_Balloc>
    9ab4:	d8c00717 	ldw	r3,28(sp)
    9ab8:	10c00515 	stw	r3,20(r2)
    9abc:	00c00044 	movi	r3,1
    9ac0:	10c00415 	stw	r3,16(r2)
    9ac4:	00c00244 	movi	r3,9
    9ac8:	1cc0210e 	bge	r3,r19,9b50 <__s2b+0xf8>
    9acc:	80eb883a 	add	r21,r16,r3
    9ad0:	a829883a 	mov	r20,r21
    9ad4:	84e1883a 	add	r16,r16,r19
    9ad8:	a1c00007 	ldb	r7,0(r20)
    9adc:	8809883a 	mov	r4,r17
    9ae0:	a5000044 	addi	r20,r20,1
    9ae4:	100b883a 	mov	r5,r2
    9ae8:	01800284 	movi	r6,10
    9aec:	39fff404 	addi	r7,r7,-48
    9af0:	00099440 	call	9944 <__multadd>
    9af4:	a43ff81e 	bne	r20,r16,9ad8 <__alt_mem_sram+0xf7e09ad8>
    9af8:	ace1883a 	add	r16,r21,r19
    9afc:	843ffe04 	addi	r16,r16,-8
    9b00:	9c800a0e 	bge	r19,r18,9b2c <__s2b+0xd4>
    9b04:	94e5c83a 	sub	r18,r18,r19
    9b08:	84a5883a 	add	r18,r16,r18
    9b0c:	81c00007 	ldb	r7,0(r16)
    9b10:	8809883a 	mov	r4,r17
    9b14:	84000044 	addi	r16,r16,1
    9b18:	100b883a 	mov	r5,r2
    9b1c:	01800284 	movi	r6,10
    9b20:	39fff404 	addi	r7,r7,-48
    9b24:	00099440 	call	9944 <__multadd>
    9b28:	84bff81e 	bne	r16,r18,9b0c <__alt_mem_sram+0xf7e09b0c>
    9b2c:	dfc00617 	ldw	ra,24(sp)
    9b30:	dd400517 	ldw	r21,20(sp)
    9b34:	dd000417 	ldw	r20,16(sp)
    9b38:	dcc00317 	ldw	r19,12(sp)
    9b3c:	dc800217 	ldw	r18,8(sp)
    9b40:	dc400117 	ldw	r17,4(sp)
    9b44:	dc000017 	ldw	r16,0(sp)
    9b48:	dec00704 	addi	sp,sp,28
    9b4c:	f800283a 	ret
    9b50:	84000284 	addi	r16,r16,10
    9b54:	1827883a 	mov	r19,r3
    9b58:	003fe906 	br	9b00 <__alt_mem_sram+0xf7e09b00>

00009b5c <__hi0bits>:
    9b5c:	20bfffec 	andhi	r2,r4,65535
    9b60:	1000141e 	bne	r2,zero,9bb4 <__hi0bits+0x58>
    9b64:	2008943a 	slli	r4,r4,16
    9b68:	00800404 	movi	r2,16
    9b6c:	20ffc02c 	andhi	r3,r4,65280
    9b70:	1800021e 	bne	r3,zero,9b7c <__hi0bits+0x20>
    9b74:	2008923a 	slli	r4,r4,8
    9b78:	10800204 	addi	r2,r2,8
    9b7c:	20fc002c 	andhi	r3,r4,61440
    9b80:	1800021e 	bne	r3,zero,9b8c <__hi0bits+0x30>
    9b84:	2008913a 	slli	r4,r4,4
    9b88:	10800104 	addi	r2,r2,4
    9b8c:	20f0002c 	andhi	r3,r4,49152
    9b90:	1800031e 	bne	r3,zero,9ba0 <__hi0bits+0x44>
    9b94:	2109883a 	add	r4,r4,r4
    9b98:	10800084 	addi	r2,r2,2
    9b9c:	2109883a 	add	r4,r4,r4
    9ba0:	20000316 	blt	r4,zero,9bb0 <__hi0bits+0x54>
    9ba4:	2110002c 	andhi	r4,r4,16384
    9ba8:	2000041e 	bne	r4,zero,9bbc <__hi0bits+0x60>
    9bac:	00800804 	movi	r2,32
    9bb0:	f800283a 	ret
    9bb4:	0005883a 	mov	r2,zero
    9bb8:	003fec06 	br	9b6c <__alt_mem_sram+0xf7e09b6c>
    9bbc:	10800044 	addi	r2,r2,1
    9bc0:	f800283a 	ret

00009bc4 <__lo0bits>:
    9bc4:	20c00017 	ldw	r3,0(r4)
    9bc8:	188001cc 	andi	r2,r3,7
    9bcc:	10000826 	beq	r2,zero,9bf0 <__lo0bits+0x2c>
    9bd0:	1880004c 	andi	r2,r3,1
    9bd4:	1000211e 	bne	r2,zero,9c5c <__lo0bits+0x98>
    9bd8:	1880008c 	andi	r2,r3,2
    9bdc:	1000211e 	bne	r2,zero,9c64 <__lo0bits+0xa0>
    9be0:	1806d0ba 	srli	r3,r3,2
    9be4:	00800084 	movi	r2,2
    9be8:	20c00015 	stw	r3,0(r4)
    9bec:	f800283a 	ret
    9bf0:	18bfffcc 	andi	r2,r3,65535
    9bf4:	10001326 	beq	r2,zero,9c44 <__lo0bits+0x80>
    9bf8:	0005883a 	mov	r2,zero
    9bfc:	19403fcc 	andi	r5,r3,255
    9c00:	2800021e 	bne	r5,zero,9c0c <__lo0bits+0x48>
    9c04:	1806d23a 	srli	r3,r3,8
    9c08:	10800204 	addi	r2,r2,8
    9c0c:	194003cc 	andi	r5,r3,15
    9c10:	2800021e 	bne	r5,zero,9c1c <__lo0bits+0x58>
    9c14:	1806d13a 	srli	r3,r3,4
    9c18:	10800104 	addi	r2,r2,4
    9c1c:	194000cc 	andi	r5,r3,3
    9c20:	2800021e 	bne	r5,zero,9c2c <__lo0bits+0x68>
    9c24:	1806d0ba 	srli	r3,r3,2
    9c28:	10800084 	addi	r2,r2,2
    9c2c:	1940004c 	andi	r5,r3,1
    9c30:	2800081e 	bne	r5,zero,9c54 <__lo0bits+0x90>
    9c34:	1806d07a 	srli	r3,r3,1
    9c38:	1800051e 	bne	r3,zero,9c50 <__lo0bits+0x8c>
    9c3c:	00800804 	movi	r2,32
    9c40:	f800283a 	ret
    9c44:	1806d43a 	srli	r3,r3,16
    9c48:	00800404 	movi	r2,16
    9c4c:	003feb06 	br	9bfc <__alt_mem_sram+0xf7e09bfc>
    9c50:	10800044 	addi	r2,r2,1
    9c54:	20c00015 	stw	r3,0(r4)
    9c58:	f800283a 	ret
    9c5c:	0005883a 	mov	r2,zero
    9c60:	f800283a 	ret
    9c64:	1806d07a 	srli	r3,r3,1
    9c68:	00800044 	movi	r2,1
    9c6c:	20c00015 	stw	r3,0(r4)
    9c70:	f800283a 	ret

00009c74 <__i2b>:
    9c74:	defffd04 	addi	sp,sp,-12
    9c78:	dc000015 	stw	r16,0(sp)
    9c7c:	04000044 	movi	r16,1
    9c80:	dc400115 	stw	r17,4(sp)
    9c84:	2823883a 	mov	r17,r5
    9c88:	800b883a 	mov	r5,r16
    9c8c:	dfc00215 	stw	ra,8(sp)
    9c90:	00098740 	call	9874 <_Balloc>
    9c94:	14400515 	stw	r17,20(r2)
    9c98:	14000415 	stw	r16,16(r2)
    9c9c:	dfc00217 	ldw	ra,8(sp)
    9ca0:	dc400117 	ldw	r17,4(sp)
    9ca4:	dc000017 	ldw	r16,0(sp)
    9ca8:	dec00304 	addi	sp,sp,12
    9cac:	f800283a 	ret

00009cb0 <__multiply>:
    9cb0:	defffa04 	addi	sp,sp,-24
    9cb4:	dcc00315 	stw	r19,12(sp)
    9cb8:	dc800215 	stw	r18,8(sp)
    9cbc:	2cc00417 	ldw	r19,16(r5)
    9cc0:	34800417 	ldw	r18,16(r6)
    9cc4:	dd000415 	stw	r20,16(sp)
    9cc8:	dc400115 	stw	r17,4(sp)
    9ccc:	dfc00515 	stw	ra,20(sp)
    9cd0:	dc000015 	stw	r16,0(sp)
    9cd4:	2829883a 	mov	r20,r5
    9cd8:	3023883a 	mov	r17,r6
    9cdc:	9c807016 	blt	r19,r18,9ea0 <__multiply+0x1f0>
    9ce0:	9005883a 	mov	r2,r18
    9ce4:	9825883a 	mov	r18,r19
    9ce8:	1027883a 	mov	r19,r2
    9cec:	a0800217 	ldw	r2,8(r20)
    9cf0:	94e1883a 	add	r16,r18,r19
    9cf4:	a1400117 	ldw	r5,4(r20)
    9cf8:	1400010e 	bge	r2,r16,9d00 <__multiply+0x50>
    9cfc:	29400044 	addi	r5,r5,1
    9d00:	00098740 	call	9874 <_Balloc>
    9d04:	8417883a 	add	r11,r16,r16
    9d08:	13000504 	addi	r12,r2,20
    9d0c:	5ad7883a 	add	r11,r11,r11
    9d10:	62d7883a 	add	r11,r12,r11
    9d14:	6007883a 	mov	r3,r12
    9d18:	62c0032e 	bgeu	r12,r11,9d28 <__multiply+0x78>
    9d1c:	18000015 	stw	zero,0(r3)
    9d20:	18c00104 	addi	r3,r3,4
    9d24:	1afffd36 	bltu	r3,r11,9d1c <__alt_mem_sram+0xf7e09d1c>
    9d28:	9ce7883a 	add	r19,r19,r19
    9d2c:	94a5883a 	add	r18,r18,r18
    9d30:	89800504 	addi	r6,r17,20
    9d34:	9ce7883a 	add	r19,r19,r19
    9d38:	a3800504 	addi	r14,r20,20
    9d3c:	94a5883a 	add	r18,r18,r18
    9d40:	34db883a 	add	r13,r6,r19
    9d44:	7495883a 	add	r10,r14,r18
    9d48:	3340422e 	bgeu	r6,r13,9e54 <__multiply+0x1a4>
    9d4c:	34400017 	ldw	r17,0(r6)
    9d50:	8cbfffcc 	andi	r18,r17,65535
    9d54:	90001b26 	beq	r18,zero,9dc4 <__multiply+0x114>
    9d58:	6013883a 	mov	r9,r12
    9d5c:	7023883a 	mov	r17,r14
    9d60:	0011883a 	mov	r8,zero
    9d64:	88c00017 	ldw	r3,0(r17)
    9d68:	4bc00017 	ldw	r15,0(r9)
    9d6c:	8c400104 	addi	r17,r17,4
    9d70:	19ffffcc 	andi	r7,r3,65535
    9d74:	3c8f383a 	mul	r7,r7,r18
    9d78:	1808d43a 	srli	r4,r3,16
    9d7c:	797fffcc 	andi	r5,r15,65535
    9d80:	29cb883a 	add	r5,r5,r7
    9d84:	2a0b883a 	add	r5,r5,r8
    9d88:	2489383a 	mul	r4,r4,r18
    9d8c:	7806d43a 	srli	r3,r15,16
    9d90:	2810d43a 	srli	r8,r5,16
    9d94:	297fffcc 	andi	r5,r5,65535
    9d98:	1907883a 	add	r3,r3,r4
    9d9c:	1a07883a 	add	r3,r3,r8
    9da0:	1808943a 	slli	r4,r3,16
    9da4:	480f883a 	mov	r7,r9
    9da8:	1810d43a 	srli	r8,r3,16
    9dac:	214ab03a 	or	r5,r4,r5
    9db0:	49400015 	stw	r5,0(r9)
    9db4:	4a400104 	addi	r9,r9,4
    9db8:	8abfea36 	bltu	r17,r10,9d64 <__alt_mem_sram+0xf7e09d64>
    9dbc:	3a000115 	stw	r8,4(r7)
    9dc0:	34400017 	ldw	r17,0(r6)
    9dc4:	8822d43a 	srli	r17,r17,16
    9dc8:	88001f26 	beq	r17,zero,9e48 <__multiply+0x198>
    9dcc:	60c00017 	ldw	r3,0(r12)
    9dd0:	7013883a 	mov	r9,r14
    9dd4:	601f883a 	mov	r15,r12
    9dd8:	1811883a 	mov	r8,r3
    9ddc:	6027883a 	mov	r19,r12
    9de0:	000f883a 	mov	r7,zero
    9de4:	00000106 	br	9dec <__multiply+0x13c>
    9de8:	9027883a 	mov	r19,r18
    9dec:	4940000b 	ldhu	r5,0(r9)
    9df0:	4010d43a 	srli	r8,r8,16
    9df4:	193fffcc 	andi	r4,r3,65535
    9df8:	2c4b383a 	mul	r5,r5,r17
    9dfc:	7bc00104 	addi	r15,r15,4
    9e00:	4a400104 	addi	r9,r9,4
    9e04:	2a0b883a 	add	r5,r5,r8
    9e08:	29cb883a 	add	r5,r5,r7
    9e0c:	2806943a 	slli	r3,r5,16
    9e10:	9c800104 	addi	r18,r19,4
    9e14:	280ad43a 	srli	r5,r5,16
    9e18:	1908b03a 	or	r4,r3,r4
    9e1c:	793fff15 	stw	r4,-4(r15)
    9e20:	48ffff17 	ldw	r3,-4(r9)
    9e24:	92000017 	ldw	r8,0(r18)
    9e28:	1806d43a 	srli	r3,r3,16
    9e2c:	413fffcc 	andi	r4,r8,65535
    9e30:	1c47383a 	mul	r3,r3,r17
    9e34:	1907883a 	add	r3,r3,r4
    9e38:	1947883a 	add	r3,r3,r5
    9e3c:	180ed43a 	srli	r7,r3,16
    9e40:	4abfe936 	bltu	r9,r10,9de8 <__alt_mem_sram+0xf7e09de8>
    9e44:	98c00115 	stw	r3,4(r19)
    9e48:	31800104 	addi	r6,r6,4
    9e4c:	63000104 	addi	r12,r12,4
    9e50:	337fbe36 	bltu	r6,r13,9d4c <__alt_mem_sram+0xf7e09d4c>
    9e54:	0400090e 	bge	zero,r16,9e7c <__multiply+0x1cc>
    9e58:	58ffff17 	ldw	r3,-4(r11)
    9e5c:	5affff04 	addi	r11,r11,-4
    9e60:	18000326 	beq	r3,zero,9e70 <__multiply+0x1c0>
    9e64:	00000506 	br	9e7c <__multiply+0x1cc>
    9e68:	58c00017 	ldw	r3,0(r11)
    9e6c:	1800031e 	bne	r3,zero,9e7c <__multiply+0x1cc>
    9e70:	843fffc4 	addi	r16,r16,-1
    9e74:	5affff04 	addi	r11,r11,-4
    9e78:	803ffb1e 	bne	r16,zero,9e68 <__alt_mem_sram+0xf7e09e68>
    9e7c:	14000415 	stw	r16,16(r2)
    9e80:	dfc00517 	ldw	ra,20(sp)
    9e84:	dd000417 	ldw	r20,16(sp)
    9e88:	dcc00317 	ldw	r19,12(sp)
    9e8c:	dc800217 	ldw	r18,8(sp)
    9e90:	dc400117 	ldw	r17,4(sp)
    9e94:	dc000017 	ldw	r16,0(sp)
    9e98:	dec00604 	addi	sp,sp,24
    9e9c:	f800283a 	ret
    9ea0:	3029883a 	mov	r20,r6
    9ea4:	2823883a 	mov	r17,r5
    9ea8:	003f9006 	br	9cec <__alt_mem_sram+0xf7e09cec>

00009eac <__pow5mult>:
    9eac:	defffa04 	addi	sp,sp,-24
    9eb0:	dcc00315 	stw	r19,12(sp)
    9eb4:	dc800215 	stw	r18,8(sp)
    9eb8:	dc000015 	stw	r16,0(sp)
    9ebc:	dfc00515 	stw	ra,20(sp)
    9ec0:	dd000415 	stw	r20,16(sp)
    9ec4:	dc400115 	stw	r17,4(sp)
    9ec8:	308000cc 	andi	r2,r6,3
    9ecc:	3021883a 	mov	r16,r6
    9ed0:	2027883a 	mov	r19,r4
    9ed4:	2825883a 	mov	r18,r5
    9ed8:	10002e1e 	bne	r2,zero,9f94 <__pow5mult+0xe8>
    9edc:	8021d0ba 	srai	r16,r16,2
    9ee0:	80001a26 	beq	r16,zero,9f4c <__pow5mult+0xa0>
    9ee4:	9c401217 	ldw	r17,72(r19)
    9ee8:	8800061e 	bne	r17,zero,9f04 <__pow5mult+0x58>
    9eec:	00003406 	br	9fc0 <__pow5mult+0x114>
    9ef0:	8021d07a 	srai	r16,r16,1
    9ef4:	80001526 	beq	r16,zero,9f4c <__pow5mult+0xa0>
    9ef8:	88800017 	ldw	r2,0(r17)
    9efc:	10001c26 	beq	r2,zero,9f70 <__pow5mult+0xc4>
    9f00:	1023883a 	mov	r17,r2
    9f04:	80c0004c 	andi	r3,r16,1
    9f08:	183ff926 	beq	r3,zero,9ef0 <__alt_mem_sram+0xf7e09ef0>
    9f0c:	900b883a 	mov	r5,r18
    9f10:	880d883a 	mov	r6,r17
    9f14:	9809883a 	mov	r4,r19
    9f18:	0009cb00 	call	9cb0 <__multiply>
    9f1c:	90001b26 	beq	r18,zero,9f8c <__pow5mult+0xe0>
    9f20:	91c00117 	ldw	r7,4(r18)
    9f24:	98c01317 	ldw	r3,76(r19)
    9f28:	8021d07a 	srai	r16,r16,1
    9f2c:	39cf883a 	add	r7,r7,r7
    9f30:	39cf883a 	add	r7,r7,r7
    9f34:	19c7883a 	add	r3,r3,r7
    9f38:	19000017 	ldw	r4,0(r3)
    9f3c:	91000015 	stw	r4,0(r18)
    9f40:	1c800015 	stw	r18,0(r3)
    9f44:	1025883a 	mov	r18,r2
    9f48:	803feb1e 	bne	r16,zero,9ef8 <__alt_mem_sram+0xf7e09ef8>
    9f4c:	9005883a 	mov	r2,r18
    9f50:	dfc00517 	ldw	ra,20(sp)
    9f54:	dd000417 	ldw	r20,16(sp)
    9f58:	dcc00317 	ldw	r19,12(sp)
    9f5c:	dc800217 	ldw	r18,8(sp)
    9f60:	dc400117 	ldw	r17,4(sp)
    9f64:	dc000017 	ldw	r16,0(sp)
    9f68:	dec00604 	addi	sp,sp,24
    9f6c:	f800283a 	ret
    9f70:	9809883a 	mov	r4,r19
    9f74:	880b883a 	mov	r5,r17
    9f78:	880d883a 	mov	r6,r17
    9f7c:	0009cb00 	call	9cb0 <__multiply>
    9f80:	88800015 	stw	r2,0(r17)
    9f84:	10000015 	stw	zero,0(r2)
    9f88:	003fdd06 	br	9f00 <__alt_mem_sram+0xf7e09f00>
    9f8c:	1025883a 	mov	r18,r2
    9f90:	003fd706 	br	9ef0 <__alt_mem_sram+0xf7e09ef0>
    9f94:	10bfffc4 	addi	r2,r2,-1
    9f98:	1085883a 	add	r2,r2,r2
    9f9c:	00c00074 	movhi	r3,1
    9fa0:	18cc8304 	addi	r3,r3,12812
    9fa4:	1085883a 	add	r2,r2,r2
    9fa8:	1885883a 	add	r2,r3,r2
    9fac:	11800017 	ldw	r6,0(r2)
    9fb0:	000f883a 	mov	r7,zero
    9fb4:	00099440 	call	9944 <__multadd>
    9fb8:	1025883a 	mov	r18,r2
    9fbc:	003fc706 	br	9edc <__alt_mem_sram+0xf7e09edc>
    9fc0:	05000044 	movi	r20,1
    9fc4:	9809883a 	mov	r4,r19
    9fc8:	a00b883a 	mov	r5,r20
    9fcc:	00098740 	call	9874 <_Balloc>
    9fd0:	1023883a 	mov	r17,r2
    9fd4:	00809c44 	movi	r2,625
    9fd8:	88800515 	stw	r2,20(r17)
    9fdc:	8d000415 	stw	r20,16(r17)
    9fe0:	9c401215 	stw	r17,72(r19)
    9fe4:	88000015 	stw	zero,0(r17)
    9fe8:	003fc606 	br	9f04 <__alt_mem_sram+0xf7e09f04>

00009fec <__lshift>:
    9fec:	defff904 	addi	sp,sp,-28
    9ff0:	dd000415 	stw	r20,16(sp)
    9ff4:	dcc00315 	stw	r19,12(sp)
    9ff8:	3029d17a 	srai	r20,r6,5
    9ffc:	2cc00417 	ldw	r19,16(r5)
    a000:	28800217 	ldw	r2,8(r5)
    a004:	dd400515 	stw	r21,20(sp)
    a008:	a4e7883a 	add	r19,r20,r19
    a00c:	dc800215 	stw	r18,8(sp)
    a010:	dc400115 	stw	r17,4(sp)
    a014:	dc000015 	stw	r16,0(sp)
    a018:	dfc00615 	stw	ra,24(sp)
    a01c:	9c000044 	addi	r16,r19,1
    a020:	2823883a 	mov	r17,r5
    a024:	302b883a 	mov	r21,r6
    a028:	2025883a 	mov	r18,r4
    a02c:	29400117 	ldw	r5,4(r5)
    a030:	1400030e 	bge	r2,r16,a040 <__lshift+0x54>
    a034:	1085883a 	add	r2,r2,r2
    a038:	29400044 	addi	r5,r5,1
    a03c:	143ffd16 	blt	r2,r16,a034 <__alt_mem_sram+0xf7e0a034>
    a040:	9009883a 	mov	r4,r18
    a044:	00098740 	call	9874 <_Balloc>
    a048:	11c00504 	addi	r7,r2,20
    a04c:	0500090e 	bge	zero,r20,a074 <__lshift+0x88>
    a050:	3811883a 	mov	r8,r7
    a054:	0007883a 	mov	r3,zero
    a058:	40000015 	stw	zero,0(r8)
    a05c:	18c00044 	addi	r3,r3,1
    a060:	42000104 	addi	r8,r8,4
    a064:	1d3ffc1e 	bne	r3,r20,a058 <__alt_mem_sram+0xf7e0a058>
    a068:	18c7883a 	add	r3,r3,r3
    a06c:	18c7883a 	add	r3,r3,r3
    a070:	38cf883a 	add	r7,r7,r3
    a074:	89000417 	ldw	r4,16(r17)
    a078:	88c00504 	addi	r3,r17,20
    a07c:	a98007cc 	andi	r6,r21,31
    a080:	2109883a 	add	r4,r4,r4
    a084:	2109883a 	add	r4,r4,r4
    a088:	1909883a 	add	r4,r3,r4
    a08c:	30002326 	beq	r6,zero,a11c <__lshift+0x130>
    a090:	01400804 	movi	r5,32
    a094:	298bc83a 	sub	r5,r5,r6
    a098:	0013883a 	mov	r9,zero
    a09c:	1a000017 	ldw	r8,0(r3)
    a0a0:	3815883a 	mov	r10,r7
    a0a4:	39c00104 	addi	r7,r7,4
    a0a8:	4190983a 	sll	r8,r8,r6
    a0ac:	18c00104 	addi	r3,r3,4
    a0b0:	4a10b03a 	or	r8,r9,r8
    a0b4:	3a3fff15 	stw	r8,-4(r7)
    a0b8:	1a3fff17 	ldw	r8,-4(r3)
    a0bc:	4152d83a 	srl	r9,r8,r5
    a0c0:	193ff636 	bltu	r3,r4,a09c <__alt_mem_sram+0xf7e0a09c>
    a0c4:	52400115 	stw	r9,4(r10)
    a0c8:	48000126 	beq	r9,zero,a0d0 <__lshift+0xe4>
    a0cc:	9c000084 	addi	r16,r19,2
    a0d0:	89000117 	ldw	r4,4(r17)
    a0d4:	90c01317 	ldw	r3,76(r18)
    a0d8:	843fffc4 	addi	r16,r16,-1
    a0dc:	2109883a 	add	r4,r4,r4
    a0e0:	2109883a 	add	r4,r4,r4
    a0e4:	1907883a 	add	r3,r3,r4
    a0e8:	19000017 	ldw	r4,0(r3)
    a0ec:	14000415 	stw	r16,16(r2)
    a0f0:	89000015 	stw	r4,0(r17)
    a0f4:	1c400015 	stw	r17,0(r3)
    a0f8:	dfc00617 	ldw	ra,24(sp)
    a0fc:	dd400517 	ldw	r21,20(sp)
    a100:	dd000417 	ldw	r20,16(sp)
    a104:	dcc00317 	ldw	r19,12(sp)
    a108:	dc800217 	ldw	r18,8(sp)
    a10c:	dc400117 	ldw	r17,4(sp)
    a110:	dc000017 	ldw	r16,0(sp)
    a114:	dec00704 	addi	sp,sp,28
    a118:	f800283a 	ret
    a11c:	19400017 	ldw	r5,0(r3)
    a120:	39c00104 	addi	r7,r7,4
    a124:	18c00104 	addi	r3,r3,4
    a128:	397fff15 	stw	r5,-4(r7)
    a12c:	193ffb36 	bltu	r3,r4,a11c <__alt_mem_sram+0xf7e0a11c>
    a130:	003fe706 	br	a0d0 <__alt_mem_sram+0xf7e0a0d0>

0000a134 <__mcmp>:
    a134:	20800417 	ldw	r2,16(r4)
    a138:	28c00417 	ldw	r3,16(r5)
    a13c:	10c5c83a 	sub	r2,r2,r3
    a140:	1000111e 	bne	r2,zero,a188 <__mcmp+0x54>
    a144:	18c7883a 	add	r3,r3,r3
    a148:	18c7883a 	add	r3,r3,r3
    a14c:	21000504 	addi	r4,r4,20
    a150:	29400504 	addi	r5,r5,20
    a154:	20c5883a 	add	r2,r4,r3
    a158:	28cb883a 	add	r5,r5,r3
    a15c:	00000106 	br	a164 <__mcmp+0x30>
    a160:	20800a2e 	bgeu	r4,r2,a18c <__mcmp+0x58>
    a164:	10bfff04 	addi	r2,r2,-4
    a168:	297fff04 	addi	r5,r5,-4
    a16c:	11800017 	ldw	r6,0(r2)
    a170:	28c00017 	ldw	r3,0(r5)
    a174:	30fffa26 	beq	r6,r3,a160 <__alt_mem_sram+0xf7e0a160>
    a178:	30c00236 	bltu	r6,r3,a184 <__mcmp+0x50>
    a17c:	00800044 	movi	r2,1
    a180:	f800283a 	ret
    a184:	00bfffc4 	movi	r2,-1
    a188:	f800283a 	ret
    a18c:	0005883a 	mov	r2,zero
    a190:	f800283a 	ret

0000a194 <__mdiff>:
    a194:	defffb04 	addi	sp,sp,-20
    a198:	dc000015 	stw	r16,0(sp)
    a19c:	2821883a 	mov	r16,r5
    a1a0:	dcc00315 	stw	r19,12(sp)
    a1a4:	300b883a 	mov	r5,r6
    a1a8:	2027883a 	mov	r19,r4
    a1ac:	8009883a 	mov	r4,r16
    a1b0:	dc800215 	stw	r18,8(sp)
    a1b4:	dfc00415 	stw	ra,16(sp)
    a1b8:	dc400115 	stw	r17,4(sp)
    a1bc:	3025883a 	mov	r18,r6
    a1c0:	000a1340 	call	a134 <__mcmp>
    a1c4:	10005226 	beq	r2,zero,a310 <__mdiff+0x17c>
    a1c8:	10004c16 	blt	r2,zero,a2fc <__mdiff+0x168>
    a1cc:	0023883a 	mov	r17,zero
    a1d0:	81400117 	ldw	r5,4(r16)
    a1d4:	9809883a 	mov	r4,r19
    a1d8:	00098740 	call	9874 <_Balloc>
    a1dc:	83400417 	ldw	r13,16(r16)
    a1e0:	93800417 	ldw	r14,16(r18)
    a1e4:	81000504 	addi	r4,r16,20
    a1e8:	6b59883a 	add	r12,r13,r13
    a1ec:	739d883a 	add	r14,r14,r14
    a1f0:	6319883a 	add	r12,r12,r12
    a1f4:	91800504 	addi	r6,r18,20
    a1f8:	739d883a 	add	r14,r14,r14
    a1fc:	14400315 	stw	r17,12(r2)
    a200:	2319883a 	add	r12,r4,r12
    a204:	339d883a 	add	r14,r6,r14
    a208:	12400504 	addi	r9,r2,20
    a20c:	0007883a 	mov	r3,zero
    a210:	22000017 	ldw	r8,0(r4)
    a214:	32800017 	ldw	r10,0(r6)
    a218:	4ac00104 	addi	r11,r9,4
    a21c:	41ffffcc 	andi	r7,r8,65535
    a220:	38c7883a 	add	r3,r7,r3
    a224:	51ffffcc 	andi	r7,r10,65535
    a228:	19cfc83a 	sub	r7,r3,r7
    a22c:	4010d43a 	srli	r8,r8,16
    a230:	5014d43a 	srli	r10,r10,16
    a234:	3807d43a 	srai	r3,r7,16
    a238:	39ffffcc 	andi	r7,r7,65535
    a23c:	4291c83a 	sub	r8,r8,r10
    a240:	40c7883a 	add	r3,r8,r3
    a244:	1810943a 	slli	r8,r3,16
    a248:	31800104 	addi	r6,r6,4
    a24c:	21000104 	addi	r4,r4,4
    a250:	41ceb03a 	or	r7,r8,r7
    a254:	49c00015 	stw	r7,0(r9)
    a258:	1807d43a 	srai	r3,r3,16
    a25c:	580b883a 	mov	r5,r11
    a260:	5813883a 	mov	r9,r11
    a264:	33bfea36 	bltu	r6,r14,a210 <__alt_mem_sram+0xf7e0a210>
    a268:	2011883a 	mov	r8,r4
    a26c:	2300152e 	bgeu	r4,r12,a2c4 <__mdiff+0x130>
    a270:	21400017 	ldw	r5,0(r4)
    a274:	4a400104 	addi	r9,r9,4
    a278:	21000104 	addi	r4,r4,4
    a27c:	29ffffcc 	andi	r7,r5,65535
    a280:	38c7883a 	add	r3,r7,r3
    a284:	280ad43a 	srli	r5,r5,16
    a288:	180dd43a 	srai	r6,r3,16
    a28c:	19ffffcc 	andi	r7,r3,65535
    a290:	3147883a 	add	r3,r6,r5
    a294:	180a943a 	slli	r5,r3,16
    a298:	1807d43a 	srai	r3,r3,16
    a29c:	29ceb03a 	or	r7,r5,r7
    a2a0:	49ffff15 	stw	r7,-4(r9)
    a2a4:	233ff236 	bltu	r4,r12,a270 <__alt_mem_sram+0xf7e0a270>
    a2a8:	0206303a 	nor	r3,zero,r8
    a2ac:	1b07883a 	add	r3,r3,r12
    a2b0:	1806d0ba 	srli	r3,r3,2
    a2b4:	18c00044 	addi	r3,r3,1
    a2b8:	18c7883a 	add	r3,r3,r3
    a2bc:	18c7883a 	add	r3,r3,r3
    a2c0:	58cb883a 	add	r5,r11,r3
    a2c4:	28ffff04 	addi	r3,r5,-4
    a2c8:	3800041e 	bne	r7,zero,a2dc <__mdiff+0x148>
    a2cc:	18ffff04 	addi	r3,r3,-4
    a2d0:	19000017 	ldw	r4,0(r3)
    a2d4:	6b7fffc4 	addi	r13,r13,-1
    a2d8:	203ffc26 	beq	r4,zero,a2cc <__alt_mem_sram+0xf7e0a2cc>
    a2dc:	13400415 	stw	r13,16(r2)
    a2e0:	dfc00417 	ldw	ra,16(sp)
    a2e4:	dcc00317 	ldw	r19,12(sp)
    a2e8:	dc800217 	ldw	r18,8(sp)
    a2ec:	dc400117 	ldw	r17,4(sp)
    a2f0:	dc000017 	ldw	r16,0(sp)
    a2f4:	dec00504 	addi	sp,sp,20
    a2f8:	f800283a 	ret
    a2fc:	8005883a 	mov	r2,r16
    a300:	04400044 	movi	r17,1
    a304:	9021883a 	mov	r16,r18
    a308:	1025883a 	mov	r18,r2
    a30c:	003fb006 	br	a1d0 <__alt_mem_sram+0xf7e0a1d0>
    a310:	9809883a 	mov	r4,r19
    a314:	000b883a 	mov	r5,zero
    a318:	00098740 	call	9874 <_Balloc>
    a31c:	00c00044 	movi	r3,1
    a320:	10c00415 	stw	r3,16(r2)
    a324:	10000515 	stw	zero,20(r2)
    a328:	003fed06 	br	a2e0 <__alt_mem_sram+0xf7e0a2e0>

0000a32c <__ulp>:
    a32c:	295ffc2c 	andhi	r5,r5,32752
    a330:	00bf3034 	movhi	r2,64704
    a334:	2887883a 	add	r3,r5,r2
    a338:	00c0020e 	bge	zero,r3,a344 <__ulp+0x18>
    a33c:	0005883a 	mov	r2,zero
    a340:	f800283a 	ret
    a344:	00c7c83a 	sub	r3,zero,r3
    a348:	180bd53a 	srai	r5,r3,20
    a34c:	008004c4 	movi	r2,19
    a350:	11400a0e 	bge	r2,r5,a37c <__ulp+0x50>
    a354:	00800c84 	movi	r2,50
    a358:	0007883a 	mov	r3,zero
    a35c:	11400516 	blt	r2,r5,a374 <__ulp+0x48>
    a360:	00800cc4 	movi	r2,51
    a364:	114bc83a 	sub	r5,r2,r5
    a368:	00800044 	movi	r2,1
    a36c:	1144983a 	sll	r2,r2,r5
    a370:	f800283a 	ret
    a374:	00800044 	movi	r2,1
    a378:	f800283a 	ret
    a37c:	00800234 	movhi	r2,8
    a380:	1147d83a 	sra	r3,r2,r5
    a384:	0005883a 	mov	r2,zero
    a388:	f800283a 	ret

0000a38c <__b2d>:
    a38c:	defffa04 	addi	sp,sp,-24
    a390:	dc000015 	stw	r16,0(sp)
    a394:	24000417 	ldw	r16,16(r4)
    a398:	dc400115 	stw	r17,4(sp)
    a39c:	24400504 	addi	r17,r4,20
    a3a0:	8421883a 	add	r16,r16,r16
    a3a4:	8421883a 	add	r16,r16,r16
    a3a8:	8c21883a 	add	r16,r17,r16
    a3ac:	dc800215 	stw	r18,8(sp)
    a3b0:	84bfff17 	ldw	r18,-4(r16)
    a3b4:	dd000415 	stw	r20,16(sp)
    a3b8:	dcc00315 	stw	r19,12(sp)
    a3bc:	9009883a 	mov	r4,r18
    a3c0:	2829883a 	mov	r20,r5
    a3c4:	dfc00515 	stw	ra,20(sp)
    a3c8:	0009b5c0 	call	9b5c <__hi0bits>
    a3cc:	00c00804 	movi	r3,32
    a3d0:	1887c83a 	sub	r3,r3,r2
    a3d4:	a0c00015 	stw	r3,0(r20)
    a3d8:	00c00284 	movi	r3,10
    a3dc:	84ffff04 	addi	r19,r16,-4
    a3e0:	18801216 	blt	r3,r2,a42c <__b2d+0xa0>
    a3e4:	014002c4 	movi	r5,11
    a3e8:	2889c83a 	sub	r4,r5,r2
    a3ec:	9106d83a 	srl	r3,r18,r4
    a3f0:	18cffc34 	orhi	r3,r3,16368
    a3f4:	8cc0282e 	bgeu	r17,r19,a498 <__b2d+0x10c>
    a3f8:	817ffe17 	ldw	r5,-8(r16)
    a3fc:	290ad83a 	srl	r5,r5,r4
    a400:	10800544 	addi	r2,r2,21
    a404:	9084983a 	sll	r2,r18,r2
    a408:	2884b03a 	or	r2,r5,r2
    a40c:	dfc00517 	ldw	ra,20(sp)
    a410:	dd000417 	ldw	r20,16(sp)
    a414:	dcc00317 	ldw	r19,12(sp)
    a418:	dc800217 	ldw	r18,8(sp)
    a41c:	dc400117 	ldw	r17,4(sp)
    a420:	dc000017 	ldw	r16,0(sp)
    a424:	dec00604 	addi	sp,sp,24
    a428:	f800283a 	ret
    a42c:	113ffd44 	addi	r4,r2,-11
    a430:	8cc00f2e 	bgeu	r17,r19,a470 <__b2d+0xe4>
    a434:	81bffe04 	addi	r6,r16,-8
    a438:	817ffe17 	ldw	r5,-8(r16)
    a43c:	20001326 	beq	r4,zero,a48c <__b2d+0x100>
    a440:	00c00ac4 	movi	r3,43
    a444:	1885c83a 	sub	r2,r3,r2
    a448:	2886d83a 	srl	r3,r5,r2
    a44c:	9124983a 	sll	r18,r18,r4
    a450:	90e4b03a 	or	r18,r18,r3
    a454:	90cffc34 	orhi	r3,r18,16368
    a458:	8980112e 	bgeu	r17,r6,a4a0 <__b2d+0x114>
    a45c:	81bffd17 	ldw	r6,-12(r16)
    a460:	308cd83a 	srl	r6,r6,r2
    a464:	2904983a 	sll	r2,r5,r4
    a468:	1184b03a 	or	r2,r2,r6
    a46c:	003fe706 	br	a40c <__alt_mem_sram+0xf7e0a40c>
    a470:	20000526 	beq	r4,zero,a488 <__b2d+0xfc>
    a474:	9124983a 	sll	r18,r18,r4
    a478:	000d883a 	mov	r6,zero
    a47c:	000b883a 	mov	r5,zero
    a480:	90cffc34 	orhi	r3,r18,16368
    a484:	003ff706 	br	a464 <__alt_mem_sram+0xf7e0a464>
    a488:	000b883a 	mov	r5,zero
    a48c:	90cffc34 	orhi	r3,r18,16368
    a490:	2805883a 	mov	r2,r5
    a494:	003fdd06 	br	a40c <__alt_mem_sram+0xf7e0a40c>
    a498:	000b883a 	mov	r5,zero
    a49c:	003fd806 	br	a400 <__alt_mem_sram+0xf7e0a400>
    a4a0:	000d883a 	mov	r6,zero
    a4a4:	003fef06 	br	a464 <__alt_mem_sram+0xf7e0a464>

0000a4a8 <__d2b>:
    a4a8:	defff704 	addi	sp,sp,-36
    a4ac:	dc000215 	stw	r16,8(sp)
    a4b0:	3021883a 	mov	r16,r6
    a4b4:	dc400315 	stw	r17,12(sp)
    a4b8:	8022907a 	slli	r17,r16,1
    a4bc:	dd400715 	stw	r21,28(sp)
    a4c0:	282b883a 	mov	r21,r5
    a4c4:	01400044 	movi	r5,1
    a4c8:	dd000615 	stw	r20,24(sp)
    a4cc:	dcc00515 	stw	r19,20(sp)
    a4d0:	dc800415 	stw	r18,16(sp)
    a4d4:	dfc00815 	stw	ra,32(sp)
    a4d8:	3829883a 	mov	r20,r7
    a4dc:	dc800917 	ldw	r18,36(sp)
    a4e0:	8822d57a 	srli	r17,r17,21
    a4e4:	00098740 	call	9874 <_Balloc>
    a4e8:	1027883a 	mov	r19,r2
    a4ec:	00800434 	movhi	r2,16
    a4f0:	10bfffc4 	addi	r2,r2,-1
    a4f4:	808c703a 	and	r6,r16,r2
    a4f8:	88000126 	beq	r17,zero,a500 <__d2b+0x58>
    a4fc:	31800434 	orhi	r6,r6,16
    a500:	d9800015 	stw	r6,0(sp)
    a504:	a8001f26 	beq	r21,zero,a584 <__d2b+0xdc>
    a508:	d9000104 	addi	r4,sp,4
    a50c:	dd400115 	stw	r21,4(sp)
    a510:	0009bc40 	call	9bc4 <__lo0bits>
    a514:	d8c00017 	ldw	r3,0(sp)
    a518:	1000291e 	bne	r2,zero,a5c0 <__d2b+0x118>
    a51c:	d9000117 	ldw	r4,4(sp)
    a520:	99000515 	stw	r4,20(r19)
    a524:	1820c03a 	cmpne	r16,r3,zero
    a528:	84000044 	addi	r16,r16,1
    a52c:	98c00615 	stw	r3,24(r19)
    a530:	9c000415 	stw	r16,16(r19)
    a534:	88001b1e 	bne	r17,zero,a5a4 <__d2b+0xfc>
    a538:	800690ba 	slli	r3,r16,2
    a53c:	10bef384 	addi	r2,r2,-1074
    a540:	a0800015 	stw	r2,0(r20)
    a544:	98c5883a 	add	r2,r19,r3
    a548:	11000417 	ldw	r4,16(r2)
    a54c:	8020917a 	slli	r16,r16,5
    a550:	0009b5c0 	call	9b5c <__hi0bits>
    a554:	8085c83a 	sub	r2,r16,r2
    a558:	90800015 	stw	r2,0(r18)
    a55c:	9805883a 	mov	r2,r19
    a560:	dfc00817 	ldw	ra,32(sp)
    a564:	dd400717 	ldw	r21,28(sp)
    a568:	dd000617 	ldw	r20,24(sp)
    a56c:	dcc00517 	ldw	r19,20(sp)
    a570:	dc800417 	ldw	r18,16(sp)
    a574:	dc400317 	ldw	r17,12(sp)
    a578:	dc000217 	ldw	r16,8(sp)
    a57c:	dec00904 	addi	sp,sp,36
    a580:	f800283a 	ret
    a584:	d809883a 	mov	r4,sp
    a588:	0009bc40 	call	9bc4 <__lo0bits>
    a58c:	d8c00017 	ldw	r3,0(sp)
    a590:	04000044 	movi	r16,1
    a594:	9c000415 	stw	r16,16(r19)
    a598:	98c00515 	stw	r3,20(r19)
    a59c:	10800804 	addi	r2,r2,32
    a5a0:	883fe526 	beq	r17,zero,a538 <__alt_mem_sram+0xf7e0a538>
    a5a4:	8c7ef344 	addi	r17,r17,-1075
    a5a8:	88a3883a 	add	r17,r17,r2
    a5ac:	00c00d44 	movi	r3,53
    a5b0:	a4400015 	stw	r17,0(r20)
    a5b4:	1885c83a 	sub	r2,r3,r2
    a5b8:	90800015 	stw	r2,0(r18)
    a5bc:	003fe706 	br	a55c <__alt_mem_sram+0xf7e0a55c>
    a5c0:	01000804 	movi	r4,32
    a5c4:	2089c83a 	sub	r4,r4,r2
    a5c8:	1908983a 	sll	r4,r3,r4
    a5cc:	d9400117 	ldw	r5,4(sp)
    a5d0:	1886d83a 	srl	r3,r3,r2
    a5d4:	2148b03a 	or	r4,r4,r5
    a5d8:	99000515 	stw	r4,20(r19)
    a5dc:	d8c00015 	stw	r3,0(sp)
    a5e0:	003fd006 	br	a524 <__alt_mem_sram+0xf7e0a524>

0000a5e4 <__ratio>:
    a5e4:	defff904 	addi	sp,sp,-28
    a5e8:	dc400315 	stw	r17,12(sp)
    a5ec:	2823883a 	mov	r17,r5
    a5f0:	d9400104 	addi	r5,sp,4
    a5f4:	dfc00615 	stw	ra,24(sp)
    a5f8:	dcc00515 	stw	r19,20(sp)
    a5fc:	dc800415 	stw	r18,16(sp)
    a600:	2027883a 	mov	r19,r4
    a604:	dc000215 	stw	r16,8(sp)
    a608:	000a38c0 	call	a38c <__b2d>
    a60c:	8809883a 	mov	r4,r17
    a610:	d80b883a 	mov	r5,sp
    a614:	1025883a 	mov	r18,r2
    a618:	1821883a 	mov	r16,r3
    a61c:	000a38c0 	call	a38c <__b2d>
    a620:	8a400417 	ldw	r9,16(r17)
    a624:	9a000417 	ldw	r8,16(r19)
    a628:	100d883a 	mov	r6,r2
    a62c:	d8800017 	ldw	r2,0(sp)
    a630:	4251c83a 	sub	r8,r8,r9
    a634:	4012917a 	slli	r9,r8,5
    a638:	da000117 	ldw	r8,4(sp)
    a63c:	4091c83a 	sub	r8,r8,r2
    a640:	4251883a 	add	r8,r8,r9
    a644:	02000d0e 	bge	zero,r8,a67c <__ratio+0x98>
    a648:	4010953a 	slli	r8,r8,20
    a64c:	4421883a 	add	r16,r8,r16
    a650:	9009883a 	mov	r4,r18
    a654:	800b883a 	mov	r5,r16
    a658:	180f883a 	mov	r7,r3
    a65c:	000e32c0 	call	e32c <__divdf3>
    a660:	dfc00617 	ldw	ra,24(sp)
    a664:	dcc00517 	ldw	r19,20(sp)
    a668:	dc800417 	ldw	r18,16(sp)
    a66c:	dc400317 	ldw	r17,12(sp)
    a670:	dc000217 	ldw	r16,8(sp)
    a674:	dec00704 	addi	sp,sp,28
    a678:	f800283a 	ret
    a67c:	4010953a 	slli	r8,r8,20
    a680:	1a07c83a 	sub	r3,r3,r8
    a684:	003ff206 	br	a650 <__alt_mem_sram+0xf7e0a650>

0000a688 <_mprec_log10>:
    a688:	defffe04 	addi	sp,sp,-8
    a68c:	dc000015 	stw	r16,0(sp)
    a690:	dfc00115 	stw	ra,4(sp)
    a694:	008005c4 	movi	r2,23
    a698:	2021883a 	mov	r16,r4
    a69c:	11000d0e 	bge	r2,r4,a6d4 <_mprec_log10+0x4c>
    a6a0:	0005883a 	mov	r2,zero
    a6a4:	00cffc34 	movhi	r3,16368
    a6a8:	843fffc4 	addi	r16,r16,-1
    a6ac:	1009883a 	mov	r4,r2
    a6b0:	180b883a 	mov	r5,r3
    a6b4:	000d883a 	mov	r6,zero
    a6b8:	01d00934 	movhi	r7,16420
    a6bc:	000ee3c0 	call	ee3c <__muldf3>
    a6c0:	803ff91e 	bne	r16,zero,a6a8 <__alt_mem_sram+0xf7e0a6a8>
    a6c4:	dfc00117 	ldw	ra,4(sp)
    a6c8:	dc000017 	ldw	r16,0(sp)
    a6cc:	dec00204 	addi	sp,sp,8
    a6d0:	f800283a 	ret
    a6d4:	202090fa 	slli	r16,r4,3
    a6d8:	00800074 	movhi	r2,1
    a6dc:	108c9a04 	addi	r2,r2,12904
    a6e0:	1421883a 	add	r16,r2,r16
    a6e4:	80800017 	ldw	r2,0(r16)
    a6e8:	80c00117 	ldw	r3,4(r16)
    a6ec:	dfc00117 	ldw	ra,4(sp)
    a6f0:	dc000017 	ldw	r16,0(sp)
    a6f4:	dec00204 	addi	sp,sp,8
    a6f8:	f800283a 	ret

0000a6fc <__copybits>:
    a6fc:	297fffc4 	addi	r5,r5,-1
    a700:	280fd17a 	srai	r7,r5,5
    a704:	30c00417 	ldw	r3,16(r6)
    a708:	30800504 	addi	r2,r6,20
    a70c:	39c00044 	addi	r7,r7,1
    a710:	18c7883a 	add	r3,r3,r3
    a714:	39cf883a 	add	r7,r7,r7
    a718:	18c7883a 	add	r3,r3,r3
    a71c:	39cf883a 	add	r7,r7,r7
    a720:	10c7883a 	add	r3,r2,r3
    a724:	21cf883a 	add	r7,r4,r7
    a728:	10c00d2e 	bgeu	r2,r3,a760 <__copybits+0x64>
    a72c:	200b883a 	mov	r5,r4
    a730:	12000017 	ldw	r8,0(r2)
    a734:	29400104 	addi	r5,r5,4
    a738:	10800104 	addi	r2,r2,4
    a73c:	2a3fff15 	stw	r8,-4(r5)
    a740:	10fffb36 	bltu	r2,r3,a730 <__alt_mem_sram+0xf7e0a730>
    a744:	1985c83a 	sub	r2,r3,r6
    a748:	10bffac4 	addi	r2,r2,-21
    a74c:	1004d0ba 	srli	r2,r2,2
    a750:	10800044 	addi	r2,r2,1
    a754:	1085883a 	add	r2,r2,r2
    a758:	1085883a 	add	r2,r2,r2
    a75c:	2089883a 	add	r4,r4,r2
    a760:	21c0032e 	bgeu	r4,r7,a770 <__copybits+0x74>
    a764:	20000015 	stw	zero,0(r4)
    a768:	21000104 	addi	r4,r4,4
    a76c:	21fffd36 	bltu	r4,r7,a764 <__alt_mem_sram+0xf7e0a764>
    a770:	f800283a 	ret

0000a774 <__any_on>:
    a774:	20c00417 	ldw	r3,16(r4)
    a778:	2805d17a 	srai	r2,r5,5
    a77c:	21000504 	addi	r4,r4,20
    a780:	18800d0e 	bge	r3,r2,a7b8 <__any_on+0x44>
    a784:	18c7883a 	add	r3,r3,r3
    a788:	18c7883a 	add	r3,r3,r3
    a78c:	20c7883a 	add	r3,r4,r3
    a790:	20c0192e 	bgeu	r4,r3,a7f8 <__any_on+0x84>
    a794:	18bfff17 	ldw	r2,-4(r3)
    a798:	18ffff04 	addi	r3,r3,-4
    a79c:	1000041e 	bne	r2,zero,a7b0 <__any_on+0x3c>
    a7a0:	20c0142e 	bgeu	r4,r3,a7f4 <__any_on+0x80>
    a7a4:	18ffff04 	addi	r3,r3,-4
    a7a8:	19400017 	ldw	r5,0(r3)
    a7ac:	283ffc26 	beq	r5,zero,a7a0 <__alt_mem_sram+0xf7e0a7a0>
    a7b0:	00800044 	movi	r2,1
    a7b4:	f800283a 	ret
    a7b8:	10c00a0e 	bge	r2,r3,a7e4 <__any_on+0x70>
    a7bc:	1085883a 	add	r2,r2,r2
    a7c0:	1085883a 	add	r2,r2,r2
    a7c4:	294007cc 	andi	r5,r5,31
    a7c8:	2087883a 	add	r3,r4,r2
    a7cc:	283ff026 	beq	r5,zero,a790 <__alt_mem_sram+0xf7e0a790>
    a7d0:	19800017 	ldw	r6,0(r3)
    a7d4:	3144d83a 	srl	r2,r6,r5
    a7d8:	114a983a 	sll	r5,r2,r5
    a7dc:	29bff41e 	bne	r5,r6,a7b0 <__alt_mem_sram+0xf7e0a7b0>
    a7e0:	003feb06 	br	a790 <__alt_mem_sram+0xf7e0a790>
    a7e4:	1085883a 	add	r2,r2,r2
    a7e8:	1085883a 	add	r2,r2,r2
    a7ec:	2087883a 	add	r3,r4,r2
    a7f0:	003fe706 	br	a790 <__alt_mem_sram+0xf7e0a790>
    a7f4:	f800283a 	ret
    a7f8:	0005883a 	mov	r2,zero
    a7fc:	f800283a 	ret

0000a800 <_realloc_r>:
    a800:	defff604 	addi	sp,sp,-40
    a804:	dcc00315 	stw	r19,12(sp)
    a808:	dc400115 	stw	r17,4(sp)
    a80c:	dfc00915 	stw	ra,36(sp)
    a810:	df000815 	stw	fp,32(sp)
    a814:	ddc00715 	stw	r23,28(sp)
    a818:	dd800615 	stw	r22,24(sp)
    a81c:	dd400515 	stw	r21,20(sp)
    a820:	dd000415 	stw	r20,16(sp)
    a824:	dc800215 	stw	r18,8(sp)
    a828:	dc000015 	stw	r16,0(sp)
    a82c:	2827883a 	mov	r19,r5
    a830:	3023883a 	mov	r17,r6
    a834:	2800bf26 	beq	r5,zero,ab34 <_realloc_r+0x334>
    a838:	2025883a 	mov	r18,r4
    a83c:	00106500 	call	10650 <__malloc_lock>
    a840:	98ffff17 	ldw	r3,-4(r19)
    a844:	01bfff04 	movi	r6,-4
    a848:	890002c4 	addi	r4,r17,11
    a84c:	01c00584 	movi	r7,22
    a850:	9d7ffe04 	addi	r21,r19,-8
    a854:	19a0703a 	and	r16,r3,r6
    a858:	39003f2e 	bgeu	r7,r4,a958 <_realloc_r+0x158>
    a85c:	053ffe04 	movi	r20,-8
    a860:	2528703a 	and	r20,r4,r20
    a864:	a00f883a 	mov	r7,r20
    a868:	a0008216 	blt	r20,zero,aa74 <_realloc_r+0x274>
    a86c:	a4408136 	bltu	r20,r17,aa74 <_realloc_r+0x274>
    a870:	81c03c0e 	bge	r16,r7,a964 <_realloc_r+0x164>
    a874:	07000074 	movhi	fp,1
    a878:	e70e4604 	addi	fp,fp,14616
    a87c:	e1000217 	ldw	r4,8(fp)
    a880:	ac05883a 	add	r2,r21,r16
    a884:	2080bf26 	beq	r4,r2,ab84 <_realloc_r+0x384>
    a888:	11000117 	ldw	r4,4(r2)
    a88c:	023fff84 	movi	r8,-2
    a890:	2210703a 	and	r8,r4,r8
    a894:	1211883a 	add	r8,r2,r8
    a898:	41400117 	ldw	r5,4(r8)
    a89c:	2940004c 	andi	r5,r5,1
    a8a0:	28004a1e 	bne	r5,zero,a9cc <_realloc_r+0x1cc>
    a8a4:	017fff04 	movi	r5,-4
    a8a8:	2148703a 	and	r4,r4,r5
    a8ac:	2409883a 	add	r4,r4,r16
    a8b0:	21c0ad0e 	bge	r4,r7,ab68 <_realloc_r+0x368>
    a8b4:	18c0004c 	andi	r3,r3,1
    a8b8:	18007f1e 	bne	r3,zero,aab8 <_realloc_r+0x2b8>
    a8bc:	9dfffe17 	ldw	r23,-8(r19)
    a8c0:	adefc83a 	sub	r23,r21,r23
    a8c4:	bd800117 	ldw	r22,4(r23)
    a8c8:	b14a703a 	and	r5,r22,r5
    a8cc:	216d883a 	add	r22,r4,r5
    a8d0:	b1c04516 	blt	r22,r7,a9e8 <_realloc_r+0x1e8>
    a8d4:	10c00317 	ldw	r3,12(r2)
    a8d8:	10800217 	ldw	r2,8(r2)
    a8dc:	81bfff04 	addi	r6,r16,-4
    a8e0:	bc400204 	addi	r17,r23,8
    a8e4:	10c00315 	stw	r3,12(r2)
    a8e8:	18800215 	stw	r2,8(r3)
    a8ec:	b9400217 	ldw	r5,8(r23)
    a8f0:	b8c00317 	ldw	r3,12(r23)
    a8f4:	00800904 	movi	r2,36
    a8f8:	28c00315 	stw	r3,12(r5)
    a8fc:	19400215 	stw	r5,8(r3)
    a900:	1180ef36 	bltu	r2,r6,acc0 <_realloc_r+0x4c0>
    a904:	008004c4 	movi	r2,19
    a908:	1180da2e 	bgeu	r2,r6,ac74 <_realloc_r+0x474>
    a90c:	98800017 	ldw	r2,0(r19)
    a910:	b8800215 	stw	r2,8(r23)
    a914:	98800117 	ldw	r2,4(r19)
    a918:	b8800315 	stw	r2,12(r23)
    a91c:	008006c4 	movi	r2,27
    a920:	1180fc2e 	bgeu	r2,r6,ad14 <_realloc_r+0x514>
    a924:	98800217 	ldw	r2,8(r19)
    a928:	b8800415 	stw	r2,16(r23)
    a92c:	98800317 	ldw	r2,12(r19)
    a930:	b8800515 	stw	r2,20(r23)
    a934:	00800904 	movi	r2,36
    a938:	3080421e 	bne	r6,r2,aa44 <_realloc_r+0x244>
    a93c:	98800417 	ldw	r2,16(r19)
    a940:	9cc00604 	addi	r19,r19,24
    a944:	b8c00804 	addi	r3,r23,32
    a948:	b8800615 	stw	r2,24(r23)
    a94c:	98bfff17 	ldw	r2,-4(r19)
    a950:	b8800715 	stw	r2,28(r23)
    a954:	00003d06 	br	aa4c <_realloc_r+0x24c>
    a958:	01c00404 	movi	r7,16
    a95c:	3829883a 	mov	r20,r7
    a960:	003fc206 	br	a86c <__alt_mem_sram+0xf7e0a86c>
    a964:	9823883a 	mov	r17,r19
    a968:	850fc83a 	sub	r7,r16,r20
    a96c:	008003c4 	movi	r2,15
    a970:	18c0004c 	andi	r3,r3,1
    a974:	11c04336 	bltu	r2,r7,aa84 <_realloc_r+0x284>
    a978:	1c06b03a 	or	r3,r3,r16
    a97c:	a8c00115 	stw	r3,4(r21)
    a980:	ac21883a 	add	r16,r21,r16
    a984:	80c00117 	ldw	r3,4(r16)
    a988:	18c00054 	ori	r3,r3,1
    a98c:	80c00115 	stw	r3,4(r16)
    a990:	9009883a 	mov	r4,r18
    a994:	00106700 	call	10670 <__malloc_unlock>
    a998:	8805883a 	mov	r2,r17
    a99c:	dfc00917 	ldw	ra,36(sp)
    a9a0:	df000817 	ldw	fp,32(sp)
    a9a4:	ddc00717 	ldw	r23,28(sp)
    a9a8:	dd800617 	ldw	r22,24(sp)
    a9ac:	dd400517 	ldw	r21,20(sp)
    a9b0:	dd000417 	ldw	r20,16(sp)
    a9b4:	dcc00317 	ldw	r19,12(sp)
    a9b8:	dc800217 	ldw	r18,8(sp)
    a9bc:	dc400117 	ldw	r17,4(sp)
    a9c0:	dc000017 	ldw	r16,0(sp)
    a9c4:	dec00a04 	addi	sp,sp,40
    a9c8:	f800283a 	ret
    a9cc:	18c0004c 	andi	r3,r3,1
    a9d0:	1800391e 	bne	r3,zero,aab8 <_realloc_r+0x2b8>
    a9d4:	9dfffe17 	ldw	r23,-8(r19)
    a9d8:	00bfff04 	movi	r2,-4
    a9dc:	adefc83a 	sub	r23,r21,r23
    a9e0:	b9400117 	ldw	r5,4(r23)
    a9e4:	288a703a 	and	r5,r5,r2
    a9e8:	2c2d883a 	add	r22,r5,r16
    a9ec:	b1c03216 	blt	r22,r7,aab8 <_realloc_r+0x2b8>
    a9f0:	b8800317 	ldw	r2,12(r23)
    a9f4:	b8c00217 	ldw	r3,8(r23)
    a9f8:	81bfff04 	addi	r6,r16,-4
    a9fc:	01000904 	movi	r4,36
    aa00:	18800315 	stw	r2,12(r3)
    aa04:	10c00215 	stw	r3,8(r2)
    aa08:	bc400204 	addi	r17,r23,8
    aa0c:	2180ac36 	bltu	r4,r6,acc0 <_realloc_r+0x4c0>
    aa10:	008004c4 	movi	r2,19
    aa14:	1180972e 	bgeu	r2,r6,ac74 <_realloc_r+0x474>
    aa18:	98800017 	ldw	r2,0(r19)
    aa1c:	b8800215 	stw	r2,8(r23)
    aa20:	98800117 	ldw	r2,4(r19)
    aa24:	b8800315 	stw	r2,12(r23)
    aa28:	008006c4 	movi	r2,27
    aa2c:	1180b92e 	bgeu	r2,r6,ad14 <_realloc_r+0x514>
    aa30:	98800217 	ldw	r2,8(r19)
    aa34:	b8800415 	stw	r2,16(r23)
    aa38:	98800317 	ldw	r2,12(r19)
    aa3c:	b8800515 	stw	r2,20(r23)
    aa40:	313fbe26 	beq	r6,r4,a93c <__alt_mem_sram+0xf7e0a93c>
    aa44:	b8c00604 	addi	r3,r23,24
    aa48:	9cc00404 	addi	r19,r19,16
    aa4c:	98800017 	ldw	r2,0(r19)
    aa50:	b021883a 	mov	r16,r22
    aa54:	b82b883a 	mov	r21,r23
    aa58:	18800015 	stw	r2,0(r3)
    aa5c:	98800117 	ldw	r2,4(r19)
    aa60:	18800115 	stw	r2,4(r3)
    aa64:	98800217 	ldw	r2,8(r19)
    aa68:	18800215 	stw	r2,8(r3)
    aa6c:	b8c00117 	ldw	r3,4(r23)
    aa70:	003fbd06 	br	a968 <__alt_mem_sram+0xf7e0a968>
    aa74:	00800304 	movi	r2,12
    aa78:	90800015 	stw	r2,0(r18)
    aa7c:	0005883a 	mov	r2,zero
    aa80:	003fc606 	br	a99c <__alt_mem_sram+0xf7e0a99c>
    aa84:	1d06b03a 	or	r3,r3,r20
    aa88:	ad0b883a 	add	r5,r21,r20
    aa8c:	a8c00115 	stw	r3,4(r21)
    aa90:	38800054 	ori	r2,r7,1
    aa94:	28800115 	stw	r2,4(r5)
    aa98:	29cf883a 	add	r7,r5,r7
    aa9c:	38800117 	ldw	r2,4(r7)
    aaa0:	9009883a 	mov	r4,r18
    aaa4:	29400204 	addi	r5,r5,8
    aaa8:	10800054 	ori	r2,r2,1
    aaac:	38800115 	stw	r2,4(r7)
    aab0:	00080900 	call	8090 <_free_r>
    aab4:	003fb606 	br	a990 <__alt_mem_sram+0xf7e0a990>
    aab8:	880b883a 	mov	r5,r17
    aabc:	9009883a 	mov	r4,r18
    aac0:	0008c2c0 	call	8c2c <_malloc_r>
    aac4:	1023883a 	mov	r17,r2
    aac8:	1000aa26 	beq	r2,zero,ad74 <_realloc_r+0x574>
    aacc:	98ffff17 	ldw	r3,-4(r19)
    aad0:	113ffe04 	addi	r4,r2,-8
    aad4:	00bfff84 	movi	r2,-2
    aad8:	1884703a 	and	r2,r3,r2
    aadc:	a885883a 	add	r2,r21,r2
    aae0:	20808626 	beq	r4,r2,acfc <_realloc_r+0x4fc>
    aae4:	81bfff04 	addi	r6,r16,-4
    aae8:	00800904 	movi	r2,36
    aaec:	11807036 	bltu	r2,r6,acb0 <_realloc_r+0x4b0>
    aaf0:	00c004c4 	movi	r3,19
    aaf4:	19805636 	bltu	r3,r6,ac50 <_realloc_r+0x450>
    aaf8:	8805883a 	mov	r2,r17
    aafc:	9807883a 	mov	r3,r19
    ab00:	19000017 	ldw	r4,0(r3)
    ab04:	11000015 	stw	r4,0(r2)
    ab08:	19000117 	ldw	r4,4(r3)
    ab0c:	11000115 	stw	r4,4(r2)
    ab10:	18c00217 	ldw	r3,8(r3)
    ab14:	10c00215 	stw	r3,8(r2)
    ab18:	980b883a 	mov	r5,r19
    ab1c:	9009883a 	mov	r4,r18
    ab20:	00080900 	call	8090 <_free_r>
    ab24:	9009883a 	mov	r4,r18
    ab28:	00106700 	call	10670 <__malloc_unlock>
    ab2c:	8805883a 	mov	r2,r17
    ab30:	003f9a06 	br	a99c <__alt_mem_sram+0xf7e0a99c>
    ab34:	300b883a 	mov	r5,r6
    ab38:	dfc00917 	ldw	ra,36(sp)
    ab3c:	df000817 	ldw	fp,32(sp)
    ab40:	ddc00717 	ldw	r23,28(sp)
    ab44:	dd800617 	ldw	r22,24(sp)
    ab48:	dd400517 	ldw	r21,20(sp)
    ab4c:	dd000417 	ldw	r20,16(sp)
    ab50:	dcc00317 	ldw	r19,12(sp)
    ab54:	dc800217 	ldw	r18,8(sp)
    ab58:	dc400117 	ldw	r17,4(sp)
    ab5c:	dc000017 	ldw	r16,0(sp)
    ab60:	dec00a04 	addi	sp,sp,40
    ab64:	0008c2c1 	jmpi	8c2c <_malloc_r>
    ab68:	11400317 	ldw	r5,12(r2)
    ab6c:	10800217 	ldw	r2,8(r2)
    ab70:	9823883a 	mov	r17,r19
    ab74:	2021883a 	mov	r16,r4
    ab78:	11400315 	stw	r5,12(r2)
    ab7c:	28800215 	stw	r2,8(r5)
    ab80:	003f7906 	br	a968 <__alt_mem_sram+0xf7e0a968>
    ab84:	21000117 	ldw	r4,4(r4)
    ab88:	00bfff04 	movi	r2,-4
    ab8c:	a1800404 	addi	r6,r20,16
    ab90:	2088703a 	and	r4,r4,r2
    ab94:	2409883a 	add	r4,r4,r16
    ab98:	2180380e 	bge	r4,r6,ac7c <_realloc_r+0x47c>
    ab9c:	18c0004c 	andi	r3,r3,1
    aba0:	183fc51e 	bne	r3,zero,aab8 <__alt_mem_sram+0xf7e0aab8>
    aba4:	9dfffe17 	ldw	r23,-8(r19)
    aba8:	adefc83a 	sub	r23,r21,r23
    abac:	b9400117 	ldw	r5,4(r23)
    abb0:	288a703a 	and	r5,r5,r2
    abb4:	216d883a 	add	r22,r4,r5
    abb8:	b1bf8b16 	blt	r22,r6,a9e8 <__alt_mem_sram+0xf7e0a9e8>
    abbc:	b8800317 	ldw	r2,12(r23)
    abc0:	b8c00217 	ldw	r3,8(r23)
    abc4:	81bfff04 	addi	r6,r16,-4
    abc8:	01000904 	movi	r4,36
    abcc:	18800315 	stw	r2,12(r3)
    abd0:	10c00215 	stw	r3,8(r2)
    abd4:	bc400204 	addi	r17,r23,8
    abd8:	21805a36 	bltu	r4,r6,ad44 <_realloc_r+0x544>
    abdc:	008004c4 	movi	r2,19
    abe0:	1180562e 	bgeu	r2,r6,ad3c <_realloc_r+0x53c>
    abe4:	98800017 	ldw	r2,0(r19)
    abe8:	b8800215 	stw	r2,8(r23)
    abec:	98800117 	ldw	r2,4(r19)
    abf0:	b8800315 	stw	r2,12(r23)
    abf4:	008006c4 	movi	r2,27
    abf8:	11805636 	bltu	r2,r6,ad54 <_realloc_r+0x554>
    abfc:	b8800404 	addi	r2,r23,16
    ac00:	9cc00204 	addi	r19,r19,8
    ac04:	98c00017 	ldw	r3,0(r19)
    ac08:	10c00015 	stw	r3,0(r2)
    ac0c:	98c00117 	ldw	r3,4(r19)
    ac10:	10c00115 	stw	r3,4(r2)
    ac14:	98c00217 	ldw	r3,8(r19)
    ac18:	10c00215 	stw	r3,8(r2)
    ac1c:	bd07883a 	add	r3,r23,r20
    ac20:	b505c83a 	sub	r2,r22,r20
    ac24:	e0c00215 	stw	r3,8(fp)
    ac28:	10800054 	ori	r2,r2,1
    ac2c:	18800115 	stw	r2,4(r3)
    ac30:	b8800117 	ldw	r2,4(r23)
    ac34:	9009883a 	mov	r4,r18
    ac38:	1080004c 	andi	r2,r2,1
    ac3c:	a0a8b03a 	or	r20,r20,r2
    ac40:	bd000115 	stw	r20,4(r23)
    ac44:	00106700 	call	10670 <__malloc_unlock>
    ac48:	8805883a 	mov	r2,r17
    ac4c:	003f5306 	br	a99c <__alt_mem_sram+0xf7e0a99c>
    ac50:	98c00017 	ldw	r3,0(r19)
    ac54:	88c00015 	stw	r3,0(r17)
    ac58:	98c00117 	ldw	r3,4(r19)
    ac5c:	88c00115 	stw	r3,4(r17)
    ac60:	00c006c4 	movi	r3,27
    ac64:	19801d36 	bltu	r3,r6,acdc <_realloc_r+0x4dc>
    ac68:	88800204 	addi	r2,r17,8
    ac6c:	98c00204 	addi	r3,r19,8
    ac70:	003fa306 	br	ab00 <__alt_mem_sram+0xf7e0ab00>
    ac74:	8807883a 	mov	r3,r17
    ac78:	003f7406 	br	aa4c <__alt_mem_sram+0xf7e0aa4c>
    ac7c:	ad2b883a 	add	r21,r21,r20
    ac80:	2505c83a 	sub	r2,r4,r20
    ac84:	e5400215 	stw	r21,8(fp)
    ac88:	10800054 	ori	r2,r2,1
    ac8c:	a8800115 	stw	r2,4(r21)
    ac90:	98bfff17 	ldw	r2,-4(r19)
    ac94:	9009883a 	mov	r4,r18
    ac98:	1080004c 	andi	r2,r2,1
    ac9c:	a0a8b03a 	or	r20,r20,r2
    aca0:	9d3fff15 	stw	r20,-4(r19)
    aca4:	00106700 	call	10670 <__malloc_unlock>
    aca8:	9805883a 	mov	r2,r19
    acac:	003f3b06 	br	a99c <__alt_mem_sram+0xf7e0a99c>
    acb0:	8809883a 	mov	r4,r17
    acb4:	980b883a 	mov	r5,r19
    acb8:	00095f40 	call	95f4 <memmove>
    acbc:	003f9606 	br	ab18 <__alt_mem_sram+0xf7e0ab18>
    acc0:	8809883a 	mov	r4,r17
    acc4:	980b883a 	mov	r5,r19
    acc8:	00095f40 	call	95f4 <memmove>
    accc:	b8c00117 	ldw	r3,4(r23)
    acd0:	b021883a 	mov	r16,r22
    acd4:	b82b883a 	mov	r21,r23
    acd8:	003f2306 	br	a968 <__alt_mem_sram+0xf7e0a968>
    acdc:	98c00217 	ldw	r3,8(r19)
    ace0:	88c00215 	stw	r3,8(r17)
    ace4:	98c00317 	ldw	r3,12(r19)
    ace8:	88c00315 	stw	r3,12(r17)
    acec:	30800c26 	beq	r6,r2,ad20 <_realloc_r+0x520>
    acf0:	88800404 	addi	r2,r17,16
    acf4:	98c00404 	addi	r3,r19,16
    acf8:	003f8106 	br	ab00 <__alt_mem_sram+0xf7e0ab00>
    acfc:	893fff17 	ldw	r4,-4(r17)
    ad00:	00bfff04 	movi	r2,-4
    ad04:	9823883a 	mov	r17,r19
    ad08:	2084703a 	and	r2,r4,r2
    ad0c:	80a1883a 	add	r16,r16,r2
    ad10:	003f1506 	br	a968 <__alt_mem_sram+0xf7e0a968>
    ad14:	b8c00404 	addi	r3,r23,16
    ad18:	9cc00204 	addi	r19,r19,8
    ad1c:	003f4b06 	br	aa4c <__alt_mem_sram+0xf7e0aa4c>
    ad20:	99000417 	ldw	r4,16(r19)
    ad24:	88800604 	addi	r2,r17,24
    ad28:	98c00604 	addi	r3,r19,24
    ad2c:	89000415 	stw	r4,16(r17)
    ad30:	99000517 	ldw	r4,20(r19)
    ad34:	89000515 	stw	r4,20(r17)
    ad38:	003f7106 	br	ab00 <__alt_mem_sram+0xf7e0ab00>
    ad3c:	8805883a 	mov	r2,r17
    ad40:	003fb006 	br	ac04 <__alt_mem_sram+0xf7e0ac04>
    ad44:	8809883a 	mov	r4,r17
    ad48:	980b883a 	mov	r5,r19
    ad4c:	00095f40 	call	95f4 <memmove>
    ad50:	003fb206 	br	ac1c <__alt_mem_sram+0xf7e0ac1c>
    ad54:	98800217 	ldw	r2,8(r19)
    ad58:	b8800415 	stw	r2,16(r23)
    ad5c:	98800317 	ldw	r2,12(r19)
    ad60:	b8800515 	stw	r2,20(r23)
    ad64:	31000726 	beq	r6,r4,ad84 <_realloc_r+0x584>
    ad68:	b8800604 	addi	r2,r23,24
    ad6c:	9cc00404 	addi	r19,r19,16
    ad70:	003fa406 	br	ac04 <__alt_mem_sram+0xf7e0ac04>
    ad74:	9009883a 	mov	r4,r18
    ad78:	00106700 	call	10670 <__malloc_unlock>
    ad7c:	0005883a 	mov	r2,zero
    ad80:	003f0606 	br	a99c <__alt_mem_sram+0xf7e0a99c>
    ad84:	98c00417 	ldw	r3,16(r19)
    ad88:	9cc00604 	addi	r19,r19,24
    ad8c:	b8800804 	addi	r2,r23,32
    ad90:	b8c00615 	stw	r3,24(r23)
    ad94:	98ffff17 	ldw	r3,-4(r19)
    ad98:	b8c00715 	stw	r3,28(r23)
    ad9c:	003f9906 	br	ac04 <__alt_mem_sram+0xf7e0ac04>

0000ada0 <__fpclassifyd>:
    ada0:	00a00034 	movhi	r2,32768
    ada4:	10bfffc4 	addi	r2,r2,-1
    ada8:	2884703a 	and	r2,r5,r2
    adac:	10000726 	beq	r2,zero,adcc <__fpclassifyd+0x2c>
    adb0:	00fffc34 	movhi	r3,65520
    adb4:	019ff834 	movhi	r6,32736
    adb8:	28c7883a 	add	r3,r5,r3
    adbc:	31bfffc4 	addi	r6,r6,-1
    adc0:	30c00536 	bltu	r6,r3,add8 <__fpclassifyd+0x38>
    adc4:	00800104 	movi	r2,4
    adc8:	f800283a 	ret
    adcc:	2000021e 	bne	r4,zero,add8 <__fpclassifyd+0x38>
    add0:	00800084 	movi	r2,2
    add4:	f800283a 	ret
    add8:	00dffc34 	movhi	r3,32752
    addc:	019ff834 	movhi	r6,32736
    ade0:	28cb883a 	add	r5,r5,r3
    ade4:	31bfffc4 	addi	r6,r6,-1
    ade8:	317ff62e 	bgeu	r6,r5,adc4 <__alt_mem_sram+0xf7e0adc4>
    adec:	01400434 	movhi	r5,16
    adf0:	297fffc4 	addi	r5,r5,-1
    adf4:	28800236 	bltu	r5,r2,ae00 <__fpclassifyd+0x60>
    adf8:	008000c4 	movi	r2,3
    adfc:	f800283a 	ret
    ae00:	10c00226 	beq	r2,r3,ae0c <__fpclassifyd+0x6c>
    ae04:	0005883a 	mov	r2,zero
    ae08:	f800283a 	ret
    ae0c:	2005003a 	cmpeq	r2,r4,zero
    ae10:	f800283a 	ret

0000ae14 <_sbrk_r>:
    ae14:	defffd04 	addi	sp,sp,-12
    ae18:	dc000015 	stw	r16,0(sp)
    ae1c:	04000074 	movhi	r16,1
    ae20:	dc400115 	stw	r17,4(sp)
    ae24:	841a9c04 	addi	r16,r16,27248
    ae28:	2023883a 	mov	r17,r4
    ae2c:	2809883a 	mov	r4,r5
    ae30:	dfc00215 	stw	ra,8(sp)
    ae34:	80000015 	stw	zero,0(r16)
    ae38:	001083c0 	call	1083c <sbrk>
    ae3c:	00ffffc4 	movi	r3,-1
    ae40:	10c00526 	beq	r2,r3,ae58 <_sbrk_r+0x44>
    ae44:	dfc00217 	ldw	ra,8(sp)
    ae48:	dc400117 	ldw	r17,4(sp)
    ae4c:	dc000017 	ldw	r16,0(sp)
    ae50:	dec00304 	addi	sp,sp,12
    ae54:	f800283a 	ret
    ae58:	80c00017 	ldw	r3,0(r16)
    ae5c:	183ff926 	beq	r3,zero,ae44 <__alt_mem_sram+0xf7e0ae44>
    ae60:	88c00015 	stw	r3,0(r17)
    ae64:	003ff706 	br	ae44 <__alt_mem_sram+0xf7e0ae44>

0000ae68 <__sread>:
    ae68:	defffe04 	addi	sp,sp,-8
    ae6c:	dc000015 	stw	r16,0(sp)
    ae70:	2821883a 	mov	r16,r5
    ae74:	2940038f 	ldh	r5,14(r5)
    ae78:	dfc00115 	stw	ra,4(sp)
    ae7c:	000ca480 	call	ca48 <_read_r>
    ae80:	10000716 	blt	r2,zero,aea0 <__sread+0x38>
    ae84:	80c01417 	ldw	r3,80(r16)
    ae88:	1887883a 	add	r3,r3,r2
    ae8c:	80c01415 	stw	r3,80(r16)
    ae90:	dfc00117 	ldw	ra,4(sp)
    ae94:	dc000017 	ldw	r16,0(sp)
    ae98:	dec00204 	addi	sp,sp,8
    ae9c:	f800283a 	ret
    aea0:	80c0030b 	ldhu	r3,12(r16)
    aea4:	18fbffcc 	andi	r3,r3,61439
    aea8:	80c0030d 	sth	r3,12(r16)
    aeac:	dfc00117 	ldw	ra,4(sp)
    aeb0:	dc000017 	ldw	r16,0(sp)
    aeb4:	dec00204 	addi	sp,sp,8
    aeb8:	f800283a 	ret

0000aebc <__seofread>:
    aebc:	0005883a 	mov	r2,zero
    aec0:	f800283a 	ret

0000aec4 <__swrite>:
    aec4:	2880030b 	ldhu	r2,12(r5)
    aec8:	defffb04 	addi	sp,sp,-20
    aecc:	dcc00315 	stw	r19,12(sp)
    aed0:	dc800215 	stw	r18,8(sp)
    aed4:	dc400115 	stw	r17,4(sp)
    aed8:	dc000015 	stw	r16,0(sp)
    aedc:	dfc00415 	stw	ra,16(sp)
    aee0:	10c0400c 	andi	r3,r2,256
    aee4:	2821883a 	mov	r16,r5
    aee8:	2027883a 	mov	r19,r4
    aeec:	3025883a 	mov	r18,r6
    aef0:	3823883a 	mov	r17,r7
    aef4:	18000526 	beq	r3,zero,af0c <__swrite+0x48>
    aef8:	2940038f 	ldh	r5,14(r5)
    aefc:	000d883a 	mov	r6,zero
    af00:	01c00084 	movi	r7,2
    af04:	000c9ec0 	call	c9ec <_lseek_r>
    af08:	8080030b 	ldhu	r2,12(r16)
    af0c:	8140038f 	ldh	r5,14(r16)
    af10:	10bbffcc 	andi	r2,r2,61439
    af14:	9809883a 	mov	r4,r19
    af18:	900d883a 	mov	r6,r18
    af1c:	880f883a 	mov	r7,r17
    af20:	8080030d 	sth	r2,12(r16)
    af24:	dfc00417 	ldw	ra,16(sp)
    af28:	dcc00317 	ldw	r19,12(sp)
    af2c:	dc800217 	ldw	r18,8(sp)
    af30:	dc400117 	ldw	r17,4(sp)
    af34:	dc000017 	ldw	r16,0(sp)
    af38:	dec00504 	addi	sp,sp,20
    af3c:	000c4dc1 	jmpi	c4dc <_write_r>

0000af40 <__sseek>:
    af40:	defffe04 	addi	sp,sp,-8
    af44:	dc000015 	stw	r16,0(sp)
    af48:	2821883a 	mov	r16,r5
    af4c:	2940038f 	ldh	r5,14(r5)
    af50:	dfc00115 	stw	ra,4(sp)
    af54:	000c9ec0 	call	c9ec <_lseek_r>
    af58:	00ffffc4 	movi	r3,-1
    af5c:	10c00826 	beq	r2,r3,af80 <__sseek+0x40>
    af60:	80c0030b 	ldhu	r3,12(r16)
    af64:	80801415 	stw	r2,80(r16)
    af68:	18c40014 	ori	r3,r3,4096
    af6c:	80c0030d 	sth	r3,12(r16)
    af70:	dfc00117 	ldw	ra,4(sp)
    af74:	dc000017 	ldw	r16,0(sp)
    af78:	dec00204 	addi	sp,sp,8
    af7c:	f800283a 	ret
    af80:	80c0030b 	ldhu	r3,12(r16)
    af84:	18fbffcc 	andi	r3,r3,61439
    af88:	80c0030d 	sth	r3,12(r16)
    af8c:	dfc00117 	ldw	ra,4(sp)
    af90:	dc000017 	ldw	r16,0(sp)
    af94:	dec00204 	addi	sp,sp,8
    af98:	f800283a 	ret

0000af9c <__sclose>:
    af9c:	2940038f 	ldh	r5,14(r5)
    afa0:	000c5381 	jmpi	c538 <_close_r>

0000afa4 <strcmp>:
    afa4:	2144b03a 	or	r2,r4,r5
    afa8:	108000cc 	andi	r2,r2,3
    afac:	1000171e 	bne	r2,zero,b00c <strcmp+0x68>
    afb0:	20800017 	ldw	r2,0(r4)
    afb4:	28c00017 	ldw	r3,0(r5)
    afb8:	10c0141e 	bne	r2,r3,b00c <strcmp+0x68>
    afbc:	027fbff4 	movhi	r9,65279
    afc0:	4a7fbfc4 	addi	r9,r9,-257
    afc4:	0086303a 	nor	r3,zero,r2
    afc8:	02202074 	movhi	r8,32897
    afcc:	1245883a 	add	r2,r2,r9
    afd0:	42202004 	addi	r8,r8,-32640
    afd4:	10c4703a 	and	r2,r2,r3
    afd8:	1204703a 	and	r2,r2,r8
    afdc:	10000226 	beq	r2,zero,afe8 <strcmp+0x44>
    afe0:	00001706 	br	b040 <strcmp+0x9c>
    afe4:	1000161e 	bne	r2,zero,b040 <strcmp+0x9c>
    afe8:	21000104 	addi	r4,r4,4
    afec:	20c00017 	ldw	r3,0(r4)
    aff0:	29400104 	addi	r5,r5,4
    aff4:	29800017 	ldw	r6,0(r5)
    aff8:	1a4f883a 	add	r7,r3,r9
    affc:	00c4303a 	nor	r2,zero,r3
    b000:	3884703a 	and	r2,r7,r2
    b004:	1204703a 	and	r2,r2,r8
    b008:	19bff626 	beq	r3,r6,afe4 <__alt_mem_sram+0xf7e0afe4>
    b00c:	20800007 	ldb	r2,0(r4)
    b010:	1000051e 	bne	r2,zero,b028 <strcmp+0x84>
    b014:	00000606 	br	b030 <strcmp+0x8c>
    b018:	21000044 	addi	r4,r4,1
    b01c:	20800007 	ldb	r2,0(r4)
    b020:	29400044 	addi	r5,r5,1
    b024:	10000226 	beq	r2,zero,b030 <strcmp+0x8c>
    b028:	28c00007 	ldb	r3,0(r5)
    b02c:	10fffa26 	beq	r2,r3,b018 <__alt_mem_sram+0xf7e0b018>
    b030:	20800003 	ldbu	r2,0(r4)
    b034:	28c00003 	ldbu	r3,0(r5)
    b038:	10c5c83a 	sub	r2,r2,r3
    b03c:	f800283a 	ret
    b040:	0005883a 	mov	r2,zero
    b044:	f800283a 	ret

0000b048 <__sprint_r.part.0>:
    b048:	28801917 	ldw	r2,100(r5)
    b04c:	defff604 	addi	sp,sp,-40
    b050:	dd400515 	stw	r21,20(sp)
    b054:	dcc00315 	stw	r19,12(sp)
    b058:	dfc00915 	stw	ra,36(sp)
    b05c:	df000815 	stw	fp,32(sp)
    b060:	ddc00715 	stw	r23,28(sp)
    b064:	dd800615 	stw	r22,24(sp)
    b068:	dd000415 	stw	r20,16(sp)
    b06c:	dc800215 	stw	r18,8(sp)
    b070:	dc400115 	stw	r17,4(sp)
    b074:	dc000015 	stw	r16,0(sp)
    b078:	1088000c 	andi	r2,r2,8192
    b07c:	2827883a 	mov	r19,r5
    b080:	302b883a 	mov	r21,r6
    b084:	10002d26 	beq	r2,zero,b13c <__sprint_r.part.0+0xf4>
    b088:	30800217 	ldw	r2,8(r6)
    b08c:	35800017 	ldw	r22,0(r6)
    b090:	10002826 	beq	r2,zero,b134 <__sprint_r.part.0+0xec>
    b094:	2029883a 	mov	r20,r4
    b098:	b5c00104 	addi	r23,r22,4
    b09c:	04bfffc4 	movi	r18,-1
    b0a0:	bc400017 	ldw	r17,0(r23)
    b0a4:	b4000017 	ldw	r16,0(r22)
    b0a8:	0039883a 	mov	fp,zero
    b0ac:	8822d0ba 	srli	r17,r17,2
    b0b0:	04400316 	blt	zero,r17,b0c0 <__sprint_r.part.0+0x78>
    b0b4:	00001706 	br	b114 <__sprint_r.part.0+0xcc>
    b0b8:	84000104 	addi	r16,r16,4
    b0bc:	8f001526 	beq	r17,fp,b114 <__sprint_r.part.0+0xcc>
    b0c0:	81400017 	ldw	r5,0(r16)
    b0c4:	a009883a 	mov	r4,r20
    b0c8:	980d883a 	mov	r6,r19
    b0cc:	000c7640 	call	c764 <_fputwc_r>
    b0d0:	e7000044 	addi	fp,fp,1
    b0d4:	14bff81e 	bne	r2,r18,b0b8 <__alt_mem_sram+0xf7e0b0b8>
    b0d8:	9005883a 	mov	r2,r18
    b0dc:	a8000215 	stw	zero,8(r21)
    b0e0:	a8000115 	stw	zero,4(r21)
    b0e4:	dfc00917 	ldw	ra,36(sp)
    b0e8:	df000817 	ldw	fp,32(sp)
    b0ec:	ddc00717 	ldw	r23,28(sp)
    b0f0:	dd800617 	ldw	r22,24(sp)
    b0f4:	dd400517 	ldw	r21,20(sp)
    b0f8:	dd000417 	ldw	r20,16(sp)
    b0fc:	dcc00317 	ldw	r19,12(sp)
    b100:	dc800217 	ldw	r18,8(sp)
    b104:	dc400117 	ldw	r17,4(sp)
    b108:	dc000017 	ldw	r16,0(sp)
    b10c:	dec00a04 	addi	sp,sp,40
    b110:	f800283a 	ret
    b114:	a8c00217 	ldw	r3,8(r21)
    b118:	8c63883a 	add	r17,r17,r17
    b11c:	8c63883a 	add	r17,r17,r17
    b120:	1c45c83a 	sub	r2,r3,r17
    b124:	a8800215 	stw	r2,8(r21)
    b128:	b5800204 	addi	r22,r22,8
    b12c:	bdc00204 	addi	r23,r23,8
    b130:	103fdb1e 	bne	r2,zero,b0a0 <__alt_mem_sram+0xf7e0b0a0>
    b134:	0005883a 	mov	r2,zero
    b138:	003fe806 	br	b0dc <__alt_mem_sram+0xf7e0b0dc>
    b13c:	00083800 	call	8380 <__sfvwrite_r>
    b140:	003fe606 	br	b0dc <__alt_mem_sram+0xf7e0b0dc>

0000b144 <__sprint_r>:
    b144:	30c00217 	ldw	r3,8(r6)
    b148:	18000126 	beq	r3,zero,b150 <__sprint_r+0xc>
    b14c:	000b0481 	jmpi	b048 <__sprint_r.part.0>
    b150:	30000115 	stw	zero,4(r6)
    b154:	0005883a 	mov	r2,zero
    b158:	f800283a 	ret

0000b15c <___vfiprintf_internal_r>:
    b15c:	defeca04 	addi	sp,sp,-1240
    b160:	dd813215 	stw	r22,1224(sp)
    b164:	dd013015 	stw	r20,1216(sp)
    b168:	dfc13515 	stw	ra,1236(sp)
    b16c:	df013415 	stw	fp,1232(sp)
    b170:	ddc13315 	stw	r23,1228(sp)
    b174:	dd413115 	stw	r21,1220(sp)
    b178:	dcc12f15 	stw	r19,1212(sp)
    b17c:	dc812e15 	stw	r18,1208(sp)
    b180:	dc412d15 	stw	r17,1204(sp)
    b184:	dc012c15 	stw	r16,1200(sp)
    b188:	d9012015 	stw	r4,1152(sp)
    b18c:	d9c12115 	stw	r7,1156(sp)
    b190:	2829883a 	mov	r20,r5
    b194:	302d883a 	mov	r22,r6
    b198:	20000226 	beq	r4,zero,b1a4 <___vfiprintf_internal_r+0x48>
    b19c:	20800e17 	ldw	r2,56(r4)
    b1a0:	1001d326 	beq	r2,zero,b8f0 <___vfiprintf_internal_r+0x794>
    b1a4:	a0c0030b 	ldhu	r3,12(r20)
    b1a8:	1908000c 	andi	r4,r3,8192
    b1ac:	1805883a 	mov	r2,r3
    b1b0:	2000071e 	bne	r4,zero,b1d0 <___vfiprintf_internal_r+0x74>
    b1b4:	a1001917 	ldw	r4,100(r20)
    b1b8:	18880014 	ori	r2,r3,8192
    b1bc:	00f7ffc4 	movi	r3,-8193
    b1c0:	20c8703a 	and	r4,r4,r3
    b1c4:	a080030d 	sth	r2,12(r20)
    b1c8:	1007883a 	mov	r3,r2
    b1cc:	a1001915 	stw	r4,100(r20)
    b1d0:	1100020c 	andi	r4,r2,8
    b1d4:	20018926 	beq	r4,zero,b7fc <___vfiprintf_internal_r+0x6a0>
    b1d8:	a1000417 	ldw	r4,16(r20)
    b1dc:	20018726 	beq	r4,zero,b7fc <___vfiprintf_internal_r+0x6a0>
    b1e0:	1080068c 	andi	r2,r2,26
    b1e4:	01000284 	movi	r4,10
    b1e8:	11018d26 	beq	r2,r4,b820 <___vfiprintf_internal_r+0x6c4>
    b1ec:	da810a04 	addi	r10,sp,1064
    b1f0:	dac109c4 	addi	r11,sp,1063
    b1f4:	07000074 	movhi	fp,1
    b1f8:	05c00074 	movhi	r23,1
    b1fc:	da811e15 	stw	r10,1144(sp)
    b200:	52d5c83a 	sub	r10,r10,r11
    b204:	e70cd004 	addi	fp,fp,13120
    b208:	bdcccc04 	addi	r23,r23,13104
    b20c:	dac11f15 	stw	r11,1148(sp)
    b210:	dec11a15 	stw	sp,1128(sp)
    b214:	d8011c15 	stw	zero,1136(sp)
    b218:	d8011b15 	stw	zero,1132(sp)
    b21c:	d8012615 	stw	zero,1176(sp)
    b220:	d8012215 	stw	zero,1160(sp)
    b224:	da812715 	stw	r10,1180(sp)
    b228:	d811883a 	mov	r8,sp
    b22c:	b021883a 	mov	r16,r22
    b230:	80800007 	ldb	r2,0(r16)
    b234:	10039c26 	beq	r2,zero,c0a8 <___vfiprintf_internal_r+0xf4c>
    b238:	01000944 	movi	r4,37
    b23c:	11039a26 	beq	r2,r4,c0a8 <___vfiprintf_internal_r+0xf4c>
    b240:	8005883a 	mov	r2,r16
    b244:	00000106 	br	b24c <___vfiprintf_internal_r+0xf0>
    b248:	19000326 	beq	r3,r4,b258 <___vfiprintf_internal_r+0xfc>
    b24c:	10800044 	addi	r2,r2,1
    b250:	10c00007 	ldb	r3,0(r2)
    b254:	183ffc1e 	bne	r3,zero,b248 <__alt_mem_sram+0xf7e0b248>
    b258:	1425c83a 	sub	r18,r2,r16
    b25c:	1023883a 	mov	r17,r2
    b260:	90001026 	beq	r18,zero,b2a4 <___vfiprintf_internal_r+0x148>
    b264:	d8c11c17 	ldw	r3,1136(sp)
    b268:	d8811b17 	ldw	r2,1132(sp)
    b26c:	44000015 	stw	r16,0(r8)
    b270:	90c7883a 	add	r3,r18,r3
    b274:	10800044 	addi	r2,r2,1
    b278:	44800115 	stw	r18,4(r8)
    b27c:	d8c11c15 	stw	r3,1136(sp)
    b280:	d8811b15 	stw	r2,1132(sp)
    b284:	010001c4 	movi	r4,7
    b288:	2080750e 	bge	r4,r2,b460 <___vfiprintf_internal_r+0x304>
    b28c:	18039d1e 	bne	r3,zero,c104 <___vfiprintf_internal_r+0xfa8>
    b290:	dac12217 	ldw	r11,1160(sp)
    b294:	d8011b15 	stw	zero,1132(sp)
    b298:	d811883a 	mov	r8,sp
    b29c:	5c97883a 	add	r11,r11,r18
    b2a0:	dac12215 	stw	r11,1160(sp)
    b2a4:	88800007 	ldb	r2,0(r17)
    b2a8:	1002e026 	beq	r2,zero,be2c <___vfiprintf_internal_r+0xcd0>
    b2ac:	88c00047 	ldb	r3,1(r17)
    b2b0:	8c000044 	addi	r16,r17,1
    b2b4:	d8011d85 	stb	zero,1142(sp)
    b2b8:	000d883a 	mov	r6,zero
    b2bc:	027fffc4 	movi	r9,-1
    b2c0:	0027883a 	mov	r19,zero
    b2c4:	002b883a 	mov	r21,zero
    b2c8:	01001604 	movi	r4,88
    b2cc:	01400244 	movi	r5,9
    b2d0:	03000a84 	movi	r12,42
    b2d4:	01c01b04 	movi	r7,108
    b2d8:	84000044 	addi	r16,r16,1
    b2dc:	18bff804 	addi	r2,r3,-32
    b2e0:	20825f36 	bltu	r4,r2,bc60 <___vfiprintf_internal_r+0xb04>
    b2e4:	100490ba 	slli	r2,r2,2
    b2e8:	02800074 	movhi	r10,1
    b2ec:	52acbf04 	addi	r10,r10,-19716
    b2f0:	1285883a 	add	r2,r2,r10
    b2f4:	10800017 	ldw	r2,0(r2)
    b2f8:	1000683a 	jmp	r2
    b2fc:	0000bad0 	cmplti	zero,zero,747
    b300:	0000bc60 	cmpeqi	zero,zero,753
    b304:	0000bc60 	cmpeqi	zero,zero,753
    b308:	0000bc54 	movui	zero,753
    b30c:	0000bc60 	cmpeqi	zero,zero,753
    b310:	0000bc60 	cmpeqi	zero,zero,753
    b314:	0000bc60 	cmpeqi	zero,zero,753
    b318:	0000bc60 	cmpeqi	zero,zero,753
    b31c:	0000bc60 	cmpeqi	zero,zero,753
    b320:	0000bc60 	cmpeqi	zero,zero,753
    b324:	0000bc2c 	andhi	zero,zero,752
    b328:	0000bc48 	cmpgei	zero,zero,753
    b32c:	0000bc60 	cmpeqi	zero,zero,753
    b330:	0000b900 	call	b90 <main+0x934>
    b334:	0000ba60 	cmpeqi	zero,zero,745
    b338:	0000bc60 	cmpeqi	zero,zero,753
    b33c:	0000b9e4 	muli	zero,zero,743
    b340:	0000b9f0 	cmpltui	zero,zero,743
    b344:	0000b9f0 	cmpltui	zero,zero,743
    b348:	0000b9f0 	cmpltui	zero,zero,743
    b34c:	0000b9f0 	cmpltui	zero,zero,743
    b350:	0000b9f0 	cmpltui	zero,zero,743
    b354:	0000b9f0 	cmpltui	zero,zero,743
    b358:	0000b9f0 	cmpltui	zero,zero,743
    b35c:	0000b9f0 	cmpltui	zero,zero,743
    b360:	0000b9f0 	cmpltui	zero,zero,743
    b364:	0000bc60 	cmpeqi	zero,zero,753
    b368:	0000bc60 	cmpeqi	zero,zero,753
    b36c:	0000bc60 	cmpeqi	zero,zero,753
    b370:	0000bc60 	cmpeqi	zero,zero,753
    b374:	0000bc60 	cmpeqi	zero,zero,753
    b378:	0000bc60 	cmpeqi	zero,zero,753
    b37c:	0000bc60 	cmpeqi	zero,zero,753
    b380:	0000bc60 	cmpeqi	zero,zero,753
    b384:	0000bc60 	cmpeqi	zero,zero,753
    b388:	0000bc60 	cmpeqi	zero,zero,753
    b38c:	0000ba1c 	xori	zero,zero,744
    b390:	0000bc60 	cmpeqi	zero,zero,753
    b394:	0000bc60 	cmpeqi	zero,zero,753
    b398:	0000bc60 	cmpeqi	zero,zero,753
    b39c:	0000bc60 	cmpeqi	zero,zero,753
    b3a0:	0000bc60 	cmpeqi	zero,zero,753
    b3a4:	0000bc60 	cmpeqi	zero,zero,753
    b3a8:	0000bc60 	cmpeqi	zero,zero,753
    b3ac:	0000bc60 	cmpeqi	zero,zero,753
    b3b0:	0000bc60 	cmpeqi	zero,zero,753
    b3b4:	0000bc60 	cmpeqi	zero,zero,753
    b3b8:	0000b4b0 	cmpltui	zero,zero,722
    b3bc:	0000bc60 	cmpeqi	zero,zero,753
    b3c0:	0000bc60 	cmpeqi	zero,zero,753
    b3c4:	0000bc60 	cmpeqi	zero,zero,753
    b3c8:	0000bc60 	cmpeqi	zero,zero,753
    b3cc:	0000bc60 	cmpeqi	zero,zero,753
    b3d0:	0000b474 	movhi	zero,721
    b3d4:	0000bc60 	cmpeqi	zero,zero,753
    b3d8:	0000bc60 	cmpeqi	zero,zero,753
    b3dc:	0000b95c 	xori	zero,zero,741
    b3e0:	0000bc60 	cmpeqi	zero,zero,753
    b3e4:	0000bc60 	cmpeqi	zero,zero,753
    b3e8:	0000bc60 	cmpeqi	zero,zero,753
    b3ec:	0000bc60 	cmpeqi	zero,zero,753
    b3f0:	0000bc60 	cmpeqi	zero,zero,753
    b3f4:	0000bc60 	cmpeqi	zero,zero,753
    b3f8:	0000bc60 	cmpeqi	zero,zero,753
    b3fc:	0000bc60 	cmpeqi	zero,zero,753
    b400:	0000bc60 	cmpeqi	zero,zero,753
    b404:	0000bc60 	cmpeqi	zero,zero,753
    b408:	0000b9b4 	movhi	zero,742
    b40c:	0000bb4c 	andi	zero,zero,749
    b410:	0000bc60 	cmpeqi	zero,zero,753
    b414:	0000bc60 	cmpeqi	zero,zero,753
    b418:	0000bc60 	cmpeqi	zero,zero,753
    b41c:	0000bbd4 	movui	zero,751
    b420:	0000bb4c 	andi	zero,zero,749
    b424:	0000bc60 	cmpeqi	zero,zero,753
    b428:	0000bc60 	cmpeqi	zero,zero,753
    b42c:	0000bbe0 	cmpeqi	zero,zero,751
    b430:	0000bc60 	cmpeqi	zero,zero,753
    b434:	0000baa0 	cmpeqi	zero,zero,746
    b438:	0000b4b4 	movhi	zero,722
    b43c:	0000bb88 	cmpgei	zero,zero,750
    b440:	0000bbc8 	cmpgei	zero,zero,751
    b444:	0000bc60 	cmpeqi	zero,zero,753
    b448:	0000baec 	andhi	zero,zero,747
    b44c:	0000bc60 	cmpeqi	zero,zero,753
    b450:	0000b478 	rdprs	zero,zero,721
    b454:	0000bc60 	cmpeqi	zero,zero,753
    b458:	0000bc60 	cmpeqi	zero,zero,753
    b45c:	0000bbf0 	cmpltui	zero,zero,751
    b460:	42000204 	addi	r8,r8,8
    b464:	dac12217 	ldw	r11,1160(sp)
    b468:	5c97883a 	add	r11,r11,r18
    b46c:	dac12215 	stw	r11,1160(sp)
    b470:	003f8c06 	br	b2a4 <__alt_mem_sram+0xf7e0b2a4>
    b474:	ad400414 	ori	r21,r21,16
    b478:	a880080c 	andi	r2,r21,32
    b47c:	10012f1e 	bne	r2,zero,b93c <___vfiprintf_internal_r+0x7e0>
    b480:	a880040c 	andi	r2,r21,16
    b484:	1001ff1e 	bne	r2,zero,bc84 <___vfiprintf_internal_r+0xb28>
    b488:	a880100c 	andi	r2,r21,64
    b48c:	1001fd26 	beq	r2,zero,bc84 <___vfiprintf_internal_r+0xb28>
    b490:	da812117 	ldw	r10,1156(sp)
    b494:	002d883a 	mov	r22,zero
    b498:	00800044 	movi	r2,1
    b49c:	5480000b 	ldhu	r18,0(r10)
    b4a0:	52800104 	addi	r10,r10,4
    b4a4:	da812115 	stw	r10,1156(sp)
    b4a8:	9009883a 	mov	r4,r18
    b4ac:	00000a06 	br	b4d8 <___vfiprintf_internal_r+0x37c>
    b4b0:	ad400414 	ori	r21,r21,16
    b4b4:	a880080c 	andi	r2,r21,32
    b4b8:	10011426 	beq	r2,zero,b90c <___vfiprintf_internal_r+0x7b0>
    b4bc:	da812117 	ldw	r10,1156(sp)
    b4c0:	0005883a 	mov	r2,zero
    b4c4:	54800017 	ldw	r18,0(r10)
    b4c8:	55800117 	ldw	r22,4(r10)
    b4cc:	52800204 	addi	r10,r10,8
    b4d0:	da812115 	stw	r10,1156(sp)
    b4d4:	9588b03a 	or	r4,r18,r22
    b4d8:	d8011d85 	stb	zero,1142(sp)
    b4dc:	4823883a 	mov	r17,r9
    b4e0:	0019883a 	mov	r12,zero
    b4e4:	48000216 	blt	r9,zero,b4f0 <___vfiprintf_internal_r+0x394>
    b4e8:	00ffdfc4 	movi	r3,-129
    b4ec:	a8ea703a 	and	r21,r21,r3
    b4f0:	2002221e 	bne	r4,zero,bd7c <___vfiprintf_internal_r+0xc20>
    b4f4:	4802c726 	beq	r9,zero,c014 <___vfiprintf_internal_r+0xeb8>
    b4f8:	10803fcc 	andi	r2,r2,255
    b4fc:	00c00044 	movi	r3,1
    b500:	10c24426 	beq	r2,r3,be14 <___vfiprintf_internal_r+0xcb8>
    b504:	00c00084 	movi	r3,2
    b508:	10c2cc26 	beq	r2,r3,c03c <___vfiprintf_internal_r+0xee0>
    b50c:	d8c10a04 	addi	r3,sp,1064
    b510:	9008d0fa 	srli	r4,r18,3
    b514:	b00a977a 	slli	r5,r22,29
    b518:	b02cd0fa 	srli	r22,r22,3
    b51c:	948001cc 	andi	r18,r18,7
    b520:	90800c04 	addi	r2,r18,48
    b524:	18ffffc4 	addi	r3,r3,-1
    b528:	2924b03a 	or	r18,r5,r4
    b52c:	18800005 	stb	r2,0(r3)
    b530:	9588b03a 	or	r4,r18,r22
    b534:	203ff61e 	bne	r4,zero,b510 <__alt_mem_sram+0xf7e0b510>
    b538:	a900004c 	andi	r4,r21,1
    b53c:	d8c12415 	stw	r3,1168(sp)
    b540:	2002fb1e 	bne	r4,zero,c130 <___vfiprintf_internal_r+0xfd4>
    b544:	da811e17 	ldw	r10,1144(sp)
    b548:	50e3c83a 	sub	r17,r10,r3
    b54c:	8825883a 	mov	r18,r17
    b550:	8a40010e 	bge	r17,r9,b558 <___vfiprintf_internal_r+0x3fc>
    b554:	4825883a 	mov	r18,r9
    b558:	63003fcc 	andi	r12,r12,255
    b55c:	6300201c 	xori	r12,r12,128
    b560:	633fe004 	addi	r12,r12,-128
    b564:	60000126 	beq	r12,zero,b56c <___vfiprintf_internal_r+0x410>
    b568:	94800044 	addi	r18,r18,1
    b56c:	ab80008c 	andi	r14,r21,2
    b570:	70000126 	beq	r14,zero,b578 <___vfiprintf_internal_r+0x41c>
    b574:	94800084 	addi	r18,r18,2
    b578:	ad80210c 	andi	r22,r21,132
    b57c:	b001df1e 	bne	r22,zero,bcfc <___vfiprintf_internal_r+0xba0>
    b580:	9c8fc83a 	sub	r7,r19,r18
    b584:	01c1dd0e 	bge	zero,r7,bcfc <___vfiprintf_internal_r+0xba0>
    b588:	03000404 	movi	r12,16
    b58c:	d8811c17 	ldw	r2,1136(sp)
    b590:	61c3920e 	bge	r12,r7,c3dc <___vfiprintf_internal_r+0x1280>
    b594:	02800074 	movhi	r10,1
    b598:	528cd004 	addi	r10,r10,13120
    b59c:	dc012915 	stw	r16,1188(sp)
    b5a0:	d9811b17 	ldw	r6,1132(sp)
    b5a4:	da812315 	stw	r10,1164(sp)
    b5a8:	00c001c4 	movi	r3,7
    b5ac:	da412515 	stw	r9,1172(sp)
    b5b0:	db812815 	stw	r14,1184(sp)
    b5b4:	3821883a 	mov	r16,r7
    b5b8:	00000506 	br	b5d0 <___vfiprintf_internal_r+0x474>
    b5bc:	31400084 	addi	r5,r6,2
    b5c0:	42000204 	addi	r8,r8,8
    b5c4:	200d883a 	mov	r6,r4
    b5c8:	843ffc04 	addi	r16,r16,-16
    b5cc:	64000d0e 	bge	r12,r16,b604 <___vfiprintf_internal_r+0x4a8>
    b5d0:	10800404 	addi	r2,r2,16
    b5d4:	31000044 	addi	r4,r6,1
    b5d8:	47000015 	stw	fp,0(r8)
    b5dc:	43000115 	stw	r12,4(r8)
    b5e0:	d8811c15 	stw	r2,1136(sp)
    b5e4:	d9011b15 	stw	r4,1132(sp)
    b5e8:	193ff40e 	bge	r3,r4,b5bc <__alt_mem_sram+0xf7e0b5bc>
    b5ec:	1001b51e 	bne	r2,zero,bcc4 <___vfiprintf_internal_r+0xb68>
    b5f0:	843ffc04 	addi	r16,r16,-16
    b5f4:	000d883a 	mov	r6,zero
    b5f8:	01400044 	movi	r5,1
    b5fc:	d811883a 	mov	r8,sp
    b600:	643ff316 	blt	r12,r16,b5d0 <__alt_mem_sram+0xf7e0b5d0>
    b604:	800f883a 	mov	r7,r16
    b608:	da412517 	ldw	r9,1172(sp)
    b60c:	db812817 	ldw	r14,1184(sp)
    b610:	dc012917 	ldw	r16,1188(sp)
    b614:	dac12317 	ldw	r11,1164(sp)
    b618:	3887883a 	add	r3,r7,r2
    b61c:	41c00115 	stw	r7,4(r8)
    b620:	42c00015 	stw	r11,0(r8)
    b624:	d8c11c15 	stw	r3,1136(sp)
    b628:	d9411b15 	stw	r5,1132(sp)
    b62c:	008001c4 	movi	r2,7
    b630:	11429316 	blt	r2,r5,c080 <___vfiprintf_internal_r+0xf24>
    b634:	d9011d87 	ldb	r4,1142(sp)
    b638:	42000204 	addi	r8,r8,8
    b63c:	28800044 	addi	r2,r5,1
    b640:	2001b31e 	bne	r4,zero,bd10 <___vfiprintf_internal_r+0xbb4>
    b644:	70000c26 	beq	r14,zero,b678 <___vfiprintf_internal_r+0x51c>
    b648:	d9011d04 	addi	r4,sp,1140
    b64c:	18c00084 	addi	r3,r3,2
    b650:	41000015 	stw	r4,0(r8)
    b654:	01000084 	movi	r4,2
    b658:	41000115 	stw	r4,4(r8)
    b65c:	d8c11c15 	stw	r3,1136(sp)
    b660:	d8811b15 	stw	r2,1132(sp)
    b664:	010001c4 	movi	r4,7
    b668:	20826516 	blt	r4,r2,c000 <___vfiprintf_internal_r+0xea4>
    b66c:	100b883a 	mov	r5,r2
    b670:	42000204 	addi	r8,r8,8
    b674:	10800044 	addi	r2,r2,1
    b678:	01002004 	movi	r4,128
    b67c:	b1021a26 	beq	r22,r4,bee8 <___vfiprintf_internal_r+0xd8c>
    b680:	4c6dc83a 	sub	r22,r9,r17
    b684:	0580230e 	bge	zero,r22,b714 <___vfiprintf_internal_r+0x5b8>
    b688:	01c00404 	movi	r7,16
    b68c:	3d83300e 	bge	r7,r22,c350 <___vfiprintf_internal_r+0x11f4>
    b690:	00800074 	movhi	r2,1
    b694:	108ccc04 	addi	r2,r2,13104
    b698:	d8812315 	stw	r2,1164(sp)
    b69c:	030001c4 	movi	r12,7
    b6a0:	00000506 	br	b6b8 <___vfiprintf_internal_r+0x55c>
    b6a4:	28800084 	addi	r2,r5,2
    b6a8:	42000204 	addi	r8,r8,8
    b6ac:	200b883a 	mov	r5,r4
    b6b0:	b5bffc04 	addi	r22,r22,-16
    b6b4:	3d800d0e 	bge	r7,r22,b6ec <___vfiprintf_internal_r+0x590>
    b6b8:	18c00404 	addi	r3,r3,16
    b6bc:	29000044 	addi	r4,r5,1
    b6c0:	45c00015 	stw	r23,0(r8)
    b6c4:	41c00115 	stw	r7,4(r8)
    b6c8:	d8c11c15 	stw	r3,1136(sp)
    b6cc:	d9011b15 	stw	r4,1132(sp)
    b6d0:	613ff40e 	bge	r12,r4,b6a4 <__alt_mem_sram+0xf7e0b6a4>
    b6d4:	18019b1e 	bne	r3,zero,bd44 <___vfiprintf_internal_r+0xbe8>
    b6d8:	b5bffc04 	addi	r22,r22,-16
    b6dc:	000b883a 	mov	r5,zero
    b6e0:	00800044 	movi	r2,1
    b6e4:	d811883a 	mov	r8,sp
    b6e8:	3dbff316 	blt	r7,r22,b6b8 <__alt_mem_sram+0xf7e0b6b8>
    b6ec:	da812317 	ldw	r10,1164(sp)
    b6f0:	1d87883a 	add	r3,r3,r22
    b6f4:	45800115 	stw	r22,4(r8)
    b6f8:	42800015 	stw	r10,0(r8)
    b6fc:	d8c11c15 	stw	r3,1136(sp)
    b700:	d8811b15 	stw	r2,1132(sp)
    b704:	010001c4 	movi	r4,7
    b708:	2081dd16 	blt	r4,r2,be80 <___vfiprintf_internal_r+0xd24>
    b70c:	42000204 	addi	r8,r8,8
    b710:	10800044 	addi	r2,r2,1
    b714:	da812417 	ldw	r10,1168(sp)
    b718:	1c47883a 	add	r3,r3,r17
    b71c:	44400115 	stw	r17,4(r8)
    b720:	42800015 	stw	r10,0(r8)
    b724:	d8c11c15 	stw	r3,1136(sp)
    b728:	d8811b15 	stw	r2,1132(sp)
    b72c:	010001c4 	movi	r4,7
    b730:	2081dc0e 	bge	r4,r2,bea4 <___vfiprintf_internal_r+0xd48>
    b734:	1802611e 	bne	r3,zero,c0bc <___vfiprintf_internal_r+0xf60>
    b738:	d8011b15 	stw	zero,1132(sp)
    b73c:	aac0010c 	andi	r11,r21,4
    b740:	58002726 	beq	r11,zero,b7e0 <___vfiprintf_internal_r+0x684>
    b744:	9ca3c83a 	sub	r17,r19,r18
    b748:	d811883a 	mov	r8,sp
    b74c:	0443510e 	bge	zero,r17,c494 <___vfiprintf_internal_r+0x1338>
    b750:	01c00404 	movi	r7,16
    b754:	3c43320e 	bge	r7,r17,c420 <___vfiprintf_internal_r+0x12c4>
    b758:	00800074 	movhi	r2,1
    b75c:	108cd004 	addi	r2,r2,13120
    b760:	d9011b17 	ldw	r4,1132(sp)
    b764:	d8812315 	stw	r2,1164(sp)
    b768:	382d883a 	mov	r22,r7
    b76c:	054001c4 	movi	r21,7
    b770:	00000506 	br	b788 <___vfiprintf_internal_r+0x62c>
    b774:	21400084 	addi	r5,r4,2
    b778:	42000204 	addi	r8,r8,8
    b77c:	1009883a 	mov	r4,r2
    b780:	8c7ffc04 	addi	r17,r17,-16
    b784:	b4400d0e 	bge	r22,r17,b7bc <___vfiprintf_internal_r+0x660>
    b788:	18c00404 	addi	r3,r3,16
    b78c:	20800044 	addi	r2,r4,1
    b790:	47000015 	stw	fp,0(r8)
    b794:	45800115 	stw	r22,4(r8)
    b798:	d8c11c15 	stw	r3,1136(sp)
    b79c:	d8811b15 	stw	r2,1132(sp)
    b7a0:	a8bff40e 	bge	r21,r2,b774 <__alt_mem_sram+0xf7e0b774>
    b7a4:	1801ac1e 	bne	r3,zero,be58 <___vfiprintf_internal_r+0xcfc>
    b7a8:	8c7ffc04 	addi	r17,r17,-16
    b7ac:	0009883a 	mov	r4,zero
    b7b0:	01400044 	movi	r5,1
    b7b4:	d811883a 	mov	r8,sp
    b7b8:	b47ff316 	blt	r22,r17,b788 <__alt_mem_sram+0xf7e0b788>
    b7bc:	da812317 	ldw	r10,1164(sp)
    b7c0:	1c47883a 	add	r3,r3,r17
    b7c4:	44400115 	stw	r17,4(r8)
    b7c8:	42800015 	stw	r10,0(r8)
    b7cc:	d8c11c15 	stw	r3,1136(sp)
    b7d0:	d9411b15 	stw	r5,1132(sp)
    b7d4:	008001c4 	movi	r2,7
    b7d8:	1141b70e 	bge	r2,r5,beb8 <___vfiprintf_internal_r+0xd5c>
    b7dc:	1802cf1e 	bne	r3,zero,c31c <___vfiprintf_internal_r+0x11c0>
    b7e0:	94c2ca16 	blt	r18,r19,c30c <___vfiprintf_internal_r+0x11b0>
    b7e4:	dac12217 	ldw	r11,1160(sp)
    b7e8:	5c97883a 	add	r11,r11,r18
    b7ec:	dac12215 	stw	r11,1160(sp)
    b7f0:	d8011b15 	stw	zero,1132(sp)
    b7f4:	d811883a 	mov	r8,sp
    b7f8:	003e8d06 	br	b230 <__alt_mem_sram+0xf7e0b230>
    b7fc:	d9012017 	ldw	r4,1152(sp)
    b800:	a00b883a 	mov	r5,r20
    b804:	0005f1c0 	call	5f1c <__swsetup_r>
    b808:	10002c1e 	bne	r2,zero,b8bc <___vfiprintf_internal_r+0x760>
    b80c:	a0c0030b 	ldhu	r3,12(r20)
    b810:	01000284 	movi	r4,10
    b814:	1805883a 	mov	r2,r3
    b818:	1080068c 	andi	r2,r2,26
    b81c:	113e731e 	bne	r2,r4,b1ec <__alt_mem_sram+0xf7e0b1ec>
    b820:	a080038b 	ldhu	r2,14(r20)
    b824:	113fffcc 	andi	r4,r2,65535
    b828:	2120001c 	xori	r4,r4,32768
    b82c:	21200004 	addi	r4,r4,-32768
    b830:	203e6e16 	blt	r4,zero,b1ec <__alt_mem_sram+0xf7e0b1ec>
    b834:	a3001917 	ldw	r12,100(r20)
    b838:	a2c00717 	ldw	r11,28(r20)
    b83c:	a2800917 	ldw	r10,36(r20)
    b840:	d9012017 	ldw	r4,1152(sp)
    b844:	d9c12117 	ldw	r7,1156(sp)
    b848:	02410004 	movi	r9,1024
    b84c:	18ffff4c 	andi	r3,r3,65533
    b850:	da4b883a 	add	r5,sp,r9
    b854:	b00d883a 	mov	r6,r22
    b858:	d8c1030d 	sth	r3,1036(sp)
    b85c:	db011915 	stw	r12,1124(sp)
    b860:	d881038d 	sth	r2,1038(sp)
    b864:	dac10715 	stw	r11,1052(sp)
    b868:	da810915 	stw	r10,1060(sp)
    b86c:	dec10015 	stw	sp,1024(sp)
    b870:	dec10415 	stw	sp,1040(sp)
    b874:	da410215 	stw	r9,1032(sp)
    b878:	da410515 	stw	r9,1044(sp)
    b87c:	d8010615 	stw	zero,1048(sp)
    b880:	000b15c0 	call	b15c <___vfiprintf_internal_r>
    b884:	1021883a 	mov	r16,r2
    b888:	10000416 	blt	r2,zero,b89c <___vfiprintf_internal_r+0x740>
    b88c:	d9012017 	ldw	r4,1152(sp)
    b890:	d9410004 	addi	r5,sp,1024
    b894:	00079740 	call	7974 <_fflush_r>
    b898:	1002fc1e 	bne	r2,zero,c48c <___vfiprintf_internal_r+0x1330>
    b89c:	d881030b 	ldhu	r2,1036(sp)
    b8a0:	1080100c 	andi	r2,r2,64
    b8a4:	10000326 	beq	r2,zero,b8b4 <___vfiprintf_internal_r+0x758>
    b8a8:	a080030b 	ldhu	r2,12(r20)
    b8ac:	10801014 	ori	r2,r2,64
    b8b0:	a080030d 	sth	r2,12(r20)
    b8b4:	8005883a 	mov	r2,r16
    b8b8:	00000106 	br	b8c0 <___vfiprintf_internal_r+0x764>
    b8bc:	00bfffc4 	movi	r2,-1
    b8c0:	dfc13517 	ldw	ra,1236(sp)
    b8c4:	df013417 	ldw	fp,1232(sp)
    b8c8:	ddc13317 	ldw	r23,1228(sp)
    b8cc:	dd813217 	ldw	r22,1224(sp)
    b8d0:	dd413117 	ldw	r21,1220(sp)
    b8d4:	dd013017 	ldw	r20,1216(sp)
    b8d8:	dcc12f17 	ldw	r19,1212(sp)
    b8dc:	dc812e17 	ldw	r18,1208(sp)
    b8e0:	dc412d17 	ldw	r17,1204(sp)
    b8e4:	dc012c17 	ldw	r16,1200(sp)
    b8e8:	dec13604 	addi	sp,sp,1240
    b8ec:	f800283a 	ret
    b8f0:	0007f1c0 	call	7f1c <__sinit>
    b8f4:	003e2b06 	br	b1a4 <__alt_mem_sram+0xf7e0b1a4>
    b8f8:	04e7c83a 	sub	r19,zero,r19
    b8fc:	d8812115 	stw	r2,1156(sp)
    b900:	ad400114 	ori	r21,r21,4
    b904:	80c00007 	ldb	r3,0(r16)
    b908:	003e7306 	br	b2d8 <__alt_mem_sram+0xf7e0b2d8>
    b90c:	a880040c 	andi	r2,r21,16
    b910:	1000e41e 	bne	r2,zero,bca4 <___vfiprintf_internal_r+0xb48>
    b914:	a880100c 	andi	r2,r21,64
    b918:	1000e226 	beq	r2,zero,bca4 <___vfiprintf_internal_r+0xb48>
    b91c:	da812117 	ldw	r10,1156(sp)
    b920:	002d883a 	mov	r22,zero
    b924:	0005883a 	mov	r2,zero
    b928:	5480000b 	ldhu	r18,0(r10)
    b92c:	52800104 	addi	r10,r10,4
    b930:	da812115 	stw	r10,1156(sp)
    b934:	9009883a 	mov	r4,r18
    b938:	003ee706 	br	b4d8 <__alt_mem_sram+0xf7e0b4d8>
    b93c:	da812117 	ldw	r10,1156(sp)
    b940:	00800044 	movi	r2,1
    b944:	54800017 	ldw	r18,0(r10)
    b948:	55800117 	ldw	r22,4(r10)
    b94c:	52800204 	addi	r10,r10,8
    b950:	da812115 	stw	r10,1156(sp)
    b954:	9588b03a 	or	r4,r18,r22
    b958:	003edf06 	br	b4d8 <__alt_mem_sram+0xf7e0b4d8>
    b95c:	02c00074 	movhi	r11,1
    b960:	5acc6604 	addi	r11,r11,12696
    b964:	d9811d85 	stb	r6,1142(sp)
    b968:	dac12615 	stw	r11,1176(sp)
    b96c:	a900080c 	andi	r4,r21,32
    b970:	d8812117 	ldw	r2,1156(sp)
    b974:	2000a526 	beq	r4,zero,bc0c <___vfiprintf_internal_r+0xab0>
    b978:	da812117 	ldw	r10,1156(sp)
    b97c:	14800017 	ldw	r18,0(r2)
    b980:	15800117 	ldw	r22,4(r2)
    b984:	52800204 	addi	r10,r10,8
    b988:	da812115 	stw	r10,1156(sp)
    b98c:	a880004c 	andi	r2,r21,1
    b990:	1001d926 	beq	r2,zero,c0f8 <___vfiprintf_internal_r+0xf9c>
    b994:	9588b03a 	or	r4,r18,r22
    b998:	20024426 	beq	r4,zero,c2ac <___vfiprintf_internal_r+0x1150>
    b99c:	00800c04 	movi	r2,48
    b9a0:	d8811d05 	stb	r2,1140(sp)
    b9a4:	d8c11d45 	stb	r3,1141(sp)
    b9a8:	ad400094 	ori	r21,r21,2
    b9ac:	00800084 	movi	r2,2
    b9b0:	003ec906 	br	b4d8 <__alt_mem_sram+0xf7e0b4d8>
    b9b4:	da812117 	ldw	r10,1156(sp)
    b9b8:	04800044 	movi	r18,1
    b9bc:	dac10004 	addi	r11,sp,1024
    b9c0:	50800017 	ldw	r2,0(r10)
    b9c4:	52800104 	addi	r10,r10,4
    b9c8:	d8011d85 	stb	zero,1142(sp)
    b9cc:	d8810005 	stb	r2,1024(sp)
    b9d0:	da812115 	stw	r10,1156(sp)
    b9d4:	9023883a 	mov	r17,r18
    b9d8:	dac12415 	stw	r11,1168(sp)
    b9dc:	0013883a 	mov	r9,zero
    b9e0:	003ee206 	br	b56c <__alt_mem_sram+0xf7e0b56c>
    b9e4:	ad402014 	ori	r21,r21,128
    b9e8:	80c00007 	ldb	r3,0(r16)
    b9ec:	003e3a06 	br	b2d8 <__alt_mem_sram+0xf7e0b2d8>
    b9f0:	8015883a 	mov	r10,r16
    b9f4:	0027883a 	mov	r19,zero
    b9f8:	18bff404 	addi	r2,r3,-48
    b9fc:	50c00007 	ldb	r3,0(r10)
    ba00:	9cc002a4 	muli	r19,r19,10
    ba04:	84000044 	addi	r16,r16,1
    ba08:	8015883a 	mov	r10,r16
    ba0c:	98a7883a 	add	r19,r19,r2
    ba10:	18bff404 	addi	r2,r3,-48
    ba14:	28bff92e 	bgeu	r5,r2,b9fc <__alt_mem_sram+0xf7e0b9fc>
    ba18:	003e3006 	br	b2dc <__alt_mem_sram+0xf7e0b2dc>
    ba1c:	ad400414 	ori	r21,r21,16
    ba20:	d9811d85 	stb	r6,1142(sp)
    ba24:	a880080c 	andi	r2,r21,32
    ba28:	d8c12117 	ldw	r3,1156(sp)
    ba2c:	10004b26 	beq	r2,zero,bb5c <___vfiprintf_internal_r+0xa00>
    ba30:	da812117 	ldw	r10,1156(sp)
    ba34:	18800117 	ldw	r2,4(r3)
    ba38:	1c800017 	ldw	r18,0(r3)
    ba3c:	52800204 	addi	r10,r10,8
    ba40:	da812115 	stw	r10,1156(sp)
    ba44:	102d883a 	mov	r22,r2
    ba48:	1001f116 	blt	r2,zero,c210 <___vfiprintf_internal_r+0x10b4>
    ba4c:	db011d83 	ldbu	r12,1142(sp)
    ba50:	4823883a 	mov	r17,r9
    ba54:	00800044 	movi	r2,1
    ba58:	9588b03a 	or	r4,r18,r22
    ba5c:	003ea106 	br	b4e4 <__alt_mem_sram+0xf7e0b4e4>
    ba60:	80c00007 	ldb	r3,0(r16)
    ba64:	82800044 	addi	r10,r16,1
    ba68:	1b027f26 	beq	r3,r12,c468 <___vfiprintf_internal_r+0x130c>
    ba6c:	18bff404 	addi	r2,r3,-48
    ba70:	5021883a 	mov	r16,r10
    ba74:	0013883a 	mov	r9,zero
    ba78:	28be1836 	bltu	r5,r2,b2dc <__alt_mem_sram+0xf7e0b2dc>
    ba7c:	80c00007 	ldb	r3,0(r16)
    ba80:	4a4002a4 	muli	r9,r9,10
    ba84:	84000044 	addi	r16,r16,1
    ba88:	1253883a 	add	r9,r2,r9
    ba8c:	18bff404 	addi	r2,r3,-48
    ba90:	28bffa2e 	bgeu	r5,r2,ba7c <__alt_mem_sram+0xf7e0ba7c>
    ba94:	483e110e 	bge	r9,zero,b2dc <__alt_mem_sram+0xf7e0b2dc>
    ba98:	027fffc4 	movi	r9,-1
    ba9c:	003e0f06 	br	b2dc <__alt_mem_sram+0xf7e0b2dc>
    baa0:	d9811d85 	stb	r6,1142(sp)
    baa4:	a880080c 	andi	r2,r21,32
    baa8:	1001ee26 	beq	r2,zero,c264 <___vfiprintf_internal_r+0x1108>
    baac:	da812117 	ldw	r10,1156(sp)
    bab0:	dac12217 	ldw	r11,1160(sp)
    bab4:	50800017 	ldw	r2,0(r10)
    bab8:	5807d7fa 	srai	r3,r11,31
    babc:	52800104 	addi	r10,r10,4
    bac0:	da812115 	stw	r10,1156(sp)
    bac4:	12c00015 	stw	r11,0(r2)
    bac8:	10c00115 	stw	r3,4(r2)
    bacc:	003dd806 	br	b230 <__alt_mem_sram+0xf7e0b230>
    bad0:	30803fcc 	andi	r2,r6,255
    bad4:	1080201c 	xori	r2,r2,128
    bad8:	10bfe004 	addi	r2,r2,-128
    badc:	1001df1e 	bne	r2,zero,c25c <___vfiprintf_internal_r+0x1100>
    bae0:	01800804 	movi	r6,32
    bae4:	80c00007 	ldb	r3,0(r16)
    bae8:	003dfb06 	br	b2d8 <__alt_mem_sram+0xf7e0b2d8>
    baec:	da812117 	ldw	r10,1156(sp)
    baf0:	dac12117 	ldw	r11,1156(sp)
    baf4:	d8011d85 	stb	zero,1142(sp)
    baf8:	52800017 	ldw	r10,0(r10)
    bafc:	5d800104 	addi	r22,r11,4
    bb00:	da812415 	stw	r10,1168(sp)
    bb04:	50023b26 	beq	r10,zero,c3f4 <___vfiprintf_internal_r+0x1298>
    bb08:	d9012417 	ldw	r4,1168(sp)
    bb0c:	48021f16 	blt	r9,zero,c38c <___vfiprintf_internal_r+0x1230>
    bb10:	480d883a 	mov	r6,r9
    bb14:	000b883a 	mov	r5,zero
    bb18:	da012a15 	stw	r8,1192(sp)
    bb1c:	da412b15 	stw	r9,1196(sp)
    bb20:	00093d40 	call	93d4 <memchr>
    bb24:	da012a17 	ldw	r8,1192(sp)
    bb28:	da412b17 	ldw	r9,1196(sp)
    bb2c:	10024726 	beq	r2,zero,c44c <___vfiprintf_internal_r+0x12f0>
    bb30:	d8c12417 	ldw	r3,1168(sp)
    bb34:	10e3c83a 	sub	r17,r2,r3
    bb38:	4c41f616 	blt	r9,r17,c314 <___vfiprintf_internal_r+0x11b8>
    bb3c:	db011d83 	ldbu	r12,1142(sp)
    bb40:	dd812115 	stw	r22,1156(sp)
    bb44:	0013883a 	mov	r9,zero
    bb48:	003e8006 	br	b54c <__alt_mem_sram+0xf7e0b54c>
    bb4c:	d9811d85 	stb	r6,1142(sp)
    bb50:	a880080c 	andi	r2,r21,32
    bb54:	d8c12117 	ldw	r3,1156(sp)
    bb58:	103fb51e 	bne	r2,zero,ba30 <__alt_mem_sram+0xf7e0ba30>
    bb5c:	a880040c 	andi	r2,r21,16
    bb60:	10015e1e 	bne	r2,zero,c0dc <___vfiprintf_internal_r+0xf80>
    bb64:	a880100c 	andi	r2,r21,64
    bb68:	10015c26 	beq	r2,zero,c0dc <___vfiprintf_internal_r+0xf80>
    bb6c:	1c80000f 	ldh	r18,0(r3)
    bb70:	da812117 	ldw	r10,1156(sp)
    bb74:	902dd7fa 	srai	r22,r18,31
    bb78:	52800104 	addi	r10,r10,4
    bb7c:	da812115 	stw	r10,1156(sp)
    bb80:	b005883a 	mov	r2,r22
    bb84:	003fb006 	br	ba48 <__alt_mem_sram+0xf7e0ba48>
    bb88:	da812117 	ldw	r10,1156(sp)
    bb8c:	00800c04 	movi	r2,48
    bb90:	02c00074 	movhi	r11,1
    bb94:	54800017 	ldw	r18,0(r10)
    bb98:	d8811d05 	stb	r2,1140(sp)
    bb9c:	52800104 	addi	r10,r10,4
    bba0:	00801e04 	movi	r2,120
    bba4:	5acc6b04 	addi	r11,r11,12716
    bba8:	d8811d45 	stb	r2,1141(sp)
    bbac:	002d883a 	mov	r22,zero
    bbb0:	ad400094 	ori	r21,r21,2
    bbb4:	da812115 	stw	r10,1156(sp)
    bbb8:	dac12615 	stw	r11,1176(sp)
    bbbc:	00800084 	movi	r2,2
    bbc0:	9009883a 	mov	r4,r18
    bbc4:	003e4406 	br	b4d8 <__alt_mem_sram+0xf7e0b4d8>
    bbc8:	ad400814 	ori	r21,r21,32
    bbcc:	80c00007 	ldb	r3,0(r16)
    bbd0:	003dc106 	br	b2d8 <__alt_mem_sram+0xf7e0b2d8>
    bbd4:	ad401014 	ori	r21,r21,64
    bbd8:	80c00007 	ldb	r3,0(r16)
    bbdc:	003dbe06 	br	b2d8 <__alt_mem_sram+0xf7e0b2d8>
    bbe0:	80c00007 	ldb	r3,0(r16)
    bbe4:	19c1de26 	beq	r3,r7,c360 <___vfiprintf_internal_r+0x1204>
    bbe8:	ad400414 	ori	r21,r21,16
    bbec:	003dba06 	br	b2d8 <__alt_mem_sram+0xf7e0b2d8>
    bbf0:	00800074 	movhi	r2,1
    bbf4:	108c6b04 	addi	r2,r2,12716
    bbf8:	d8812615 	stw	r2,1176(sp)
    bbfc:	d9811d85 	stb	r6,1142(sp)
    bc00:	a900080c 	andi	r4,r21,32
    bc04:	d8812117 	ldw	r2,1156(sp)
    bc08:	203f5b1e 	bne	r4,zero,b978 <__alt_mem_sram+0xf7e0b978>
    bc0c:	a900040c 	andi	r4,r21,16
    bc10:	2001a826 	beq	r4,zero,c2b4 <___vfiprintf_internal_r+0x1158>
    bc14:	dac12117 	ldw	r11,1156(sp)
    bc18:	14800017 	ldw	r18,0(r2)
    bc1c:	002d883a 	mov	r22,zero
    bc20:	5ac00104 	addi	r11,r11,4
    bc24:	dac12115 	stw	r11,1156(sp)
    bc28:	003f5806 	br	b98c <__alt_mem_sram+0xf7e0b98c>
    bc2c:	da812117 	ldw	r10,1156(sp)
    bc30:	54c00017 	ldw	r19,0(r10)
    bc34:	50800104 	addi	r2,r10,4
    bc38:	983f2f16 	blt	r19,zero,b8f8 <__alt_mem_sram+0xf7e0b8f8>
    bc3c:	d8812115 	stw	r2,1156(sp)
    bc40:	80c00007 	ldb	r3,0(r16)
    bc44:	003da406 	br	b2d8 <__alt_mem_sram+0xf7e0b2d8>
    bc48:	01800ac4 	movi	r6,43
    bc4c:	80c00007 	ldb	r3,0(r16)
    bc50:	003da106 	br	b2d8 <__alt_mem_sram+0xf7e0b2d8>
    bc54:	ad400054 	ori	r21,r21,1
    bc58:	80c00007 	ldb	r3,0(r16)
    bc5c:	003d9e06 	br	b2d8 <__alt_mem_sram+0xf7e0b2d8>
    bc60:	d9811d85 	stb	r6,1142(sp)
    bc64:	18007126 	beq	r3,zero,be2c <___vfiprintf_internal_r+0xcd0>
    bc68:	04800044 	movi	r18,1
    bc6c:	d8c10005 	stb	r3,1024(sp)
    bc70:	d8c10004 	addi	r3,sp,1024
    bc74:	d8011d85 	stb	zero,1142(sp)
    bc78:	9023883a 	mov	r17,r18
    bc7c:	d8c12415 	stw	r3,1168(sp)
    bc80:	003f5606 	br	b9dc <__alt_mem_sram+0xf7e0b9dc>
    bc84:	dac12117 	ldw	r11,1156(sp)
    bc88:	002d883a 	mov	r22,zero
    bc8c:	00800044 	movi	r2,1
    bc90:	5c800017 	ldw	r18,0(r11)
    bc94:	5ac00104 	addi	r11,r11,4
    bc98:	dac12115 	stw	r11,1156(sp)
    bc9c:	9009883a 	mov	r4,r18
    bca0:	003e0d06 	br	b4d8 <__alt_mem_sram+0xf7e0b4d8>
    bca4:	dac12117 	ldw	r11,1156(sp)
    bca8:	002d883a 	mov	r22,zero
    bcac:	0005883a 	mov	r2,zero
    bcb0:	5c800017 	ldw	r18,0(r11)
    bcb4:	5ac00104 	addi	r11,r11,4
    bcb8:	dac12115 	stw	r11,1156(sp)
    bcbc:	9009883a 	mov	r4,r18
    bcc0:	003e0506 	br	b4d8 <__alt_mem_sram+0xf7e0b4d8>
    bcc4:	d9012017 	ldw	r4,1152(sp)
    bcc8:	a00b883a 	mov	r5,r20
    bccc:	d9811a04 	addi	r6,sp,1128
    bcd0:	d8c12a15 	stw	r3,1192(sp)
    bcd4:	db012b15 	stw	r12,1196(sp)
    bcd8:	000b0480 	call	b048 <__sprint_r.part.0>
    bcdc:	d8c12a17 	ldw	r3,1192(sp)
    bce0:	db012b17 	ldw	r12,1196(sp)
    bce4:	1000571e 	bne	r2,zero,be44 <___vfiprintf_internal_r+0xce8>
    bce8:	d9811b17 	ldw	r6,1132(sp)
    bcec:	d8811c17 	ldw	r2,1136(sp)
    bcf0:	d811883a 	mov	r8,sp
    bcf4:	31400044 	addi	r5,r6,1
    bcf8:	003e3306 	br	b5c8 <__alt_mem_sram+0xf7e0b5c8>
    bcfc:	d9411b17 	ldw	r5,1132(sp)
    bd00:	d8c11c17 	ldw	r3,1136(sp)
    bd04:	28800044 	addi	r2,r5,1
    bd08:	d9011d87 	ldb	r4,1142(sp)
    bd0c:	203e4d26 	beq	r4,zero,b644 <__alt_mem_sram+0xf7e0b644>
    bd10:	01000044 	movi	r4,1
    bd14:	d9411d84 	addi	r5,sp,1142
    bd18:	1907883a 	add	r3,r3,r4
    bd1c:	41400015 	stw	r5,0(r8)
    bd20:	41000115 	stw	r4,4(r8)
    bd24:	d8c11c15 	stw	r3,1136(sp)
    bd28:	d8811b15 	stw	r2,1132(sp)
    bd2c:	014001c4 	movi	r5,7
    bd30:	2880aa16 	blt	r5,r2,bfdc <___vfiprintf_internal_r+0xe80>
    bd34:	100b883a 	mov	r5,r2
    bd38:	42000204 	addi	r8,r8,8
    bd3c:	10800044 	addi	r2,r2,1
    bd40:	003e4006 	br	b644 <__alt_mem_sram+0xf7e0b644>
    bd44:	d9012017 	ldw	r4,1152(sp)
    bd48:	a00b883a 	mov	r5,r20
    bd4c:	d9811a04 	addi	r6,sp,1128
    bd50:	d9c12a15 	stw	r7,1192(sp)
    bd54:	db012b15 	stw	r12,1196(sp)
    bd58:	000b0480 	call	b048 <__sprint_r.part.0>
    bd5c:	d9c12a17 	ldw	r7,1192(sp)
    bd60:	db012b17 	ldw	r12,1196(sp)
    bd64:	1000371e 	bne	r2,zero,be44 <___vfiprintf_internal_r+0xce8>
    bd68:	d9411b17 	ldw	r5,1132(sp)
    bd6c:	d8c11c17 	ldw	r3,1136(sp)
    bd70:	d811883a 	mov	r8,sp
    bd74:	28800044 	addi	r2,r5,1
    bd78:	003e4d06 	br	b6b0 <__alt_mem_sram+0xf7e0b6b0>
    bd7c:	10803fcc 	andi	r2,r2,255
    bd80:	00c00044 	movi	r3,1
    bd84:	10fddf1e 	bne	r2,r3,b504 <__alt_mem_sram+0xf7e0b504>
    bd88:	b000021e 	bne	r22,zero,bd94 <___vfiprintf_internal_r+0xc38>
    bd8c:	00800244 	movi	r2,9
    bd90:	1480202e 	bgeu	r2,r18,be14 <___vfiprintf_internal_r+0xcb8>
    bd94:	dc012515 	stw	r16,1172(sp)
    bd98:	dc410a04 	addi	r17,sp,1064
    bd9c:	9021883a 	mov	r16,r18
    bda0:	da012415 	stw	r8,1168(sp)
    bda4:	b025883a 	mov	r18,r22
    bda8:	da412315 	stw	r9,1164(sp)
    bdac:	602d883a 	mov	r22,r12
    bdb0:	8009883a 	mov	r4,r16
    bdb4:	900b883a 	mov	r5,r18
    bdb8:	01800284 	movi	r6,10
    bdbc:	000f883a 	mov	r7,zero
    bdc0:	000d3d40 	call	d3d4 <__umoddi3>
    bdc4:	10800c04 	addi	r2,r2,48
    bdc8:	8c7fffc4 	addi	r17,r17,-1
    bdcc:	8009883a 	mov	r4,r16
    bdd0:	900b883a 	mov	r5,r18
    bdd4:	01800284 	movi	r6,10
    bdd8:	000f883a 	mov	r7,zero
    bddc:	88800005 	stb	r2,0(r17)
    bde0:	000ce140 	call	ce14 <__udivdi3>
    bde4:	1021883a 	mov	r16,r2
    bde8:	10c4b03a 	or	r2,r2,r3
    bdec:	1825883a 	mov	r18,r3
    bdf0:	103fef1e 	bne	r2,zero,bdb0 <__alt_mem_sram+0xf7e0bdb0>
    bdf4:	da811e17 	ldw	r10,1144(sp)
    bdf8:	da012417 	ldw	r8,1168(sp)
    bdfc:	da412317 	ldw	r9,1164(sp)
    be00:	dc412415 	stw	r17,1168(sp)
    be04:	b019883a 	mov	r12,r22
    be08:	dc012517 	ldw	r16,1172(sp)
    be0c:	5463c83a 	sub	r17,r10,r17
    be10:	003dce06 	br	b54c <__alt_mem_sram+0xf7e0b54c>
    be14:	94800c04 	addi	r18,r18,48
    be18:	d8c109c4 	addi	r3,sp,1063
    be1c:	dc8109c5 	stb	r18,1063(sp)
    be20:	dc412717 	ldw	r17,1180(sp)
    be24:	d8c12415 	stw	r3,1168(sp)
    be28:	003dc806 	br	b54c <__alt_mem_sram+0xf7e0b54c>
    be2c:	d8811c17 	ldw	r2,1136(sp)
    be30:	10000426 	beq	r2,zero,be44 <___vfiprintf_internal_r+0xce8>
    be34:	d9012017 	ldw	r4,1152(sp)
    be38:	a00b883a 	mov	r5,r20
    be3c:	d9811a04 	addi	r6,sp,1128
    be40:	000b0480 	call	b048 <__sprint_r.part.0>
    be44:	a080030b 	ldhu	r2,12(r20)
    be48:	1080100c 	andi	r2,r2,64
    be4c:	103e9b1e 	bne	r2,zero,b8bc <__alt_mem_sram+0xf7e0b8bc>
    be50:	d8812217 	ldw	r2,1160(sp)
    be54:	003e9a06 	br	b8c0 <__alt_mem_sram+0xf7e0b8c0>
    be58:	d9012017 	ldw	r4,1152(sp)
    be5c:	a00b883a 	mov	r5,r20
    be60:	d9811a04 	addi	r6,sp,1128
    be64:	000b0480 	call	b048 <__sprint_r.part.0>
    be68:	103ff61e 	bne	r2,zero,be44 <__alt_mem_sram+0xf7e0be44>
    be6c:	d9011b17 	ldw	r4,1132(sp)
    be70:	d8c11c17 	ldw	r3,1136(sp)
    be74:	d811883a 	mov	r8,sp
    be78:	21400044 	addi	r5,r4,1
    be7c:	003e4006 	br	b780 <__alt_mem_sram+0xf7e0b780>
    be80:	1800d61e 	bne	r3,zero,c1dc <___vfiprintf_internal_r+0x1080>
    be84:	dac12417 	ldw	r11,1168(sp)
    be88:	00800044 	movi	r2,1
    be8c:	dc400115 	stw	r17,4(sp)
    be90:	dac00015 	stw	r11,0(sp)
    be94:	dc411c15 	stw	r17,1136(sp)
    be98:	d8811b15 	stw	r2,1132(sp)
    be9c:	8807883a 	mov	r3,r17
    bea0:	d811883a 	mov	r8,sp
    bea4:	42000204 	addi	r8,r8,8
    bea8:	aac0010c 	andi	r11,r21,4
    beac:	58000226 	beq	r11,zero,beb8 <___vfiprintf_internal_r+0xd5c>
    beb0:	9ca3c83a 	sub	r17,r19,r18
    beb4:	047e2616 	blt	zero,r17,b750 <__alt_mem_sram+0xf7e0b750>
    beb8:	94c0010e 	bge	r18,r19,bec0 <___vfiprintf_internal_r+0xd64>
    bebc:	9825883a 	mov	r18,r19
    bec0:	da812217 	ldw	r10,1160(sp)
    bec4:	5495883a 	add	r10,r10,r18
    bec8:	da812215 	stw	r10,1160(sp)
    becc:	183e4826 	beq	r3,zero,b7f0 <__alt_mem_sram+0xf7e0b7f0>
    bed0:	d9012017 	ldw	r4,1152(sp)
    bed4:	a00b883a 	mov	r5,r20
    bed8:	d9811a04 	addi	r6,sp,1128
    bedc:	000b0480 	call	b048 <__sprint_r.part.0>
    bee0:	103e4326 	beq	r2,zero,b7f0 <__alt_mem_sram+0xf7e0b7f0>
    bee4:	003fd706 	br	be44 <__alt_mem_sram+0xf7e0be44>
    bee8:	9cadc83a 	sub	r22,r19,r18
    beec:	05bde40e 	bge	zero,r22,b680 <__alt_mem_sram+0xf7e0b680>
    bef0:	03000404 	movi	r12,16
    bef4:	6581500e 	bge	r12,r22,c438 <___vfiprintf_internal_r+0x12dc>
    bef8:	00800074 	movhi	r2,1
    befc:	108ccc04 	addi	r2,r2,13104
    bf00:	d8812315 	stw	r2,1164(sp)
    bf04:	8005883a 	mov	r2,r16
    bf08:	038001c4 	movi	r14,7
    bf0c:	b021883a 	mov	r16,r22
    bf10:	da412515 	stw	r9,1172(sp)
    bf14:	102d883a 	mov	r22,r2
    bf18:	00000506 	br	bf30 <___vfiprintf_internal_r+0xdd4>
    bf1c:	29000084 	addi	r4,r5,2
    bf20:	42000204 	addi	r8,r8,8
    bf24:	100b883a 	mov	r5,r2
    bf28:	843ffc04 	addi	r16,r16,-16
    bf2c:	64000d0e 	bge	r12,r16,bf64 <___vfiprintf_internal_r+0xe08>
    bf30:	18c00404 	addi	r3,r3,16
    bf34:	28800044 	addi	r2,r5,1
    bf38:	45c00015 	stw	r23,0(r8)
    bf3c:	43000115 	stw	r12,4(r8)
    bf40:	d8c11c15 	stw	r3,1136(sp)
    bf44:	d8811b15 	stw	r2,1132(sp)
    bf48:	70bff40e 	bge	r14,r2,bf1c <__alt_mem_sram+0xf7e0bf1c>
    bf4c:	1800151e 	bne	r3,zero,bfa4 <___vfiprintf_internal_r+0xe48>
    bf50:	843ffc04 	addi	r16,r16,-16
    bf54:	000b883a 	mov	r5,zero
    bf58:	01000044 	movi	r4,1
    bf5c:	d811883a 	mov	r8,sp
    bf60:	643ff316 	blt	r12,r16,bf30 <__alt_mem_sram+0xf7e0bf30>
    bf64:	da412517 	ldw	r9,1172(sp)
    bf68:	b005883a 	mov	r2,r22
    bf6c:	802d883a 	mov	r22,r16
    bf70:	1021883a 	mov	r16,r2
    bf74:	da812317 	ldw	r10,1164(sp)
    bf78:	1d87883a 	add	r3,r3,r22
    bf7c:	45800115 	stw	r22,4(r8)
    bf80:	42800015 	stw	r10,0(r8)
    bf84:	d8c11c15 	stw	r3,1136(sp)
    bf88:	d9011b15 	stw	r4,1132(sp)
    bf8c:	008001c4 	movi	r2,7
    bf90:	11008d16 	blt	r2,r4,c1c8 <___vfiprintf_internal_r+0x106c>
    bf94:	42000204 	addi	r8,r8,8
    bf98:	20800044 	addi	r2,r4,1
    bf9c:	200b883a 	mov	r5,r4
    bfa0:	003db706 	br	b680 <__alt_mem_sram+0xf7e0b680>
    bfa4:	d9012017 	ldw	r4,1152(sp)
    bfa8:	a00b883a 	mov	r5,r20
    bfac:	d9811a04 	addi	r6,sp,1128
    bfb0:	db012b15 	stw	r12,1196(sp)
    bfb4:	db812a15 	stw	r14,1192(sp)
    bfb8:	000b0480 	call	b048 <__sprint_r.part.0>
    bfbc:	db012b17 	ldw	r12,1196(sp)
    bfc0:	db812a17 	ldw	r14,1192(sp)
    bfc4:	103f9f1e 	bne	r2,zero,be44 <__alt_mem_sram+0xf7e0be44>
    bfc8:	d9411b17 	ldw	r5,1132(sp)
    bfcc:	d8c11c17 	ldw	r3,1136(sp)
    bfd0:	d811883a 	mov	r8,sp
    bfd4:	29000044 	addi	r4,r5,1
    bfd8:	003fd306 	br	bf28 <__alt_mem_sram+0xf7e0bf28>
    bfdc:	18006c1e 	bne	r3,zero,c190 <___vfiprintf_internal_r+0x1034>
    bfe0:	70004f26 	beq	r14,zero,c120 <___vfiprintf_internal_r+0xfc4>
    bfe4:	d8811d04 	addi	r2,sp,1140
    bfe8:	00c00084 	movi	r3,2
    bfec:	d8800015 	stw	r2,0(sp)
    bff0:	d8c00115 	stw	r3,4(sp)
    bff4:	2005883a 	mov	r2,r4
    bff8:	d811883a 	mov	r8,sp
    bffc:	003d9b06 	br	b66c <__alt_mem_sram+0xf7e0b66c>
    c000:	1800571e 	bne	r3,zero,c160 <___vfiprintf_internal_r+0x1004>
    c004:	000b883a 	mov	r5,zero
    c008:	00800044 	movi	r2,1
    c00c:	d811883a 	mov	r8,sp
    c010:	003d9906 	br	b678 <__alt_mem_sram+0xf7e0b678>
    c014:	10803fcc 	andi	r2,r2,255
    c018:	1000251e 	bne	r2,zero,c0b0 <___vfiprintf_internal_r+0xf54>
    c01c:	a880004c 	andi	r2,r21,1
    c020:	10007826 	beq	r2,zero,c204 <___vfiprintf_internal_r+0x10a8>
    c024:	00800c04 	movi	r2,48
    c028:	d8c109c4 	addi	r3,sp,1063
    c02c:	d88109c5 	stb	r2,1063(sp)
    c030:	dc412717 	ldw	r17,1180(sp)
    c034:	d8c12415 	stw	r3,1168(sp)
    c038:	003d4406 	br	b54c <__alt_mem_sram+0xf7e0b54c>
    c03c:	d9012617 	ldw	r4,1176(sp)
    c040:	dc410a04 	addi	r17,sp,1064
    c044:	908003cc 	andi	r2,r18,15
    c048:	b006973a 	slli	r3,r22,28
    c04c:	2085883a 	add	r2,r4,r2
    c050:	9024d13a 	srli	r18,r18,4
    c054:	10800003 	ldbu	r2,0(r2)
    c058:	b02cd13a 	srli	r22,r22,4
    c05c:	8c7fffc4 	addi	r17,r17,-1
    c060:	1ca4b03a 	or	r18,r3,r18
    c064:	88800005 	stb	r2,0(r17)
    c068:	9584b03a 	or	r2,r18,r22
    c06c:	103ff51e 	bne	r2,zero,c044 <__alt_mem_sram+0xf7e0c044>
    c070:	dac11e17 	ldw	r11,1144(sp)
    c074:	dc412415 	stw	r17,1168(sp)
    c078:	5c63c83a 	sub	r17,r11,r17
    c07c:	003d3306 	br	b54c <__alt_mem_sram+0xf7e0b54c>
    c080:	1800941e 	bne	r3,zero,c2d4 <___vfiprintf_internal_r+0x1178>
    c084:	d8811d87 	ldb	r2,1142(sp)
    c088:	10006b26 	beq	r2,zero,c238 <___vfiprintf_internal_r+0x10dc>
    c08c:	00c00044 	movi	r3,1
    c090:	d9011d84 	addi	r4,sp,1142
    c094:	1805883a 	mov	r2,r3
    c098:	d9000015 	stw	r4,0(sp)
    c09c:	d8c00115 	stw	r3,4(sp)
    c0a0:	d811883a 	mov	r8,sp
    c0a4:	003f2306 	br	bd34 <__alt_mem_sram+0xf7e0bd34>
    c0a8:	8023883a 	mov	r17,r16
    c0ac:	003c7d06 	br	b2a4 <__alt_mem_sram+0xf7e0b2a4>
    c0b0:	da810a04 	addi	r10,sp,1064
    c0b4:	da812415 	stw	r10,1168(sp)
    c0b8:	003d2406 	br	b54c <__alt_mem_sram+0xf7e0b54c>
    c0bc:	d9012017 	ldw	r4,1152(sp)
    c0c0:	a00b883a 	mov	r5,r20
    c0c4:	d9811a04 	addi	r6,sp,1128
    c0c8:	000b0480 	call	b048 <__sprint_r.part.0>
    c0cc:	103f5d1e 	bne	r2,zero,be44 <__alt_mem_sram+0xf7e0be44>
    c0d0:	d8c11c17 	ldw	r3,1136(sp)
    c0d4:	d811883a 	mov	r8,sp
    c0d8:	003f7306 	br	bea8 <__alt_mem_sram+0xf7e0bea8>
    c0dc:	1c800017 	ldw	r18,0(r3)
    c0e0:	dac12117 	ldw	r11,1156(sp)
    c0e4:	902dd7fa 	srai	r22,r18,31
    c0e8:	5ac00104 	addi	r11,r11,4
    c0ec:	dac12115 	stw	r11,1156(sp)
    c0f0:	b005883a 	mov	r2,r22
    c0f4:	003e5406 	br	ba48 <__alt_mem_sram+0xf7e0ba48>
    c0f8:	00800084 	movi	r2,2
    c0fc:	9588b03a 	or	r4,r18,r22
    c100:	003cf506 	br	b4d8 <__alt_mem_sram+0xf7e0b4d8>
    c104:	d9012017 	ldw	r4,1152(sp)
    c108:	a00b883a 	mov	r5,r20
    c10c:	d9811a04 	addi	r6,sp,1128
    c110:	000b0480 	call	b048 <__sprint_r.part.0>
    c114:	103f4b1e 	bne	r2,zero,be44 <__alt_mem_sram+0xf7e0be44>
    c118:	d811883a 	mov	r8,sp
    c11c:	003cd106 	br	b464 <__alt_mem_sram+0xf7e0b464>
    c120:	000b883a 	mov	r5,zero
    c124:	2005883a 	mov	r2,r4
    c128:	d811883a 	mov	r8,sp
    c12c:	003d5206 	br	b678 <__alt_mem_sram+0xf7e0b678>
    c130:	10803fcc 	andi	r2,r2,255
    c134:	1080201c 	xori	r2,r2,128
    c138:	10bfe004 	addi	r2,r2,-128
    c13c:	01000c04 	movi	r4,48
    c140:	11008e26 	beq	r2,r4,c37c <___vfiprintf_internal_r+0x1220>
    c144:	da812417 	ldw	r10,1168(sp)
    c148:	dac11e17 	ldw	r11,1144(sp)
    c14c:	193fffc5 	stb	r4,-1(r3)
    c150:	52bfffc4 	addi	r10,r10,-1
    c154:	da812415 	stw	r10,1168(sp)
    c158:	5aa3c83a 	sub	r17,r11,r10
    c15c:	003cfb06 	br	b54c <__alt_mem_sram+0xf7e0b54c>
    c160:	d9012017 	ldw	r4,1152(sp)
    c164:	a00b883a 	mov	r5,r20
    c168:	d9811a04 	addi	r6,sp,1128
    c16c:	da412b15 	stw	r9,1196(sp)
    c170:	000b0480 	call	b048 <__sprint_r.part.0>
    c174:	da412b17 	ldw	r9,1196(sp)
    c178:	103f321e 	bne	r2,zero,be44 <__alt_mem_sram+0xf7e0be44>
    c17c:	d9411b17 	ldw	r5,1132(sp)
    c180:	d8c11c17 	ldw	r3,1136(sp)
    c184:	d811883a 	mov	r8,sp
    c188:	28800044 	addi	r2,r5,1
    c18c:	003d3a06 	br	b678 <__alt_mem_sram+0xf7e0b678>
    c190:	d9012017 	ldw	r4,1152(sp)
    c194:	a00b883a 	mov	r5,r20
    c198:	d9811a04 	addi	r6,sp,1128
    c19c:	da412b15 	stw	r9,1196(sp)
    c1a0:	db812a15 	stw	r14,1192(sp)
    c1a4:	000b0480 	call	b048 <__sprint_r.part.0>
    c1a8:	da412b17 	ldw	r9,1196(sp)
    c1ac:	db812a17 	ldw	r14,1192(sp)
    c1b0:	103f241e 	bne	r2,zero,be44 <__alt_mem_sram+0xf7e0be44>
    c1b4:	d9411b17 	ldw	r5,1132(sp)
    c1b8:	d8c11c17 	ldw	r3,1136(sp)
    c1bc:	d811883a 	mov	r8,sp
    c1c0:	28800044 	addi	r2,r5,1
    c1c4:	003d1f06 	br	b644 <__alt_mem_sram+0xf7e0b644>
    c1c8:	1800781e 	bne	r3,zero,c3ac <___vfiprintf_internal_r+0x1250>
    c1cc:	000b883a 	mov	r5,zero
    c1d0:	00800044 	movi	r2,1
    c1d4:	d811883a 	mov	r8,sp
    c1d8:	003d2906 	br	b680 <__alt_mem_sram+0xf7e0b680>
    c1dc:	d9012017 	ldw	r4,1152(sp)
    c1e0:	a00b883a 	mov	r5,r20
    c1e4:	d9811a04 	addi	r6,sp,1128
    c1e8:	000b0480 	call	b048 <__sprint_r.part.0>
    c1ec:	103f151e 	bne	r2,zero,be44 <__alt_mem_sram+0xf7e0be44>
    c1f0:	d8811b17 	ldw	r2,1132(sp)
    c1f4:	d8c11c17 	ldw	r3,1136(sp)
    c1f8:	d811883a 	mov	r8,sp
    c1fc:	10800044 	addi	r2,r2,1
    c200:	003d4406 	br	b714 <__alt_mem_sram+0xf7e0b714>
    c204:	dac10a04 	addi	r11,sp,1064
    c208:	dac12415 	stw	r11,1168(sp)
    c20c:	003ccf06 	br	b54c <__alt_mem_sram+0xf7e0b54c>
    c210:	04a5c83a 	sub	r18,zero,r18
    c214:	9004c03a 	cmpne	r2,r18,zero
    c218:	05adc83a 	sub	r22,zero,r22
    c21c:	b0adc83a 	sub	r22,r22,r2
    c220:	03000b44 	movi	r12,45
    c224:	db011d85 	stb	r12,1142(sp)
    c228:	4823883a 	mov	r17,r9
    c22c:	00800044 	movi	r2,1
    c230:	9588b03a 	or	r4,r18,r22
    c234:	003cab06 	br	b4e4 <__alt_mem_sram+0xf7e0b4e4>
    c238:	000b883a 	mov	r5,zero
    c23c:	00800044 	movi	r2,1
    c240:	d811883a 	mov	r8,sp
    c244:	703d0c26 	beq	r14,zero,b678 <__alt_mem_sram+0xf7e0b678>
    c248:	00c00084 	movi	r3,2
    c24c:	d9011d04 	addi	r4,sp,1140
    c250:	d9000015 	stw	r4,0(sp)
    c254:	d8c00115 	stw	r3,4(sp)
    c258:	003d0406 	br	b66c <__alt_mem_sram+0xf7e0b66c>
    c25c:	80c00007 	ldb	r3,0(r16)
    c260:	003c1d06 	br	b2d8 <__alt_mem_sram+0xf7e0b2d8>
    c264:	a880040c 	andi	r2,r21,16
    c268:	1000091e 	bne	r2,zero,c290 <___vfiprintf_internal_r+0x1134>
    c26c:	aac0100c 	andi	r11,r21,64
    c270:	58000726 	beq	r11,zero,c290 <___vfiprintf_internal_r+0x1134>
    c274:	da812117 	ldw	r10,1156(sp)
    c278:	dac12217 	ldw	r11,1160(sp)
    c27c:	50800017 	ldw	r2,0(r10)
    c280:	52800104 	addi	r10,r10,4
    c284:	da812115 	stw	r10,1156(sp)
    c288:	12c0000d 	sth	r11,0(r2)
    c28c:	003be806 	br	b230 <__alt_mem_sram+0xf7e0b230>
    c290:	da812117 	ldw	r10,1156(sp)
    c294:	dac12217 	ldw	r11,1160(sp)
    c298:	50800017 	ldw	r2,0(r10)
    c29c:	52800104 	addi	r10,r10,4
    c2a0:	da812115 	stw	r10,1156(sp)
    c2a4:	12c00015 	stw	r11,0(r2)
    c2a8:	003be106 	br	b230 <__alt_mem_sram+0xf7e0b230>
    c2ac:	00800084 	movi	r2,2
    c2b0:	003c8906 	br	b4d8 <__alt_mem_sram+0xf7e0b4d8>
    c2b4:	a900100c 	andi	r4,r21,64
    c2b8:	20001f26 	beq	r4,zero,c338 <___vfiprintf_internal_r+0x11dc>
    c2bc:	da812117 	ldw	r10,1156(sp)
    c2c0:	1480000b 	ldhu	r18,0(r2)
    c2c4:	002d883a 	mov	r22,zero
    c2c8:	52800104 	addi	r10,r10,4
    c2cc:	da812115 	stw	r10,1156(sp)
    c2d0:	003dae06 	br	b98c <__alt_mem_sram+0xf7e0b98c>
    c2d4:	d9012017 	ldw	r4,1152(sp)
    c2d8:	a00b883a 	mov	r5,r20
    c2dc:	d9811a04 	addi	r6,sp,1128
    c2e0:	da412b15 	stw	r9,1196(sp)
    c2e4:	db812a15 	stw	r14,1192(sp)
    c2e8:	000b0480 	call	b048 <__sprint_r.part.0>
    c2ec:	da412b17 	ldw	r9,1196(sp)
    c2f0:	db812a17 	ldw	r14,1192(sp)
    c2f4:	103ed31e 	bne	r2,zero,be44 <__alt_mem_sram+0xf7e0be44>
    c2f8:	d9411b17 	ldw	r5,1132(sp)
    c2fc:	d8c11c17 	ldw	r3,1136(sp)
    c300:	d811883a 	mov	r8,sp
    c304:	28800044 	addi	r2,r5,1
    c308:	003e7f06 	br	bd08 <__alt_mem_sram+0xf7e0bd08>
    c30c:	9825883a 	mov	r18,r19
    c310:	003d3406 	br	b7e4 <__alt_mem_sram+0xf7e0b7e4>
    c314:	4823883a 	mov	r17,r9
    c318:	003e0806 	br	bb3c <__alt_mem_sram+0xf7e0bb3c>
    c31c:	d9012017 	ldw	r4,1152(sp)
    c320:	a00b883a 	mov	r5,r20
    c324:	d9811a04 	addi	r6,sp,1128
    c328:	000b0480 	call	b048 <__sprint_r.part.0>
    c32c:	103ec51e 	bne	r2,zero,be44 <__alt_mem_sram+0xf7e0be44>
    c330:	d8c11c17 	ldw	r3,1136(sp)
    c334:	003ee006 	br	beb8 <__alt_mem_sram+0xf7e0beb8>
    c338:	dac12117 	ldw	r11,1156(sp)
    c33c:	14800017 	ldw	r18,0(r2)
    c340:	002d883a 	mov	r22,zero
    c344:	5ac00104 	addi	r11,r11,4
    c348:	dac12115 	stw	r11,1156(sp)
    c34c:	003d8f06 	br	b98c <__alt_mem_sram+0xf7e0b98c>
    c350:	02c00074 	movhi	r11,1
    c354:	5acccc04 	addi	r11,r11,13104
    c358:	dac12315 	stw	r11,1164(sp)
    c35c:	003ce306 	br	b6ec <__alt_mem_sram+0xf7e0b6ec>
    c360:	80c00043 	ldbu	r3,1(r16)
    c364:	ad400814 	ori	r21,r21,32
    c368:	84000044 	addi	r16,r16,1
    c36c:	18c03fcc 	andi	r3,r3,255
    c370:	18c0201c 	xori	r3,r3,128
    c374:	18ffe004 	addi	r3,r3,-128
    c378:	003bd706 	br	b2d8 <__alt_mem_sram+0xf7e0b2d8>
    c37c:	dac11e17 	ldw	r11,1144(sp)
    c380:	d8c12417 	ldw	r3,1168(sp)
    c384:	58e3c83a 	sub	r17,r11,r3
    c388:	003c7006 	br	b54c <__alt_mem_sram+0xf7e0b54c>
    c38c:	da012a15 	stw	r8,1192(sp)
    c390:	0003e640 	call	3e64 <strlen>
    c394:	1023883a 	mov	r17,r2
    c398:	db011d83 	ldbu	r12,1142(sp)
    c39c:	dd812115 	stw	r22,1156(sp)
    c3a0:	0013883a 	mov	r9,zero
    c3a4:	da012a17 	ldw	r8,1192(sp)
    c3a8:	003c6806 	br	b54c <__alt_mem_sram+0xf7e0b54c>
    c3ac:	d9012017 	ldw	r4,1152(sp)
    c3b0:	a00b883a 	mov	r5,r20
    c3b4:	d9811a04 	addi	r6,sp,1128
    c3b8:	da412b15 	stw	r9,1196(sp)
    c3bc:	000b0480 	call	b048 <__sprint_r.part.0>
    c3c0:	da412b17 	ldw	r9,1196(sp)
    c3c4:	103e9f1e 	bne	r2,zero,be44 <__alt_mem_sram+0xf7e0be44>
    c3c8:	d9411b17 	ldw	r5,1132(sp)
    c3cc:	d8c11c17 	ldw	r3,1136(sp)
    c3d0:	d811883a 	mov	r8,sp
    c3d4:	28800044 	addi	r2,r5,1
    c3d8:	003ca906 	br	b680 <__alt_mem_sram+0xf7e0b680>
    c3dc:	d9411b17 	ldw	r5,1132(sp)
    c3e0:	01000074 	movhi	r4,1
    c3e4:	210cd004 	addi	r4,r4,13120
    c3e8:	d9012315 	stw	r4,1164(sp)
    c3ec:	29400044 	addi	r5,r5,1
    c3f0:	003c8806 	br	b614 <__alt_mem_sram+0xf7e0b614>
    c3f4:	00800184 	movi	r2,6
    c3f8:	1240012e 	bgeu	r2,r9,c400 <___vfiprintf_internal_r+0x12a4>
    c3fc:	1013883a 	mov	r9,r2
    c400:	4823883a 	mov	r17,r9
    c404:	4825883a 	mov	r18,r9
    c408:	48001516 	blt	r9,zero,c460 <___vfiprintf_internal_r+0x1304>
    c40c:	00800074 	movhi	r2,1
    c410:	108c7004 	addi	r2,r2,12736
    c414:	dd812115 	stw	r22,1156(sp)
    c418:	d8812415 	stw	r2,1168(sp)
    c41c:	003d6f06 	br	b9dc <__alt_mem_sram+0xf7e0b9dc>
    c420:	d9411b17 	ldw	r5,1132(sp)
    c424:	02c00074 	movhi	r11,1
    c428:	5accd004 	addi	r11,r11,13120
    c42c:	dac12315 	stw	r11,1164(sp)
    c430:	29400044 	addi	r5,r5,1
    c434:	003ce106 	br	b7bc <__alt_mem_sram+0xf7e0b7bc>
    c438:	01000074 	movhi	r4,1
    c43c:	210ccc04 	addi	r4,r4,13104
    c440:	d9012315 	stw	r4,1164(sp)
    c444:	1009883a 	mov	r4,r2
    c448:	003eca06 	br	bf74 <__alt_mem_sram+0xf7e0bf74>
    c44c:	4823883a 	mov	r17,r9
    c450:	db011d83 	ldbu	r12,1142(sp)
    c454:	dd812115 	stw	r22,1156(sp)
    c458:	0013883a 	mov	r9,zero
    c45c:	003c3b06 	br	b54c <__alt_mem_sram+0xf7e0b54c>
    c460:	0025883a 	mov	r18,zero
    c464:	003fe906 	br	c40c <__alt_mem_sram+0xf7e0c40c>
    c468:	dac12117 	ldw	r11,1156(sp)
    c46c:	8005883a 	mov	r2,r16
    c470:	5021883a 	mov	r16,r10
    c474:	5a400017 	ldw	r9,0(r11)
    c478:	58c00104 	addi	r3,r11,4
    c47c:	d8c12115 	stw	r3,1156(sp)
    c480:	48000a16 	blt	r9,zero,c4ac <___vfiprintf_internal_r+0x1350>
    c484:	10c00047 	ldb	r3,1(r2)
    c488:	003b9306 	br	b2d8 <__alt_mem_sram+0xf7e0b2d8>
    c48c:	043fffc4 	movi	r16,-1
    c490:	003d0206 	br	b89c <__alt_mem_sram+0xf7e0b89c>
    c494:	94c0010e 	bge	r18,r19,c49c <___vfiprintf_internal_r+0x1340>
    c498:	9825883a 	mov	r18,r19
    c49c:	da812217 	ldw	r10,1160(sp)
    c4a0:	5495883a 	add	r10,r10,r18
    c4a4:	da812215 	stw	r10,1160(sp)
    c4a8:	003cd106 	br	b7f0 <__alt_mem_sram+0xf7e0b7f0>
    c4ac:	027fffc4 	movi	r9,-1
    c4b0:	10c00047 	ldb	r3,1(r2)
    c4b4:	003b8806 	br	b2d8 <__alt_mem_sram+0xf7e0b2d8>

0000c4b8 <__vfiprintf_internal>:
    c4b8:	2007883a 	mov	r3,r4
    c4bc:	01000074 	movhi	r4,1
    c4c0:	2113cb04 	addi	r4,r4,20268
    c4c4:	21000017 	ldw	r4,0(r4)
    c4c8:	2805883a 	mov	r2,r5
    c4cc:	300f883a 	mov	r7,r6
    c4d0:	180b883a 	mov	r5,r3
    c4d4:	100d883a 	mov	r6,r2
    c4d8:	000b15c1 	jmpi	b15c <___vfiprintf_internal_r>

0000c4dc <_write_r>:
    c4dc:	defffd04 	addi	sp,sp,-12
    c4e0:	dc000015 	stw	r16,0(sp)
    c4e4:	04000074 	movhi	r16,1
    c4e8:	dc400115 	stw	r17,4(sp)
    c4ec:	841a9c04 	addi	r16,r16,27248
    c4f0:	2023883a 	mov	r17,r4
    c4f4:	2809883a 	mov	r4,r5
    c4f8:	300b883a 	mov	r5,r6
    c4fc:	380d883a 	mov	r6,r7
    c500:	dfc00215 	stw	ra,8(sp)
    c504:	80000015 	stw	zero,0(r16)
    c508:	001096c0 	call	1096c <write>
    c50c:	00ffffc4 	movi	r3,-1
    c510:	10c00526 	beq	r2,r3,c528 <_write_r+0x4c>
    c514:	dfc00217 	ldw	ra,8(sp)
    c518:	dc400117 	ldw	r17,4(sp)
    c51c:	dc000017 	ldw	r16,0(sp)
    c520:	dec00304 	addi	sp,sp,12
    c524:	f800283a 	ret
    c528:	80c00017 	ldw	r3,0(r16)
    c52c:	183ff926 	beq	r3,zero,c514 <__alt_mem_sram+0xf7e0c514>
    c530:	88c00015 	stw	r3,0(r17)
    c534:	003ff706 	br	c514 <__alt_mem_sram+0xf7e0c514>

0000c538 <_close_r>:
    c538:	defffd04 	addi	sp,sp,-12
    c53c:	dc000015 	stw	r16,0(sp)
    c540:	04000074 	movhi	r16,1
    c544:	dc400115 	stw	r17,4(sp)
    c548:	841a9c04 	addi	r16,r16,27248
    c54c:	2023883a 	mov	r17,r4
    c550:	2809883a 	mov	r4,r5
    c554:	dfc00215 	stw	ra,8(sp)
    c558:	80000015 	stw	zero,0(r16)
    c55c:	00100e00 	call	100e0 <close>
    c560:	00ffffc4 	movi	r3,-1
    c564:	10c00526 	beq	r2,r3,c57c <_close_r+0x44>
    c568:	dfc00217 	ldw	ra,8(sp)
    c56c:	dc400117 	ldw	r17,4(sp)
    c570:	dc000017 	ldw	r16,0(sp)
    c574:	dec00304 	addi	sp,sp,12
    c578:	f800283a 	ret
    c57c:	80c00017 	ldw	r3,0(r16)
    c580:	183ff926 	beq	r3,zero,c568 <__alt_mem_sram+0xf7e0c568>
    c584:	88c00015 	stw	r3,0(r17)
    c588:	003ff706 	br	c568 <__alt_mem_sram+0xf7e0c568>

0000c58c <_calloc_r>:
    c58c:	298b383a 	mul	r5,r5,r6
    c590:	defffe04 	addi	sp,sp,-8
    c594:	dc000015 	stw	r16,0(sp)
    c598:	dfc00115 	stw	ra,4(sp)
    c59c:	0008c2c0 	call	8c2c <_malloc_r>
    c5a0:	1021883a 	mov	r16,r2
    c5a4:	10002826 	beq	r2,zero,c648 <_calloc_r+0xbc>
    c5a8:	11bfff17 	ldw	r6,-4(r2)
    c5ac:	00bfff04 	movi	r2,-4
    c5b0:	00c00904 	movi	r3,36
    c5b4:	308c703a 	and	r6,r6,r2
    c5b8:	308d883a 	add	r6,r6,r2
    c5bc:	19801436 	bltu	r3,r6,c610 <_calloc_r+0x84>
    c5c0:	008004c4 	movi	r2,19
    c5c4:	11800936 	bltu	r2,r6,c5ec <_calloc_r+0x60>
    c5c8:	8005883a 	mov	r2,r16
    c5cc:	10000015 	stw	zero,0(r2)
    c5d0:	10000115 	stw	zero,4(r2)
    c5d4:	10000215 	stw	zero,8(r2)
    c5d8:	8005883a 	mov	r2,r16
    c5dc:	dfc00117 	ldw	ra,4(sp)
    c5e0:	dc000017 	ldw	r16,0(sp)
    c5e4:	dec00204 	addi	sp,sp,8
    c5e8:	f800283a 	ret
    c5ec:	80000015 	stw	zero,0(r16)
    c5f0:	80000115 	stw	zero,4(r16)
    c5f4:	008006c4 	movi	r2,27
    c5f8:	11800d2e 	bgeu	r2,r6,c630 <_calloc_r+0xa4>
    c5fc:	80000215 	stw	zero,8(r16)
    c600:	80000315 	stw	zero,12(r16)
    c604:	30c00c26 	beq	r6,r3,c638 <_calloc_r+0xac>
    c608:	80800404 	addi	r2,r16,16
    c60c:	003fef06 	br	c5cc <__alt_mem_sram+0xf7e0c5cc>
    c610:	8009883a 	mov	r4,r16
    c614:	000b883a 	mov	r5,zero
    c618:	00097500 	call	9750 <memset>
    c61c:	8005883a 	mov	r2,r16
    c620:	dfc00117 	ldw	ra,4(sp)
    c624:	dc000017 	ldw	r16,0(sp)
    c628:	dec00204 	addi	sp,sp,8
    c62c:	f800283a 	ret
    c630:	80800204 	addi	r2,r16,8
    c634:	003fe506 	br	c5cc <__alt_mem_sram+0xf7e0c5cc>
    c638:	80000415 	stw	zero,16(r16)
    c63c:	80800604 	addi	r2,r16,24
    c640:	80000515 	stw	zero,20(r16)
    c644:	003fe106 	br	c5cc <__alt_mem_sram+0xf7e0c5cc>
    c648:	0005883a 	mov	r2,zero
    c64c:	003fe306 	br	c5dc <__alt_mem_sram+0xf7e0c5dc>

0000c650 <_fclose_r>:
    c650:	28003226 	beq	r5,zero,c71c <_fclose_r+0xcc>
    c654:	defffc04 	addi	sp,sp,-16
    c658:	dc400115 	stw	r17,4(sp)
    c65c:	2023883a 	mov	r17,r4
    c660:	dc000015 	stw	r16,0(sp)
    c664:	dfc00315 	stw	ra,12(sp)
    c668:	dc800215 	stw	r18,8(sp)
    c66c:	2821883a 	mov	r16,r5
    c670:	0007f2c0 	call	7f2c <__sfp_lock_acquire>
    c674:	88000226 	beq	r17,zero,c680 <_fclose_r+0x30>
    c678:	88800e17 	ldw	r2,56(r17)
    c67c:	10002926 	beq	r2,zero,c724 <_fclose_r+0xd4>
    c680:	8080030f 	ldh	r2,12(r16)
    c684:	10002226 	beq	r2,zero,c710 <_fclose_r+0xc0>
    c688:	8809883a 	mov	r4,r17
    c68c:	800b883a 	mov	r5,r16
    c690:	00079740 	call	7974 <_fflush_r>
    c694:	1025883a 	mov	r18,r2
    c698:	80800b17 	ldw	r2,44(r16)
    c69c:	10000426 	beq	r2,zero,c6b0 <_fclose_r+0x60>
    c6a0:	81400717 	ldw	r5,28(r16)
    c6a4:	8809883a 	mov	r4,r17
    c6a8:	103ee83a 	callr	r2
    c6ac:	10002616 	blt	r2,zero,c748 <_fclose_r+0xf8>
    c6b0:	8080030b 	ldhu	r2,12(r16)
    c6b4:	1080200c 	andi	r2,r2,128
    c6b8:	10001f1e 	bne	r2,zero,c738 <_fclose_r+0xe8>
    c6bc:	81400c17 	ldw	r5,48(r16)
    c6c0:	28000526 	beq	r5,zero,c6d8 <_fclose_r+0x88>
    c6c4:	80801004 	addi	r2,r16,64
    c6c8:	28800226 	beq	r5,r2,c6d4 <_fclose_r+0x84>
    c6cc:	8809883a 	mov	r4,r17
    c6d0:	00080900 	call	8090 <_free_r>
    c6d4:	80000c15 	stw	zero,48(r16)
    c6d8:	81401117 	ldw	r5,68(r16)
    c6dc:	28000326 	beq	r5,zero,c6ec <_fclose_r+0x9c>
    c6e0:	8809883a 	mov	r4,r17
    c6e4:	00080900 	call	8090 <_free_r>
    c6e8:	80001115 	stw	zero,68(r16)
    c6ec:	8000030d 	sth	zero,12(r16)
    c6f0:	0007f300 	call	7f30 <__sfp_lock_release>
    c6f4:	9005883a 	mov	r2,r18
    c6f8:	dfc00317 	ldw	ra,12(sp)
    c6fc:	dc800217 	ldw	r18,8(sp)
    c700:	dc400117 	ldw	r17,4(sp)
    c704:	dc000017 	ldw	r16,0(sp)
    c708:	dec00404 	addi	sp,sp,16
    c70c:	f800283a 	ret
    c710:	0007f300 	call	7f30 <__sfp_lock_release>
    c714:	0005883a 	mov	r2,zero
    c718:	003ff706 	br	c6f8 <__alt_mem_sram+0xf7e0c6f8>
    c71c:	0005883a 	mov	r2,zero
    c720:	f800283a 	ret
    c724:	8809883a 	mov	r4,r17
    c728:	0007f1c0 	call	7f1c <__sinit>
    c72c:	8080030f 	ldh	r2,12(r16)
    c730:	103fd51e 	bne	r2,zero,c688 <__alt_mem_sram+0xf7e0c688>
    c734:	003ff606 	br	c710 <__alt_mem_sram+0xf7e0c710>
    c738:	81400417 	ldw	r5,16(r16)
    c73c:	8809883a 	mov	r4,r17
    c740:	00080900 	call	8090 <_free_r>
    c744:	003fdd06 	br	c6bc <__alt_mem_sram+0xf7e0c6bc>
    c748:	04bfffc4 	movi	r18,-1
    c74c:	003fd806 	br	c6b0 <__alt_mem_sram+0xf7e0c6b0>

0000c750 <fclose>:
    c750:	00800074 	movhi	r2,1
    c754:	1093cb04 	addi	r2,r2,20268
    c758:	200b883a 	mov	r5,r4
    c75c:	11000017 	ldw	r4,0(r2)
    c760:	000c6501 	jmpi	c650 <_fclose_r>

0000c764 <_fputwc_r>:
    c764:	3080030b 	ldhu	r2,12(r6)
    c768:	defff804 	addi	sp,sp,-32
    c76c:	dcc00415 	stw	r19,16(sp)
    c770:	dc800315 	stw	r18,12(sp)
    c774:	dc000115 	stw	r16,4(sp)
    c778:	dfc00715 	stw	ra,28(sp)
    c77c:	dd400615 	stw	r21,24(sp)
    c780:	dd000515 	stw	r20,20(sp)
    c784:	dc400215 	stw	r17,8(sp)
    c788:	10c8000c 	andi	r3,r2,8192
    c78c:	3021883a 	mov	r16,r6
    c790:	2027883a 	mov	r19,r4
    c794:	2825883a 	mov	r18,r5
    c798:	1800051e 	bne	r3,zero,c7b0 <_fputwc_r+0x4c>
    c79c:	30c01917 	ldw	r3,100(r6)
    c7a0:	10880014 	ori	r2,r2,8192
    c7a4:	3080030d 	sth	r2,12(r6)
    c7a8:	18880014 	ori	r2,r3,8192
    c7ac:	30801915 	stw	r2,100(r6)
    c7b0:	0008a1c0 	call	8a1c <__locale_mb_cur_max>
    c7b4:	00c00044 	movi	r3,1
    c7b8:	10c03e26 	beq	r2,r3,c8b4 <_fputwc_r+0x150>
    c7bc:	9809883a 	mov	r4,r19
    c7c0:	d80b883a 	mov	r5,sp
    c7c4:	900d883a 	mov	r6,r18
    c7c8:	81c01704 	addi	r7,r16,92
    c7cc:	000cc140 	call	cc14 <_wcrtomb_r>
    c7d0:	1029883a 	mov	r20,r2
    c7d4:	00bfffc4 	movi	r2,-1
    c7d8:	a0802026 	beq	r20,r2,c85c <_fputwc_r+0xf8>
    c7dc:	d9400003 	ldbu	r5,0(sp)
    c7e0:	a0001c26 	beq	r20,zero,c854 <_fputwc_r+0xf0>
    c7e4:	0023883a 	mov	r17,zero
    c7e8:	05400284 	movi	r21,10
    c7ec:	00000906 	br	c814 <_fputwc_r+0xb0>
    c7f0:	80800017 	ldw	r2,0(r16)
    c7f4:	11400005 	stb	r5,0(r2)
    c7f8:	80c00017 	ldw	r3,0(r16)
    c7fc:	18c00044 	addi	r3,r3,1
    c800:	80c00015 	stw	r3,0(r16)
    c804:	8c400044 	addi	r17,r17,1
    c808:	dc45883a 	add	r2,sp,r17
    c80c:	8d00112e 	bgeu	r17,r20,c854 <_fputwc_r+0xf0>
    c810:	11400003 	ldbu	r5,0(r2)
    c814:	80c00217 	ldw	r3,8(r16)
    c818:	18ffffc4 	addi	r3,r3,-1
    c81c:	80c00215 	stw	r3,8(r16)
    c820:	183ff30e 	bge	r3,zero,c7f0 <__alt_mem_sram+0xf7e0c7f0>
    c824:	80800617 	ldw	r2,24(r16)
    c828:	18801916 	blt	r3,r2,c890 <_fputwc_r+0x12c>
    c82c:	80800017 	ldw	r2,0(r16)
    c830:	11400005 	stb	r5,0(r2)
    c834:	80800017 	ldw	r2,0(r16)
    c838:	10c00003 	ldbu	r3,0(r2)
    c83c:	10800044 	addi	r2,r2,1
    c840:	1d402326 	beq	r3,r21,c8d0 <_fputwc_r+0x16c>
    c844:	80800015 	stw	r2,0(r16)
    c848:	8c400044 	addi	r17,r17,1
    c84c:	dc45883a 	add	r2,sp,r17
    c850:	8d3fef36 	bltu	r17,r20,c810 <__alt_mem_sram+0xf7e0c810>
    c854:	9005883a 	mov	r2,r18
    c858:	00000406 	br	c86c <_fputwc_r+0x108>
    c85c:	80c0030b 	ldhu	r3,12(r16)
    c860:	a005883a 	mov	r2,r20
    c864:	18c01014 	ori	r3,r3,64
    c868:	80c0030d 	sth	r3,12(r16)
    c86c:	dfc00717 	ldw	ra,28(sp)
    c870:	dd400617 	ldw	r21,24(sp)
    c874:	dd000517 	ldw	r20,20(sp)
    c878:	dcc00417 	ldw	r19,16(sp)
    c87c:	dc800317 	ldw	r18,12(sp)
    c880:	dc400217 	ldw	r17,8(sp)
    c884:	dc000117 	ldw	r16,4(sp)
    c888:	dec00804 	addi	sp,sp,32
    c88c:	f800283a 	ret
    c890:	9809883a 	mov	r4,r19
    c894:	29403fcc 	andi	r5,r5,255
    c898:	800d883a 	mov	r6,r16
    c89c:	000caa40 	call	caa4 <__swbuf_r>
    c8a0:	10bfffe0 	cmpeqi	r2,r2,-1
    c8a4:	10803fcc 	andi	r2,r2,255
    c8a8:	103fd626 	beq	r2,zero,c804 <__alt_mem_sram+0xf7e0c804>
    c8ac:	00bfffc4 	movi	r2,-1
    c8b0:	003fee06 	br	c86c <__alt_mem_sram+0xf7e0c86c>
    c8b4:	90ffffc4 	addi	r3,r18,-1
    c8b8:	01003f84 	movi	r4,254
    c8bc:	20ffbf36 	bltu	r4,r3,c7bc <__alt_mem_sram+0xf7e0c7bc>
    c8c0:	900b883a 	mov	r5,r18
    c8c4:	dc800005 	stb	r18,0(sp)
    c8c8:	1029883a 	mov	r20,r2
    c8cc:	003fc506 	br	c7e4 <__alt_mem_sram+0xf7e0c7e4>
    c8d0:	9809883a 	mov	r4,r19
    c8d4:	a80b883a 	mov	r5,r21
    c8d8:	800d883a 	mov	r6,r16
    c8dc:	000caa40 	call	caa4 <__swbuf_r>
    c8e0:	10bfffe0 	cmpeqi	r2,r2,-1
    c8e4:	003fef06 	br	c8a4 <__alt_mem_sram+0xf7e0c8a4>

0000c8e8 <fputwc>:
    c8e8:	defffc04 	addi	sp,sp,-16
    c8ec:	dc000115 	stw	r16,4(sp)
    c8f0:	04000074 	movhi	r16,1
    c8f4:	8413cb04 	addi	r16,r16,20268
    c8f8:	dc400215 	stw	r17,8(sp)
    c8fc:	2023883a 	mov	r17,r4
    c900:	81000017 	ldw	r4,0(r16)
    c904:	dfc00315 	stw	ra,12(sp)
    c908:	280d883a 	mov	r6,r5
    c90c:	20000626 	beq	r4,zero,c928 <fputwc+0x40>
    c910:	20800e17 	ldw	r2,56(r4)
    c914:	1000041e 	bne	r2,zero,c928 <fputwc+0x40>
    c918:	d9400015 	stw	r5,0(sp)
    c91c:	0007f1c0 	call	7f1c <__sinit>
    c920:	81000017 	ldw	r4,0(r16)
    c924:	d9800017 	ldw	r6,0(sp)
    c928:	880b883a 	mov	r5,r17
    c92c:	dfc00317 	ldw	ra,12(sp)
    c930:	dc400217 	ldw	r17,8(sp)
    c934:	dc000117 	ldw	r16,4(sp)
    c938:	dec00404 	addi	sp,sp,16
    c93c:	000c7641 	jmpi	c764 <_fputwc_r>

0000c940 <_fstat_r>:
    c940:	defffd04 	addi	sp,sp,-12
    c944:	dc000015 	stw	r16,0(sp)
    c948:	04000074 	movhi	r16,1
    c94c:	dc400115 	stw	r17,4(sp)
    c950:	841a9c04 	addi	r16,r16,27248
    c954:	2023883a 	mov	r17,r4
    c958:	2809883a 	mov	r4,r5
    c95c:	300b883a 	mov	r5,r6
    c960:	dfc00215 	stw	ra,8(sp)
    c964:	80000015 	stw	zero,0(r16)
    c968:	001022c0 	call	1022c <fstat>
    c96c:	00ffffc4 	movi	r3,-1
    c970:	10c00526 	beq	r2,r3,c988 <_fstat_r+0x48>
    c974:	dfc00217 	ldw	ra,8(sp)
    c978:	dc400117 	ldw	r17,4(sp)
    c97c:	dc000017 	ldw	r16,0(sp)
    c980:	dec00304 	addi	sp,sp,12
    c984:	f800283a 	ret
    c988:	80c00017 	ldw	r3,0(r16)
    c98c:	183ff926 	beq	r3,zero,c974 <__alt_mem_sram+0xf7e0c974>
    c990:	88c00015 	stw	r3,0(r17)
    c994:	003ff706 	br	c974 <__alt_mem_sram+0xf7e0c974>

0000c998 <_isatty_r>:
    c998:	defffd04 	addi	sp,sp,-12
    c99c:	dc000015 	stw	r16,0(sp)
    c9a0:	04000074 	movhi	r16,1
    c9a4:	dc400115 	stw	r17,4(sp)
    c9a8:	841a9c04 	addi	r16,r16,27248
    c9ac:	2023883a 	mov	r17,r4
    c9b0:	2809883a 	mov	r4,r5
    c9b4:	dfc00215 	stw	ra,8(sp)
    c9b8:	80000015 	stw	zero,0(r16)
    c9bc:	001032c0 	call	1032c <isatty>
    c9c0:	00ffffc4 	movi	r3,-1
    c9c4:	10c00526 	beq	r2,r3,c9dc <_isatty_r+0x44>
    c9c8:	dfc00217 	ldw	ra,8(sp)
    c9cc:	dc400117 	ldw	r17,4(sp)
    c9d0:	dc000017 	ldw	r16,0(sp)
    c9d4:	dec00304 	addi	sp,sp,12
    c9d8:	f800283a 	ret
    c9dc:	80c00017 	ldw	r3,0(r16)
    c9e0:	183ff926 	beq	r3,zero,c9c8 <__alt_mem_sram+0xf7e0c9c8>
    c9e4:	88c00015 	stw	r3,0(r17)
    c9e8:	003ff706 	br	c9c8 <__alt_mem_sram+0xf7e0c9c8>

0000c9ec <_lseek_r>:
    c9ec:	defffd04 	addi	sp,sp,-12
    c9f0:	dc000015 	stw	r16,0(sp)
    c9f4:	04000074 	movhi	r16,1
    c9f8:	dc400115 	stw	r17,4(sp)
    c9fc:	841a9c04 	addi	r16,r16,27248
    ca00:	2023883a 	mov	r17,r4
    ca04:	2809883a 	mov	r4,r5
    ca08:	300b883a 	mov	r5,r6
    ca0c:	380d883a 	mov	r6,r7
    ca10:	dfc00215 	stw	ra,8(sp)
    ca14:	80000015 	stw	zero,0(r16)
    ca18:	00105040 	call	10504 <lseek>
    ca1c:	00ffffc4 	movi	r3,-1
    ca20:	10c00526 	beq	r2,r3,ca38 <_lseek_r+0x4c>
    ca24:	dfc00217 	ldw	ra,8(sp)
    ca28:	dc400117 	ldw	r17,4(sp)
    ca2c:	dc000017 	ldw	r16,0(sp)
    ca30:	dec00304 	addi	sp,sp,12
    ca34:	f800283a 	ret
    ca38:	80c00017 	ldw	r3,0(r16)
    ca3c:	183ff926 	beq	r3,zero,ca24 <__alt_mem_sram+0xf7e0ca24>
    ca40:	88c00015 	stw	r3,0(r17)
    ca44:	003ff706 	br	ca24 <__alt_mem_sram+0xf7e0ca24>

0000ca48 <_read_r>:
    ca48:	defffd04 	addi	sp,sp,-12
    ca4c:	dc000015 	stw	r16,0(sp)
    ca50:	04000074 	movhi	r16,1
    ca54:	dc400115 	stw	r17,4(sp)
    ca58:	841a9c04 	addi	r16,r16,27248
    ca5c:	2023883a 	mov	r17,r4
    ca60:	2809883a 	mov	r4,r5
    ca64:	300b883a 	mov	r5,r6
    ca68:	380d883a 	mov	r6,r7
    ca6c:	dfc00215 	stw	ra,8(sp)
    ca70:	80000015 	stw	zero,0(r16)
    ca74:	00106e00 	call	106e0 <read>
    ca78:	00ffffc4 	movi	r3,-1
    ca7c:	10c00526 	beq	r2,r3,ca94 <_read_r+0x4c>
    ca80:	dfc00217 	ldw	ra,8(sp)
    ca84:	dc400117 	ldw	r17,4(sp)
    ca88:	dc000017 	ldw	r16,0(sp)
    ca8c:	dec00304 	addi	sp,sp,12
    ca90:	f800283a 	ret
    ca94:	80c00017 	ldw	r3,0(r16)
    ca98:	183ff926 	beq	r3,zero,ca80 <__alt_mem_sram+0xf7e0ca80>
    ca9c:	88c00015 	stw	r3,0(r17)
    caa0:	003ff706 	br	ca80 <__alt_mem_sram+0xf7e0ca80>

0000caa4 <__swbuf_r>:
    caa4:	defffc04 	addi	sp,sp,-16
    caa8:	dc800215 	stw	r18,8(sp)
    caac:	dc400115 	stw	r17,4(sp)
    cab0:	dc000015 	stw	r16,0(sp)
    cab4:	dfc00315 	stw	ra,12(sp)
    cab8:	2025883a 	mov	r18,r4
    cabc:	2823883a 	mov	r17,r5
    cac0:	3021883a 	mov	r16,r6
    cac4:	20000226 	beq	r4,zero,cad0 <__swbuf_r+0x2c>
    cac8:	20800e17 	ldw	r2,56(r4)
    cacc:	10004126 	beq	r2,zero,cbd4 <__swbuf_r+0x130>
    cad0:	80c00617 	ldw	r3,24(r16)
    cad4:	8180030b 	ldhu	r6,12(r16)
    cad8:	80c00215 	stw	r3,8(r16)
    cadc:	30c0020c 	andi	r3,r6,8
    cae0:	18003526 	beq	r3,zero,cbb8 <__swbuf_r+0x114>
    cae4:	80c00417 	ldw	r3,16(r16)
    cae8:	18003326 	beq	r3,zero,cbb8 <__swbuf_r+0x114>
    caec:	3088000c 	andi	r2,r6,8192
    caf0:	8c403fcc 	andi	r17,r17,255
    caf4:	10001726 	beq	r2,zero,cb54 <__swbuf_r+0xb0>
    caf8:	80800017 	ldw	r2,0(r16)
    cafc:	81000517 	ldw	r4,20(r16)
    cb00:	10c7c83a 	sub	r3,r2,r3
    cb04:	19001d0e 	bge	r3,r4,cb7c <__swbuf_r+0xd8>
    cb08:	18c00044 	addi	r3,r3,1
    cb0c:	81400217 	ldw	r5,8(r16)
    cb10:	11000044 	addi	r4,r2,1
    cb14:	81000015 	stw	r4,0(r16)
    cb18:	297fffc4 	addi	r5,r5,-1
    cb1c:	81400215 	stw	r5,8(r16)
    cb20:	14400005 	stb	r17,0(r2)
    cb24:	80800517 	ldw	r2,20(r16)
    cb28:	10c01d26 	beq	r2,r3,cba0 <__swbuf_r+0xfc>
    cb2c:	8080030b 	ldhu	r2,12(r16)
    cb30:	1080004c 	andi	r2,r2,1
    cb34:	1000181e 	bne	r2,zero,cb98 <__swbuf_r+0xf4>
    cb38:	8805883a 	mov	r2,r17
    cb3c:	dfc00317 	ldw	ra,12(sp)
    cb40:	dc800217 	ldw	r18,8(sp)
    cb44:	dc400117 	ldw	r17,4(sp)
    cb48:	dc000017 	ldw	r16,0(sp)
    cb4c:	dec00404 	addi	sp,sp,16
    cb50:	f800283a 	ret
    cb54:	81001917 	ldw	r4,100(r16)
    cb58:	00b7ffc4 	movi	r2,-8193
    cb5c:	31880014 	ori	r6,r6,8192
    cb60:	2084703a 	and	r2,r4,r2
    cb64:	80801915 	stw	r2,100(r16)
    cb68:	80800017 	ldw	r2,0(r16)
    cb6c:	81000517 	ldw	r4,20(r16)
    cb70:	8180030d 	sth	r6,12(r16)
    cb74:	10c7c83a 	sub	r3,r2,r3
    cb78:	193fe316 	blt	r3,r4,cb08 <__alt_mem_sram+0xf7e0cb08>
    cb7c:	9009883a 	mov	r4,r18
    cb80:	800b883a 	mov	r5,r16
    cb84:	00079740 	call	7974 <_fflush_r>
    cb88:	1000091e 	bne	r2,zero,cbb0 <__swbuf_r+0x10c>
    cb8c:	80800017 	ldw	r2,0(r16)
    cb90:	00c00044 	movi	r3,1
    cb94:	003fdd06 	br	cb0c <__alt_mem_sram+0xf7e0cb0c>
    cb98:	00800284 	movi	r2,10
    cb9c:	88bfe61e 	bne	r17,r2,cb38 <__alt_mem_sram+0xf7e0cb38>
    cba0:	9009883a 	mov	r4,r18
    cba4:	800b883a 	mov	r5,r16
    cba8:	00079740 	call	7974 <_fflush_r>
    cbac:	103fe226 	beq	r2,zero,cb38 <__alt_mem_sram+0xf7e0cb38>
    cbb0:	00bfffc4 	movi	r2,-1
    cbb4:	003fe106 	br	cb3c <__alt_mem_sram+0xf7e0cb3c>
    cbb8:	9009883a 	mov	r4,r18
    cbbc:	800b883a 	mov	r5,r16
    cbc0:	0005f1c0 	call	5f1c <__swsetup_r>
    cbc4:	1000051e 	bne	r2,zero,cbdc <__swbuf_r+0x138>
    cbc8:	8180030b 	ldhu	r6,12(r16)
    cbcc:	80c00417 	ldw	r3,16(r16)
    cbd0:	003fc606 	br	caec <__alt_mem_sram+0xf7e0caec>
    cbd4:	0007f1c0 	call	7f1c <__sinit>
    cbd8:	003fbd06 	br	cad0 <__alt_mem_sram+0xf7e0cad0>
    cbdc:	80c0030b 	ldhu	r3,12(r16)
    cbe0:	00bfffc4 	movi	r2,-1
    cbe4:	18c01014 	ori	r3,r3,64
    cbe8:	80c0030d 	sth	r3,12(r16)
    cbec:	00c00244 	movi	r3,9
    cbf0:	90c00015 	stw	r3,0(r18)
    cbf4:	003fd106 	br	cb3c <__alt_mem_sram+0xf7e0cb3c>

0000cbf8 <__swbuf>:
    cbf8:	00c00074 	movhi	r3,1
    cbfc:	18d3cb04 	addi	r3,r3,20268
    cc00:	2005883a 	mov	r2,r4
    cc04:	19000017 	ldw	r4,0(r3)
    cc08:	280d883a 	mov	r6,r5
    cc0c:	100b883a 	mov	r5,r2
    cc10:	000caa41 	jmpi	caa4 <__swbuf_r>

0000cc14 <_wcrtomb_r>:
    cc14:	defff604 	addi	sp,sp,-40
    cc18:	00800074 	movhi	r2,1
    cc1c:	dc800815 	stw	r18,32(sp)
    cc20:	dc400715 	stw	r17,28(sp)
    cc24:	dc000615 	stw	r16,24(sp)
    cc28:	1093cf04 	addi	r2,r2,20284
    cc2c:	dfc00915 	stw	ra,36(sp)
    cc30:	2021883a 	mov	r16,r4
    cc34:	3823883a 	mov	r17,r7
    cc38:	14800017 	ldw	r18,0(r2)
    cc3c:	28001426 	beq	r5,zero,cc90 <_wcrtomb_r+0x7c>
    cc40:	d9400415 	stw	r5,16(sp)
    cc44:	d9800515 	stw	r6,20(sp)
    cc48:	0008a100 	call	8a10 <__locale_charset>
    cc4c:	d9400417 	ldw	r5,16(sp)
    cc50:	d9800517 	ldw	r6,20(sp)
    cc54:	8009883a 	mov	r4,r16
    cc58:	dc400015 	stw	r17,0(sp)
    cc5c:	100f883a 	mov	r7,r2
    cc60:	903ee83a 	callr	r18
    cc64:	00ffffc4 	movi	r3,-1
    cc68:	10c0031e 	bne	r2,r3,cc78 <_wcrtomb_r+0x64>
    cc6c:	88000015 	stw	zero,0(r17)
    cc70:	00c02284 	movi	r3,138
    cc74:	80c00015 	stw	r3,0(r16)
    cc78:	dfc00917 	ldw	ra,36(sp)
    cc7c:	dc800817 	ldw	r18,32(sp)
    cc80:	dc400717 	ldw	r17,28(sp)
    cc84:	dc000617 	ldw	r16,24(sp)
    cc88:	dec00a04 	addi	sp,sp,40
    cc8c:	f800283a 	ret
    cc90:	0008a100 	call	8a10 <__locale_charset>
    cc94:	8009883a 	mov	r4,r16
    cc98:	dc400015 	stw	r17,0(sp)
    cc9c:	d9400104 	addi	r5,sp,4
    cca0:	000d883a 	mov	r6,zero
    cca4:	100f883a 	mov	r7,r2
    cca8:	903ee83a 	callr	r18
    ccac:	003fed06 	br	cc64 <__alt_mem_sram+0xf7e0cc64>

0000ccb0 <wcrtomb>:
    ccb0:	defff504 	addi	sp,sp,-44
    ccb4:	dc400515 	stw	r17,20(sp)
    ccb8:	dc000415 	stw	r16,16(sp)
    ccbc:	dfc00a15 	stw	ra,40(sp)
    ccc0:	dd400915 	stw	r21,36(sp)
    ccc4:	dd000815 	stw	r20,32(sp)
    ccc8:	dcc00715 	stw	r19,28(sp)
    cccc:	dc800615 	stw	r18,24(sp)
    ccd0:	2021883a 	mov	r16,r4
    ccd4:	3023883a 	mov	r17,r6
    ccd8:	20001d26 	beq	r4,zero,cd50 <wcrtomb+0xa0>
    ccdc:	04800074 	movhi	r18,1
    cce0:	9493cb04 	addi	r18,r18,20268
    cce4:	00800074 	movhi	r2,1
    cce8:	95400017 	ldw	r21,0(r18)
    ccec:	1093cf04 	addi	r2,r2,20284
    ccf0:	15000017 	ldw	r20,0(r2)
    ccf4:	2827883a 	mov	r19,r5
    ccf8:	0008a100 	call	8a10 <__locale_charset>
    ccfc:	a809883a 	mov	r4,r21
    cd00:	dc400015 	stw	r17,0(sp)
    cd04:	800b883a 	mov	r5,r16
    cd08:	980d883a 	mov	r6,r19
    cd0c:	100f883a 	mov	r7,r2
    cd10:	a03ee83a 	callr	r20
    cd14:	00ffffc4 	movi	r3,-1
    cd18:	10c0041e 	bne	r2,r3,cd2c <wcrtomb+0x7c>
    cd1c:	90c00017 	ldw	r3,0(r18)
    cd20:	01002284 	movi	r4,138
    cd24:	88000015 	stw	zero,0(r17)
    cd28:	19000015 	stw	r4,0(r3)
    cd2c:	dfc00a17 	ldw	ra,40(sp)
    cd30:	dd400917 	ldw	r21,36(sp)
    cd34:	dd000817 	ldw	r20,32(sp)
    cd38:	dcc00717 	ldw	r19,28(sp)
    cd3c:	dc800617 	ldw	r18,24(sp)
    cd40:	dc400517 	ldw	r17,20(sp)
    cd44:	dc000417 	ldw	r16,16(sp)
    cd48:	dec00b04 	addi	sp,sp,44
    cd4c:	f800283a 	ret
    cd50:	04800074 	movhi	r18,1
    cd54:	9493cb04 	addi	r18,r18,20268
    cd58:	00800074 	movhi	r2,1
    cd5c:	94c00017 	ldw	r19,0(r18)
    cd60:	1093cf04 	addi	r2,r2,20284
    cd64:	14000017 	ldw	r16,0(r2)
    cd68:	0008a100 	call	8a10 <__locale_charset>
    cd6c:	9809883a 	mov	r4,r19
    cd70:	dc400015 	stw	r17,0(sp)
    cd74:	d9400104 	addi	r5,sp,4
    cd78:	000d883a 	mov	r6,zero
    cd7c:	100f883a 	mov	r7,r2
    cd80:	803ee83a 	callr	r16
    cd84:	003fe306 	br	cd14 <__alt_mem_sram+0xf7e0cd14>

0000cd88 <__ascii_wctomb>:
    cd88:	28000526 	beq	r5,zero,cda0 <__ascii_wctomb+0x18>
    cd8c:	00803fc4 	movi	r2,255
    cd90:	11800536 	bltu	r2,r6,cda8 <__ascii_wctomb+0x20>
    cd94:	29800005 	stb	r6,0(r5)
    cd98:	00800044 	movi	r2,1
    cd9c:	f800283a 	ret
    cda0:	0005883a 	mov	r2,zero
    cda4:	f800283a 	ret
    cda8:	00802284 	movi	r2,138
    cdac:	20800015 	stw	r2,0(r4)
    cdb0:	00bfffc4 	movi	r2,-1
    cdb4:	f800283a 	ret

0000cdb8 <_wctomb_r>:
    cdb8:	00800074 	movhi	r2,1
    cdbc:	defff904 	addi	sp,sp,-28
    cdc0:	1093cf04 	addi	r2,r2,20284
    cdc4:	dfc00615 	stw	ra,24(sp)
    cdc8:	dc400515 	stw	r17,20(sp)
    cdcc:	dc000415 	stw	r16,16(sp)
    cdd0:	3823883a 	mov	r17,r7
    cdd4:	14000017 	ldw	r16,0(r2)
    cdd8:	d9000115 	stw	r4,4(sp)
    cddc:	d9400215 	stw	r5,8(sp)
    cde0:	d9800315 	stw	r6,12(sp)
    cde4:	0008a100 	call	8a10 <__locale_charset>
    cde8:	d9000117 	ldw	r4,4(sp)
    cdec:	d9400217 	ldw	r5,8(sp)
    cdf0:	d9800317 	ldw	r6,12(sp)
    cdf4:	dc400015 	stw	r17,0(sp)
    cdf8:	100f883a 	mov	r7,r2
    cdfc:	803ee83a 	callr	r16
    ce00:	dfc00617 	ldw	ra,24(sp)
    ce04:	dc400517 	ldw	r17,20(sp)
    ce08:	dc000417 	ldw	r16,16(sp)
    ce0c:	dec00704 	addi	sp,sp,28
    ce10:	f800283a 	ret

0000ce14 <__udivdi3>:
    ce14:	defff504 	addi	sp,sp,-44
    ce18:	dcc00415 	stw	r19,16(sp)
    ce1c:	dc000115 	stw	r16,4(sp)
    ce20:	dfc00a15 	stw	ra,40(sp)
    ce24:	df000915 	stw	fp,36(sp)
    ce28:	ddc00815 	stw	r23,32(sp)
    ce2c:	dd800715 	stw	r22,28(sp)
    ce30:	dd400615 	stw	r21,24(sp)
    ce34:	dd000515 	stw	r20,20(sp)
    ce38:	dc800315 	stw	r18,12(sp)
    ce3c:	dc400215 	stw	r17,8(sp)
    ce40:	2027883a 	mov	r19,r4
    ce44:	2821883a 	mov	r16,r5
    ce48:	3800421e 	bne	r7,zero,cf54 <__udivdi3+0x140>
    ce4c:	3025883a 	mov	r18,r6
    ce50:	2023883a 	mov	r17,r4
    ce54:	2980542e 	bgeu	r5,r6,cfa8 <__udivdi3+0x194>
    ce58:	00bfffd4 	movui	r2,65535
    ce5c:	282d883a 	mov	r22,r5
    ce60:	1180a836 	bltu	r2,r6,d104 <__udivdi3+0x2f0>
    ce64:	00803fc4 	movi	r2,255
    ce68:	1181422e 	bgeu	r2,r6,d374 <__udivdi3+0x560>
    ce6c:	00800204 	movi	r2,8
    ce70:	1007883a 	mov	r3,r2
    ce74:	3084d83a 	srl	r2,r6,r2
    ce78:	01000074 	movhi	r4,1
    ce7c:	210cd404 	addi	r4,r4,13136
    ce80:	2085883a 	add	r2,r4,r2
    ce84:	10800003 	ldbu	r2,0(r2)
    ce88:	10c7883a 	add	r3,r2,r3
    ce8c:	00800804 	movi	r2,32
    ce90:	10c5c83a 	sub	r2,r2,r3
    ce94:	10000526 	beq	r2,zero,ceac <__udivdi3+0x98>
    ce98:	80a0983a 	sll	r16,r16,r2
    ce9c:	98c6d83a 	srl	r3,r19,r3
    cea0:	30a4983a 	sll	r18,r6,r2
    cea4:	98a2983a 	sll	r17,r19,r2
    cea8:	80ecb03a 	or	r22,r16,r3
    ceac:	902ad43a 	srli	r21,r18,16
    ceb0:	b009883a 	mov	r4,r22
    ceb4:	953fffcc 	andi	r20,r18,65535
    ceb8:	a80b883a 	mov	r5,r21
    cebc:	000da880 	call	da88 <__umodsi3>
    cec0:	b009883a 	mov	r4,r22
    cec4:	a80b883a 	mov	r5,r21
    cec8:	1027883a 	mov	r19,r2
    cecc:	000da800 	call	da80 <__udivsi3>
    ced0:	1021883a 	mov	r16,r2
    ced4:	8806d43a 	srli	r3,r17,16
    ced8:	9804943a 	slli	r2,r19,16
    cedc:	8527383a 	mul	r19,r16,r20
    cee0:	10c4b03a 	or	r2,r2,r3
    cee4:	14c0052e 	bgeu	r2,r19,cefc <__udivdi3+0xe8>
    cee8:	1485883a 	add	r2,r2,r18
    ceec:	80ffffc4 	addi	r3,r16,-1
    cef0:	14800136 	bltu	r2,r18,cef8 <__udivdi3+0xe4>
    cef4:	14c13436 	bltu	r2,r19,d3c8 <__udivdi3+0x5b4>
    cef8:	1821883a 	mov	r16,r3
    cefc:	14e7c83a 	sub	r19,r2,r19
    cf00:	9809883a 	mov	r4,r19
    cf04:	a80b883a 	mov	r5,r21
    cf08:	000da880 	call	da88 <__umodsi3>
    cf0c:	102d883a 	mov	r22,r2
    cf10:	9809883a 	mov	r4,r19
    cf14:	a80b883a 	mov	r5,r21
    cf18:	000da800 	call	da80 <__udivsi3>
    cf1c:	b02c943a 	slli	r22,r22,16
    cf20:	1529383a 	mul	r20,r2,r20
    cf24:	8c7fffcc 	andi	r17,r17,65535
    cf28:	b462b03a 	or	r17,r22,r17
    cf2c:	8d00052e 	bgeu	r17,r20,cf44 <__udivdi3+0x130>
    cf30:	8ca3883a 	add	r17,r17,r18
    cf34:	10ffffc4 	addi	r3,r2,-1
    cf38:	8c80f636 	bltu	r17,r18,d314 <__udivdi3+0x500>
    cf3c:	8d00f52e 	bgeu	r17,r20,d314 <__udivdi3+0x500>
    cf40:	10bfff84 	addi	r2,r2,-2
    cf44:	8020943a 	slli	r16,r16,16
    cf48:	0007883a 	mov	r3,zero
    cf4c:	1404b03a 	or	r2,r2,r16
    cf50:	00005b06 	br	d0c0 <__udivdi3+0x2ac>
    cf54:	29c05836 	bltu	r5,r7,d0b8 <__udivdi3+0x2a4>
    cf58:	00bfffd4 	movui	r2,65535
    cf5c:	11c0642e 	bgeu	r2,r7,d0f0 <__udivdi3+0x2dc>
    cf60:	00804034 	movhi	r2,256
    cf64:	10bfffc4 	addi	r2,r2,-1
    cf68:	11c0f32e 	bgeu	r2,r7,d338 <__udivdi3+0x524>
    cf6c:	00c00604 	movi	r3,24
    cf70:	180b883a 	mov	r5,r3
    cf74:	38c6d83a 	srl	r3,r7,r3
    cf78:	00800074 	movhi	r2,1
    cf7c:	108cd404 	addi	r2,r2,13136
    cf80:	10c7883a 	add	r3,r2,r3
    cf84:	18c00003 	ldbu	r3,0(r3)
    cf88:	01000804 	movi	r4,32
    cf8c:	1947883a 	add	r3,r3,r5
    cf90:	20e5c83a 	sub	r18,r4,r3
    cf94:	9000661e 	bne	r18,zero,d130 <__udivdi3+0x31c>
    cf98:	3c00f936 	bltu	r7,r16,d380 <__udivdi3+0x56c>
    cf9c:	9985403a 	cmpgeu	r2,r19,r6
    cfa0:	0007883a 	mov	r3,zero
    cfa4:	00004606 	br	d0c0 <__udivdi3+0x2ac>
    cfa8:	3000041e 	bne	r6,zero,cfbc <__udivdi3+0x1a8>
    cfac:	01000044 	movi	r4,1
    cfb0:	000b883a 	mov	r5,zero
    cfb4:	000da800 	call	da80 <__udivsi3>
    cfb8:	1025883a 	mov	r18,r2
    cfbc:	00bfffd4 	movui	r2,65535
    cfc0:	1480562e 	bgeu	r2,r18,d11c <__udivdi3+0x308>
    cfc4:	00804034 	movhi	r2,256
    cfc8:	10bfffc4 	addi	r2,r2,-1
    cfcc:	1480e32e 	bgeu	r2,r18,d35c <__udivdi3+0x548>
    cfd0:	00800604 	movi	r2,24
    cfd4:	1007883a 	mov	r3,r2
    cfd8:	9084d83a 	srl	r2,r18,r2
    cfdc:	01000074 	movhi	r4,1
    cfe0:	210cd404 	addi	r4,r4,13136
    cfe4:	2085883a 	add	r2,r4,r2
    cfe8:	10800003 	ldbu	r2,0(r2)
    cfec:	10c5883a 	add	r2,r2,r3
    cff0:	00c00804 	movi	r3,32
    cff4:	1887c83a 	sub	r3,r3,r2
    cff8:	1800911e 	bne	r3,zero,d240 <__udivdi3+0x42c>
    cffc:	9028d43a 	srli	r20,r18,16
    d000:	84a1c83a 	sub	r16,r16,r18
    d004:	957fffcc 	andi	r21,r18,65535
    d008:	00c00044 	movi	r3,1
    d00c:	8009883a 	mov	r4,r16
    d010:	a00b883a 	mov	r5,r20
    d014:	d8c00015 	stw	r3,0(sp)
    d018:	000da880 	call	da88 <__umodsi3>
    d01c:	8009883a 	mov	r4,r16
    d020:	a00b883a 	mov	r5,r20
    d024:	1027883a 	mov	r19,r2
    d028:	000da800 	call	da80 <__udivsi3>
    d02c:	1021883a 	mov	r16,r2
    d030:	880cd43a 	srli	r6,r17,16
    d034:	9804943a 	slli	r2,r19,16
    d038:	8567383a 	mul	r19,r16,r21
    d03c:	d8c00017 	ldw	r3,0(sp)
    d040:	1188b03a 	or	r4,r2,r6
    d044:	24c0052e 	bgeu	r4,r19,d05c <__udivdi3+0x248>
    d048:	2489883a 	add	r4,r4,r18
    d04c:	80bfffc4 	addi	r2,r16,-1
    d050:	24800136 	bltu	r4,r18,d058 <__udivdi3+0x244>
    d054:	24c0d936 	bltu	r4,r19,d3bc <__udivdi3+0x5a8>
    d058:	1021883a 	mov	r16,r2
    d05c:	24e7c83a 	sub	r19,r4,r19
    d060:	9809883a 	mov	r4,r19
    d064:	a00b883a 	mov	r5,r20
    d068:	d8c00015 	stw	r3,0(sp)
    d06c:	000da880 	call	da88 <__umodsi3>
    d070:	102d883a 	mov	r22,r2
    d074:	9809883a 	mov	r4,r19
    d078:	a00b883a 	mov	r5,r20
    d07c:	000da800 	call	da80 <__udivsi3>
    d080:	b02c943a 	slli	r22,r22,16
    d084:	156b383a 	mul	r21,r2,r21
    d088:	8c7fffcc 	andi	r17,r17,65535
    d08c:	b462b03a 	or	r17,r22,r17
    d090:	d8c00017 	ldw	r3,0(sp)
    d094:	8d40052e 	bgeu	r17,r21,d0ac <__udivdi3+0x298>
    d098:	8ca3883a 	add	r17,r17,r18
    d09c:	113fffc4 	addi	r4,r2,-1
    d0a0:	8c809a36 	bltu	r17,r18,d30c <__udivdi3+0x4f8>
    d0a4:	8d40992e 	bgeu	r17,r21,d30c <__udivdi3+0x4f8>
    d0a8:	10bfff84 	addi	r2,r2,-2
    d0ac:	8020943a 	slli	r16,r16,16
    d0b0:	1404b03a 	or	r2,r2,r16
    d0b4:	00000206 	br	d0c0 <__udivdi3+0x2ac>
    d0b8:	0007883a 	mov	r3,zero
    d0bc:	0005883a 	mov	r2,zero
    d0c0:	dfc00a17 	ldw	ra,40(sp)
    d0c4:	df000917 	ldw	fp,36(sp)
    d0c8:	ddc00817 	ldw	r23,32(sp)
    d0cc:	dd800717 	ldw	r22,28(sp)
    d0d0:	dd400617 	ldw	r21,24(sp)
    d0d4:	dd000517 	ldw	r20,20(sp)
    d0d8:	dcc00417 	ldw	r19,16(sp)
    d0dc:	dc800317 	ldw	r18,12(sp)
    d0e0:	dc400217 	ldw	r17,8(sp)
    d0e4:	dc000117 	ldw	r16,4(sp)
    d0e8:	dec00b04 	addi	sp,sp,44
    d0ec:	f800283a 	ret
    d0f0:	00803fc4 	movi	r2,255
    d0f4:	11c0932e 	bgeu	r2,r7,d344 <__udivdi3+0x530>
    d0f8:	00c00204 	movi	r3,8
    d0fc:	180b883a 	mov	r5,r3
    d100:	003f9c06 	br	cf74 <__alt_mem_sram+0xf7e0cf74>
    d104:	00804034 	movhi	r2,256
    d108:	10bfffc4 	addi	r2,r2,-1
    d10c:	1180902e 	bgeu	r2,r6,d350 <__udivdi3+0x53c>
    d110:	00800604 	movi	r2,24
    d114:	1007883a 	mov	r3,r2
    d118:	003f5606 	br	ce74 <__alt_mem_sram+0xf7e0ce74>
    d11c:	00803fc4 	movi	r2,255
    d120:	1480912e 	bgeu	r2,r18,d368 <__udivdi3+0x554>
    d124:	00800204 	movi	r2,8
    d128:	1007883a 	mov	r3,r2
    d12c:	003faa06 	br	cfd8 <__alt_mem_sram+0xf7e0cfd8>
    d130:	30eed83a 	srl	r23,r6,r3
    d134:	3c8e983a 	sll	r7,r7,r18
    d138:	80f8d83a 	srl	fp,r16,r3
    d13c:	98c6d83a 	srl	r3,r19,r3
    d140:	3deeb03a 	or	r23,r7,r23
    d144:	b828d43a 	srli	r20,r23,16
    d148:	84a0983a 	sll	r16,r16,r18
    d14c:	e009883a 	mov	r4,fp
    d150:	a00b883a 	mov	r5,r20
    d154:	80e2b03a 	or	r17,r16,r3
    d158:	34aa983a 	sll	r21,r6,r18
    d15c:	000da880 	call	da88 <__umodsi3>
    d160:	e009883a 	mov	r4,fp
    d164:	a00b883a 	mov	r5,r20
    d168:	102d883a 	mov	r22,r2
    d16c:	000da800 	call	da80 <__udivsi3>
    d170:	1021883a 	mov	r16,r2
    d174:	bf3fffcc 	andi	fp,r23,65535
    d178:	b004943a 	slli	r2,r22,16
    d17c:	8808d43a 	srli	r4,r17,16
    d180:	872d383a 	mul	r22,r16,fp
    d184:	1104b03a 	or	r2,r2,r4
    d188:	1580042e 	bgeu	r2,r22,d19c <__udivdi3+0x388>
    d18c:	15c5883a 	add	r2,r2,r23
    d190:	80ffffc4 	addi	r3,r16,-1
    d194:	15c0812e 	bgeu	r2,r23,d39c <__udivdi3+0x588>
    d198:	1821883a 	mov	r16,r3
    d19c:	15adc83a 	sub	r22,r2,r22
    d1a0:	b009883a 	mov	r4,r22
    d1a4:	a00b883a 	mov	r5,r20
    d1a8:	000da880 	call	da88 <__umodsi3>
    d1ac:	a00b883a 	mov	r5,r20
    d1b0:	b009883a 	mov	r4,r22
    d1b4:	d8800015 	stw	r2,0(sp)
    d1b8:	000da800 	call	da80 <__udivsi3>
    d1bc:	d8c00017 	ldw	r3,0(sp)
    d1c0:	170b383a 	mul	r5,r2,fp
    d1c4:	8c7fffcc 	andi	r17,r17,65535
    d1c8:	1806943a 	slli	r3,r3,16
    d1cc:	1c46b03a 	or	r3,r3,r17
    d1d0:	1940042e 	bgeu	r3,r5,d1e4 <__udivdi3+0x3d0>
    d1d4:	1dc7883a 	add	r3,r3,r23
    d1d8:	113fffc4 	addi	r4,r2,-1
    d1dc:	1dc06b2e 	bgeu	r3,r23,d38c <__udivdi3+0x578>
    d1e0:	2005883a 	mov	r2,r4
    d1e4:	8020943a 	slli	r16,r16,16
    d1e8:	a9ffffcc 	andi	r7,r21,65535
    d1ec:	a82ad43a 	srli	r21,r21,16
    d1f0:	1404b03a 	or	r2,r2,r16
    d1f4:	113fffcc 	andi	r4,r2,65535
    d1f8:	100cd43a 	srli	r6,r2,16
    d1fc:	21d3383a 	mul	r9,r4,r7
    d200:	2549383a 	mul	r4,r4,r21
    d204:	31cf383a 	mul	r7,r6,r7
    d208:	4810d43a 	srli	r8,r9,16
    d20c:	1947c83a 	sub	r3,r3,r5
    d210:	3909883a 	add	r4,r7,r4
    d214:	2209883a 	add	r4,r4,r8
    d218:	354d383a 	mul	r6,r6,r21
    d21c:	21c0022e 	bgeu	r4,r7,d228 <__udivdi3+0x414>
    d220:	01400074 	movhi	r5,1
    d224:	314d883a 	add	r6,r6,r5
    d228:	202ad43a 	srli	r21,r4,16
    d22c:	354d883a 	add	r6,r6,r21
    d230:	19803f36 	bltu	r3,r6,d330 <__udivdi3+0x51c>
    d234:	19803926 	beq	r3,r6,d31c <__udivdi3+0x508>
    d238:	0007883a 	mov	r3,zero
    d23c:	003fa006 	br	d0c0 <__alt_mem_sram+0xf7e0d0c0>
    d240:	90e4983a 	sll	r18,r18,r3
    d244:	80aad83a 	srl	r21,r16,r2
    d248:	80e0983a 	sll	r16,r16,r3
    d24c:	9028d43a 	srli	r20,r18,16
    d250:	9884d83a 	srl	r2,r19,r2
    d254:	a809883a 	mov	r4,r21
    d258:	a00b883a 	mov	r5,r20
    d25c:	80acb03a 	or	r22,r16,r2
    d260:	98e2983a 	sll	r17,r19,r3
    d264:	000da880 	call	da88 <__umodsi3>
    d268:	a809883a 	mov	r4,r21
    d26c:	a00b883a 	mov	r5,r20
    d270:	1021883a 	mov	r16,r2
    d274:	000da800 	call	da80 <__udivsi3>
    d278:	957fffcc 	andi	r21,r18,65535
    d27c:	8020943a 	slli	r16,r16,16
    d280:	b00ad43a 	srli	r5,r22,16
    d284:	1567383a 	mul	r19,r2,r21
    d288:	102f883a 	mov	r23,r2
    d28c:	8148b03a 	or	r4,r16,r5
    d290:	24c0062e 	bgeu	r4,r19,d2ac <__udivdi3+0x498>
    d294:	2489883a 	add	r4,r4,r18
    d298:	10bfffc4 	addi	r2,r2,-1
    d29c:	24804536 	bltu	r4,r18,d3b4 <__udivdi3+0x5a0>
    d2a0:	24c0442e 	bgeu	r4,r19,d3b4 <__udivdi3+0x5a0>
    d2a4:	bdffff84 	addi	r23,r23,-2
    d2a8:	2489883a 	add	r4,r4,r18
    d2ac:	24e7c83a 	sub	r19,r4,r19
    d2b0:	9809883a 	mov	r4,r19
    d2b4:	a00b883a 	mov	r5,r20
    d2b8:	000da880 	call	da88 <__umodsi3>
    d2bc:	1021883a 	mov	r16,r2
    d2c0:	9809883a 	mov	r4,r19
    d2c4:	a00b883a 	mov	r5,r20
    d2c8:	000da800 	call	da80 <__udivsi3>
    d2cc:	8020943a 	slli	r16,r16,16
    d2d0:	1007883a 	mov	r3,r2
    d2d4:	1545383a 	mul	r2,r2,r21
    d2d8:	b13fffcc 	andi	r4,r22,65535
    d2dc:	8108b03a 	or	r4,r16,r4
    d2e0:	2080062e 	bgeu	r4,r2,d2fc <__udivdi3+0x4e8>
    d2e4:	2489883a 	add	r4,r4,r18
    d2e8:	197fffc4 	addi	r5,r3,-1
    d2ec:	24802f36 	bltu	r4,r18,d3ac <__udivdi3+0x598>
    d2f0:	20802e2e 	bgeu	r4,r2,d3ac <__udivdi3+0x598>
    d2f4:	18ffff84 	addi	r3,r3,-2
    d2f8:	2489883a 	add	r4,r4,r18
    d2fc:	b82e943a 	slli	r23,r23,16
    d300:	20a1c83a 	sub	r16,r4,r2
    d304:	1dc6b03a 	or	r3,r3,r23
    d308:	003f4006 	br	d00c <__alt_mem_sram+0xf7e0d00c>
    d30c:	2005883a 	mov	r2,r4
    d310:	003f6606 	br	d0ac <__alt_mem_sram+0xf7e0d0ac>
    d314:	1805883a 	mov	r2,r3
    d318:	003f0a06 	br	cf44 <__alt_mem_sram+0xf7e0cf44>
    d31c:	2006943a 	slli	r3,r4,16
    d320:	9c88983a 	sll	r4,r19,r18
    d324:	4a7fffcc 	andi	r9,r9,65535
    d328:	1a47883a 	add	r3,r3,r9
    d32c:	20ffc22e 	bgeu	r4,r3,d238 <__alt_mem_sram+0xf7e0d238>
    d330:	10bfffc4 	addi	r2,r2,-1
    d334:	003fc006 	br	d238 <__alt_mem_sram+0xf7e0d238>
    d338:	00c00404 	movi	r3,16
    d33c:	180b883a 	mov	r5,r3
    d340:	003f0c06 	br	cf74 <__alt_mem_sram+0xf7e0cf74>
    d344:	0007883a 	mov	r3,zero
    d348:	000b883a 	mov	r5,zero
    d34c:	003f0906 	br	cf74 <__alt_mem_sram+0xf7e0cf74>
    d350:	00800404 	movi	r2,16
    d354:	1007883a 	mov	r3,r2
    d358:	003ec606 	br	ce74 <__alt_mem_sram+0xf7e0ce74>
    d35c:	00800404 	movi	r2,16
    d360:	1007883a 	mov	r3,r2
    d364:	003f1c06 	br	cfd8 <__alt_mem_sram+0xf7e0cfd8>
    d368:	0005883a 	mov	r2,zero
    d36c:	0007883a 	mov	r3,zero
    d370:	003f1906 	br	cfd8 <__alt_mem_sram+0xf7e0cfd8>
    d374:	0005883a 	mov	r2,zero
    d378:	0007883a 	mov	r3,zero
    d37c:	003ebd06 	br	ce74 <__alt_mem_sram+0xf7e0ce74>
    d380:	0007883a 	mov	r3,zero
    d384:	00800044 	movi	r2,1
    d388:	003f4d06 	br	d0c0 <__alt_mem_sram+0xf7e0d0c0>
    d38c:	197f942e 	bgeu	r3,r5,d1e0 <__alt_mem_sram+0xf7e0d1e0>
    d390:	10bfff84 	addi	r2,r2,-2
    d394:	1dc7883a 	add	r3,r3,r23
    d398:	003f9206 	br	d1e4 <__alt_mem_sram+0xf7e0d1e4>
    d39c:	15bf7e2e 	bgeu	r2,r22,d198 <__alt_mem_sram+0xf7e0d198>
    d3a0:	843fff84 	addi	r16,r16,-2
    d3a4:	15c5883a 	add	r2,r2,r23
    d3a8:	003f7c06 	br	d19c <__alt_mem_sram+0xf7e0d19c>
    d3ac:	2807883a 	mov	r3,r5
    d3b0:	003fd206 	br	d2fc <__alt_mem_sram+0xf7e0d2fc>
    d3b4:	102f883a 	mov	r23,r2
    d3b8:	003fbc06 	br	d2ac <__alt_mem_sram+0xf7e0d2ac>
    d3bc:	843fff84 	addi	r16,r16,-2
    d3c0:	2489883a 	add	r4,r4,r18
    d3c4:	003f2506 	br	d05c <__alt_mem_sram+0xf7e0d05c>
    d3c8:	843fff84 	addi	r16,r16,-2
    d3cc:	1485883a 	add	r2,r2,r18
    d3d0:	003eca06 	br	cefc <__alt_mem_sram+0xf7e0cefc>

0000d3d4 <__umoddi3>:
    d3d4:	defff404 	addi	sp,sp,-48
    d3d8:	ddc00915 	stw	r23,36(sp)
    d3dc:	dc400315 	stw	r17,12(sp)
    d3e0:	dc000215 	stw	r16,8(sp)
    d3e4:	dfc00b15 	stw	ra,44(sp)
    d3e8:	df000a15 	stw	fp,40(sp)
    d3ec:	dd800815 	stw	r22,32(sp)
    d3f0:	dd400715 	stw	r21,28(sp)
    d3f4:	dd000615 	stw	r20,24(sp)
    d3f8:	dcc00515 	stw	r19,20(sp)
    d3fc:	dc800415 	stw	r18,16(sp)
    d400:	2021883a 	mov	r16,r4
    d404:	2823883a 	mov	r17,r5
    d408:	282f883a 	mov	r23,r5
    d40c:	3800381e 	bne	r7,zero,d4f0 <__umoddi3+0x11c>
    d410:	3027883a 	mov	r19,r6
    d414:	2029883a 	mov	r20,r4
    d418:	29804e2e 	bgeu	r5,r6,d554 <__umoddi3+0x180>
    d41c:	00bfffd4 	movui	r2,65535
    d420:	11809c36 	bltu	r2,r6,d694 <__umoddi3+0x2c0>
    d424:	00803fc4 	movi	r2,255
    d428:	11813b2e 	bgeu	r2,r6,d918 <__umoddi3+0x544>
    d42c:	01400204 	movi	r5,8
    d430:	2805883a 	mov	r2,r5
    d434:	314ad83a 	srl	r5,r6,r5
    d438:	00c00074 	movhi	r3,1
    d43c:	18ccd404 	addi	r3,r3,13136
    d440:	194b883a 	add	r5,r3,r5
    d444:	29000003 	ldbu	r4,0(r5)
    d448:	2089883a 	add	r4,r4,r2
    d44c:	00800804 	movi	r2,32
    d450:	1105c83a 	sub	r2,r2,r4
    d454:	1000ec26 	beq	r2,zero,d808 <__umoddi3+0x434>
    d458:	88a2983a 	sll	r17,r17,r2
    d45c:	8108d83a 	srl	r4,r16,r4
    d460:	30a6983a 	sll	r19,r6,r2
    d464:	80a8983a 	sll	r20,r16,r2
    d468:	1025883a 	mov	r18,r2
    d46c:	892eb03a 	or	r23,r17,r4
    d470:	982cd43a 	srli	r22,r19,16
    d474:	b809883a 	mov	r4,r23
    d478:	9d7fffcc 	andi	r21,r19,65535
    d47c:	b00b883a 	mov	r5,r22
    d480:	000da880 	call	da88 <__umodsi3>
    d484:	b809883a 	mov	r4,r23
    d488:	b00b883a 	mov	r5,r22
    d48c:	1021883a 	mov	r16,r2
    d490:	000da800 	call	da80 <__udivsi3>
    d494:	8020943a 	slli	r16,r16,16
    d498:	a00cd43a 	srli	r6,r20,16
    d49c:	1545383a 	mul	r2,r2,r21
    d4a0:	8188b03a 	or	r4,r16,r6
    d4a4:	2080042e 	bgeu	r4,r2,d4b8 <__umoddi3+0xe4>
    d4a8:	24c9883a 	add	r4,r4,r19
    d4ac:	24c00236 	bltu	r4,r19,d4b8 <__umoddi3+0xe4>
    d4b0:	2080012e 	bgeu	r4,r2,d4b8 <__umoddi3+0xe4>
    d4b4:	24c9883a 	add	r4,r4,r19
    d4b8:	20a3c83a 	sub	r17,r4,r2
    d4bc:	8809883a 	mov	r4,r17
    d4c0:	b00b883a 	mov	r5,r22
    d4c4:	000da880 	call	da88 <__umodsi3>
    d4c8:	8809883a 	mov	r4,r17
    d4cc:	b00b883a 	mov	r5,r22
    d4d0:	1021883a 	mov	r16,r2
    d4d4:	000da800 	call	da80 <__udivsi3>
    d4d8:	8006943a 	slli	r3,r16,16
    d4dc:	1545383a 	mul	r2,r2,r21
    d4e0:	a13fffcc 	andi	r4,r20,65535
    d4e4:	1906b03a 	or	r3,r3,r4
    d4e8:	1880532e 	bgeu	r3,r2,d638 <__umoddi3+0x264>
    d4ec:	00004e06 	br	d628 <__umoddi3+0x254>
    d4f0:	29c05536 	bltu	r5,r7,d648 <__umoddi3+0x274>
    d4f4:	00bfffd4 	movui	r2,65535
    d4f8:	11c0612e 	bgeu	r2,r7,d680 <__umoddi3+0x2ac>
    d4fc:	00804034 	movhi	r2,256
    d500:	10bfffc4 	addi	r2,r2,-1
    d504:	11c0f82e 	bgeu	r2,r7,d8e8 <__umoddi3+0x514>
    d508:	01400604 	movi	r5,24
    d50c:	282b883a 	mov	r21,r5
    d510:	394ad83a 	srl	r5,r7,r5
    d514:	00c00074 	movhi	r3,1
    d518:	18ccd404 	addi	r3,r3,13136
    d51c:	194b883a 	add	r5,r3,r5
    d520:	28800003 	ldbu	r2,0(r5)
    d524:	00c00804 	movi	r3,32
    d528:	156b883a 	add	r21,r2,r21
    d52c:	1d69c83a 	sub	r20,r3,r21
    d530:	a000631e 	bne	r20,zero,d6c0 <__umoddi3+0x2ec>
    d534:	3c400136 	bltu	r7,r17,d53c <__umoddi3+0x168>
    d538:	81810436 	bltu	r16,r6,d94c <__umoddi3+0x578>
    d53c:	8185c83a 	sub	r2,r16,r6
    d540:	89e3c83a 	sub	r17,r17,r7
    d544:	8087803a 	cmpltu	r3,r16,r2
    d548:	88efc83a 	sub	r23,r17,r3
    d54c:	b807883a 	mov	r3,r23
    d550:	00003f06 	br	d650 <__umoddi3+0x27c>
    d554:	3000041e 	bne	r6,zero,d568 <__umoddi3+0x194>
    d558:	01000044 	movi	r4,1
    d55c:	000b883a 	mov	r5,zero
    d560:	000da800 	call	da80 <__udivsi3>
    d564:	1027883a 	mov	r19,r2
    d568:	00bfffd4 	movui	r2,65535
    d56c:	14c04f2e 	bgeu	r2,r19,d6ac <__umoddi3+0x2d8>
    d570:	00804034 	movhi	r2,256
    d574:	10bfffc4 	addi	r2,r2,-1
    d578:	14c0e42e 	bgeu	r2,r19,d90c <__umoddi3+0x538>
    d57c:	00800604 	movi	r2,24
    d580:	1007883a 	mov	r3,r2
    d584:	9884d83a 	srl	r2,r19,r2
    d588:	01000074 	movhi	r4,1
    d58c:	210cd404 	addi	r4,r4,13136
    d590:	2085883a 	add	r2,r4,r2
    d594:	11000003 	ldbu	r4,0(r2)
    d598:	00800804 	movi	r2,32
    d59c:	20c7883a 	add	r3,r4,r3
    d5a0:	10c5c83a 	sub	r2,r2,r3
    d5a4:	10009a1e 	bne	r2,zero,d810 <__umoddi3+0x43c>
    d5a8:	982cd43a 	srli	r22,r19,16
    d5ac:	8ce3c83a 	sub	r17,r17,r19
    d5b0:	9c3fffcc 	andi	r16,r19,65535
    d5b4:	0025883a 	mov	r18,zero
    d5b8:	8809883a 	mov	r4,r17
    d5bc:	b00b883a 	mov	r5,r22
    d5c0:	000da880 	call	da88 <__umodsi3>
    d5c4:	8809883a 	mov	r4,r17
    d5c8:	b00b883a 	mov	r5,r22
    d5cc:	102b883a 	mov	r21,r2
    d5d0:	000da800 	call	da80 <__udivsi3>
    d5d4:	a806943a 	slli	r3,r21,16
    d5d8:	a008d43a 	srli	r4,r20,16
    d5dc:	1405383a 	mul	r2,r2,r16
    d5e0:	190cb03a 	or	r6,r3,r4
    d5e4:	3080032e 	bgeu	r6,r2,d5f4 <__umoddi3+0x220>
    d5e8:	34cd883a 	add	r6,r6,r19
    d5ec:	34c00136 	bltu	r6,r19,d5f4 <__umoddi3+0x220>
    d5f0:	3080d436 	bltu	r6,r2,d944 <__umoddi3+0x570>
    d5f4:	30abc83a 	sub	r21,r6,r2
    d5f8:	a809883a 	mov	r4,r21
    d5fc:	b00b883a 	mov	r5,r22
    d600:	000da880 	call	da88 <__umodsi3>
    d604:	1023883a 	mov	r17,r2
    d608:	a809883a 	mov	r4,r21
    d60c:	b00b883a 	mov	r5,r22
    d610:	000da800 	call	da80 <__udivsi3>
    d614:	8822943a 	slli	r17,r17,16
    d618:	1405383a 	mul	r2,r2,r16
    d61c:	a13fffcc 	andi	r4,r20,65535
    d620:	8906b03a 	or	r3,r17,r4
    d624:	1880042e 	bgeu	r3,r2,d638 <__umoddi3+0x264>
    d628:	1cc7883a 	add	r3,r3,r19
    d62c:	1cc00236 	bltu	r3,r19,d638 <__umoddi3+0x264>
    d630:	1880012e 	bgeu	r3,r2,d638 <__umoddi3+0x264>
    d634:	1cc7883a 	add	r3,r3,r19
    d638:	1887c83a 	sub	r3,r3,r2
    d63c:	1c84d83a 	srl	r2,r3,r18
    d640:	0007883a 	mov	r3,zero
    d644:	00000206 	br	d650 <__umoddi3+0x27c>
    d648:	2005883a 	mov	r2,r4
    d64c:	2807883a 	mov	r3,r5
    d650:	dfc00b17 	ldw	ra,44(sp)
    d654:	df000a17 	ldw	fp,40(sp)
    d658:	ddc00917 	ldw	r23,36(sp)
    d65c:	dd800817 	ldw	r22,32(sp)
    d660:	dd400717 	ldw	r21,28(sp)
    d664:	dd000617 	ldw	r20,24(sp)
    d668:	dcc00517 	ldw	r19,20(sp)
    d66c:	dc800417 	ldw	r18,16(sp)
    d670:	dc400317 	ldw	r17,12(sp)
    d674:	dc000217 	ldw	r16,8(sp)
    d678:	dec00c04 	addi	sp,sp,48
    d67c:	f800283a 	ret
    d680:	00803fc4 	movi	r2,255
    d684:	11c0952e 	bgeu	r2,r7,d8dc <__umoddi3+0x508>
    d688:	01400204 	movi	r5,8
    d68c:	282b883a 	mov	r21,r5
    d690:	003f9f06 	br	d510 <__alt_mem_sram+0xf7e0d510>
    d694:	00804034 	movhi	r2,256
    d698:	10bfffc4 	addi	r2,r2,-1
    d69c:	1180952e 	bgeu	r2,r6,d8f4 <__umoddi3+0x520>
    d6a0:	01400604 	movi	r5,24
    d6a4:	2805883a 	mov	r2,r5
    d6a8:	003f6206 	br	d434 <__alt_mem_sram+0xf7e0d434>
    d6ac:	00803fc4 	movi	r2,255
    d6b0:	14c0932e 	bgeu	r2,r19,d900 <__umoddi3+0x52c>
    d6b4:	00800204 	movi	r2,8
    d6b8:	1007883a 	mov	r3,r2
    d6bc:	003fb106 	br	d584 <__alt_mem_sram+0xf7e0d584>
    d6c0:	3548d83a 	srl	r4,r6,r21
    d6c4:	3d0e983a 	sll	r7,r7,r20
    d6c8:	8d10983a 	sll	r8,r17,r20
    d6cc:	8d6cd83a 	srl	r22,r17,r21
    d6d0:	3922b03a 	or	r17,r7,r4
    d6d4:	882ed43a 	srli	r23,r17,16
    d6d8:	8564d83a 	srl	r18,r16,r21
    d6dc:	b009883a 	mov	r4,r22
    d6e0:	b80b883a 	mov	r5,r23
    d6e4:	44a4b03a 	or	r18,r8,r18
    d6e8:	3526983a 	sll	r19,r6,r20
    d6ec:	000da880 	call	da88 <__umodsi3>
    d6f0:	b009883a 	mov	r4,r22
    d6f4:	b80b883a 	mov	r5,r23
    d6f8:	1039883a 	mov	fp,r2
    d6fc:	000da800 	call	da80 <__udivsi3>
    d700:	102d883a 	mov	r22,r2
    d704:	8a3fffcc 	andi	r8,r17,65535
    d708:	e004943a 	slli	r2,fp,16
    d70c:	900cd43a 	srli	r6,r18,16
    d710:	b239383a 	mul	fp,r22,r8
    d714:	8520983a 	sll	r16,r16,r20
    d718:	118ab03a 	or	r5,r2,r6
    d71c:	2f00042e 	bgeu	r5,fp,d730 <__umoddi3+0x35c>
    d720:	2c4b883a 	add	r5,r5,r17
    d724:	b0bfffc4 	addi	r2,r22,-1
    d728:	2c40822e 	bgeu	r5,r17,d934 <__umoddi3+0x560>
    d72c:	102d883a 	mov	r22,r2
    d730:	2f39c83a 	sub	fp,r5,fp
    d734:	e009883a 	mov	r4,fp
    d738:	b80b883a 	mov	r5,r23
    d73c:	da000115 	stw	r8,4(sp)
    d740:	000da880 	call	da88 <__umodsi3>
    d744:	e009883a 	mov	r4,fp
    d748:	b80b883a 	mov	r5,r23
    d74c:	d8800015 	stw	r2,0(sp)
    d750:	000da800 	call	da80 <__udivsi3>
    d754:	d9800017 	ldw	r6,0(sp)
    d758:	da000117 	ldw	r8,4(sp)
    d75c:	94bfffcc 	andi	r18,r18,65535
    d760:	300c943a 	slli	r6,r6,16
    d764:	1209383a 	mul	r4,r2,r8
    d768:	3490b03a 	or	r8,r6,r18
    d76c:	4100042e 	bgeu	r8,r4,d780 <__umoddi3+0x3ac>
    d770:	4451883a 	add	r8,r8,r17
    d774:	10ffffc4 	addi	r3,r2,-1
    d778:	44406a2e 	bgeu	r8,r17,d924 <__umoddi3+0x550>
    d77c:	1805883a 	mov	r2,r3
    d780:	b012943a 	slli	r9,r22,16
    d784:	9abfffcc 	andi	r10,r19,65535
    d788:	980ed43a 	srli	r7,r19,16
    d78c:	124ab03a 	or	r5,r2,r9
    d790:	2a7fffcc 	andi	r9,r5,65535
    d794:	280ad43a 	srli	r5,r5,16
    d798:	4a8d383a 	mul	r6,r9,r10
    d79c:	49d3383a 	mul	r9,r9,r7
    d7a0:	2a95383a 	mul	r10,r5,r10
    d7a4:	3004d43a 	srli	r2,r6,16
    d7a8:	4111c83a 	sub	r8,r8,r4
    d7ac:	5253883a 	add	r9,r10,r9
    d7b0:	4893883a 	add	r9,r9,r2
    d7b4:	29cb383a 	mul	r5,r5,r7
    d7b8:	4a80022e 	bgeu	r9,r10,d7c4 <__umoddi3+0x3f0>
    d7bc:	00800074 	movhi	r2,1
    d7c0:	288b883a 	add	r5,r5,r2
    d7c4:	4808d43a 	srli	r4,r9,16
    d7c8:	4812943a 	slli	r9,r9,16
    d7cc:	31bfffcc 	andi	r6,r6,65535
    d7d0:	290b883a 	add	r5,r5,r4
    d7d4:	498d883a 	add	r6,r9,r6
    d7d8:	41403a36 	bltu	r8,r5,d8c4 <__umoddi3+0x4f0>
    d7dc:	41405d26 	beq	r8,r5,d954 <__umoddi3+0x580>
    d7e0:	4149c83a 	sub	r4,r8,r5
    d7e4:	300f883a 	mov	r7,r6
    d7e8:	81cfc83a 	sub	r7,r16,r7
    d7ec:	81c7803a 	cmpltu	r3,r16,r7
    d7f0:	20c7c83a 	sub	r3,r4,r3
    d7f4:	1d44983a 	sll	r2,r3,r21
    d7f8:	3d0ed83a 	srl	r7,r7,r20
    d7fc:	1d06d83a 	srl	r3,r3,r20
    d800:	11c4b03a 	or	r2,r2,r7
    d804:	003f9206 	br	d650 <__alt_mem_sram+0xf7e0d650>
    d808:	0025883a 	mov	r18,zero
    d80c:	003f1806 	br	d470 <__alt_mem_sram+0xf7e0d470>
    d810:	98a6983a 	sll	r19,r19,r2
    d814:	88e8d83a 	srl	r20,r17,r3
    d818:	80c6d83a 	srl	r3,r16,r3
    d81c:	982cd43a 	srli	r22,r19,16
    d820:	88a2983a 	sll	r17,r17,r2
    d824:	a009883a 	mov	r4,r20
    d828:	b00b883a 	mov	r5,r22
    d82c:	88eab03a 	or	r21,r17,r3
    d830:	1025883a 	mov	r18,r2
    d834:	000da880 	call	da88 <__umodsi3>
    d838:	a009883a 	mov	r4,r20
    d83c:	b00b883a 	mov	r5,r22
    d840:	1023883a 	mov	r17,r2
    d844:	000da800 	call	da80 <__udivsi3>
    d848:	9f3fffcc 	andi	fp,r19,65535
    d84c:	8822943a 	slli	r17,r17,16
    d850:	a80ad43a 	srli	r5,r21,16
    d854:	1705383a 	mul	r2,r2,fp
    d858:	84a8983a 	sll	r20,r16,r18
    d85c:	8948b03a 	or	r4,r17,r5
    d860:	2080042e 	bgeu	r4,r2,d874 <__umoddi3+0x4a0>
    d864:	24c9883a 	add	r4,r4,r19
    d868:	24c00236 	bltu	r4,r19,d874 <__umoddi3+0x4a0>
    d86c:	2080012e 	bgeu	r4,r2,d874 <__umoddi3+0x4a0>
    d870:	24c9883a 	add	r4,r4,r19
    d874:	20afc83a 	sub	r23,r4,r2
    d878:	b809883a 	mov	r4,r23
    d87c:	b00b883a 	mov	r5,r22
    d880:	000da880 	call	da88 <__umodsi3>
    d884:	1023883a 	mov	r17,r2
    d888:	b809883a 	mov	r4,r23
    d88c:	b00b883a 	mov	r5,r22
    d890:	000da800 	call	da80 <__udivsi3>
    d894:	8822943a 	slli	r17,r17,16
    d898:	1705383a 	mul	r2,r2,fp
    d89c:	a93fffcc 	andi	r4,r21,65535
    d8a0:	8908b03a 	or	r4,r17,r4
    d8a4:	2080042e 	bgeu	r4,r2,d8b8 <__umoddi3+0x4e4>
    d8a8:	24c9883a 	add	r4,r4,r19
    d8ac:	24c00236 	bltu	r4,r19,d8b8 <__umoddi3+0x4e4>
    d8b0:	2080012e 	bgeu	r4,r2,d8b8 <__umoddi3+0x4e4>
    d8b4:	24c9883a 	add	r4,r4,r19
    d8b8:	20a3c83a 	sub	r17,r4,r2
    d8bc:	e021883a 	mov	r16,fp
    d8c0:	003f3d06 	br	d5b8 <__alt_mem_sram+0xf7e0d5b8>
    d8c4:	34cfc83a 	sub	r7,r6,r19
    d8c8:	2c4bc83a 	sub	r5,r5,r17
    d8cc:	31cd803a 	cmpltu	r6,r6,r7
    d8d0:	298dc83a 	sub	r6,r5,r6
    d8d4:	4189c83a 	sub	r4,r8,r6
    d8d8:	003fc306 	br	d7e8 <__alt_mem_sram+0xf7e0d7e8>
    d8dc:	000b883a 	mov	r5,zero
    d8e0:	002b883a 	mov	r21,zero
    d8e4:	003f0a06 	br	d510 <__alt_mem_sram+0xf7e0d510>
    d8e8:	01400404 	movi	r5,16
    d8ec:	282b883a 	mov	r21,r5
    d8f0:	003f0706 	br	d510 <__alt_mem_sram+0xf7e0d510>
    d8f4:	01400404 	movi	r5,16
    d8f8:	2805883a 	mov	r2,r5
    d8fc:	003ecd06 	br	d434 <__alt_mem_sram+0xf7e0d434>
    d900:	0005883a 	mov	r2,zero
    d904:	0007883a 	mov	r3,zero
    d908:	003f1e06 	br	d584 <__alt_mem_sram+0xf7e0d584>
    d90c:	00800404 	movi	r2,16
    d910:	1007883a 	mov	r3,r2
    d914:	003f1b06 	br	d584 <__alt_mem_sram+0xf7e0d584>
    d918:	000b883a 	mov	r5,zero
    d91c:	0005883a 	mov	r2,zero
    d920:	003ec406 	br	d434 <__alt_mem_sram+0xf7e0d434>
    d924:	413f952e 	bgeu	r8,r4,d77c <__alt_mem_sram+0xf7e0d77c>
    d928:	10bfff84 	addi	r2,r2,-2
    d92c:	4451883a 	add	r8,r8,r17
    d930:	003f9306 	br	d780 <__alt_mem_sram+0xf7e0d780>
    d934:	2f3f7d2e 	bgeu	r5,fp,d72c <__alt_mem_sram+0xf7e0d72c>
    d938:	b5bfff84 	addi	r22,r22,-2
    d93c:	2c4b883a 	add	r5,r5,r17
    d940:	003f7b06 	br	d730 <__alt_mem_sram+0xf7e0d730>
    d944:	34cd883a 	add	r6,r6,r19
    d948:	003f2a06 	br	d5f4 <__alt_mem_sram+0xf7e0d5f4>
    d94c:	8005883a 	mov	r2,r16
    d950:	003efe06 	br	d54c <__alt_mem_sram+0xf7e0d54c>
    d954:	81bfdb36 	bltu	r16,r6,d8c4 <__alt_mem_sram+0xf7e0d8c4>
    d958:	300f883a 	mov	r7,r6
    d95c:	0009883a 	mov	r4,zero
    d960:	003fa106 	br	d7e8 <__alt_mem_sram+0xf7e0d7e8>

0000d964 <udivmodsi4>:
    d964:	2900182e 	bgeu	r5,r4,d9c8 <udivmodsi4+0x64>
    d968:	28001716 	blt	r5,zero,d9c8 <udivmodsi4+0x64>
    d96c:	00800804 	movi	r2,32
    d970:	00c00044 	movi	r3,1
    d974:	00000206 	br	d980 <udivmodsi4+0x1c>
    d978:	10001126 	beq	r2,zero,d9c0 <udivmodsi4+0x5c>
    d97c:	28000516 	blt	r5,zero,d994 <udivmodsi4+0x30>
    d980:	294b883a 	add	r5,r5,r5
    d984:	10bfffc4 	addi	r2,r2,-1
    d988:	18c7883a 	add	r3,r3,r3
    d98c:	293ffa36 	bltu	r5,r4,d978 <__alt_mem_sram+0xf7e0d978>
    d990:	18000b26 	beq	r3,zero,d9c0 <udivmodsi4+0x5c>
    d994:	0005883a 	mov	r2,zero
    d998:	21400236 	bltu	r4,r5,d9a4 <udivmodsi4+0x40>
    d99c:	2149c83a 	sub	r4,r4,r5
    d9a0:	10c4b03a 	or	r2,r2,r3
    d9a4:	1806d07a 	srli	r3,r3,1
    d9a8:	280ad07a 	srli	r5,r5,1
    d9ac:	183ffa1e 	bne	r3,zero,d998 <__alt_mem_sram+0xf7e0d998>
    d9b0:	3000011e 	bne	r6,zero,d9b8 <udivmodsi4+0x54>
    d9b4:	f800283a 	ret
    d9b8:	2005883a 	mov	r2,r4
    d9bc:	f800283a 	ret
    d9c0:	0005883a 	mov	r2,zero
    d9c4:	003ffa06 	br	d9b0 <__alt_mem_sram+0xf7e0d9b0>
    d9c8:	00c00044 	movi	r3,1
    d9cc:	003ff106 	br	d994 <__alt_mem_sram+0xf7e0d994>

0000d9d0 <__divsi3>:
    d9d0:	defffe04 	addi	sp,sp,-8
    d9d4:	dfc00115 	stw	ra,4(sp)
    d9d8:	dc000015 	stw	r16,0(sp)
    d9dc:	20000b16 	blt	r4,zero,da0c <__divsi3+0x3c>
    d9e0:	0021883a 	mov	r16,zero
    d9e4:	28000c16 	blt	r5,zero,da18 <__divsi3+0x48>
    d9e8:	000d883a 	mov	r6,zero
    d9ec:	000d9640 	call	d964 <udivmodsi4>
    d9f0:	0407c83a 	sub	r3,zero,r16
    d9f4:	1884f03a 	xor	r2,r3,r2
    d9f8:	1405883a 	add	r2,r2,r16
    d9fc:	dfc00117 	ldw	ra,4(sp)
    da00:	dc000017 	ldw	r16,0(sp)
    da04:	dec00204 	addi	sp,sp,8
    da08:	f800283a 	ret
    da0c:	0109c83a 	sub	r4,zero,r4
    da10:	04000044 	movi	r16,1
    da14:	283ff40e 	bge	r5,zero,d9e8 <__alt_mem_sram+0xf7e0d9e8>
    da18:	014bc83a 	sub	r5,zero,r5
    da1c:	8400005c 	xori	r16,r16,1
    da20:	003ff106 	br	d9e8 <__alt_mem_sram+0xf7e0d9e8>

0000da24 <__modsi3>:
    da24:	defffd04 	addi	sp,sp,-12
    da28:	dfc00215 	stw	ra,8(sp)
    da2c:	dc400115 	stw	r17,4(sp)
    da30:	dc000015 	stw	r16,0(sp)
    da34:	20000c16 	blt	r4,zero,da68 <__modsi3+0x44>
    da38:	0023883a 	mov	r17,zero
    da3c:	0021883a 	mov	r16,zero
    da40:	28000d16 	blt	r5,zero,da78 <__modsi3+0x54>
    da44:	01800044 	movi	r6,1
    da48:	000d9640 	call	d964 <udivmodsi4>
    da4c:	1404f03a 	xor	r2,r2,r16
    da50:	8885883a 	add	r2,r17,r2
    da54:	dfc00217 	ldw	ra,8(sp)
    da58:	dc400117 	ldw	r17,4(sp)
    da5c:	dc000017 	ldw	r16,0(sp)
    da60:	dec00304 	addi	sp,sp,12
    da64:	f800283a 	ret
    da68:	0109c83a 	sub	r4,zero,r4
    da6c:	04400044 	movi	r17,1
    da70:	043fffc4 	movi	r16,-1
    da74:	283ff30e 	bge	r5,zero,da44 <__alt_mem_sram+0xf7e0da44>
    da78:	014bc83a 	sub	r5,zero,r5
    da7c:	003ff106 	br	da44 <__alt_mem_sram+0xf7e0da44>

0000da80 <__udivsi3>:
    da80:	000d883a 	mov	r6,zero
    da84:	000d9641 	jmpi	d964 <udivmodsi4>

0000da88 <__umodsi3>:
    da88:	01800044 	movi	r6,1
    da8c:	000d9641 	jmpi	d964 <udivmodsi4>

0000da90 <__adddf3>:
    da90:	02000434 	movhi	r8,16
    da94:	423fffc4 	addi	r8,r8,-1
    da98:	defffb04 	addi	sp,sp,-20
    da9c:	2a12703a 	and	r9,r5,r8
    daa0:	2806d7fa 	srli	r3,r5,31
    daa4:	3a10703a 	and	r8,r7,r8
    daa8:	3804d53a 	srli	r2,r7,20
    daac:	3014d77a 	srli	r10,r6,29
    dab0:	dc000015 	stw	r16,0(sp)
    dab4:	481290fa 	slli	r9,r9,3
    dab8:	2820d53a 	srli	r16,r5,20
    dabc:	401090fa 	slli	r8,r8,3
    dac0:	200ad77a 	srli	r5,r4,29
    dac4:	380ed7fa 	srli	r7,r7,31
    dac8:	dc800215 	stw	r18,8(sp)
    dacc:	dc400115 	stw	r17,4(sp)
    dad0:	dfc00415 	stw	ra,16(sp)
    dad4:	dcc00315 	stw	r19,12(sp)
    dad8:	1c803fcc 	andi	r18,r3,255
    dadc:	8401ffcc 	andi	r16,r16,2047
    dae0:	494ab03a 	or	r5,r9,r5
    dae4:	202290fa 	slli	r17,r4,3
    dae8:	1081ffcc 	andi	r2,r2,2047
    daec:	4290b03a 	or	r8,r8,r10
    daf0:	300c90fa 	slli	r6,r6,3
    daf4:	91c07026 	beq	r18,r7,dcb8 <__adddf3+0x228>
    daf8:	8087c83a 	sub	r3,r16,r2
    dafc:	00c0b30e 	bge	zero,r3,ddcc <__adddf3+0x33c>
    db00:	10002a1e 	bne	r2,zero,dbac <__adddf3+0x11c>
    db04:	4184b03a 	or	r2,r8,r6
    db08:	1000991e 	bne	r2,zero,dd70 <__adddf3+0x2e0>
    db0c:	888001cc 	andi	r2,r17,7
    db10:	10005b26 	beq	r2,zero,dc80 <__adddf3+0x1f0>
    db14:	88c003cc 	andi	r3,r17,15
    db18:	00800104 	movi	r2,4
    db1c:	18805826 	beq	r3,r2,dc80 <__adddf3+0x1f0>
    db20:	89800104 	addi	r6,r17,4
    db24:	3463803a 	cmpltu	r17,r6,r17
    db28:	2c4b883a 	add	r5,r5,r17
    db2c:	2880202c 	andhi	r2,r5,128
    db30:	9007883a 	mov	r3,r18
    db34:	3023883a 	mov	r17,r6
    db38:	10005426 	beq	r2,zero,dc8c <__adddf3+0x1fc>
    db3c:	84000044 	addi	r16,r16,1
    db40:	0081ffc4 	movi	r2,2047
    db44:	8080c126 	beq	r16,r2,de4c <__adddf3+0x3bc>
    db48:	013fe034 	movhi	r4,65408
    db4c:	213fffc4 	addi	r4,r4,-1
    db50:	290a703a 	and	r5,r5,r4
    db54:	2804977a 	slli	r2,r5,29
    db58:	280a927a 	slli	r5,r5,9
    db5c:	8822d0fa 	srli	r17,r17,3
    db60:	8401ffcc 	andi	r16,r16,2047
    db64:	2808d33a 	srli	r4,r5,12
    db68:	1444b03a 	or	r2,r2,r17
    db6c:	8401ffcc 	andi	r16,r16,2047
    db70:	800a953a 	slli	r5,r16,20
    db74:	18c03fcc 	andi	r3,r3,255
    db78:	04000434 	movhi	r16,16
    db7c:	180697fa 	slli	r3,r3,31
    db80:	843fffc4 	addi	r16,r16,-1
    db84:	2420703a 	and	r16,r4,r16
    db88:	8160b03a 	or	r16,r16,r5
    db8c:	80c6b03a 	or	r3,r16,r3
    db90:	dfc00417 	ldw	ra,16(sp)
    db94:	dcc00317 	ldw	r19,12(sp)
    db98:	dc800217 	ldw	r18,8(sp)
    db9c:	dc400117 	ldw	r17,4(sp)
    dba0:	dc000017 	ldw	r16,0(sp)
    dba4:	dec00504 	addi	sp,sp,20
    dba8:	f800283a 	ret
    dbac:	0081ffc4 	movi	r2,2047
    dbb0:	80bfd626 	beq	r16,r2,db0c <__alt_mem_sram+0xf7e0db0c>
    dbb4:	42002034 	orhi	r8,r8,128
    dbb8:	00800e04 	movi	r2,56
    dbbc:	10c0a616 	blt	r2,r3,de58 <__adddf3+0x3c8>
    dbc0:	008007c4 	movi	r2,31
    dbc4:	10c0c916 	blt	r2,r3,deec <__adddf3+0x45c>
    dbc8:	00800804 	movi	r2,32
    dbcc:	10c5c83a 	sub	r2,r2,r3
    dbd0:	408e983a 	sll	r7,r8,r2
    dbd4:	30c8d83a 	srl	r4,r6,r3
    dbd8:	3084983a 	sll	r2,r6,r2
    dbdc:	40c6d83a 	srl	r3,r8,r3
    dbe0:	390cb03a 	or	r6,r7,r4
    dbe4:	1004c03a 	cmpne	r2,r2,zero
    dbe8:	308cb03a 	or	r6,r6,r2
    dbec:	898dc83a 	sub	r6,r17,r6
    dbf0:	89a3803a 	cmpltu	r17,r17,r6
    dbf4:	28cbc83a 	sub	r5,r5,r3
    dbf8:	2c4bc83a 	sub	r5,r5,r17
    dbfc:	3023883a 	mov	r17,r6
    dc00:	2880202c 	andhi	r2,r5,128
    dc04:	10006d26 	beq	r2,zero,ddbc <__adddf3+0x32c>
    dc08:	04c02034 	movhi	r19,128
    dc0c:	9cffffc4 	addi	r19,r19,-1
    dc10:	2ce6703a 	and	r19,r5,r19
    dc14:	98007e26 	beq	r19,zero,de10 <__adddf3+0x380>
    dc18:	9809883a 	mov	r4,r19
    dc1c:	001002c0 	call	1002c <__clzsi2>
    dc20:	10fffe04 	addi	r3,r2,-8
    dc24:	010007c4 	movi	r4,31
    dc28:	20c07f16 	blt	r4,r3,de28 <__adddf3+0x398>
    dc2c:	01400a04 	movi	r5,40
    dc30:	2885c83a 	sub	r2,r5,r2
    dc34:	888ad83a 	srl	r5,r17,r2
    dc38:	98e6983a 	sll	r19,r19,r3
    dc3c:	88e2983a 	sll	r17,r17,r3
    dc40:	2ce6b03a 	or	r19,r5,r19
    dc44:	1c007c16 	blt	r3,r16,de38 <__adddf3+0x3a8>
    dc48:	1c21c83a 	sub	r16,r3,r16
    dc4c:	81400044 	addi	r5,r16,1
    dc50:	00c007c4 	movi	r3,31
    dc54:	19409816 	blt	r3,r5,deb8 <__adddf3+0x428>
    dc58:	1c21c83a 	sub	r16,r3,r16
    dc5c:	8c08983a 	sll	r4,r17,r16
    dc60:	8946d83a 	srl	r3,r17,r5
    dc64:	9c20983a 	sll	r16,r19,r16
    dc68:	2008c03a 	cmpne	r4,r4,zero
    dc6c:	994ad83a 	srl	r5,r19,r5
    dc70:	1c06b03a 	or	r3,r3,r16
    dc74:	1922b03a 	or	r17,r3,r4
    dc78:	0021883a 	mov	r16,zero
    dc7c:	003fa306 	br	db0c <__alt_mem_sram+0xf7e0db0c>
    dc80:	2880202c 	andhi	r2,r5,128
    dc84:	9007883a 	mov	r3,r18
    dc88:	103fac1e 	bne	r2,zero,db3c <__alt_mem_sram+0xf7e0db3c>
    dc8c:	2804977a 	slli	r2,r5,29
    dc90:	8822d0fa 	srli	r17,r17,3
    dc94:	0101ffc4 	movi	r4,2047
    dc98:	280ad0fa 	srli	r5,r5,3
    dc9c:	1444b03a 	or	r2,r2,r17
    dca0:	81002c26 	beq	r16,r4,dd54 <__adddf3+0x2c4>
    dca4:	8120703a 	and	r16,r16,r4
    dca8:	01000434 	movhi	r4,16
    dcac:	213fffc4 	addi	r4,r4,-1
    dcb0:	2908703a 	and	r4,r5,r4
    dcb4:	003fad06 	br	db6c <__alt_mem_sram+0xf7e0db6c>
    dcb8:	8089c83a 	sub	r4,r16,r2
    dcbc:	01006a0e 	bge	zero,r4,de68 <__adddf3+0x3d8>
    dcc0:	10003326 	beq	r2,zero,dd90 <__adddf3+0x300>
    dcc4:	0081ffc4 	movi	r2,2047
    dcc8:	80bf9026 	beq	r16,r2,db0c <__alt_mem_sram+0xf7e0db0c>
    dccc:	42002034 	orhi	r8,r8,128
    dcd0:	00800e04 	movi	r2,56
    dcd4:	1100b116 	blt	r2,r4,df9c <__adddf3+0x50c>
    dcd8:	008007c4 	movi	r2,31
    dcdc:	1100e216 	blt	r2,r4,e068 <__adddf3+0x5d8>
    dce0:	00800804 	movi	r2,32
    dce4:	1105c83a 	sub	r2,r2,r4
    dce8:	4092983a 	sll	r9,r8,r2
    dcec:	310ed83a 	srl	r7,r6,r4
    dcf0:	3084983a 	sll	r2,r6,r2
    dcf4:	4110d83a 	srl	r8,r8,r4
    dcf8:	49ccb03a 	or	r6,r9,r7
    dcfc:	1004c03a 	cmpne	r2,r2,zero
    dd00:	308cb03a 	or	r6,r6,r2
    dd04:	344d883a 	add	r6,r6,r17
    dd08:	3463803a 	cmpltu	r17,r6,r17
    dd0c:	414b883a 	add	r5,r8,r5
    dd10:	2c4b883a 	add	r5,r5,r17
    dd14:	3023883a 	mov	r17,r6
    dd18:	2880202c 	andhi	r2,r5,128
    dd1c:	10002726 	beq	r2,zero,ddbc <__adddf3+0x32c>
    dd20:	84000044 	addi	r16,r16,1
    dd24:	0081ffc4 	movi	r2,2047
    dd28:	8080ae26 	beq	r16,r2,dfe4 <__adddf3+0x554>
    dd2c:	00bfe034 	movhi	r2,65408
    dd30:	10bfffc4 	addi	r2,r2,-1
    dd34:	288a703a 	and	r5,r5,r2
    dd38:	880cd07a 	srli	r6,r17,1
    dd3c:	280897fa 	slli	r4,r5,31
    dd40:	88c0004c 	andi	r3,r17,1
    dd44:	30e2b03a 	or	r17,r6,r3
    dd48:	280ad07a 	srli	r5,r5,1
    dd4c:	8922b03a 	or	r17,r17,r4
    dd50:	003f6e06 	br	db0c <__alt_mem_sram+0xf7e0db0c>
    dd54:	1148b03a 	or	r4,r2,r5
    dd58:	20003c26 	beq	r4,zero,de4c <__adddf3+0x3bc>
    dd5c:	29000234 	orhi	r4,r5,8
    dd60:	01400434 	movhi	r5,16
    dd64:	297fffc4 	addi	r5,r5,-1
    dd68:	2148703a 	and	r4,r4,r5
    dd6c:	003f7f06 	br	db6c <__alt_mem_sram+0xf7e0db6c>
    dd70:	18ffffc4 	addi	r3,r3,-1
    dd74:	18004d1e 	bne	r3,zero,deac <__adddf3+0x41c>
    dd78:	898dc83a 	sub	r6,r17,r6
    dd7c:	89a3803a 	cmpltu	r17,r17,r6
    dd80:	2a0bc83a 	sub	r5,r5,r8
    dd84:	2c4bc83a 	sub	r5,r5,r17
    dd88:	3023883a 	mov	r17,r6
    dd8c:	003f9c06 	br	dc00 <__alt_mem_sram+0xf7e0dc00>
    dd90:	4184b03a 	or	r2,r8,r6
    dd94:	103f5d26 	beq	r2,zero,db0c <__alt_mem_sram+0xf7e0db0c>
    dd98:	213fffc4 	addi	r4,r4,-1
    dd9c:	203fd926 	beq	r4,zero,dd04 <__alt_mem_sram+0xf7e0dd04>
    dda0:	0081ffc4 	movi	r2,2047
    dda4:	80bfca1e 	bne	r16,r2,dcd0 <__alt_mem_sram+0xf7e0dcd0>
    dda8:	003f5806 	br	db0c <__alt_mem_sram+0xf7e0db0c>
    ddac:	10c8b03a 	or	r4,r2,r3
    ddb0:	20008b26 	beq	r4,zero,dfe0 <__adddf3+0x550>
    ddb4:	100b883a 	mov	r5,r2
    ddb8:	1823883a 	mov	r17,r3
    ddbc:	888001cc 	andi	r2,r17,7
    ddc0:	103f541e 	bne	r2,zero,db14 <__alt_mem_sram+0xf7e0db14>
    ddc4:	9007883a 	mov	r3,r18
    ddc8:	003fb006 	br	dc8c <__alt_mem_sram+0xf7e0dc8c>
    ddcc:	1800531e 	bne	r3,zero,df1c <__adddf3+0x48c>
    ddd0:	80800044 	addi	r2,r16,1
    ddd4:	1081ffcc 	andi	r2,r2,2047
    ddd8:	00c00044 	movi	r3,1
    dddc:	1880990e 	bge	r3,r2,e044 <__adddf3+0x5b4>
    dde0:	8985c83a 	sub	r2,r17,r6
    dde4:	8887803a 	cmpltu	r3,r17,r2
    dde8:	2a27c83a 	sub	r19,r5,r8
    ddec:	98e7c83a 	sub	r19,r19,r3
    ddf0:	98c0202c 	andhi	r3,r19,128
    ddf4:	18006226 	beq	r3,zero,df80 <__adddf3+0x4f0>
    ddf8:	3463c83a 	sub	r17,r6,r17
    ddfc:	4151c83a 	sub	r8,r8,r5
    de00:	344d803a 	cmpltu	r6,r6,r17
    de04:	41a7c83a 	sub	r19,r8,r6
    de08:	3825883a 	mov	r18,r7
    de0c:	983f821e 	bne	r19,zero,dc18 <__alt_mem_sram+0xf7e0dc18>
    de10:	8809883a 	mov	r4,r17
    de14:	001002c0 	call	1002c <__clzsi2>
    de18:	10800804 	addi	r2,r2,32
    de1c:	10fffe04 	addi	r3,r2,-8
    de20:	010007c4 	movi	r4,31
    de24:	20ff810e 	bge	r4,r3,dc2c <__alt_mem_sram+0xf7e0dc2c>
    de28:	14fff604 	addi	r19,r2,-40
    de2c:	8ce6983a 	sll	r19,r17,r19
    de30:	0023883a 	mov	r17,zero
    de34:	1c3f840e 	bge	r3,r16,dc48 <__alt_mem_sram+0xf7e0dc48>
    de38:	017fe034 	movhi	r5,65408
    de3c:	297fffc4 	addi	r5,r5,-1
    de40:	80e1c83a 	sub	r16,r16,r3
    de44:	994a703a 	and	r5,r19,r5
    de48:	003f3006 	br	db0c <__alt_mem_sram+0xf7e0db0c>
    de4c:	0009883a 	mov	r4,zero
    de50:	0005883a 	mov	r2,zero
    de54:	003f4506 	br	db6c <__alt_mem_sram+0xf7e0db6c>
    de58:	418cb03a 	or	r6,r8,r6
    de5c:	300cc03a 	cmpne	r6,r6,zero
    de60:	0007883a 	mov	r3,zero
    de64:	003f6106 	br	dbec <__alt_mem_sram+0xf7e0dbec>
    de68:	2000921e 	bne	r4,zero,e0b4 <__adddf3+0x624>
    de6c:	80800044 	addi	r2,r16,1
    de70:	11c1ffcc 	andi	r7,r2,2047
    de74:	01000044 	movi	r4,1
    de78:	21c0610e 	bge	r4,r7,e000 <__adddf3+0x570>
    de7c:	0101ffc4 	movi	r4,2047
    de80:	1100a326 	beq	r2,r4,e110 <__adddf3+0x680>
    de84:	344d883a 	add	r6,r6,r17
    de88:	3463803a 	cmpltu	r17,r6,r17
    de8c:	414b883a 	add	r5,r8,r5
    de90:	2c4b883a 	add	r5,r5,r17
    de94:	282297fa 	slli	r17,r5,31
    de98:	300cd07a 	srli	r6,r6,1
    de9c:	280ad07a 	srli	r5,r5,1
    dea0:	1021883a 	mov	r16,r2
    dea4:	89a2b03a 	or	r17,r17,r6
    dea8:	003f1806 	br	db0c <__alt_mem_sram+0xf7e0db0c>
    deac:	0081ffc4 	movi	r2,2047
    deb0:	80bf411e 	bne	r16,r2,dbb8 <__alt_mem_sram+0xf7e0dbb8>
    deb4:	003f1506 	br	db0c <__alt_mem_sram+0xf7e0db0c>
    deb8:	80bff844 	addi	r2,r16,-31
    debc:	00c00804 	movi	r3,32
    dec0:	9884d83a 	srl	r2,r19,r2
    dec4:	28c04a26 	beq	r5,r3,dff0 <__adddf3+0x560>
    dec8:	00c00fc4 	movi	r3,63
    decc:	1c21c83a 	sub	r16,r3,r16
    ded0:	9c26983a 	sll	r19,r19,r16
    ded4:	9c62b03a 	or	r17,r19,r17
    ded8:	8822c03a 	cmpne	r17,r17,zero
    dedc:	88a2b03a 	or	r17,r17,r2
    dee0:	000b883a 	mov	r5,zero
    dee4:	0021883a 	mov	r16,zero
    dee8:	003fb406 	br	ddbc <__alt_mem_sram+0xf7e0ddbc>
    deec:	18bff804 	addi	r2,r3,-32
    def0:	01000804 	movi	r4,32
    def4:	4084d83a 	srl	r2,r8,r2
    def8:	19003f26 	beq	r3,r4,dff8 <__adddf3+0x568>
    defc:	01001004 	movi	r4,64
    df00:	20c7c83a 	sub	r3,r4,r3
    df04:	40d0983a 	sll	r8,r8,r3
    df08:	418cb03a 	or	r6,r8,r6
    df0c:	300cc03a 	cmpne	r6,r6,zero
    df10:	308cb03a 	or	r6,r6,r2
    df14:	0007883a 	mov	r3,zero
    df18:	003f3406 	br	dbec <__alt_mem_sram+0xf7e0dbec>
    df1c:	80002326 	beq	r16,zero,dfac <__adddf3+0x51c>
    df20:	0101ffc4 	movi	r4,2047
    df24:	11005e26 	beq	r2,r4,e0a0 <__adddf3+0x610>
    df28:	00c7c83a 	sub	r3,zero,r3
    df2c:	29402034 	orhi	r5,r5,128
    df30:	01000e04 	movi	r4,56
    df34:	20c07216 	blt	r4,r3,e100 <__adddf3+0x670>
    df38:	010007c4 	movi	r4,31
    df3c:	20c0ce16 	blt	r4,r3,e278 <__adddf3+0x7e8>
    df40:	01000804 	movi	r4,32
    df44:	20c9c83a 	sub	r4,r4,r3
    df48:	2914983a 	sll	r10,r5,r4
    df4c:	88d2d83a 	srl	r9,r17,r3
    df50:	8908983a 	sll	r4,r17,r4
    df54:	28c6d83a 	srl	r3,r5,r3
    df58:	5262b03a 	or	r17,r10,r9
    df5c:	2008c03a 	cmpne	r4,r4,zero
    df60:	8922b03a 	or	r17,r17,r4
    df64:	3463c83a 	sub	r17,r6,r17
    df68:	40c7c83a 	sub	r3,r8,r3
    df6c:	344d803a 	cmpltu	r6,r6,r17
    df70:	198bc83a 	sub	r5,r3,r6
    df74:	1021883a 	mov	r16,r2
    df78:	3825883a 	mov	r18,r7
    df7c:	003f2006 	br	dc00 <__alt_mem_sram+0xf7e0dc00>
    df80:	9886b03a 	or	r3,r19,r2
    df84:	1800141e 	bne	r3,zero,dfd8 <__adddf3+0x548>
    df88:	0007883a 	mov	r3,zero
    df8c:	000b883a 	mov	r5,zero
    df90:	0023883a 	mov	r17,zero
    df94:	0021883a 	mov	r16,zero
    df98:	003f3c06 	br	dc8c <__alt_mem_sram+0xf7e0dc8c>
    df9c:	418cb03a 	or	r6,r8,r6
    dfa0:	300cc03a 	cmpne	r6,r6,zero
    dfa4:	0011883a 	mov	r8,zero
    dfa8:	003f5606 	br	dd04 <__alt_mem_sram+0xf7e0dd04>
    dfac:	2c48b03a 	or	r4,r5,r17
    dfb0:	20003b26 	beq	r4,zero,e0a0 <__adddf3+0x610>
    dfb4:	00c6303a 	nor	r3,zero,r3
    dfb8:	1800371e 	bne	r3,zero,e098 <__adddf3+0x608>
    dfbc:	3463c83a 	sub	r17,r6,r17
    dfc0:	414bc83a 	sub	r5,r8,r5
    dfc4:	344d803a 	cmpltu	r6,r6,r17
    dfc8:	298bc83a 	sub	r5,r5,r6
    dfcc:	1021883a 	mov	r16,r2
    dfd0:	3825883a 	mov	r18,r7
    dfd4:	003f0a06 	br	dc00 <__alt_mem_sram+0xf7e0dc00>
    dfd8:	1023883a 	mov	r17,r2
    dfdc:	003f0d06 	br	dc14 <__alt_mem_sram+0xf7e0dc14>
    dfe0:	0007883a 	mov	r3,zero
    dfe4:	000b883a 	mov	r5,zero
    dfe8:	0023883a 	mov	r17,zero
    dfec:	003f2706 	br	dc8c <__alt_mem_sram+0xf7e0dc8c>
    dff0:	0027883a 	mov	r19,zero
    dff4:	003fb706 	br	ded4 <__alt_mem_sram+0xf7e0ded4>
    dff8:	0011883a 	mov	r8,zero
    dffc:	003fc206 	br	df08 <__alt_mem_sram+0xf7e0df08>
    e000:	2c44b03a 	or	r2,r5,r17
    e004:	8000871e 	bne	r16,zero,e224 <__adddf3+0x794>
    e008:	1000b126 	beq	r2,zero,e2d0 <__adddf3+0x840>
    e00c:	4184b03a 	or	r2,r8,r6
    e010:	103ebe26 	beq	r2,zero,db0c <__alt_mem_sram+0xf7e0db0c>
    e014:	3445883a 	add	r2,r6,r17
    e018:	1463803a 	cmpltu	r17,r2,r17
    e01c:	414b883a 	add	r5,r8,r5
    e020:	2c4b883a 	add	r5,r5,r17
    e024:	28c0202c 	andhi	r3,r5,128
    e028:	1023883a 	mov	r17,r2
    e02c:	183f6326 	beq	r3,zero,ddbc <__alt_mem_sram+0xf7e0ddbc>
    e030:	00bfe034 	movhi	r2,65408
    e034:	10bfffc4 	addi	r2,r2,-1
    e038:	2021883a 	mov	r16,r4
    e03c:	288a703a 	and	r5,r5,r2
    e040:	003eb206 	br	db0c <__alt_mem_sram+0xf7e0db0c>
    e044:	2c44b03a 	or	r2,r5,r17
    e048:	8000251e 	bne	r16,zero,e0e0 <__adddf3+0x650>
    e04c:	10004b1e 	bne	r2,zero,e17c <__adddf3+0x6ec>
    e050:	4184b03a 	or	r2,r8,r6
    e054:	103fe226 	beq	r2,zero,dfe0 <__alt_mem_sram+0xf7e0dfe0>
    e058:	400b883a 	mov	r5,r8
    e05c:	3023883a 	mov	r17,r6
    e060:	3825883a 	mov	r18,r7
    e064:	003ea906 	br	db0c <__alt_mem_sram+0xf7e0db0c>
    e068:	20bff804 	addi	r2,r4,-32
    e06c:	01c00804 	movi	r7,32
    e070:	4084d83a 	srl	r2,r8,r2
    e074:	21c07e26 	beq	r4,r7,e270 <__adddf3+0x7e0>
    e078:	01c01004 	movi	r7,64
    e07c:	3909c83a 	sub	r4,r7,r4
    e080:	4110983a 	sll	r8,r8,r4
    e084:	418cb03a 	or	r6,r8,r6
    e088:	300cc03a 	cmpne	r6,r6,zero
    e08c:	308cb03a 	or	r6,r6,r2
    e090:	0011883a 	mov	r8,zero
    e094:	003f1b06 	br	dd04 <__alt_mem_sram+0xf7e0dd04>
    e098:	0101ffc4 	movi	r4,2047
    e09c:	113fa41e 	bne	r2,r4,df30 <__alt_mem_sram+0xf7e0df30>
    e0a0:	400b883a 	mov	r5,r8
    e0a4:	3023883a 	mov	r17,r6
    e0a8:	1021883a 	mov	r16,r2
    e0ac:	3825883a 	mov	r18,r7
    e0b0:	003e9606 	br	db0c <__alt_mem_sram+0xf7e0db0c>
    e0b4:	80001a1e 	bne	r16,zero,e120 <__adddf3+0x690>
    e0b8:	2c4eb03a 	or	r7,r5,r17
    e0bc:	38005526 	beq	r7,zero,e214 <__adddf3+0x784>
    e0c0:	0108303a 	nor	r4,zero,r4
    e0c4:	2000511e 	bne	r4,zero,e20c <__adddf3+0x77c>
    e0c8:	89a3883a 	add	r17,r17,r6
    e0cc:	414b883a 	add	r5,r8,r5
    e0d0:	898d803a 	cmpltu	r6,r17,r6
    e0d4:	298b883a 	add	r5,r5,r6
    e0d8:	1021883a 	mov	r16,r2
    e0dc:	003f0e06 	br	dd18 <__alt_mem_sram+0xf7e0dd18>
    e0e0:	1000341e 	bne	r2,zero,e1b4 <__adddf3+0x724>
    e0e4:	4184b03a 	or	r2,r8,r6
    e0e8:	10006f26 	beq	r2,zero,e2a8 <__adddf3+0x818>
    e0ec:	400b883a 	mov	r5,r8
    e0f0:	3023883a 	mov	r17,r6
    e0f4:	3825883a 	mov	r18,r7
    e0f8:	0401ffc4 	movi	r16,2047
    e0fc:	003e8306 	br	db0c <__alt_mem_sram+0xf7e0db0c>
    e100:	2c62b03a 	or	r17,r5,r17
    e104:	8822c03a 	cmpne	r17,r17,zero
    e108:	0007883a 	mov	r3,zero
    e10c:	003f9506 	br	df64 <__alt_mem_sram+0xf7e0df64>
    e110:	1021883a 	mov	r16,r2
    e114:	000b883a 	mov	r5,zero
    e118:	0023883a 	mov	r17,zero
    e11c:	003edb06 	br	dc8c <__alt_mem_sram+0xf7e0dc8c>
    e120:	01c1ffc4 	movi	r7,2047
    e124:	11c03b26 	beq	r2,r7,e214 <__adddf3+0x784>
    e128:	0109c83a 	sub	r4,zero,r4
    e12c:	29402034 	orhi	r5,r5,128
    e130:	01c00e04 	movi	r7,56
    e134:	39006216 	blt	r7,r4,e2c0 <__adddf3+0x830>
    e138:	01c007c4 	movi	r7,31
    e13c:	39006b16 	blt	r7,r4,e2ec <__adddf3+0x85c>
    e140:	01c00804 	movi	r7,32
    e144:	390fc83a 	sub	r7,r7,r4
    e148:	29d4983a 	sll	r10,r5,r7
    e14c:	8912d83a 	srl	r9,r17,r4
    e150:	89ce983a 	sll	r7,r17,r7
    e154:	2908d83a 	srl	r4,r5,r4
    e158:	5262b03a 	or	r17,r10,r9
    e15c:	380ac03a 	cmpne	r5,r7,zero
    e160:	8962b03a 	or	r17,r17,r5
    e164:	89a3883a 	add	r17,r17,r6
    e168:	2211883a 	add	r8,r4,r8
    e16c:	898d803a 	cmpltu	r6,r17,r6
    e170:	418b883a 	add	r5,r8,r6
    e174:	1021883a 	mov	r16,r2
    e178:	003ee706 	br	dd18 <__alt_mem_sram+0xf7e0dd18>
    e17c:	4184b03a 	or	r2,r8,r6
    e180:	103e6226 	beq	r2,zero,db0c <__alt_mem_sram+0xf7e0db0c>
    e184:	8987c83a 	sub	r3,r17,r6
    e188:	88c9803a 	cmpltu	r4,r17,r3
    e18c:	2a05c83a 	sub	r2,r5,r8
    e190:	1105c83a 	sub	r2,r2,r4
    e194:	1100202c 	andhi	r4,r2,128
    e198:	203f0426 	beq	r4,zero,ddac <__alt_mem_sram+0xf7e0ddac>
    e19c:	3463c83a 	sub	r17,r6,r17
    e1a0:	414bc83a 	sub	r5,r8,r5
    e1a4:	344d803a 	cmpltu	r6,r6,r17
    e1a8:	298bc83a 	sub	r5,r5,r6
    e1ac:	3825883a 	mov	r18,r7
    e1b0:	003e5606 	br	db0c <__alt_mem_sram+0xf7e0db0c>
    e1b4:	4184b03a 	or	r2,r8,r6
    e1b8:	10002b26 	beq	r2,zero,e268 <__adddf3+0x7d8>
    e1bc:	2804d0fa 	srli	r2,r5,3
    e1c0:	8822d0fa 	srli	r17,r17,3
    e1c4:	280a977a 	slli	r5,r5,29
    e1c8:	10c0022c 	andhi	r3,r2,8
    e1cc:	2c62b03a 	or	r17,r5,r17
    e1d0:	18000826 	beq	r3,zero,e1f4 <__adddf3+0x764>
    e1d4:	4008d0fa 	srli	r4,r8,3
    e1d8:	20c0022c 	andhi	r3,r4,8
    e1dc:	1800051e 	bne	r3,zero,e1f4 <__adddf3+0x764>
    e1e0:	300cd0fa 	srli	r6,r6,3
    e1e4:	4010977a 	slli	r8,r8,29
    e1e8:	2005883a 	mov	r2,r4
    e1ec:	3825883a 	mov	r18,r7
    e1f0:	41a2b03a 	or	r17,r8,r6
    e1f4:	880ad77a 	srli	r5,r17,29
    e1f8:	100490fa 	slli	r2,r2,3
    e1fc:	882290fa 	slli	r17,r17,3
    e200:	0401ffc4 	movi	r16,2047
    e204:	288ab03a 	or	r5,r5,r2
    e208:	003e4006 	br	db0c <__alt_mem_sram+0xf7e0db0c>
    e20c:	01c1ffc4 	movi	r7,2047
    e210:	11ffc71e 	bne	r2,r7,e130 <__alt_mem_sram+0xf7e0e130>
    e214:	400b883a 	mov	r5,r8
    e218:	3023883a 	mov	r17,r6
    e21c:	1021883a 	mov	r16,r2
    e220:	003e3a06 	br	db0c <__alt_mem_sram+0xf7e0db0c>
    e224:	10002d26 	beq	r2,zero,e2dc <__adddf3+0x84c>
    e228:	4184b03a 	or	r2,r8,r6
    e22c:	10000e26 	beq	r2,zero,e268 <__adddf3+0x7d8>
    e230:	2804d0fa 	srli	r2,r5,3
    e234:	8822d0fa 	srli	r17,r17,3
    e238:	280a977a 	slli	r5,r5,29
    e23c:	10c0022c 	andhi	r3,r2,8
    e240:	2c62b03a 	or	r17,r5,r17
    e244:	183feb26 	beq	r3,zero,e1f4 <__alt_mem_sram+0xf7e0e1f4>
    e248:	4008d0fa 	srli	r4,r8,3
    e24c:	20c0022c 	andhi	r3,r4,8
    e250:	183fe81e 	bne	r3,zero,e1f4 <__alt_mem_sram+0xf7e0e1f4>
    e254:	300cd0fa 	srli	r6,r6,3
    e258:	4010977a 	slli	r8,r8,29
    e25c:	2005883a 	mov	r2,r4
    e260:	41a2b03a 	or	r17,r8,r6
    e264:	003fe306 	br	e1f4 <__alt_mem_sram+0xf7e0e1f4>
    e268:	0401ffc4 	movi	r16,2047
    e26c:	003e2706 	br	db0c <__alt_mem_sram+0xf7e0db0c>
    e270:	0011883a 	mov	r8,zero
    e274:	003f8306 	br	e084 <__alt_mem_sram+0xf7e0e084>
    e278:	193ff804 	addi	r4,r3,-32
    e27c:	02400804 	movi	r9,32
    e280:	2908d83a 	srl	r4,r5,r4
    e284:	1a402526 	beq	r3,r9,e31c <__adddf3+0x88c>
    e288:	02401004 	movi	r9,64
    e28c:	48c7c83a 	sub	r3,r9,r3
    e290:	28ca983a 	sll	r5,r5,r3
    e294:	2c62b03a 	or	r17,r5,r17
    e298:	8822c03a 	cmpne	r17,r17,zero
    e29c:	8922b03a 	or	r17,r17,r4
    e2a0:	0007883a 	mov	r3,zero
    e2a4:	003f2f06 	br	df64 <__alt_mem_sram+0xf7e0df64>
    e2a8:	01402034 	movhi	r5,128
    e2ac:	0007883a 	mov	r3,zero
    e2b0:	297fffc4 	addi	r5,r5,-1
    e2b4:	047ffe04 	movi	r17,-8
    e2b8:	0401ffc4 	movi	r16,2047
    e2bc:	003e7306 	br	dc8c <__alt_mem_sram+0xf7e0dc8c>
    e2c0:	2c62b03a 	or	r17,r5,r17
    e2c4:	8822c03a 	cmpne	r17,r17,zero
    e2c8:	0009883a 	mov	r4,zero
    e2cc:	003fa506 	br	e164 <__alt_mem_sram+0xf7e0e164>
    e2d0:	400b883a 	mov	r5,r8
    e2d4:	3023883a 	mov	r17,r6
    e2d8:	003e0c06 	br	db0c <__alt_mem_sram+0xf7e0db0c>
    e2dc:	400b883a 	mov	r5,r8
    e2e0:	3023883a 	mov	r17,r6
    e2e4:	0401ffc4 	movi	r16,2047
    e2e8:	003e0806 	br	db0c <__alt_mem_sram+0xf7e0db0c>
    e2ec:	21fff804 	addi	r7,r4,-32
    e2f0:	02400804 	movi	r9,32
    e2f4:	29ced83a 	srl	r7,r5,r7
    e2f8:	22400a26 	beq	r4,r9,e324 <__adddf3+0x894>
    e2fc:	02401004 	movi	r9,64
    e300:	4909c83a 	sub	r4,r9,r4
    e304:	290a983a 	sll	r5,r5,r4
    e308:	2c62b03a 	or	r17,r5,r17
    e30c:	8822c03a 	cmpne	r17,r17,zero
    e310:	89e2b03a 	or	r17,r17,r7
    e314:	0009883a 	mov	r4,zero
    e318:	003f9206 	br	e164 <__alt_mem_sram+0xf7e0e164>
    e31c:	000b883a 	mov	r5,zero
    e320:	003fdc06 	br	e294 <__alt_mem_sram+0xf7e0e294>
    e324:	000b883a 	mov	r5,zero
    e328:	003ff706 	br	e308 <__alt_mem_sram+0xf7e0e308>

0000e32c <__divdf3>:
    e32c:	defff204 	addi	sp,sp,-56
    e330:	dd000815 	stw	r20,32(sp)
    e334:	2828d53a 	srli	r20,r5,20
    e338:	dd800a15 	stw	r22,40(sp)
    e33c:	282cd7fa 	srli	r22,r5,31
    e340:	dc000415 	stw	r16,16(sp)
    e344:	04000434 	movhi	r16,16
    e348:	df000c15 	stw	fp,48(sp)
    e34c:	dcc00715 	stw	r19,28(sp)
    e350:	dc800615 	stw	r18,24(sp)
    e354:	dc400515 	stw	r17,20(sp)
    e358:	843fffc4 	addi	r16,r16,-1
    e35c:	dfc00d15 	stw	ra,52(sp)
    e360:	ddc00b15 	stw	r23,44(sp)
    e364:	dd400915 	stw	r21,36(sp)
    e368:	a501ffcc 	andi	r20,r20,2047
    e36c:	2025883a 	mov	r18,r4
    e370:	2027883a 	mov	r19,r4
    e374:	2c22703a 	and	r17,r5,r16
    e378:	b7003fcc 	andi	fp,r22,255
    e37c:	a0005e26 	beq	r20,zero,e4f8 <__divdf3+0x1cc>
    e380:	0081ffc4 	movi	r2,2047
    e384:	a0803526 	beq	r20,r2,e45c <__divdf3+0x130>
    e388:	8c000434 	orhi	r16,r17,16
    e38c:	2004d77a 	srli	r2,r4,29
    e390:	802090fa 	slli	r16,r16,3
    e394:	202690fa 	slli	r19,r4,3
    e398:	a53f0044 	addi	r20,r20,-1023
    e39c:	80a2b03a 	or	r17,r16,r2
    e3a0:	0025883a 	mov	r18,zero
    e3a4:	0011883a 	mov	r8,zero
    e3a8:	380ad53a 	srli	r5,r7,20
    e3ac:	382ed7fa 	srli	r23,r7,31
    e3b0:	04000434 	movhi	r16,16
    e3b4:	843fffc4 	addi	r16,r16,-1
    e3b8:	2941ffcc 	andi	r5,r5,2047
    e3bc:	302b883a 	mov	r21,r6
    e3c0:	3c20703a 	and	r16,r7,r16
    e3c4:	ba403fcc 	andi	r9,r23,255
    e3c8:	28006726 	beq	r5,zero,e568 <__divdf3+0x23c>
    e3cc:	0081ffc4 	movi	r2,2047
    e3d0:	28805f26 	beq	r5,r2,e550 <__divdf3+0x224>
    e3d4:	84000434 	orhi	r16,r16,16
    e3d8:	3004d77a 	srli	r2,r6,29
    e3dc:	802090fa 	slli	r16,r16,3
    e3e0:	302a90fa 	slli	r21,r6,3
    e3e4:	297f0044 	addi	r5,r5,-1023
    e3e8:	80a0b03a 	or	r16,r16,r2
    e3ec:	000f883a 	mov	r7,zero
    e3f0:	3c86b03a 	or	r3,r7,r18
    e3f4:	180690ba 	slli	r3,r3,2
    e3f8:	00800074 	movhi	r2,1
    e3fc:	10b90704 	addi	r2,r2,-7140
    e400:	1887883a 	add	r3,r3,r2
    e404:	18c00017 	ldw	r3,0(r3)
    e408:	b5c8f03a 	xor	r4,r22,r23
    e40c:	200d883a 	mov	r6,r4
    e410:	24803fcc 	andi	r18,r4,255
    e414:	a169c83a 	sub	r20,r20,r5
    e418:	1800683a 	jmp	r3
    e41c:	0000e664 	muli	zero,zero,921
    e420:	0000e494 	movui	zero,914
    e424:	0000e628 	cmpgeui	zero,zero,920
    e428:	0000e478 	rdprs	zero,zero,913
    e42c:	0000e628 	cmpgeui	zero,zero,920
    e430:	0000e5fc 	xorhi	zero,zero,919
    e434:	0000e628 	cmpgeui	zero,zero,920
    e438:	0000e478 	rdprs	zero,zero,913
    e43c:	0000e494 	movui	zero,914
    e440:	0000e494 	movui	zero,914
    e444:	0000e5fc 	xorhi	zero,zero,919
    e448:	0000e478 	rdprs	zero,zero,913
    e44c:	0000e488 	cmpgei	zero,zero,914
    e450:	0000e488 	cmpgei	zero,zero,914
    e454:	0000e488 	cmpgei	zero,zero,914
    e458:	0000e638 	rdprs	zero,zero,920
    e45c:	8904b03a 	or	r2,r17,r4
    e460:	1000631e 	bne	r2,zero,e5f0 <__divdf3+0x2c4>
    e464:	04800204 	movi	r18,8
    e468:	0023883a 	mov	r17,zero
    e46c:	0027883a 	mov	r19,zero
    e470:	02000084 	movi	r8,2
    e474:	003fcc06 	br	e3a8 <__alt_mem_sram+0xf7e0e3a8>
    e478:	8023883a 	mov	r17,r16
    e47c:	a827883a 	mov	r19,r21
    e480:	4839883a 	mov	fp,r9
    e484:	3811883a 	mov	r8,r7
    e488:	00800084 	movi	r2,2
    e48c:	40812a1e 	bne	r8,r2,e938 <__divdf3+0x60c>
    e490:	e025883a 	mov	r18,fp
    e494:	9180004c 	andi	r6,r18,1
    e498:	0101ffc4 	movi	r4,2047
    e49c:	000b883a 	mov	r5,zero
    e4a0:	0027883a 	mov	r19,zero
    e4a4:	2008953a 	slli	r4,r4,20
    e4a8:	30c03fcc 	andi	r3,r6,255
    e4ac:	04000434 	movhi	r16,16
    e4b0:	180697fa 	slli	r3,r3,31
    e4b4:	843fffc4 	addi	r16,r16,-1
    e4b8:	2c20703a 	and	r16,r5,r16
    e4bc:	8120b03a 	or	r16,r16,r4
    e4c0:	80c6b03a 	or	r3,r16,r3
    e4c4:	9805883a 	mov	r2,r19
    e4c8:	dfc00d17 	ldw	ra,52(sp)
    e4cc:	df000c17 	ldw	fp,48(sp)
    e4d0:	ddc00b17 	ldw	r23,44(sp)
    e4d4:	dd800a17 	ldw	r22,40(sp)
    e4d8:	dd400917 	ldw	r21,36(sp)
    e4dc:	dd000817 	ldw	r20,32(sp)
    e4e0:	dcc00717 	ldw	r19,28(sp)
    e4e4:	dc800617 	ldw	r18,24(sp)
    e4e8:	dc400517 	ldw	r17,20(sp)
    e4ec:	dc000417 	ldw	r16,16(sp)
    e4f0:	dec00e04 	addi	sp,sp,56
    e4f4:	f800283a 	ret
    e4f8:	8904b03a 	or	r2,r17,r4
    e4fc:	10003726 	beq	r2,zero,e5dc <__divdf3+0x2b0>
    e500:	88011c26 	beq	r17,zero,e974 <__divdf3+0x648>
    e504:	8809883a 	mov	r4,r17
    e508:	d9800315 	stw	r6,12(sp)
    e50c:	d9c00115 	stw	r7,4(sp)
    e510:	001002c0 	call	1002c <__clzsi2>
    e514:	d9800317 	ldw	r6,12(sp)
    e518:	d9c00117 	ldw	r7,4(sp)
    e51c:	1007883a 	mov	r3,r2
    e520:	01000a04 	movi	r4,40
    e524:	1cfffe04 	addi	r19,r3,-8
    e528:	20c9c83a 	sub	r4,r4,r3
    e52c:	8cca983a 	sll	r5,r17,r19
    e530:	9108d83a 	srl	r4,r18,r4
    e534:	94e6983a 	sll	r19,r18,r19
    e538:	2162b03a 	or	r17,r4,r5
    e53c:	053f0344 	movi	r20,-1011
    e540:	a0e9c83a 	sub	r20,r20,r3
    e544:	0025883a 	mov	r18,zero
    e548:	0011883a 	mov	r8,zero
    e54c:	003f9606 	br	e3a8 <__alt_mem_sram+0xf7e0e3a8>
    e550:	8184b03a 	or	r2,r16,r6
    e554:	10001f1e 	bne	r2,zero,e5d4 <__divdf3+0x2a8>
    e558:	0021883a 	mov	r16,zero
    e55c:	002b883a 	mov	r21,zero
    e560:	01c00084 	movi	r7,2
    e564:	003fa206 	br	e3f0 <__alt_mem_sram+0xf7e0e3f0>
    e568:	8184b03a 	or	r2,r16,r6
    e56c:	10001526 	beq	r2,zero,e5c4 <__divdf3+0x298>
    e570:	80010c26 	beq	r16,zero,e9a4 <__divdf3+0x678>
    e574:	8009883a 	mov	r4,r16
    e578:	d9800315 	stw	r6,12(sp)
    e57c:	da000215 	stw	r8,8(sp)
    e580:	da400015 	stw	r9,0(sp)
    e584:	001002c0 	call	1002c <__clzsi2>
    e588:	d9800317 	ldw	r6,12(sp)
    e58c:	da000217 	ldw	r8,8(sp)
    e590:	da400017 	ldw	r9,0(sp)
    e594:	1007883a 	mov	r3,r2
    e598:	01000a04 	movi	r4,40
    e59c:	1d7ffe04 	addi	r21,r3,-8
    e5a0:	20c9c83a 	sub	r4,r4,r3
    e5a4:	8560983a 	sll	r16,r16,r21
    e5a8:	3108d83a 	srl	r4,r6,r4
    e5ac:	356a983a 	sll	r21,r6,r21
    e5b0:	2420b03a 	or	r16,r4,r16
    e5b4:	017f0344 	movi	r5,-1011
    e5b8:	28cbc83a 	sub	r5,r5,r3
    e5bc:	000f883a 	mov	r7,zero
    e5c0:	003f8b06 	br	e3f0 <__alt_mem_sram+0xf7e0e3f0>
    e5c4:	0021883a 	mov	r16,zero
    e5c8:	002b883a 	mov	r21,zero
    e5cc:	01c00044 	movi	r7,1
    e5d0:	003f8706 	br	e3f0 <__alt_mem_sram+0xf7e0e3f0>
    e5d4:	01c000c4 	movi	r7,3
    e5d8:	003f8506 	br	e3f0 <__alt_mem_sram+0xf7e0e3f0>
    e5dc:	04800104 	movi	r18,4
    e5e0:	0023883a 	mov	r17,zero
    e5e4:	0027883a 	mov	r19,zero
    e5e8:	02000044 	movi	r8,1
    e5ec:	003f6e06 	br	e3a8 <__alt_mem_sram+0xf7e0e3a8>
    e5f0:	04800304 	movi	r18,12
    e5f4:	020000c4 	movi	r8,3
    e5f8:	003f6b06 	br	e3a8 <__alt_mem_sram+0xf7e0e3a8>
    e5fc:	01400434 	movhi	r5,16
    e600:	000d883a 	mov	r6,zero
    e604:	297fffc4 	addi	r5,r5,-1
    e608:	04ffffc4 	movi	r19,-1
    e60c:	0101ffc4 	movi	r4,2047
    e610:	003fa406 	br	e4a4 <__alt_mem_sram+0xf7e0e4a4>
    e614:	043f0084 	movi	r16,-1022
    e618:	8521c83a 	sub	r16,r16,r20
    e61c:	00800e04 	movi	r2,56
    e620:	1401200e 	bge	r2,r16,eaa4 <__divdf3+0x778>
    e624:	9180004c 	andi	r6,r18,1
    e628:	0009883a 	mov	r4,zero
    e62c:	000b883a 	mov	r5,zero
    e630:	0027883a 	mov	r19,zero
    e634:	003f9b06 	br	e4a4 <__alt_mem_sram+0xf7e0e4a4>
    e638:	8880022c 	andhi	r2,r17,8
    e63c:	1000c726 	beq	r2,zero,e95c <__divdf3+0x630>
    e640:	8080022c 	andhi	r2,r16,8
    e644:	1000c51e 	bne	r2,zero,e95c <__divdf3+0x630>
    e648:	00800434 	movhi	r2,16
    e64c:	81400234 	orhi	r5,r16,8
    e650:	10bfffc4 	addi	r2,r2,-1
    e654:	b80d883a 	mov	r6,r23
    e658:	288a703a 	and	r5,r5,r2
    e65c:	a827883a 	mov	r19,r21
    e660:	003fea06 	br	e60c <__alt_mem_sram+0xf7e0e60c>
    e664:	8440ea36 	bltu	r16,r17,ea10 <__divdf3+0x6e4>
    e668:	8c00e826 	beq	r17,r16,ea0c <__divdf3+0x6e0>
    e66c:	a53fffc4 	addi	r20,r20,-1
    e670:	882d883a 	mov	r22,r17
    e674:	000d883a 	mov	r6,zero
    e678:	a804d63a 	srli	r2,r21,24
    e67c:	8020923a 	slli	r16,r16,8
    e680:	b009883a 	mov	r4,r22
    e684:	d9800315 	stw	r6,12(sp)
    e688:	1420b03a 	or	r16,r2,r16
    e68c:	802ed43a 	srli	r23,r16,16
    e690:	873fffcc 	andi	fp,r16,65535
    e694:	a82a923a 	slli	r21,r21,8
    e698:	b80b883a 	mov	r5,r23
    e69c:	000da800 	call	da80 <__udivsi3>
    e6a0:	b009883a 	mov	r4,r22
    e6a4:	b80b883a 	mov	r5,r23
    e6a8:	1023883a 	mov	r17,r2
    e6ac:	000da880 	call	da88 <__umodsi3>
    e6b0:	1004943a 	slli	r2,r2,16
    e6b4:	9808d43a 	srli	r4,r19,16
    e6b8:	8f2d383a 	mul	r22,r17,fp
    e6bc:	d9800317 	ldw	r6,12(sp)
    e6c0:	1106b03a 	or	r3,r2,r4
    e6c4:	1d80062e 	bgeu	r3,r22,e6e0 <__divdf3+0x3b4>
    e6c8:	1c07883a 	add	r3,r3,r16
    e6cc:	88bfffc4 	addi	r2,r17,-1
    e6d0:	1c00dc36 	bltu	r3,r16,ea44 <__divdf3+0x718>
    e6d4:	1d80db2e 	bgeu	r3,r22,ea44 <__divdf3+0x718>
    e6d8:	8c7fff84 	addi	r17,r17,-2
    e6dc:	1c07883a 	add	r3,r3,r16
    e6e0:	1dadc83a 	sub	r22,r3,r22
    e6e4:	b009883a 	mov	r4,r22
    e6e8:	b80b883a 	mov	r5,r23
    e6ec:	d9800315 	stw	r6,12(sp)
    e6f0:	000da800 	call	da80 <__udivsi3>
    e6f4:	b009883a 	mov	r4,r22
    e6f8:	b80b883a 	mov	r5,r23
    e6fc:	d8800015 	stw	r2,0(sp)
    e700:	000da880 	call	da88 <__umodsi3>
    e704:	da400017 	ldw	r9,0(sp)
    e708:	1004943a 	slli	r2,r2,16
    e70c:	9cffffcc 	andi	r19,r19,65535
    e710:	4f07383a 	mul	r3,r9,fp
    e714:	14c8b03a 	or	r4,r2,r19
    e718:	d9800317 	ldw	r6,12(sp)
    e71c:	20c0062e 	bgeu	r4,r3,e738 <__divdf3+0x40c>
    e720:	2409883a 	add	r4,r4,r16
    e724:	48bfffc4 	addi	r2,r9,-1
    e728:	2400c436 	bltu	r4,r16,ea3c <__divdf3+0x710>
    e72c:	20c0c32e 	bgeu	r4,r3,ea3c <__divdf3+0x710>
    e730:	4a7fff84 	addi	r9,r9,-2
    e734:	2409883a 	add	r4,r4,r16
    e738:	8822943a 	slli	r17,r17,16
    e73c:	a80ed43a 	srli	r7,r21,16
    e740:	aa3fffcc 	andi	r8,r21,65535
    e744:	4c62b03a 	or	r17,r9,r17
    e748:	8816d43a 	srli	r11,r17,16
    e74c:	897fffcc 	andi	r5,r17,65535
    e750:	2a15383a 	mul	r10,r5,r8
    e754:	5a19383a 	mul	r12,r11,r8
    e758:	29cb383a 	mul	r5,r5,r7
    e75c:	5012d43a 	srli	r9,r10,16
    e760:	20c5c83a 	sub	r2,r4,r3
    e764:	614b883a 	add	r5,r12,r5
    e768:	2a4b883a 	add	r5,r5,r9
    e76c:	59c7383a 	mul	r3,r11,r7
    e770:	2b00022e 	bgeu	r5,r12,e77c <__divdf3+0x450>
    e774:	01000074 	movhi	r4,1
    e778:	1907883a 	add	r3,r3,r4
    e77c:	2808d43a 	srli	r4,r5,16
    e780:	280a943a 	slli	r5,r5,16
    e784:	54ffffcc 	andi	r19,r10,65535
    e788:	1907883a 	add	r3,r3,r4
    e78c:	2ccb883a 	add	r5,r5,r19
    e790:	10c09336 	bltu	r2,r3,e9e0 <__divdf3+0x6b4>
    e794:	10c0ad26 	beq	r2,r3,ea4c <__divdf3+0x720>
    e798:	10c7c83a 	sub	r3,r2,r3
    e79c:	3167c83a 	sub	r19,r6,r5
    e7a0:	34ed803a 	cmpltu	r22,r6,r19
    e7a4:	1dadc83a 	sub	r22,r3,r22
    e7a8:	b400b226 	beq	r22,r16,ea74 <__divdf3+0x748>
    e7ac:	b009883a 	mov	r4,r22
    e7b0:	b80b883a 	mov	r5,r23
    e7b4:	d9c00115 	stw	r7,4(sp)
    e7b8:	da000215 	stw	r8,8(sp)
    e7bc:	000da800 	call	da80 <__udivsi3>
    e7c0:	b009883a 	mov	r4,r22
    e7c4:	b80b883a 	mov	r5,r23
    e7c8:	d8800315 	stw	r2,12(sp)
    e7cc:	000da880 	call	da88 <__umodsi3>
    e7d0:	d9800317 	ldw	r6,12(sp)
    e7d4:	1004943a 	slli	r2,r2,16
    e7d8:	9808d43a 	srli	r4,r19,16
    e7dc:	372d383a 	mul	r22,r6,fp
    e7e0:	d9c00117 	ldw	r7,4(sp)
    e7e4:	1106b03a 	or	r3,r2,r4
    e7e8:	da000217 	ldw	r8,8(sp)
    e7ec:	1d80062e 	bgeu	r3,r22,e808 <__divdf3+0x4dc>
    e7f0:	1c07883a 	add	r3,r3,r16
    e7f4:	30bfffc4 	addi	r2,r6,-1
    e7f8:	1c00a036 	bltu	r3,r16,ea7c <__divdf3+0x750>
    e7fc:	1d809f2e 	bgeu	r3,r22,ea7c <__divdf3+0x750>
    e800:	31bfff84 	addi	r6,r6,-2
    e804:	1c07883a 	add	r3,r3,r16
    e808:	1dadc83a 	sub	r22,r3,r22
    e80c:	b009883a 	mov	r4,r22
    e810:	b80b883a 	mov	r5,r23
    e814:	d9800315 	stw	r6,12(sp)
    e818:	d9c00115 	stw	r7,4(sp)
    e81c:	da000215 	stw	r8,8(sp)
    e820:	000da800 	call	da80 <__udivsi3>
    e824:	b009883a 	mov	r4,r22
    e828:	b80b883a 	mov	r5,r23
    e82c:	d8800015 	stw	r2,0(sp)
    e830:	000da880 	call	da88 <__umodsi3>
    e834:	da400017 	ldw	r9,0(sp)
    e838:	1004943a 	slli	r2,r2,16
    e83c:	993fffcc 	andi	r4,r19,65535
    e840:	4f39383a 	mul	fp,r9,fp
    e844:	1106b03a 	or	r3,r2,r4
    e848:	d9800317 	ldw	r6,12(sp)
    e84c:	d9c00117 	ldw	r7,4(sp)
    e850:	da000217 	ldw	r8,8(sp)
    e854:	1f00062e 	bgeu	r3,fp,e870 <__divdf3+0x544>
    e858:	1c07883a 	add	r3,r3,r16
    e85c:	48bfffc4 	addi	r2,r9,-1
    e860:	1c008836 	bltu	r3,r16,ea84 <__divdf3+0x758>
    e864:	1f00872e 	bgeu	r3,fp,ea84 <__divdf3+0x758>
    e868:	4a7fff84 	addi	r9,r9,-2
    e86c:	1c07883a 	add	r3,r3,r16
    e870:	3008943a 	slli	r4,r6,16
    e874:	1f07c83a 	sub	r3,r3,fp
    e878:	4926b03a 	or	r19,r9,r4
    e87c:	993fffcc 	andi	r4,r19,65535
    e880:	980cd43a 	srli	r6,r19,16
    e884:	220b383a 	mul	r5,r4,r8
    e888:	21c5383a 	mul	r2,r4,r7
    e88c:	3211383a 	mul	r8,r6,r8
    e890:	2808d43a 	srli	r4,r5,16
    e894:	31cf383a 	mul	r7,r6,r7
    e898:	4085883a 	add	r2,r8,r2
    e89c:	1105883a 	add	r2,r2,r4
    e8a0:	1200022e 	bgeu	r2,r8,e8ac <__divdf3+0x580>
    e8a4:	01000074 	movhi	r4,1
    e8a8:	390f883a 	add	r7,r7,r4
    e8ac:	1008d43a 	srli	r4,r2,16
    e8b0:	1004943a 	slli	r2,r2,16
    e8b4:	297fffcc 	andi	r5,r5,65535
    e8b8:	390f883a 	add	r7,r7,r4
    e8bc:	1145883a 	add	r2,r2,r5
    e8c0:	19c06536 	bltu	r3,r7,ea58 <__divdf3+0x72c>
    e8c4:	19c09f26 	beq	r3,r7,eb44 <__divdf3+0x818>
    e8c8:	9cc00054 	ori	r19,r19,1
    e8cc:	a100ffc4 	addi	r4,r20,1023
    e8d0:	013f500e 	bge	zero,r4,e614 <__alt_mem_sram+0xf7e0e614>
    e8d4:	988001cc 	andi	r2,r19,7
    e8d8:	10000726 	beq	r2,zero,e8f8 <__divdf3+0x5cc>
    e8dc:	98c003cc 	andi	r3,r19,15
    e8e0:	00800104 	movi	r2,4
    e8e4:	18800426 	beq	r3,r2,e8f8 <__divdf3+0x5cc>
    e8e8:	9885883a 	add	r2,r19,r2
    e8ec:	14e1803a 	cmpltu	r16,r2,r19
    e8f0:	8c23883a 	add	r17,r17,r16
    e8f4:	1027883a 	mov	r19,r2
    e8f8:	8880402c 	andhi	r2,r17,256
    e8fc:	10000426 	beq	r2,zero,e910 <__divdf3+0x5e4>
    e900:	00bfc034 	movhi	r2,65280
    e904:	10bfffc4 	addi	r2,r2,-1
    e908:	a1010004 	addi	r4,r20,1024
    e90c:	88a2703a 	and	r17,r17,r2
    e910:	0081ff84 	movi	r2,2046
    e914:	113edf16 	blt	r2,r4,e494 <__alt_mem_sram+0xf7e0e494>
    e918:	9826d0fa 	srli	r19,r19,3
    e91c:	8804977a 	slli	r2,r17,29
    e920:	8820927a 	slli	r16,r17,9
    e924:	2101ffcc 	andi	r4,r4,2047
    e928:	14e6b03a 	or	r19,r2,r19
    e92c:	800ad33a 	srli	r5,r16,12
    e930:	9180004c 	andi	r6,r18,1
    e934:	003edb06 	br	e4a4 <__alt_mem_sram+0xf7e0e4a4>
    e938:	008000c4 	movi	r2,3
    e93c:	4080a826 	beq	r8,r2,ebe0 <__divdf3+0x8b4>
    e940:	00800044 	movi	r2,1
    e944:	4080551e 	bne	r8,r2,ea9c <__divdf3+0x770>
    e948:	e00d883a 	mov	r6,fp
    e94c:	0009883a 	mov	r4,zero
    e950:	000b883a 	mov	r5,zero
    e954:	0027883a 	mov	r19,zero
    e958:	003ed206 	br	e4a4 <__alt_mem_sram+0xf7e0e4a4>
    e95c:	00800434 	movhi	r2,16
    e960:	89400234 	orhi	r5,r17,8
    e964:	10bfffc4 	addi	r2,r2,-1
    e968:	b00d883a 	mov	r6,r22
    e96c:	288a703a 	and	r5,r5,r2
    e970:	003f2606 	br	e60c <__alt_mem_sram+0xf7e0e60c>
    e974:	d9800315 	stw	r6,12(sp)
    e978:	d9c00115 	stw	r7,4(sp)
    e97c:	001002c0 	call	1002c <__clzsi2>
    e980:	10c00804 	addi	r3,r2,32
    e984:	010009c4 	movi	r4,39
    e988:	d9800317 	ldw	r6,12(sp)
    e98c:	d9c00117 	ldw	r7,4(sp)
    e990:	20fee30e 	bge	r4,r3,e520 <__alt_mem_sram+0xf7e0e520>
    e994:	117ffe04 	addi	r5,r2,-8
    e998:	9162983a 	sll	r17,r18,r5
    e99c:	0027883a 	mov	r19,zero
    e9a0:	003ee606 	br	e53c <__alt_mem_sram+0xf7e0e53c>
    e9a4:	3009883a 	mov	r4,r6
    e9a8:	d9800315 	stw	r6,12(sp)
    e9ac:	da000215 	stw	r8,8(sp)
    e9b0:	da400015 	stw	r9,0(sp)
    e9b4:	001002c0 	call	1002c <__clzsi2>
    e9b8:	10c00804 	addi	r3,r2,32
    e9bc:	010009c4 	movi	r4,39
    e9c0:	d9800317 	ldw	r6,12(sp)
    e9c4:	da000217 	ldw	r8,8(sp)
    e9c8:	da400017 	ldw	r9,0(sp)
    e9cc:	20fef20e 	bge	r4,r3,e598 <__alt_mem_sram+0xf7e0e598>
    e9d0:	10bffe04 	addi	r2,r2,-8
    e9d4:	a8a0983a 	sll	r16,r21,r2
    e9d8:	002b883a 	mov	r21,zero
    e9dc:	003ef506 	br	e5b4 <__alt_mem_sram+0xf7e0e5b4>
    e9e0:	354d883a 	add	r6,r6,r21
    e9e4:	3549803a 	cmpltu	r4,r6,r21
    e9e8:	2409883a 	add	r4,r4,r16
    e9ec:	2089883a 	add	r4,r4,r2
    e9f0:	88bfffc4 	addi	r2,r17,-1
    e9f4:	81000c2e 	bgeu	r16,r4,ea28 <__divdf3+0x6fc>
    e9f8:	20c04436 	bltu	r4,r3,eb0c <__divdf3+0x7e0>
    e9fc:	19006f26 	beq	r3,r4,ebbc <__divdf3+0x890>
    ea00:	20c7c83a 	sub	r3,r4,r3
    ea04:	1023883a 	mov	r17,r2
    ea08:	003f6406 	br	e79c <__alt_mem_sram+0xf7e0e79c>
    ea0c:	9d7f1736 	bltu	r19,r21,e66c <__alt_mem_sram+0xf7e0e66c>
    ea10:	9806d07a 	srli	r3,r19,1
    ea14:	880497fa 	slli	r2,r17,31
    ea18:	980c97fa 	slli	r6,r19,31
    ea1c:	882cd07a 	srli	r22,r17,1
    ea20:	18a6b03a 	or	r19,r3,r2
    ea24:	003f1406 	br	e678 <__alt_mem_sram+0xf7e0e678>
    ea28:	243ff51e 	bne	r4,r16,ea00 <__alt_mem_sram+0xf7e0ea00>
    ea2c:	357ff22e 	bgeu	r6,r21,e9f8 <__alt_mem_sram+0xf7e0e9f8>
    ea30:	80c7c83a 	sub	r3,r16,r3
    ea34:	1023883a 	mov	r17,r2
    ea38:	003f5806 	br	e79c <__alt_mem_sram+0xf7e0e79c>
    ea3c:	1013883a 	mov	r9,r2
    ea40:	003f3d06 	br	e738 <__alt_mem_sram+0xf7e0e738>
    ea44:	1023883a 	mov	r17,r2
    ea48:	003f2506 	br	e6e0 <__alt_mem_sram+0xf7e0e6e0>
    ea4c:	317fe436 	bltu	r6,r5,e9e0 <__alt_mem_sram+0xf7e0e9e0>
    ea50:	0007883a 	mov	r3,zero
    ea54:	003f5106 	br	e79c <__alt_mem_sram+0xf7e0e79c>
    ea58:	1c07883a 	add	r3,r3,r16
    ea5c:	993fffc4 	addi	r4,r19,-1
    ea60:	1c000a2e 	bgeu	r3,r16,ea8c <__divdf3+0x760>
    ea64:	2027883a 	mov	r19,r4
    ea68:	19ff971e 	bne	r3,r7,e8c8 <__alt_mem_sram+0xf7e0e8c8>
    ea6c:	a8bf961e 	bne	r21,r2,e8c8 <__alt_mem_sram+0xf7e0e8c8>
    ea70:	003f9606 	br	e8cc <__alt_mem_sram+0xf7e0e8cc>
    ea74:	04ffffc4 	movi	r19,-1
    ea78:	003f9406 	br	e8cc <__alt_mem_sram+0xf7e0e8cc>
    ea7c:	100d883a 	mov	r6,r2
    ea80:	003f6106 	br	e808 <__alt_mem_sram+0xf7e0e808>
    ea84:	1013883a 	mov	r9,r2
    ea88:	003f7906 	br	e870 <__alt_mem_sram+0xf7e0e870>
    ea8c:	19c02636 	bltu	r3,r7,eb28 <__divdf3+0x7fc>
    ea90:	38c04d26 	beq	r7,r3,ebc8 <__divdf3+0x89c>
    ea94:	2027883a 	mov	r19,r4
    ea98:	003f8b06 	br	e8c8 <__alt_mem_sram+0xf7e0e8c8>
    ea9c:	e025883a 	mov	r18,fp
    eaa0:	003f8a06 	br	e8cc <__alt_mem_sram+0xf7e0e8cc>
    eaa4:	008007c4 	movi	r2,31
    eaa8:	14002a16 	blt	r2,r16,eb54 <__divdf3+0x828>
    eaac:	a5010784 	addi	r20,r20,1054
    eab0:	8d04983a 	sll	r2,r17,r20
    eab4:	9c06d83a 	srl	r3,r19,r16
    eab8:	9d28983a 	sll	r20,r19,r20
    eabc:	8c20d83a 	srl	r16,r17,r16
    eac0:	1886b03a 	or	r3,r3,r2
    eac4:	a004c03a 	cmpne	r2,r20,zero
    eac8:	1884b03a 	or	r2,r3,r2
    eacc:	10c001cc 	andi	r3,r2,7
    ead0:	18000726 	beq	r3,zero,eaf0 <__divdf3+0x7c4>
    ead4:	110003cc 	andi	r4,r2,15
    ead8:	00c00104 	movi	r3,4
    eadc:	20c00426 	beq	r4,r3,eaf0 <__divdf3+0x7c4>
    eae0:	10c00104 	addi	r3,r2,4
    eae4:	1885803a 	cmpltu	r2,r3,r2
    eae8:	80a1883a 	add	r16,r16,r2
    eaec:	1805883a 	mov	r2,r3
    eaf0:	80c0202c 	andhi	r3,r16,128
    eaf4:	18002d26 	beq	r3,zero,ebac <__divdf3+0x880>
    eaf8:	9180004c 	andi	r6,r18,1
    eafc:	01000044 	movi	r4,1
    eb00:	000b883a 	mov	r5,zero
    eb04:	0027883a 	mov	r19,zero
    eb08:	003e6606 	br	e4a4 <__alt_mem_sram+0xf7e0e4a4>
    eb0c:	354d883a 	add	r6,r6,r21
    eb10:	356d803a 	cmpltu	r22,r6,r21
    eb14:	b42d883a 	add	r22,r22,r16
    eb18:	b12d883a 	add	r22,r22,r4
    eb1c:	8c7fff84 	addi	r17,r17,-2
    eb20:	b0c7c83a 	sub	r3,r22,r3
    eb24:	003f1d06 	br	e79c <__alt_mem_sram+0xf7e0e79c>
    eb28:	ad4b883a 	add	r5,r21,r21
    eb2c:	2d6b803a 	cmpltu	r21,r5,r21
    eb30:	ac2b883a 	add	r21,r21,r16
    eb34:	1d47883a 	add	r3,r3,r21
    eb38:	993fff84 	addi	r4,r19,-2
    eb3c:	282b883a 	mov	r21,r5
    eb40:	003fc806 	br	ea64 <__alt_mem_sram+0xf7e0ea64>
    eb44:	103fc41e 	bne	r2,zero,ea58 <__alt_mem_sram+0xf7e0ea58>
    eb48:	002b883a 	mov	r21,zero
    eb4c:	a8bf5e1e 	bne	r21,r2,e8c8 <__alt_mem_sram+0xf7e0e8c8>
    eb50:	003f5e06 	br	e8cc <__alt_mem_sram+0xf7e0e8cc>
    eb54:	00bef884 	movi	r2,-1054
    eb58:	1505c83a 	sub	r2,r2,r20
    eb5c:	00c00804 	movi	r3,32
    eb60:	8884d83a 	srl	r2,r17,r2
    eb64:	80c01c26 	beq	r16,r3,ebd8 <__divdf3+0x8ac>
    eb68:	a0c10f84 	addi	r3,r20,1086
    eb6c:	88c6983a 	sll	r3,r17,r3
    eb70:	1cc6b03a 	or	r3,r3,r19
    eb74:	1806c03a 	cmpne	r3,r3,zero
    eb78:	1884b03a 	or	r2,r3,r2
    eb7c:	140001cc 	andi	r16,r2,7
    eb80:	8000061e 	bne	r16,zero,eb9c <__divdf3+0x870>
    eb84:	000b883a 	mov	r5,zero
    eb88:	1004d0fa 	srli	r2,r2,3
    eb8c:	9180004c 	andi	r6,r18,1
    eb90:	0009883a 	mov	r4,zero
    eb94:	1426b03a 	or	r19,r2,r16
    eb98:	003e4206 	br	e4a4 <__alt_mem_sram+0xf7e0e4a4>
    eb9c:	110003cc 	andi	r4,r2,15
    eba0:	00c00104 	movi	r3,4
    eba4:	0021883a 	mov	r16,zero
    eba8:	20ffcd1e 	bne	r4,r3,eae0 <__alt_mem_sram+0xf7e0eae0>
    ebac:	800a927a 	slli	r5,r16,9
    ebb0:	8020977a 	slli	r16,r16,29
    ebb4:	280ad33a 	srli	r5,r5,12
    ebb8:	003ff306 	br	eb88 <__alt_mem_sram+0xf7e0eb88>
    ebbc:	317fd336 	bltu	r6,r5,eb0c <__alt_mem_sram+0xf7e0eb0c>
    ebc0:	1023883a 	mov	r17,r2
    ebc4:	003fa206 	br	ea50 <__alt_mem_sram+0xf7e0ea50>
    ebc8:	a8bfd736 	bltu	r21,r2,eb28 <__alt_mem_sram+0xf7e0eb28>
    ebcc:	2027883a 	mov	r19,r4
    ebd0:	a8bf3d1e 	bne	r21,r2,e8c8 <__alt_mem_sram+0xf7e0e8c8>
    ebd4:	003f3d06 	br	e8cc <__alt_mem_sram+0xf7e0e8cc>
    ebd8:	0007883a 	mov	r3,zero
    ebdc:	003fe406 	br	eb70 <__alt_mem_sram+0xf7e0eb70>
    ebe0:	00800434 	movhi	r2,16
    ebe4:	89400234 	orhi	r5,r17,8
    ebe8:	10bfffc4 	addi	r2,r2,-1
    ebec:	e00d883a 	mov	r6,fp
    ebf0:	288a703a 	and	r5,r5,r2
    ebf4:	003e8506 	br	e60c <__alt_mem_sram+0xf7e0e60c>

0000ebf8 <__eqdf2>:
    ebf8:	2804d53a 	srli	r2,r5,20
    ebfc:	3806d53a 	srli	r3,r7,20
    ec00:	02000434 	movhi	r8,16
    ec04:	423fffc4 	addi	r8,r8,-1
    ec08:	1081ffcc 	andi	r2,r2,2047
    ec0c:	0241ffc4 	movi	r9,2047
    ec10:	2a14703a 	and	r10,r5,r8
    ec14:	18c1ffcc 	andi	r3,r3,2047
    ec18:	3a10703a 	and	r8,r7,r8
    ec1c:	280ad7fa 	srli	r5,r5,31
    ec20:	380ed7fa 	srli	r7,r7,31
    ec24:	12400f26 	beq	r2,r9,ec64 <__eqdf2+0x6c>
    ec28:	0241ffc4 	movi	r9,2047
    ec2c:	1a400326 	beq	r3,r9,ec3c <__eqdf2+0x44>
    ec30:	10c00526 	beq	r2,r3,ec48 <__eqdf2+0x50>
    ec34:	00800044 	movi	r2,1
    ec38:	f800283a 	ret
    ec3c:	4192b03a 	or	r9,r8,r6
    ec40:	483ffc1e 	bne	r9,zero,ec34 <__alt_mem_sram+0xf7e0ec34>
    ec44:	10fffb1e 	bne	r2,r3,ec34 <__alt_mem_sram+0xf7e0ec34>
    ec48:	523ffa1e 	bne	r10,r8,ec34 <__alt_mem_sram+0xf7e0ec34>
    ec4c:	21bff91e 	bne	r4,r6,ec34 <__alt_mem_sram+0xf7e0ec34>
    ec50:	29c00826 	beq	r5,r7,ec74 <__eqdf2+0x7c>
    ec54:	103ff71e 	bne	r2,zero,ec34 <__alt_mem_sram+0xf7e0ec34>
    ec58:	5104b03a 	or	r2,r10,r4
    ec5c:	1004c03a 	cmpne	r2,r2,zero
    ec60:	f800283a 	ret
    ec64:	5112b03a 	or	r9,r10,r4
    ec68:	483fef26 	beq	r9,zero,ec28 <__alt_mem_sram+0xf7e0ec28>
    ec6c:	00800044 	movi	r2,1
    ec70:	f800283a 	ret
    ec74:	0005883a 	mov	r2,zero
    ec78:	f800283a 	ret

0000ec7c <__gedf2>:
    ec7c:	2804d53a 	srli	r2,r5,20
    ec80:	3806d53a 	srli	r3,r7,20
    ec84:	02000434 	movhi	r8,16
    ec88:	423fffc4 	addi	r8,r8,-1
    ec8c:	0241ffc4 	movi	r9,2047
    ec90:	1081ffcc 	andi	r2,r2,2047
    ec94:	2a14703a 	and	r10,r5,r8
    ec98:	1a46703a 	and	r3,r3,r9
    ec9c:	3a10703a 	and	r8,r7,r8
    eca0:	280ad7fa 	srli	r5,r5,31
    eca4:	380ed7fa 	srli	r7,r7,31
    eca8:	12400b26 	beq	r2,r9,ecd8 <__gedf2+0x5c>
    ecac:	1a401626 	beq	r3,r9,ed08 <__gedf2+0x8c>
    ecb0:	10000c1e 	bne	r2,zero,ece4 <__gedf2+0x68>
    ecb4:	5112b03a 	or	r9,r10,r4
    ecb8:	4813003a 	cmpeq	r9,r9,zero
    ecbc:	4817883a 	mov	r11,r9
    ecc0:	18000c1e 	bne	r3,zero,ecf4 <__gedf2+0x78>
    ecc4:	4198b03a 	or	r12,r8,r6
    ecc8:	60000a1e 	bne	r12,zero,ecf4 <__gedf2+0x78>
    eccc:	48001326 	beq	r9,zero,ed1c <__gedf2+0xa0>
    ecd0:	0005883a 	mov	r2,zero
    ecd4:	f800283a 	ret
    ecd8:	5112b03a 	or	r9,r10,r4
    ecdc:	4800191e 	bne	r9,zero,ed44 <__gedf2+0xc8>
    ece0:	18800926 	beq	r3,r2,ed08 <__gedf2+0x8c>
    ece4:	18000b1e 	bne	r3,zero,ed14 <__gedf2+0x98>
    ece8:	4192b03a 	or	r9,r8,r6
    ecec:	0017883a 	mov	r11,zero
    ecf0:	48000a26 	beq	r9,zero,ed1c <__gedf2+0xa0>
    ecf4:	39c03fcc 	andi	r7,r7,255
    ecf8:	58000726 	beq	r11,zero,ed18 <__gedf2+0x9c>
    ecfc:	3800081e 	bne	r7,zero,ed20 <__gedf2+0xa4>
    ed00:	00bfffc4 	movi	r2,-1
    ed04:	f800283a 	ret
    ed08:	4192b03a 	or	r9,r8,r6
    ed0c:	48000d1e 	bne	r9,zero,ed44 <__gedf2+0xc8>
    ed10:	103fe826 	beq	r2,zero,ecb4 <__alt_mem_sram+0xf7e0ecb4>
    ed14:	39c03fcc 	andi	r7,r7,255
    ed18:	29c00326 	beq	r5,r7,ed28 <__gedf2+0xac>
    ed1c:	283ff81e 	bne	r5,zero,ed00 <__alt_mem_sram+0xf7e0ed00>
    ed20:	00800044 	movi	r2,1
    ed24:	f800283a 	ret
    ed28:	18bffc16 	blt	r3,r2,ed1c <__alt_mem_sram+0xf7e0ed1c>
    ed2c:	10c00316 	blt	r2,r3,ed3c <__gedf2+0xc0>
    ed30:	42bffa36 	bltu	r8,r10,ed1c <__alt_mem_sram+0xf7e0ed1c>
    ed34:	52000526 	beq	r10,r8,ed4c <__gedf2+0xd0>
    ed38:	523fe52e 	bgeu	r10,r8,ecd0 <__alt_mem_sram+0xf7e0ecd0>
    ed3c:	283ff026 	beq	r5,zero,ed00 <__alt_mem_sram+0xf7e0ed00>
    ed40:	003ff706 	br	ed20 <__alt_mem_sram+0xf7e0ed20>
    ed44:	00bfff84 	movi	r2,-2
    ed48:	f800283a 	ret
    ed4c:	313ff336 	bltu	r6,r4,ed1c <__alt_mem_sram+0xf7e0ed1c>
    ed50:	21bfdf2e 	bgeu	r4,r6,ecd0 <__alt_mem_sram+0xf7e0ecd0>
    ed54:	283fea26 	beq	r5,zero,ed00 <__alt_mem_sram+0xf7e0ed00>
    ed58:	003ff106 	br	ed20 <__alt_mem_sram+0xf7e0ed20>

0000ed5c <__ledf2>:
    ed5c:	2804d53a 	srli	r2,r5,20
    ed60:	3810d53a 	srli	r8,r7,20
    ed64:	00c00434 	movhi	r3,16
    ed68:	18ffffc4 	addi	r3,r3,-1
    ed6c:	0241ffc4 	movi	r9,2047
    ed70:	1081ffcc 	andi	r2,r2,2047
    ed74:	28d4703a 	and	r10,r5,r3
    ed78:	4250703a 	and	r8,r8,r9
    ed7c:	38c6703a 	and	r3,r7,r3
    ed80:	280ad7fa 	srli	r5,r5,31
    ed84:	380ed7fa 	srli	r7,r7,31
    ed88:	12400b26 	beq	r2,r9,edb8 <__ledf2+0x5c>
    ed8c:	42401926 	beq	r8,r9,edf4 <__ledf2+0x98>
    ed90:	10000c1e 	bne	r2,zero,edc4 <__ledf2+0x68>
    ed94:	5112b03a 	or	r9,r10,r4
    ed98:	4813003a 	cmpeq	r9,r9,zero
    ed9c:	4817883a 	mov	r11,r9
    eda0:	40000f26 	beq	r8,zero,ede0 <__ledf2+0x84>
    eda4:	39c03fcc 	andi	r7,r7,255
    eda8:	58001826 	beq	r11,zero,ee0c <__ledf2+0xb0>
    edac:	38000a1e 	bne	r7,zero,edd8 <__ledf2+0x7c>
    edb0:	00bfffc4 	movi	r2,-1
    edb4:	f800283a 	ret
    edb8:	5112b03a 	or	r9,r10,r4
    edbc:	48000f1e 	bne	r9,zero,edfc <__ledf2+0xa0>
    edc0:	40800c26 	beq	r8,r2,edf4 <__ledf2+0x98>
    edc4:	4000101e 	bne	r8,zero,ee08 <__ledf2+0xac>
    edc8:	1992b03a 	or	r9,r3,r6
    edcc:	0017883a 	mov	r11,zero
    edd0:	483ff41e 	bne	r9,zero,eda4 <__alt_mem_sram+0xf7e0eda4>
    edd4:	283ff61e 	bne	r5,zero,edb0 <__alt_mem_sram+0xf7e0edb0>
    edd8:	00800044 	movi	r2,1
    eddc:	f800283a 	ret
    ede0:	1998b03a 	or	r12,r3,r6
    ede4:	603fef1e 	bne	r12,zero,eda4 <__alt_mem_sram+0xf7e0eda4>
    ede8:	483ffa26 	beq	r9,zero,edd4 <__alt_mem_sram+0xf7e0edd4>
    edec:	0005883a 	mov	r2,zero
    edf0:	f800283a 	ret
    edf4:	1992b03a 	or	r9,r3,r6
    edf8:	48000226 	beq	r9,zero,ee04 <__ledf2+0xa8>
    edfc:	00800084 	movi	r2,2
    ee00:	f800283a 	ret
    ee04:	103fe326 	beq	r2,zero,ed94 <__alt_mem_sram+0xf7e0ed94>
    ee08:	39c03fcc 	andi	r7,r7,255
    ee0c:	29fff11e 	bne	r5,r7,edd4 <__alt_mem_sram+0xf7e0edd4>
    ee10:	40bff016 	blt	r8,r2,edd4 <__alt_mem_sram+0xf7e0edd4>
    ee14:	12000316 	blt	r2,r8,ee24 <__ledf2+0xc8>
    ee18:	1abfee36 	bltu	r3,r10,edd4 <__alt_mem_sram+0xf7e0edd4>
    ee1c:	50c00326 	beq	r10,r3,ee2c <__ledf2+0xd0>
    ee20:	50fff22e 	bgeu	r10,r3,edec <__alt_mem_sram+0xf7e0edec>
    ee24:	283fe226 	beq	r5,zero,edb0 <__alt_mem_sram+0xf7e0edb0>
    ee28:	003feb06 	br	edd8 <__alt_mem_sram+0xf7e0edd8>
    ee2c:	313fe936 	bltu	r6,r4,edd4 <__alt_mem_sram+0xf7e0edd4>
    ee30:	21bfee2e 	bgeu	r4,r6,edec <__alt_mem_sram+0xf7e0edec>
    ee34:	283fde26 	beq	r5,zero,edb0 <__alt_mem_sram+0xf7e0edb0>
    ee38:	003fe706 	br	edd8 <__alt_mem_sram+0xf7e0edd8>

0000ee3c <__muldf3>:
    ee3c:	defff204 	addi	sp,sp,-56
    ee40:	2804d53a 	srli	r2,r5,20
    ee44:	dd800a15 	stw	r22,40(sp)
    ee48:	282cd7fa 	srli	r22,r5,31
    ee4c:	dc000415 	stw	r16,16(sp)
    ee50:	04000434 	movhi	r16,16
    ee54:	df000c15 	stw	fp,48(sp)
    ee58:	dd000815 	stw	r20,32(sp)
    ee5c:	dcc00715 	stw	r19,28(sp)
    ee60:	dc800615 	stw	r18,24(sp)
    ee64:	dc400515 	stw	r17,20(sp)
    ee68:	843fffc4 	addi	r16,r16,-1
    ee6c:	dfc00d15 	stw	ra,52(sp)
    ee70:	ddc00b15 	stw	r23,44(sp)
    ee74:	dd400915 	stw	r21,36(sp)
    ee78:	1501ffcc 	andi	r20,r2,2047
    ee7c:	2023883a 	mov	r17,r4
    ee80:	2025883a 	mov	r18,r4
    ee84:	2c20703a 	and	r16,r5,r16
    ee88:	b027883a 	mov	r19,r22
    ee8c:	b7003fcc 	andi	fp,r22,255
    ee90:	a0005926 	beq	r20,zero,eff8 <__muldf3+0x1bc>
    ee94:	0081ffc4 	movi	r2,2047
    ee98:	a0803426 	beq	r20,r2,ef6c <__muldf3+0x130>
    ee9c:	84000434 	orhi	r16,r16,16
    eea0:	2004d77a 	srli	r2,r4,29
    eea4:	802090fa 	slli	r16,r16,3
    eea8:	202490fa 	slli	r18,r4,3
    eeac:	a53f0044 	addi	r20,r20,-1023
    eeb0:	80a0b03a 	or	r16,r16,r2
    eeb4:	002b883a 	mov	r21,zero
    eeb8:	0015883a 	mov	r10,zero
    eebc:	3812d53a 	srli	r9,r7,20
    eec0:	3806d7fa 	srli	r3,r7,31
    eec4:	02000434 	movhi	r8,16
    eec8:	423fffc4 	addi	r8,r8,-1
    eecc:	4941ffcc 	andi	r5,r9,2047
    eed0:	302f883a 	mov	r23,r6
    eed4:	3a22703a 	and	r17,r7,r8
    eed8:	1ac03fcc 	andi	r11,r3,255
    eedc:	28006226 	beq	r5,zero,f068 <__muldf3+0x22c>
    eee0:	0081ffc4 	movi	r2,2047
    eee4:	28805a26 	beq	r5,r2,f050 <__muldf3+0x214>
    eee8:	8a000434 	orhi	r8,r17,16
    eeec:	3004d77a 	srli	r2,r6,29
    eef0:	401090fa 	slli	r8,r8,3
    eef4:	302e90fa 	slli	r23,r6,3
    eef8:	297f0044 	addi	r5,r5,-1023
    eefc:	40a2b03a 	or	r17,r8,r2
    ef00:	0013883a 	mov	r9,zero
    ef04:	4d4cb03a 	or	r6,r9,r21
    ef08:	300c90ba 	slli	r6,r6,2
    ef0c:	02000074 	movhi	r8,1
    ef10:	423bcb04 	addi	r8,r8,-4308
    ef14:	320d883a 	add	r6,r6,r8
    ef18:	31800017 	ldw	r6,0(r6)
    ef1c:	a14b883a 	add	r5,r20,r5
    ef20:	1dacf03a 	xor	r22,r3,r22
    ef24:	2b000044 	addi	r12,r5,1
    ef28:	3000683a 	jmp	r6
    ef2c:	0000f168 	cmpgeui	zero,zero,965
    ef30:	0000f154 	movui	zero,965
    ef34:	0000f154 	movui	zero,965
    ef38:	0000f140 	call	f14 <main+0xcb8>
    ef3c:	0000ef88 	cmpgei	zero,zero,958
    ef40:	0000ef88 	cmpgei	zero,zero,958
    ef44:	0000f128 	cmpgeui	zero,zero,964
    ef48:	0000f140 	call	f14 <main+0xcb8>
    ef4c:	0000ef88 	cmpgei	zero,zero,958
    ef50:	0000f128 	cmpgeui	zero,zero,964
    ef54:	0000ef88 	cmpgei	zero,zero,958
    ef58:	0000f140 	call	f14 <main+0xcb8>
    ef5c:	0000ef8c 	andi	zero,zero,958
    ef60:	0000ef8c 	andi	zero,zero,958
    ef64:	0000ef8c 	andi	zero,zero,958
    ef68:	0000f364 	muli	zero,zero,973
    ef6c:	8104b03a 	or	r2,r16,r4
    ef70:	10006a1e 	bne	r2,zero,f11c <__muldf3+0x2e0>
    ef74:	05400204 	movi	r21,8
    ef78:	0021883a 	mov	r16,zero
    ef7c:	0025883a 	mov	r18,zero
    ef80:	02800084 	movi	r10,2
    ef84:	003fcd06 	br	eebc <__alt_mem_sram+0xf7e0eebc>
    ef88:	b039883a 	mov	fp,r22
    ef8c:	00800084 	movi	r2,2
    ef90:	50804e1e 	bne	r10,r2,f0cc <__muldf3+0x290>
    ef94:	e4c0004c 	andi	r19,fp,1
    ef98:	0101ffc4 	movi	r4,2047
    ef9c:	0021883a 	mov	r16,zero
    efa0:	0025883a 	mov	r18,zero
    efa4:	2008953a 	slli	r4,r4,20
    efa8:	98c03fcc 	andi	r3,r19,255
    efac:	01400434 	movhi	r5,16
    efb0:	297fffc4 	addi	r5,r5,-1
    efb4:	180697fa 	slli	r3,r3,31
    efb8:	8160703a 	and	r16,r16,r5
    efbc:	8120b03a 	or	r16,r16,r4
    efc0:	80c6b03a 	or	r3,r16,r3
    efc4:	9005883a 	mov	r2,r18
    efc8:	dfc00d17 	ldw	ra,52(sp)
    efcc:	df000c17 	ldw	fp,48(sp)
    efd0:	ddc00b17 	ldw	r23,44(sp)
    efd4:	dd800a17 	ldw	r22,40(sp)
    efd8:	dd400917 	ldw	r21,36(sp)
    efdc:	dd000817 	ldw	r20,32(sp)
    efe0:	dcc00717 	ldw	r19,28(sp)
    efe4:	dc800617 	ldw	r18,24(sp)
    efe8:	dc400517 	ldw	r17,20(sp)
    efec:	dc000417 	ldw	r16,16(sp)
    eff0:	dec00e04 	addi	sp,sp,56
    eff4:	f800283a 	ret
    eff8:	8104b03a 	or	r2,r16,r4
    effc:	10004226 	beq	r2,zero,f108 <__muldf3+0x2cc>
    f000:	8000f926 	beq	r16,zero,f3e8 <__muldf3+0x5ac>
    f004:	8009883a 	mov	r4,r16
    f008:	d9800315 	stw	r6,12(sp)
    f00c:	d9c00015 	stw	r7,0(sp)
    f010:	001002c0 	call	1002c <__clzsi2>
    f014:	d9800317 	ldw	r6,12(sp)
    f018:	d9c00017 	ldw	r7,0(sp)
    f01c:	1007883a 	mov	r3,r2
    f020:	01000a04 	movi	r4,40
    f024:	18bffe04 	addi	r2,r3,-8
    f028:	20c9c83a 	sub	r4,r4,r3
    f02c:	80a0983a 	sll	r16,r16,r2
    f030:	8908d83a 	srl	r4,r17,r4
    f034:	88a4983a 	sll	r18,r17,r2
    f038:	2420b03a 	or	r16,r4,r16
    f03c:	017f0344 	movi	r5,-1011
    f040:	28e9c83a 	sub	r20,r5,r3
    f044:	002b883a 	mov	r21,zero
    f048:	0015883a 	mov	r10,zero
    f04c:	003f9b06 	br	eebc <__alt_mem_sram+0xf7e0eebc>
    f050:	8984b03a 	or	r2,r17,r6
    f054:	10002a1e 	bne	r2,zero,f100 <__muldf3+0x2c4>
    f058:	0023883a 	mov	r17,zero
    f05c:	002f883a 	mov	r23,zero
    f060:	02400084 	movi	r9,2
    f064:	003fa706 	br	ef04 <__alt_mem_sram+0xf7e0ef04>
    f068:	8984b03a 	or	r2,r17,r6
    f06c:	10002026 	beq	r2,zero,f0f0 <__muldf3+0x2b4>
    f070:	8800cc26 	beq	r17,zero,f3a4 <__muldf3+0x568>
    f074:	8809883a 	mov	r4,r17
    f078:	d8c00215 	stw	r3,8(sp)
    f07c:	d9800315 	stw	r6,12(sp)
    f080:	da800015 	stw	r10,0(sp)
    f084:	dac00115 	stw	r11,4(sp)
    f088:	001002c0 	call	1002c <__clzsi2>
    f08c:	d8c00217 	ldw	r3,8(sp)
    f090:	d9800317 	ldw	r6,12(sp)
    f094:	da800017 	ldw	r10,0(sp)
    f098:	dac00117 	ldw	r11,4(sp)
    f09c:	1009883a 	mov	r4,r2
    f0a0:	01400a04 	movi	r5,40
    f0a4:	25fffe04 	addi	r23,r4,-8
    f0a8:	290bc83a 	sub	r5,r5,r4
    f0ac:	8dd0983a 	sll	r8,r17,r23
    f0b0:	314ad83a 	srl	r5,r6,r5
    f0b4:	35ee983a 	sll	r23,r6,r23
    f0b8:	2a22b03a 	or	r17,r5,r8
    f0bc:	017f0344 	movi	r5,-1011
    f0c0:	290bc83a 	sub	r5,r5,r4
    f0c4:	0013883a 	mov	r9,zero
    f0c8:	003f8e06 	br	ef04 <__alt_mem_sram+0xf7e0ef04>
    f0cc:	008000c4 	movi	r2,3
    f0d0:	50811d26 	beq	r10,r2,f548 <__muldf3+0x70c>
    f0d4:	00800044 	movi	r2,1
    f0d8:	5080e01e 	bne	r10,r2,f45c <__muldf3+0x620>
    f0dc:	e0a6703a 	and	r19,fp,r2
    f0e0:	0009883a 	mov	r4,zero
    f0e4:	0021883a 	mov	r16,zero
    f0e8:	0025883a 	mov	r18,zero
    f0ec:	003fad06 	br	efa4 <__alt_mem_sram+0xf7e0efa4>
    f0f0:	0023883a 	mov	r17,zero
    f0f4:	002f883a 	mov	r23,zero
    f0f8:	02400044 	movi	r9,1
    f0fc:	003f8106 	br	ef04 <__alt_mem_sram+0xf7e0ef04>
    f100:	024000c4 	movi	r9,3
    f104:	003f7f06 	br	ef04 <__alt_mem_sram+0xf7e0ef04>
    f108:	05400104 	movi	r21,4
    f10c:	0021883a 	mov	r16,zero
    f110:	0025883a 	mov	r18,zero
    f114:	02800044 	movi	r10,1
    f118:	003f6806 	br	eebc <__alt_mem_sram+0xf7e0eebc>
    f11c:	05400304 	movi	r21,12
    f120:	028000c4 	movi	r10,3
    f124:	003f6506 	br	eebc <__alt_mem_sram+0xf7e0eebc>
    f128:	04000434 	movhi	r16,16
    f12c:	0027883a 	mov	r19,zero
    f130:	843fffc4 	addi	r16,r16,-1
    f134:	04bfffc4 	movi	r18,-1
    f138:	0101ffc4 	movi	r4,2047
    f13c:	003f9906 	br	efa4 <__alt_mem_sram+0xf7e0efa4>
    f140:	8821883a 	mov	r16,r17
    f144:	b825883a 	mov	r18,r23
    f148:	5839883a 	mov	fp,r11
    f14c:	4815883a 	mov	r10,r9
    f150:	003f8e06 	br	ef8c <__alt_mem_sram+0xf7e0ef8c>
    f154:	8821883a 	mov	r16,r17
    f158:	b825883a 	mov	r18,r23
    f15c:	b039883a 	mov	fp,r22
    f160:	4815883a 	mov	r10,r9
    f164:	003f8906 	br	ef8c <__alt_mem_sram+0xf7e0ef8c>
    f168:	b80cd43a 	srli	r6,r23,16
    f16c:	9006d43a 	srli	r3,r18,16
    f170:	90bfffcc 	andi	r2,r18,65535
    f174:	bdffffcc 	andi	r23,r23,65535
    f178:	b891383a 	mul	r8,r23,r2
    f17c:	b8c9383a 	mul	r4,r23,r3
    f180:	309b383a 	mul	r13,r6,r2
    f184:	400ed43a 	srli	r7,r8,16
    f188:	30df383a 	mul	r15,r6,r3
    f18c:	235b883a 	add	r13,r4,r13
    f190:	69db883a 	add	r13,r13,r7
    f194:	6900022e 	bgeu	r13,r4,f1a0 <__muldf3+0x364>
    f198:	01000074 	movhi	r4,1
    f19c:	791f883a 	add	r15,r15,r4
    f1a0:	8828d43a 	srli	r20,r17,16
    f1a4:	8c7fffcc 	andi	r17,r17,65535
    f1a8:	888f383a 	mul	r7,r17,r2
    f1ac:	88d3383a 	mul	r9,r17,r3
    f1b0:	a0a5383a 	mul	r18,r20,r2
    f1b4:	3816d43a 	srli	r11,r7,16
    f1b8:	6814943a 	slli	r10,r13,16
    f1bc:	4ca5883a 	add	r18,r9,r18
    f1c0:	423fffcc 	andi	r8,r8,65535
    f1c4:	92e5883a 	add	r18,r18,r11
    f1c8:	6808d43a 	srli	r4,r13,16
    f1cc:	5215883a 	add	r10,r10,r8
    f1d0:	a0c7383a 	mul	r3,r20,r3
    f1d4:	9240022e 	bgeu	r18,r9,f1e0 <__muldf3+0x3a4>
    f1d8:	00800074 	movhi	r2,1
    f1dc:	1887883a 	add	r3,r3,r2
    f1e0:	802ad43a 	srli	r21,r16,16
    f1e4:	80bfffcc 	andi	r2,r16,65535
    f1e8:	b893383a 	mul	r9,r23,r2
    f1ec:	3091383a 	mul	r8,r6,r2
    f1f0:	bd6f383a 	mul	r23,r23,r21
    f1f4:	9026943a 	slli	r19,r18,16
    f1f8:	481ad43a 	srli	r13,r9,16
    f1fc:	9024d43a 	srli	r18,r18,16
    f200:	39ffffcc 	andi	r7,r7,65535
    f204:	ba11883a 	add	r8,r23,r8
    f208:	99e7883a 	add	r19,r19,r7
    f20c:	4351883a 	add	r8,r8,r13
    f210:	1c97883a 	add	r11,r3,r18
    f214:	354d383a 	mul	r6,r6,r21
    f218:	9925883a 	add	r18,r19,r4
    f21c:	45c0022e 	bgeu	r8,r23,f228 <__muldf3+0x3ec>
    f220:	00c00074 	movhi	r3,1
    f224:	30cd883a 	add	r6,r6,r3
    f228:	8889383a 	mul	r4,r17,r2
    f22c:	8d63383a 	mul	r17,r17,r21
    f230:	a085383a 	mul	r2,r20,r2
    f234:	200ed43a 	srli	r7,r4,16
    f238:	401cd43a 	srli	r14,r8,16
    f23c:	401a943a 	slli	r13,r8,16
    f240:	8885883a 	add	r2,r17,r2
    f244:	4a3fffcc 	andi	r8,r9,65535
    f248:	11c5883a 	add	r2,r2,r7
    f24c:	339d883a 	add	r14,r6,r14
    f250:	6a11883a 	add	r8,r13,r8
    f254:	a561383a 	mul	r16,r20,r21
    f258:	1440022e 	bgeu	r2,r17,f264 <__muldf3+0x428>
    f25c:	00c00074 	movhi	r3,1
    f260:	80e1883a 	add	r16,r16,r3
    f264:	1006943a 	slli	r3,r2,16
    f268:	213fffcc 	andi	r4,r4,65535
    f26c:	93db883a 	add	r13,r18,r15
    f270:	1909883a 	add	r4,r3,r4
    f274:	22c7883a 	add	r3,r4,r11
    f278:	6cd3803a 	cmpltu	r9,r13,r19
    f27c:	6a09883a 	add	r4,r13,r8
    f280:	1a5b883a 	add	r13,r3,r9
    f284:	2211803a 	cmpltu	r8,r4,r8
    f288:	734d883a 	add	r6,r14,r13
    f28c:	100ed43a 	srli	r7,r2,16
    f290:	6a53803a 	cmpltu	r9,r13,r9
    f294:	3205883a 	add	r2,r6,r8
    f298:	1ac7803a 	cmpltu	r3,r3,r11
    f29c:	1211803a 	cmpltu	r8,r2,r8
    f2a0:	48c6b03a 	or	r3,r9,r3
    f2a4:	338d803a 	cmpltu	r6,r6,r14
    f2a8:	19c7883a 	add	r3,r3,r7
    f2ac:	418cb03a 	or	r6,r8,r6
    f2b0:	1987883a 	add	r3,r3,r6
    f2b4:	2024927a 	slli	r18,r4,9
    f2b8:	1c07883a 	add	r3,r3,r16
    f2bc:	1806927a 	slli	r3,r3,9
    f2c0:	1020d5fa 	srli	r16,r2,23
    f2c4:	2008d5fa 	srli	r4,r4,23
    f2c8:	9294b03a 	or	r10,r18,r10
    f2cc:	1004927a 	slli	r2,r2,9
    f2d0:	5024c03a 	cmpne	r18,r10,zero
    f2d4:	1c20b03a 	or	r16,r3,r16
    f2d8:	9108b03a 	or	r4,r18,r4
    f2dc:	80c0402c 	andhi	r3,r16,256
    f2e0:	20a4b03a 	or	r18,r4,r2
    f2e4:	18000726 	beq	r3,zero,f304 <__muldf3+0x4c8>
    f2e8:	9006d07a 	srli	r3,r18,1
    f2ec:	800897fa 	slli	r4,r16,31
    f2f0:	9080004c 	andi	r2,r18,1
    f2f4:	8020d07a 	srli	r16,r16,1
    f2f8:	10c4b03a 	or	r2,r2,r3
    f2fc:	1124b03a 	or	r18,r2,r4
    f300:	600b883a 	mov	r5,r12
    f304:	2900ffc4 	addi	r4,r5,1023
    f308:	01004b0e 	bge	zero,r4,f438 <__muldf3+0x5fc>
    f30c:	908001cc 	andi	r2,r18,7
    f310:	10000726 	beq	r2,zero,f330 <__muldf3+0x4f4>
    f314:	90c003cc 	andi	r3,r18,15
    f318:	00800104 	movi	r2,4
    f31c:	18800426 	beq	r3,r2,f330 <__muldf3+0x4f4>
    f320:	9087883a 	add	r3,r18,r2
    f324:	1c85803a 	cmpltu	r2,r3,r18
    f328:	80a1883a 	add	r16,r16,r2
    f32c:	1825883a 	mov	r18,r3
    f330:	8080402c 	andhi	r2,r16,256
    f334:	10000426 	beq	r2,zero,f348 <__muldf3+0x50c>
    f338:	00bfc034 	movhi	r2,65280
    f33c:	10bfffc4 	addi	r2,r2,-1
    f340:	29010004 	addi	r4,r5,1024
    f344:	80a0703a 	and	r16,r16,r2
    f348:	0081ff84 	movi	r2,2046
    f34c:	1100320e 	bge	r2,r4,f418 <__muldf3+0x5dc>
    f350:	b4c0004c 	andi	r19,r22,1
    f354:	0101ffc4 	movi	r4,2047
    f358:	0021883a 	mov	r16,zero
    f35c:	0025883a 	mov	r18,zero
    f360:	003f1006 	br	efa4 <__alt_mem_sram+0xf7e0efa4>
    f364:	8080022c 	andhi	r2,r16,8
    f368:	10000926 	beq	r2,zero,f390 <__muldf3+0x554>
    f36c:	8880022c 	andhi	r2,r17,8
    f370:	1000071e 	bne	r2,zero,f390 <__muldf3+0x554>
    f374:	00800434 	movhi	r2,16
    f378:	8c000234 	orhi	r16,r17,8
    f37c:	10bfffc4 	addi	r2,r2,-1
    f380:	1827883a 	mov	r19,r3
    f384:	80a0703a 	and	r16,r16,r2
    f388:	b825883a 	mov	r18,r23
    f38c:	003f6a06 	br	f138 <__alt_mem_sram+0xf7e0f138>
    f390:	00800434 	movhi	r2,16
    f394:	84000234 	orhi	r16,r16,8
    f398:	10bfffc4 	addi	r2,r2,-1
    f39c:	80a0703a 	and	r16,r16,r2
    f3a0:	003f6506 	br	f138 <__alt_mem_sram+0xf7e0f138>
    f3a4:	3009883a 	mov	r4,r6
    f3a8:	d8c00215 	stw	r3,8(sp)
    f3ac:	d9800315 	stw	r6,12(sp)
    f3b0:	da800015 	stw	r10,0(sp)
    f3b4:	dac00115 	stw	r11,4(sp)
    f3b8:	001002c0 	call	1002c <__clzsi2>
    f3bc:	11000804 	addi	r4,r2,32
    f3c0:	014009c4 	movi	r5,39
    f3c4:	d8c00217 	ldw	r3,8(sp)
    f3c8:	d9800317 	ldw	r6,12(sp)
    f3cc:	da800017 	ldw	r10,0(sp)
    f3d0:	dac00117 	ldw	r11,4(sp)
    f3d4:	293f320e 	bge	r5,r4,f0a0 <__alt_mem_sram+0xf7e0f0a0>
    f3d8:	10bffe04 	addi	r2,r2,-8
    f3dc:	b8a2983a 	sll	r17,r23,r2
    f3e0:	002f883a 	mov	r23,zero
    f3e4:	003f3506 	br	f0bc <__alt_mem_sram+0xf7e0f0bc>
    f3e8:	d9800315 	stw	r6,12(sp)
    f3ec:	d9c00015 	stw	r7,0(sp)
    f3f0:	001002c0 	call	1002c <__clzsi2>
    f3f4:	10c00804 	addi	r3,r2,32
    f3f8:	010009c4 	movi	r4,39
    f3fc:	d9800317 	ldw	r6,12(sp)
    f400:	d9c00017 	ldw	r7,0(sp)
    f404:	20ff060e 	bge	r4,r3,f020 <__alt_mem_sram+0xf7e0f020>
    f408:	10bffe04 	addi	r2,r2,-8
    f40c:	88a0983a 	sll	r16,r17,r2
    f410:	0025883a 	mov	r18,zero
    f414:	003f0906 	br	f03c <__alt_mem_sram+0xf7e0f03c>
    f418:	9004d0fa 	srli	r2,r18,3
    f41c:	8024977a 	slli	r18,r16,29
    f420:	8020927a 	slli	r16,r16,9
    f424:	2101ffcc 	andi	r4,r4,2047
    f428:	90a4b03a 	or	r18,r18,r2
    f42c:	8020d33a 	srli	r16,r16,12
    f430:	b4c0004c 	andi	r19,r22,1
    f434:	003edb06 	br	efa4 <__alt_mem_sram+0xf7e0efa4>
    f438:	00ff0084 	movi	r3,-1022
    f43c:	1947c83a 	sub	r3,r3,r5
    f440:	00800e04 	movi	r2,56
    f444:	10c0080e 	bge	r2,r3,f468 <__muldf3+0x62c>
    f448:	b4c0004c 	andi	r19,r22,1
    f44c:	0009883a 	mov	r4,zero
    f450:	0021883a 	mov	r16,zero
    f454:	0025883a 	mov	r18,zero
    f458:	003ed206 	br	efa4 <__alt_mem_sram+0xf7e0efa4>
    f45c:	600b883a 	mov	r5,r12
    f460:	e02d883a 	mov	r22,fp
    f464:	003fa706 	br	f304 <__alt_mem_sram+0xf7e0f304>
    f468:	008007c4 	movi	r2,31
    f46c:	10c01816 	blt	r2,r3,f4d0 <__muldf3+0x694>
    f470:	29410784 	addi	r5,r5,1054
    f474:	8144983a 	sll	r2,r16,r5
    f478:	90c8d83a 	srl	r4,r18,r3
    f47c:	914a983a 	sll	r5,r18,r5
    f480:	80c6d83a 	srl	r3,r16,r3
    f484:	2088b03a 	or	r4,r4,r2
    f488:	2804c03a 	cmpne	r2,r5,zero
    f48c:	2084b03a 	or	r2,r4,r2
    f490:	110001cc 	andi	r4,r2,7
    f494:	20000726 	beq	r4,zero,f4b4 <__muldf3+0x678>
    f498:	114003cc 	andi	r5,r2,15
    f49c:	01000104 	movi	r4,4
    f4a0:	29000426 	beq	r5,r4,f4b4 <__muldf3+0x678>
    f4a4:	11000104 	addi	r4,r2,4
    f4a8:	2085803a 	cmpltu	r2,r4,r2
    f4ac:	1887883a 	add	r3,r3,r2
    f4b0:	2005883a 	mov	r2,r4
    f4b4:	1900202c 	andhi	r4,r3,128
    f4b8:	20001826 	beq	r4,zero,f51c <__muldf3+0x6e0>
    f4bc:	b4c0004c 	andi	r19,r22,1
    f4c0:	01000044 	movi	r4,1
    f4c4:	0021883a 	mov	r16,zero
    f4c8:	0025883a 	mov	r18,zero
    f4cc:	003eb506 	br	efa4 <__alt_mem_sram+0xf7e0efa4>
    f4d0:	00bef884 	movi	r2,-1054
    f4d4:	1145c83a 	sub	r2,r2,r5
    f4d8:	8088d83a 	srl	r4,r16,r2
    f4dc:	00800804 	movi	r2,32
    f4e0:	18801726 	beq	r3,r2,f540 <__muldf3+0x704>
    f4e4:	28810f84 	addi	r2,r5,1086
    f4e8:	8084983a 	sll	r2,r16,r2
    f4ec:	1484b03a 	or	r2,r2,r18
    f4f0:	1004c03a 	cmpne	r2,r2,zero
    f4f4:	1104b03a 	or	r2,r2,r4
    f4f8:	10c001cc 	andi	r3,r2,7
    f4fc:	18000b1e 	bne	r3,zero,f52c <__muldf3+0x6f0>
    f500:	0021883a 	mov	r16,zero
    f504:	1004d0fa 	srli	r2,r2,3
    f508:	b4c0004c 	andi	r19,r22,1
    f50c:	0009883a 	mov	r4,zero
    f510:	10e4b03a 	or	r18,r2,r3
    f514:	003ea306 	br	efa4 <__alt_mem_sram+0xf7e0efa4>
    f518:	0007883a 	mov	r3,zero
    f51c:	1820927a 	slli	r16,r3,9
    f520:	1806977a 	slli	r3,r3,29
    f524:	8020d33a 	srli	r16,r16,12
    f528:	003ff606 	br	f504 <__alt_mem_sram+0xf7e0f504>
    f52c:	110003cc 	andi	r4,r2,15
    f530:	00c00104 	movi	r3,4
    f534:	20fff826 	beq	r4,r3,f518 <__alt_mem_sram+0xf7e0f518>
    f538:	0007883a 	mov	r3,zero
    f53c:	003fd906 	br	f4a4 <__alt_mem_sram+0xf7e0f4a4>
    f540:	0005883a 	mov	r2,zero
    f544:	003fe906 	br	f4ec <__alt_mem_sram+0xf7e0f4ec>
    f548:	00800434 	movhi	r2,16
    f54c:	84000234 	orhi	r16,r16,8
    f550:	10bfffc4 	addi	r2,r2,-1
    f554:	e4c0004c 	andi	r19,fp,1
    f558:	80a0703a 	and	r16,r16,r2
    f55c:	003ef606 	br	f138 <__alt_mem_sram+0xf7e0f138>

0000f560 <__subdf3>:
    f560:	00c00434 	movhi	r3,16
    f564:	18ffffc4 	addi	r3,r3,-1
    f568:	defffb04 	addi	sp,sp,-20
    f56c:	28d2703a 	and	r9,r5,r3
    f570:	3814d53a 	srli	r10,r7,20
    f574:	38c6703a 	and	r3,r7,r3
    f578:	3004d77a 	srli	r2,r6,29
    f57c:	dc800215 	stw	r18,8(sp)
    f580:	dc000015 	stw	r16,0(sp)
    f584:	2824d7fa 	srli	r18,r5,31
    f588:	2820d53a 	srli	r16,r5,20
    f58c:	481290fa 	slli	r9,r9,3
    f590:	200ad77a 	srli	r5,r4,29
    f594:	180690fa 	slli	r3,r3,3
    f598:	dc400115 	stw	r17,4(sp)
    f59c:	dfc00415 	stw	ra,16(sp)
    f5a0:	202290fa 	slli	r17,r4,3
    f5a4:	dcc00315 	stw	r19,12(sp)
    f5a8:	5281ffcc 	andi	r10,r10,2047
    f5ac:	0101ffc4 	movi	r4,2047
    f5b0:	9011883a 	mov	r8,r18
    f5b4:	8401ffcc 	andi	r16,r16,2047
    f5b8:	94803fcc 	andi	r18,r18,255
    f5bc:	494ab03a 	or	r5,r9,r5
    f5c0:	380ed7fa 	srli	r7,r7,31
    f5c4:	1886b03a 	or	r3,r3,r2
    f5c8:	300c90fa 	slli	r6,r6,3
    f5cc:	51009026 	beq	r10,r4,f810 <__subdf3+0x2b0>
    f5d0:	39c0005c 	xori	r7,r7,1
    f5d4:	8285c83a 	sub	r2,r16,r10
    f5d8:	91c06f26 	beq	r18,r7,f798 <__subdf3+0x238>
    f5dc:	0080b10e 	bge	zero,r2,f8a4 <__subdf3+0x344>
    f5e0:	50002a1e 	bne	r10,zero,f68c <__subdf3+0x12c>
    f5e4:	1988b03a 	or	r4,r3,r6
    f5e8:	2000941e 	bne	r4,zero,f83c <__subdf3+0x2dc>
    f5ec:	888001cc 	andi	r2,r17,7
    f5f0:	10005b26 	beq	r2,zero,f760 <__subdf3+0x200>
    f5f4:	88c003cc 	andi	r3,r17,15
    f5f8:	00800104 	movi	r2,4
    f5fc:	18805826 	beq	r3,r2,f760 <__subdf3+0x200>
    f600:	88c00104 	addi	r3,r17,4
    f604:	1c63803a 	cmpltu	r17,r3,r17
    f608:	2c4b883a 	add	r5,r5,r17
    f60c:	2880202c 	andhi	r2,r5,128
    f610:	9200004c 	andi	r8,r18,1
    f614:	1823883a 	mov	r17,r3
    f618:	10005426 	beq	r2,zero,f76c <__subdf3+0x20c>
    f61c:	84000044 	addi	r16,r16,1
    f620:	0081ffc4 	movi	r2,2047
    f624:	8080bf26 	beq	r16,r2,f924 <__subdf3+0x3c4>
    f628:	013fe034 	movhi	r4,65408
    f62c:	213fffc4 	addi	r4,r4,-1
    f630:	290a703a 	and	r5,r5,r4
    f634:	2804977a 	slli	r2,r5,29
    f638:	280a927a 	slli	r5,r5,9
    f63c:	8822d0fa 	srli	r17,r17,3
    f640:	8401ffcc 	andi	r16,r16,2047
    f644:	2808d33a 	srli	r4,r5,12
    f648:	1444b03a 	or	r2,r2,r17
    f64c:	8401ffcc 	andi	r16,r16,2047
    f650:	800a953a 	slli	r5,r16,20
    f654:	40c03fcc 	andi	r3,r8,255
    f658:	04000434 	movhi	r16,16
    f65c:	180697fa 	slli	r3,r3,31
    f660:	843fffc4 	addi	r16,r16,-1
    f664:	2420703a 	and	r16,r4,r16
    f668:	8160b03a 	or	r16,r16,r5
    f66c:	80c6b03a 	or	r3,r16,r3
    f670:	dfc00417 	ldw	ra,16(sp)
    f674:	dcc00317 	ldw	r19,12(sp)
    f678:	dc800217 	ldw	r18,8(sp)
    f67c:	dc400117 	ldw	r17,4(sp)
    f680:	dc000017 	ldw	r16,0(sp)
    f684:	dec00504 	addi	sp,sp,20
    f688:	f800283a 	ret
    f68c:	0101ffc4 	movi	r4,2047
    f690:	813fd626 	beq	r16,r4,f5ec <__alt_mem_sram+0xf7e0f5ec>
    f694:	18c02034 	orhi	r3,r3,128
    f698:	01000e04 	movi	r4,56
    f69c:	2080a416 	blt	r4,r2,f930 <__subdf3+0x3d0>
    f6a0:	010007c4 	movi	r4,31
    f6a4:	2080c716 	blt	r4,r2,f9c4 <__subdf3+0x464>
    f6a8:	01000804 	movi	r4,32
    f6ac:	2089c83a 	sub	r4,r4,r2
    f6b0:	1910983a 	sll	r8,r3,r4
    f6b4:	308ed83a 	srl	r7,r6,r2
    f6b8:	3108983a 	sll	r4,r6,r4
    f6bc:	1884d83a 	srl	r2,r3,r2
    f6c0:	41ccb03a 	or	r6,r8,r7
    f6c4:	2008c03a 	cmpne	r4,r4,zero
    f6c8:	310cb03a 	or	r6,r6,r4
    f6cc:	898dc83a 	sub	r6,r17,r6
    f6d0:	89a3803a 	cmpltu	r17,r17,r6
    f6d4:	288bc83a 	sub	r5,r5,r2
    f6d8:	2c4bc83a 	sub	r5,r5,r17
    f6dc:	3023883a 	mov	r17,r6
    f6e0:	2880202c 	andhi	r2,r5,128
    f6e4:	10006b26 	beq	r2,zero,f894 <__subdf3+0x334>
    f6e8:	04c02034 	movhi	r19,128
    f6ec:	9cffffc4 	addi	r19,r19,-1
    f6f0:	2ce6703a 	and	r19,r5,r19
    f6f4:	98007c26 	beq	r19,zero,f8e8 <__subdf3+0x388>
    f6f8:	9809883a 	mov	r4,r19
    f6fc:	001002c0 	call	1002c <__clzsi2>
    f700:	10fffe04 	addi	r3,r2,-8
    f704:	010007c4 	movi	r4,31
    f708:	20c07d16 	blt	r4,r3,f900 <__subdf3+0x3a0>
    f70c:	01400a04 	movi	r5,40
    f710:	2885c83a 	sub	r2,r5,r2
    f714:	888ad83a 	srl	r5,r17,r2
    f718:	98e6983a 	sll	r19,r19,r3
    f71c:	88e2983a 	sll	r17,r17,r3
    f720:	2ce6b03a 	or	r19,r5,r19
    f724:	1c007a16 	blt	r3,r16,f910 <__subdf3+0x3b0>
    f728:	1c21c83a 	sub	r16,r3,r16
    f72c:	81400044 	addi	r5,r16,1
    f730:	00c007c4 	movi	r3,31
    f734:	19409616 	blt	r3,r5,f990 <__subdf3+0x430>
    f738:	1c21c83a 	sub	r16,r3,r16
    f73c:	8c08983a 	sll	r4,r17,r16
    f740:	8946d83a 	srl	r3,r17,r5
    f744:	9c20983a 	sll	r16,r19,r16
    f748:	2008c03a 	cmpne	r4,r4,zero
    f74c:	994ad83a 	srl	r5,r19,r5
    f750:	1c06b03a 	or	r3,r3,r16
    f754:	1922b03a 	or	r17,r3,r4
    f758:	0021883a 	mov	r16,zero
    f75c:	003fa306 	br	f5ec <__alt_mem_sram+0xf7e0f5ec>
    f760:	2880202c 	andhi	r2,r5,128
    f764:	9200004c 	andi	r8,r18,1
    f768:	103fac1e 	bne	r2,zero,f61c <__alt_mem_sram+0xf7e0f61c>
    f76c:	2804977a 	slli	r2,r5,29
    f770:	8822d0fa 	srli	r17,r17,3
    f774:	00c1ffc4 	movi	r3,2047
    f778:	280ad0fa 	srli	r5,r5,3
    f77c:	1444b03a 	or	r2,r2,r17
    f780:	80c02726 	beq	r16,r3,f820 <__subdf3+0x2c0>
    f784:	01000434 	movhi	r4,16
    f788:	213fffc4 	addi	r4,r4,-1
    f78c:	80e0703a 	and	r16,r16,r3
    f790:	2908703a 	and	r4,r5,r4
    f794:	003fad06 	br	f64c <__alt_mem_sram+0xf7e0f64c>
    f798:	0080690e 	bge	zero,r2,f940 <__subdf3+0x3e0>
    f79c:	50002f26 	beq	r10,zero,f85c <__subdf3+0x2fc>
    f7a0:	0101ffc4 	movi	r4,2047
    f7a4:	813f9126 	beq	r16,r4,f5ec <__alt_mem_sram+0xf7e0f5ec>
    f7a8:	18c02034 	orhi	r3,r3,128
    f7ac:	01000e04 	movi	r4,56
    f7b0:	2080b00e 	bge	r4,r2,fa74 <__subdf3+0x514>
    f7b4:	198cb03a 	or	r6,r3,r6
    f7b8:	300ec03a 	cmpne	r7,r6,zero
    f7bc:	0005883a 	mov	r2,zero
    f7c0:	3c4f883a 	add	r7,r7,r17
    f7c4:	3c63803a 	cmpltu	r17,r7,r17
    f7c8:	114b883a 	add	r5,r2,r5
    f7cc:	2c4b883a 	add	r5,r5,r17
    f7d0:	3823883a 	mov	r17,r7
    f7d4:	2880202c 	andhi	r2,r5,128
    f7d8:	10002e26 	beq	r2,zero,f894 <__subdf3+0x334>
    f7dc:	84000044 	addi	r16,r16,1
    f7e0:	0081ffc4 	movi	r2,2047
    f7e4:	8080de26 	beq	r16,r2,fb60 <__subdf3+0x600>
    f7e8:	00bfe034 	movhi	r2,65408
    f7ec:	10bfffc4 	addi	r2,r2,-1
    f7f0:	288a703a 	and	r5,r5,r2
    f7f4:	880cd07a 	srli	r6,r17,1
    f7f8:	280897fa 	slli	r4,r5,31
    f7fc:	88c0004c 	andi	r3,r17,1
    f800:	30e2b03a 	or	r17,r6,r3
    f804:	280ad07a 	srli	r5,r5,1
    f808:	8922b03a 	or	r17,r17,r4
    f80c:	003f7706 	br	f5ec <__alt_mem_sram+0xf7e0f5ec>
    f810:	1984b03a 	or	r2,r3,r6
    f814:	103f6e26 	beq	r2,zero,f5d0 <__alt_mem_sram+0xf7e0f5d0>
    f818:	39c03fcc 	andi	r7,r7,255
    f81c:	003f6d06 	br	f5d4 <__alt_mem_sram+0xf7e0f5d4>
    f820:	1146b03a 	or	r3,r2,r5
    f824:	18003f26 	beq	r3,zero,f924 <__subdf3+0x3c4>
    f828:	00c00434 	movhi	r3,16
    f82c:	29000234 	orhi	r4,r5,8
    f830:	18ffffc4 	addi	r3,r3,-1
    f834:	20c8703a 	and	r4,r4,r3
    f838:	003f8406 	br	f64c <__alt_mem_sram+0xf7e0f64c>
    f83c:	10bfffc4 	addi	r2,r2,-1
    f840:	1000501e 	bne	r2,zero,f984 <__subdf3+0x424>
    f844:	898fc83a 	sub	r7,r17,r6
    f848:	89e3803a 	cmpltu	r17,r17,r7
    f84c:	28cbc83a 	sub	r5,r5,r3
    f850:	2c4bc83a 	sub	r5,r5,r17
    f854:	3823883a 	mov	r17,r7
    f858:	003fa106 	br	f6e0 <__alt_mem_sram+0xf7e0f6e0>
    f85c:	1988b03a 	or	r4,r3,r6
    f860:	203f6226 	beq	r4,zero,f5ec <__alt_mem_sram+0xf7e0f5ec>
    f864:	10bfffc4 	addi	r2,r2,-1
    f868:	10009b1e 	bne	r2,zero,fad8 <__subdf3+0x578>
    f86c:	344d883a 	add	r6,r6,r17
    f870:	3463803a 	cmpltu	r17,r6,r17
    f874:	194b883a 	add	r5,r3,r5
    f878:	2c4b883a 	add	r5,r5,r17
    f87c:	3023883a 	mov	r17,r6
    f880:	003fd406 	br	f7d4 <__alt_mem_sram+0xf7e0f7d4>
    f884:	1106b03a 	or	r3,r2,r4
    f888:	1800b426 	beq	r3,zero,fb5c <__subdf3+0x5fc>
    f88c:	100b883a 	mov	r5,r2
    f890:	2023883a 	mov	r17,r4
    f894:	888001cc 	andi	r2,r17,7
    f898:	103f561e 	bne	r2,zero,f5f4 <__alt_mem_sram+0xf7e0f5f4>
    f89c:	9200004c 	andi	r8,r18,1
    f8a0:	003fb206 	br	f76c <__alt_mem_sram+0xf7e0f76c>
    f8a4:	1000531e 	bne	r2,zero,f9f4 <__subdf3+0x494>
    f8a8:	80800044 	addi	r2,r16,1
    f8ac:	1081ffcc 	andi	r2,r2,2047
    f8b0:	01000044 	movi	r4,1
    f8b4:	2080a00e 	bge	r4,r2,fb38 <__subdf3+0x5d8>
    f8b8:	8985c83a 	sub	r2,r17,r6
    f8bc:	8889803a 	cmpltu	r4,r17,r2
    f8c0:	28e7c83a 	sub	r19,r5,r3
    f8c4:	9927c83a 	sub	r19,r19,r4
    f8c8:	9900202c 	andhi	r4,r19,128
    f8cc:	20006226 	beq	r4,zero,fa58 <__subdf3+0x4f8>
    f8d0:	3463c83a 	sub	r17,r6,r17
    f8d4:	194bc83a 	sub	r5,r3,r5
    f8d8:	344d803a 	cmpltu	r6,r6,r17
    f8dc:	29a7c83a 	sub	r19,r5,r6
    f8e0:	3825883a 	mov	r18,r7
    f8e4:	983f841e 	bne	r19,zero,f6f8 <__alt_mem_sram+0xf7e0f6f8>
    f8e8:	8809883a 	mov	r4,r17
    f8ec:	001002c0 	call	1002c <__clzsi2>
    f8f0:	10800804 	addi	r2,r2,32
    f8f4:	10fffe04 	addi	r3,r2,-8
    f8f8:	010007c4 	movi	r4,31
    f8fc:	20ff830e 	bge	r4,r3,f70c <__alt_mem_sram+0xf7e0f70c>
    f900:	14fff604 	addi	r19,r2,-40
    f904:	8ce6983a 	sll	r19,r17,r19
    f908:	0023883a 	mov	r17,zero
    f90c:	1c3f860e 	bge	r3,r16,f728 <__alt_mem_sram+0xf7e0f728>
    f910:	017fe034 	movhi	r5,65408
    f914:	297fffc4 	addi	r5,r5,-1
    f918:	80e1c83a 	sub	r16,r16,r3
    f91c:	994a703a 	and	r5,r19,r5
    f920:	003f3206 	br	f5ec <__alt_mem_sram+0xf7e0f5ec>
    f924:	0009883a 	mov	r4,zero
    f928:	0005883a 	mov	r2,zero
    f92c:	003f4706 	br	f64c <__alt_mem_sram+0xf7e0f64c>
    f930:	198cb03a 	or	r6,r3,r6
    f934:	300cc03a 	cmpne	r6,r6,zero
    f938:	0005883a 	mov	r2,zero
    f93c:	003f6306 	br	f6cc <__alt_mem_sram+0xf7e0f6cc>
    f940:	10009d1e 	bne	r2,zero,fbb8 <__subdf3+0x658>
    f944:	81c00044 	addi	r7,r16,1
    f948:	3881ffcc 	andi	r2,r7,2047
    f94c:	02400044 	movi	r9,1
    f950:	4880680e 	bge	r9,r2,faf4 <__subdf3+0x594>
    f954:	0081ffc4 	movi	r2,2047
    f958:	3880ae26 	beq	r7,r2,fc14 <__subdf3+0x6b4>
    f95c:	344d883a 	add	r6,r6,r17
    f960:	3463803a 	cmpltu	r17,r6,r17
    f964:	194b883a 	add	r5,r3,r5
    f968:	2c4b883a 	add	r5,r5,r17
    f96c:	282297fa 	slli	r17,r5,31
    f970:	300cd07a 	srli	r6,r6,1
    f974:	280ad07a 	srli	r5,r5,1
    f978:	3821883a 	mov	r16,r7
    f97c:	89a2b03a 	or	r17,r17,r6
    f980:	003f1a06 	br	f5ec <__alt_mem_sram+0xf7e0f5ec>
    f984:	0101ffc4 	movi	r4,2047
    f988:	813f431e 	bne	r16,r4,f698 <__alt_mem_sram+0xf7e0f698>
    f98c:	003f1706 	br	f5ec <__alt_mem_sram+0xf7e0f5ec>
    f990:	80bff844 	addi	r2,r16,-31
    f994:	00c00804 	movi	r3,32
    f998:	9884d83a 	srl	r2,r19,r2
    f99c:	28c05126 	beq	r5,r3,fae4 <__subdf3+0x584>
    f9a0:	00c00fc4 	movi	r3,63
    f9a4:	1c21c83a 	sub	r16,r3,r16
    f9a8:	9c26983a 	sll	r19,r19,r16
    f9ac:	9c62b03a 	or	r17,r19,r17
    f9b0:	8822c03a 	cmpne	r17,r17,zero
    f9b4:	88a2b03a 	or	r17,r17,r2
    f9b8:	000b883a 	mov	r5,zero
    f9bc:	0021883a 	mov	r16,zero
    f9c0:	003fb406 	br	f894 <__alt_mem_sram+0xf7e0f894>
    f9c4:	113ff804 	addi	r4,r2,-32
    f9c8:	01c00804 	movi	r7,32
    f9cc:	1908d83a 	srl	r4,r3,r4
    f9d0:	11c04626 	beq	r2,r7,faec <__subdf3+0x58c>
    f9d4:	01c01004 	movi	r7,64
    f9d8:	3885c83a 	sub	r2,r7,r2
    f9dc:	1884983a 	sll	r2,r3,r2
    f9e0:	118cb03a 	or	r6,r2,r6
    f9e4:	300cc03a 	cmpne	r6,r6,zero
    f9e8:	310cb03a 	or	r6,r6,r4
    f9ec:	0005883a 	mov	r2,zero
    f9f0:	003f3606 	br	f6cc <__alt_mem_sram+0xf7e0f6cc>
    f9f4:	80002b26 	beq	r16,zero,faa4 <__subdf3+0x544>
    f9f8:	0101ffc4 	movi	r4,2047
    f9fc:	51006926 	beq	r10,r4,fba4 <__subdf3+0x644>
    fa00:	0085c83a 	sub	r2,zero,r2
    fa04:	29402034 	orhi	r5,r5,128
    fa08:	01000e04 	movi	r4,56
    fa0c:	20807d16 	blt	r4,r2,fc04 <__subdf3+0x6a4>
    fa10:	010007c4 	movi	r4,31
    fa14:	2080d916 	blt	r4,r2,fd7c <__subdf3+0x81c>
    fa18:	01000804 	movi	r4,32
    fa1c:	2089c83a 	sub	r4,r4,r2
    fa20:	2912983a 	sll	r9,r5,r4
    fa24:	8890d83a 	srl	r8,r17,r2
    fa28:	8908983a 	sll	r4,r17,r4
    fa2c:	2884d83a 	srl	r2,r5,r2
    fa30:	4a22b03a 	or	r17,r9,r8
    fa34:	2008c03a 	cmpne	r4,r4,zero
    fa38:	8922b03a 	or	r17,r17,r4
    fa3c:	3463c83a 	sub	r17,r6,r17
    fa40:	1885c83a 	sub	r2,r3,r2
    fa44:	344d803a 	cmpltu	r6,r6,r17
    fa48:	118bc83a 	sub	r5,r2,r6
    fa4c:	5021883a 	mov	r16,r10
    fa50:	3825883a 	mov	r18,r7
    fa54:	003f2206 	br	f6e0 <__alt_mem_sram+0xf7e0f6e0>
    fa58:	9886b03a 	or	r3,r19,r2
    fa5c:	18001c1e 	bne	r3,zero,fad0 <__subdf3+0x570>
    fa60:	0011883a 	mov	r8,zero
    fa64:	000b883a 	mov	r5,zero
    fa68:	0023883a 	mov	r17,zero
    fa6c:	0021883a 	mov	r16,zero
    fa70:	003f3e06 	br	f76c <__alt_mem_sram+0xf7e0f76c>
    fa74:	010007c4 	movi	r4,31
    fa78:	20803c16 	blt	r4,r2,fb6c <__subdf3+0x60c>
    fa7c:	01000804 	movi	r4,32
    fa80:	2089c83a 	sub	r4,r4,r2
    fa84:	1912983a 	sll	r9,r3,r4
    fa88:	308ed83a 	srl	r7,r6,r2
    fa8c:	3108983a 	sll	r4,r6,r4
    fa90:	1884d83a 	srl	r2,r3,r2
    fa94:	49ceb03a 	or	r7,r9,r7
    fa98:	2008c03a 	cmpne	r4,r4,zero
    fa9c:	390eb03a 	or	r7,r7,r4
    faa0:	003f4706 	br	f7c0 <__alt_mem_sram+0xf7e0f7c0>
    faa4:	2c48b03a 	or	r4,r5,r17
    faa8:	20003e26 	beq	r4,zero,fba4 <__subdf3+0x644>
    faac:	0084303a 	nor	r2,zero,r2
    fab0:	10003a1e 	bne	r2,zero,fb9c <__subdf3+0x63c>
    fab4:	3463c83a 	sub	r17,r6,r17
    fab8:	194bc83a 	sub	r5,r3,r5
    fabc:	344d803a 	cmpltu	r6,r6,r17
    fac0:	298bc83a 	sub	r5,r5,r6
    fac4:	5021883a 	mov	r16,r10
    fac8:	3825883a 	mov	r18,r7
    facc:	003f0406 	br	f6e0 <__alt_mem_sram+0xf7e0f6e0>
    fad0:	1023883a 	mov	r17,r2
    fad4:	003f0706 	br	f6f4 <__alt_mem_sram+0xf7e0f6f4>
    fad8:	0101ffc4 	movi	r4,2047
    fadc:	813f331e 	bne	r16,r4,f7ac <__alt_mem_sram+0xf7e0f7ac>
    fae0:	003ec206 	br	f5ec <__alt_mem_sram+0xf7e0f5ec>
    fae4:	0027883a 	mov	r19,zero
    fae8:	003fb006 	br	f9ac <__alt_mem_sram+0xf7e0f9ac>
    faec:	0005883a 	mov	r2,zero
    faf0:	003fbb06 	br	f9e0 <__alt_mem_sram+0xf7e0f9e0>
    faf4:	2c44b03a 	or	r2,r5,r17
    faf8:	80008b1e 	bne	r16,zero,fd28 <__subdf3+0x7c8>
    fafc:	1000b526 	beq	r2,zero,fdd4 <__subdf3+0x874>
    fb00:	1984b03a 	or	r2,r3,r6
    fb04:	103eb926 	beq	r2,zero,f5ec <__alt_mem_sram+0xf7e0f5ec>
    fb08:	3449883a 	add	r4,r6,r17
    fb0c:	2463803a 	cmpltu	r17,r4,r17
    fb10:	194b883a 	add	r5,r3,r5
    fb14:	2c4b883a 	add	r5,r5,r17
    fb18:	2880202c 	andhi	r2,r5,128
    fb1c:	2023883a 	mov	r17,r4
    fb20:	103f5c26 	beq	r2,zero,f894 <__alt_mem_sram+0xf7e0f894>
    fb24:	00bfe034 	movhi	r2,65408
    fb28:	10bfffc4 	addi	r2,r2,-1
    fb2c:	4821883a 	mov	r16,r9
    fb30:	288a703a 	and	r5,r5,r2
    fb34:	003ead06 	br	f5ec <__alt_mem_sram+0xf7e0f5ec>
    fb38:	2c44b03a 	or	r2,r5,r17
    fb3c:	8000291e 	bne	r16,zero,fbe4 <__subdf3+0x684>
    fb40:	10004f1e 	bne	r2,zero,fc80 <__subdf3+0x720>
    fb44:	1984b03a 	or	r2,r3,r6
    fb48:	10000426 	beq	r2,zero,fb5c <__subdf3+0x5fc>
    fb4c:	180b883a 	mov	r5,r3
    fb50:	3023883a 	mov	r17,r6
    fb54:	3825883a 	mov	r18,r7
    fb58:	003ea406 	br	f5ec <__alt_mem_sram+0xf7e0f5ec>
    fb5c:	0011883a 	mov	r8,zero
    fb60:	000b883a 	mov	r5,zero
    fb64:	0023883a 	mov	r17,zero
    fb68:	003f0006 	br	f76c <__alt_mem_sram+0xf7e0f76c>
    fb6c:	11fff804 	addi	r7,r2,-32
    fb70:	19c8d83a 	srl	r4,r3,r7
    fb74:	01c00804 	movi	r7,32
    fb78:	11c07e26 	beq	r2,r7,fd74 <__subdf3+0x814>
    fb7c:	01c01004 	movi	r7,64
    fb80:	3885c83a 	sub	r2,r7,r2
    fb84:	1884983a 	sll	r2,r3,r2
    fb88:	118cb03a 	or	r6,r2,r6
    fb8c:	300ec03a 	cmpne	r7,r6,zero
    fb90:	390eb03a 	or	r7,r7,r4
    fb94:	0005883a 	mov	r2,zero
    fb98:	003f0906 	br	f7c0 <__alt_mem_sram+0xf7e0f7c0>
    fb9c:	0101ffc4 	movi	r4,2047
    fba0:	513f991e 	bne	r10,r4,fa08 <__alt_mem_sram+0xf7e0fa08>
    fba4:	180b883a 	mov	r5,r3
    fba8:	3023883a 	mov	r17,r6
    fbac:	5021883a 	mov	r16,r10
    fbb0:	3825883a 	mov	r18,r7
    fbb4:	003e8d06 	br	f5ec <__alt_mem_sram+0xf7e0f5ec>
    fbb8:	80001a1e 	bne	r16,zero,fc24 <__subdf3+0x6c4>
    fbbc:	2c48b03a 	or	r4,r5,r17
    fbc0:	20005526 	beq	r4,zero,fd18 <__subdf3+0x7b8>
    fbc4:	0084303a 	nor	r2,zero,r2
    fbc8:	1000511e 	bne	r2,zero,fd10 <__subdf3+0x7b0>
    fbcc:	89a3883a 	add	r17,r17,r6
    fbd0:	194b883a 	add	r5,r3,r5
    fbd4:	898d803a 	cmpltu	r6,r17,r6
    fbd8:	298b883a 	add	r5,r5,r6
    fbdc:	5021883a 	mov	r16,r10
    fbe0:	003efc06 	br	f7d4 <__alt_mem_sram+0xf7e0f7d4>
    fbe4:	1000341e 	bne	r2,zero,fcb8 <__subdf3+0x758>
    fbe8:	1984b03a 	or	r2,r3,r6
    fbec:	10006f26 	beq	r2,zero,fdac <__subdf3+0x84c>
    fbf0:	180b883a 	mov	r5,r3
    fbf4:	3023883a 	mov	r17,r6
    fbf8:	3825883a 	mov	r18,r7
    fbfc:	0401ffc4 	movi	r16,2047
    fc00:	003e7a06 	br	f5ec <__alt_mem_sram+0xf7e0f5ec>
    fc04:	2c62b03a 	or	r17,r5,r17
    fc08:	8822c03a 	cmpne	r17,r17,zero
    fc0c:	0005883a 	mov	r2,zero
    fc10:	003f8a06 	br	fa3c <__alt_mem_sram+0xf7e0fa3c>
    fc14:	3821883a 	mov	r16,r7
    fc18:	000b883a 	mov	r5,zero
    fc1c:	0023883a 	mov	r17,zero
    fc20:	003ed206 	br	f76c <__alt_mem_sram+0xf7e0f76c>
    fc24:	0101ffc4 	movi	r4,2047
    fc28:	51003b26 	beq	r10,r4,fd18 <__subdf3+0x7b8>
    fc2c:	0085c83a 	sub	r2,zero,r2
    fc30:	29402034 	orhi	r5,r5,128
    fc34:	01000e04 	movi	r4,56
    fc38:	20806216 	blt	r4,r2,fdc4 <__subdf3+0x864>
    fc3c:	010007c4 	movi	r4,31
    fc40:	20806b16 	blt	r4,r2,fdf0 <__subdf3+0x890>
    fc44:	01000804 	movi	r4,32
    fc48:	2089c83a 	sub	r4,r4,r2
    fc4c:	2912983a 	sll	r9,r5,r4
    fc50:	888ed83a 	srl	r7,r17,r2
    fc54:	8908983a 	sll	r4,r17,r4
    fc58:	2884d83a 	srl	r2,r5,r2
    fc5c:	49e2b03a 	or	r17,r9,r7
    fc60:	2008c03a 	cmpne	r4,r4,zero
    fc64:	8922b03a 	or	r17,r17,r4
    fc68:	89a3883a 	add	r17,r17,r6
    fc6c:	10c5883a 	add	r2,r2,r3
    fc70:	898d803a 	cmpltu	r6,r17,r6
    fc74:	118b883a 	add	r5,r2,r6
    fc78:	5021883a 	mov	r16,r10
    fc7c:	003ed506 	br	f7d4 <__alt_mem_sram+0xf7e0f7d4>
    fc80:	1984b03a 	or	r2,r3,r6
    fc84:	103e5926 	beq	r2,zero,f5ec <__alt_mem_sram+0xf7e0f5ec>
    fc88:	8989c83a 	sub	r4,r17,r6
    fc8c:	8911803a 	cmpltu	r8,r17,r4
    fc90:	28c5c83a 	sub	r2,r5,r3
    fc94:	1205c83a 	sub	r2,r2,r8
    fc98:	1200202c 	andhi	r8,r2,128
    fc9c:	403ef926 	beq	r8,zero,f884 <__alt_mem_sram+0xf7e0f884>
    fca0:	3463c83a 	sub	r17,r6,r17
    fca4:	194bc83a 	sub	r5,r3,r5
    fca8:	344d803a 	cmpltu	r6,r6,r17
    fcac:	298bc83a 	sub	r5,r5,r6
    fcb0:	3825883a 	mov	r18,r7
    fcb4:	003e4d06 	br	f5ec <__alt_mem_sram+0xf7e0f5ec>
    fcb8:	1984b03a 	or	r2,r3,r6
    fcbc:	10002b26 	beq	r2,zero,fd6c <__subdf3+0x80c>
    fcc0:	2808d0fa 	srli	r4,r5,3
    fcc4:	8822d0fa 	srli	r17,r17,3
    fcc8:	280a977a 	slli	r5,r5,29
    fccc:	2080022c 	andhi	r2,r4,8
    fcd0:	2c62b03a 	or	r17,r5,r17
    fcd4:	10000826 	beq	r2,zero,fcf8 <__subdf3+0x798>
    fcd8:	1810d0fa 	srli	r8,r3,3
    fcdc:	4080022c 	andhi	r2,r8,8
    fce0:	1000051e 	bne	r2,zero,fcf8 <__subdf3+0x798>
    fce4:	300cd0fa 	srli	r6,r6,3
    fce8:	1804977a 	slli	r2,r3,29
    fcec:	4009883a 	mov	r4,r8
    fcf0:	3825883a 	mov	r18,r7
    fcf4:	11a2b03a 	or	r17,r2,r6
    fcf8:	880ad77a 	srli	r5,r17,29
    fcfc:	200890fa 	slli	r4,r4,3
    fd00:	882290fa 	slli	r17,r17,3
    fd04:	0401ffc4 	movi	r16,2047
    fd08:	290ab03a 	or	r5,r5,r4
    fd0c:	003e3706 	br	f5ec <__alt_mem_sram+0xf7e0f5ec>
    fd10:	0101ffc4 	movi	r4,2047
    fd14:	513fc71e 	bne	r10,r4,fc34 <__alt_mem_sram+0xf7e0fc34>
    fd18:	180b883a 	mov	r5,r3
    fd1c:	3023883a 	mov	r17,r6
    fd20:	5021883a 	mov	r16,r10
    fd24:	003e3106 	br	f5ec <__alt_mem_sram+0xf7e0f5ec>
    fd28:	10002d26 	beq	r2,zero,fde0 <__subdf3+0x880>
    fd2c:	1984b03a 	or	r2,r3,r6
    fd30:	10000e26 	beq	r2,zero,fd6c <__subdf3+0x80c>
    fd34:	2808d0fa 	srli	r4,r5,3
    fd38:	8822d0fa 	srli	r17,r17,3
    fd3c:	280a977a 	slli	r5,r5,29
    fd40:	2080022c 	andhi	r2,r4,8
    fd44:	2c62b03a 	or	r17,r5,r17
    fd48:	103feb26 	beq	r2,zero,fcf8 <__alt_mem_sram+0xf7e0fcf8>
    fd4c:	180ed0fa 	srli	r7,r3,3
    fd50:	3880022c 	andhi	r2,r7,8
    fd54:	103fe81e 	bne	r2,zero,fcf8 <__alt_mem_sram+0xf7e0fcf8>
    fd58:	300cd0fa 	srli	r6,r6,3
    fd5c:	1804977a 	slli	r2,r3,29
    fd60:	3809883a 	mov	r4,r7
    fd64:	11a2b03a 	or	r17,r2,r6
    fd68:	003fe306 	br	fcf8 <__alt_mem_sram+0xf7e0fcf8>
    fd6c:	0401ffc4 	movi	r16,2047
    fd70:	003e1e06 	br	f5ec <__alt_mem_sram+0xf7e0f5ec>
    fd74:	0005883a 	mov	r2,zero
    fd78:	003f8306 	br	fb88 <__alt_mem_sram+0xf7e0fb88>
    fd7c:	113ff804 	addi	r4,r2,-32
    fd80:	02000804 	movi	r8,32
    fd84:	2908d83a 	srl	r4,r5,r4
    fd88:	12002526 	beq	r2,r8,fe20 <__subdf3+0x8c0>
    fd8c:	02001004 	movi	r8,64
    fd90:	4085c83a 	sub	r2,r8,r2
    fd94:	288a983a 	sll	r5,r5,r2
    fd98:	2c62b03a 	or	r17,r5,r17
    fd9c:	8822c03a 	cmpne	r17,r17,zero
    fda0:	8922b03a 	or	r17,r17,r4
    fda4:	0005883a 	mov	r2,zero
    fda8:	003f2406 	br	fa3c <__alt_mem_sram+0xf7e0fa3c>
    fdac:	01402034 	movhi	r5,128
    fdb0:	0011883a 	mov	r8,zero
    fdb4:	297fffc4 	addi	r5,r5,-1
    fdb8:	047ffe04 	movi	r17,-8
    fdbc:	0401ffc4 	movi	r16,2047
    fdc0:	003e6a06 	br	f76c <__alt_mem_sram+0xf7e0f76c>
    fdc4:	2c62b03a 	or	r17,r5,r17
    fdc8:	8822c03a 	cmpne	r17,r17,zero
    fdcc:	0005883a 	mov	r2,zero
    fdd0:	003fa506 	br	fc68 <__alt_mem_sram+0xf7e0fc68>
    fdd4:	180b883a 	mov	r5,r3
    fdd8:	3023883a 	mov	r17,r6
    fddc:	003e0306 	br	f5ec <__alt_mem_sram+0xf7e0f5ec>
    fde0:	180b883a 	mov	r5,r3
    fde4:	3023883a 	mov	r17,r6
    fde8:	0401ffc4 	movi	r16,2047
    fdec:	003dff06 	br	f5ec <__alt_mem_sram+0xf7e0f5ec>
    fdf0:	113ff804 	addi	r4,r2,-32
    fdf4:	01c00804 	movi	r7,32
    fdf8:	2908d83a 	srl	r4,r5,r4
    fdfc:	11c00a26 	beq	r2,r7,fe28 <__subdf3+0x8c8>
    fe00:	01c01004 	movi	r7,64
    fe04:	3885c83a 	sub	r2,r7,r2
    fe08:	288a983a 	sll	r5,r5,r2
    fe0c:	2c62b03a 	or	r17,r5,r17
    fe10:	8822c03a 	cmpne	r17,r17,zero
    fe14:	8922b03a 	or	r17,r17,r4
    fe18:	0005883a 	mov	r2,zero
    fe1c:	003f9206 	br	fc68 <__alt_mem_sram+0xf7e0fc68>
    fe20:	000b883a 	mov	r5,zero
    fe24:	003fdc06 	br	fd98 <__alt_mem_sram+0xf7e0fd98>
    fe28:	000b883a 	mov	r5,zero
    fe2c:	003ff706 	br	fe0c <__alt_mem_sram+0xf7e0fe0c>

0000fe30 <__fixdfsi>:
    fe30:	2806d53a 	srli	r3,r5,20
    fe34:	00800434 	movhi	r2,16
    fe38:	10bfffc4 	addi	r2,r2,-1
    fe3c:	18c1ffcc 	andi	r3,r3,2047
    fe40:	0180ff84 	movi	r6,1022
    fe44:	2884703a 	and	r2,r5,r2
    fe48:	280ad7fa 	srli	r5,r5,31
    fe4c:	30c0130e 	bge	r6,r3,fe9c <__fixdfsi+0x6c>
    fe50:	01810744 	movi	r6,1053
    fe54:	30c00d16 	blt	r6,r3,fe8c <__fixdfsi+0x5c>
    fe58:	01810cc4 	movi	r6,1075
    fe5c:	30cdc83a 	sub	r6,r6,r3
    fe60:	01c007c4 	movi	r7,31
    fe64:	10800434 	orhi	r2,r2,16
    fe68:	39800e0e 	bge	r7,r6,fea4 <__fixdfsi+0x74>
    fe6c:	010104c4 	movi	r4,1043
    fe70:	20c7c83a 	sub	r3,r4,r3
    fe74:	10c6d83a 	srl	r3,r2,r3
    fe78:	29403fcc 	andi	r5,r5,255
    fe7c:	0145c83a 	sub	r2,zero,r5
    fe80:	1884f03a 	xor	r2,r3,r2
    fe84:	1145883a 	add	r2,r2,r5
    fe88:	f800283a 	ret
    fe8c:	00a00034 	movhi	r2,32768
    fe90:	10bfffc4 	addi	r2,r2,-1
    fe94:	2885883a 	add	r2,r5,r2
    fe98:	f800283a 	ret
    fe9c:	0005883a 	mov	r2,zero
    fea0:	f800283a 	ret
    fea4:	18fefb44 	addi	r3,r3,-1043
    fea8:	2188d83a 	srl	r4,r4,r6
    feac:	10c6983a 	sll	r3,r2,r3
    feb0:	20c6b03a 	or	r3,r4,r3
    feb4:	003ff006 	br	fe78 <__alt_mem_sram+0xf7e0fe78>

0000feb8 <__floatsidf>:
    feb8:	defffd04 	addi	sp,sp,-12
    febc:	dc400115 	stw	r17,4(sp)
    fec0:	dfc00215 	stw	ra,8(sp)
    fec4:	dc000015 	stw	r16,0(sp)
    fec8:	2023883a 	mov	r17,r4
    fecc:	20001426 	beq	r4,zero,ff20 <__floatsidf+0x68>
    fed0:	2020d7fa 	srli	r16,r4,31
    fed4:	80000126 	beq	r16,zero,fedc <__floatsidf+0x24>
    fed8:	0123c83a 	sub	r17,zero,r4
    fedc:	8809883a 	mov	r4,r17
    fee0:	001002c0 	call	1002c <__clzsi2>
    fee4:	01410784 	movi	r5,1054
    fee8:	00c00284 	movi	r3,10
    feec:	288bc83a 	sub	r5,r5,r2
    fef0:	18801c16 	blt	r3,r2,ff64 <__floatsidf+0xac>
    fef4:	00c002c4 	movi	r3,11
    fef8:	1887c83a 	sub	r3,r3,r2
    fefc:	88c8d83a 	srl	r4,r17,r3
    ff00:	00c00434 	movhi	r3,16
    ff04:	18ffffc4 	addi	r3,r3,-1
    ff08:	10800544 	addi	r2,r2,21
    ff0c:	20c8703a 	and	r4,r4,r3
    ff10:	8884983a 	sll	r2,r17,r2
    ff14:	28c1ffcc 	andi	r3,r5,2047
    ff18:	800d883a 	mov	r6,r16
    ff1c:	00000406 	br	ff30 <__floatsidf+0x78>
    ff20:	000d883a 	mov	r6,zero
    ff24:	0007883a 	mov	r3,zero
    ff28:	0009883a 	mov	r4,zero
    ff2c:	0005883a 	mov	r2,zero
    ff30:	180a953a 	slli	r5,r3,20
    ff34:	31803fcc 	andi	r6,r6,255
    ff38:	00c00434 	movhi	r3,16
    ff3c:	300c97fa 	slli	r6,r6,31
    ff40:	18ffffc4 	addi	r3,r3,-1
    ff44:	20c6703a 	and	r3,r4,r3
    ff48:	1946b03a 	or	r3,r3,r5
    ff4c:	1986b03a 	or	r3,r3,r6
    ff50:	dfc00217 	ldw	ra,8(sp)
    ff54:	dc400117 	ldw	r17,4(sp)
    ff58:	dc000017 	ldw	r16,0(sp)
    ff5c:	dec00304 	addi	sp,sp,12
    ff60:	f800283a 	ret
    ff64:	10fffd44 	addi	r3,r2,-11
    ff68:	88c8983a 	sll	r4,r17,r3
    ff6c:	00800434 	movhi	r2,16
    ff70:	10bfffc4 	addi	r2,r2,-1
    ff74:	2088703a 	and	r4,r4,r2
    ff78:	28c1ffcc 	andi	r3,r5,2047
    ff7c:	800d883a 	mov	r6,r16
    ff80:	0005883a 	mov	r2,zero
    ff84:	003fea06 	br	ff30 <__alt_mem_sram+0xf7e0ff30>

0000ff88 <__floatunsidf>:
    ff88:	defffe04 	addi	sp,sp,-8
    ff8c:	dc000015 	stw	r16,0(sp)
    ff90:	dfc00115 	stw	ra,4(sp)
    ff94:	2021883a 	mov	r16,r4
    ff98:	20001026 	beq	r4,zero,ffdc <__floatunsidf+0x54>
    ff9c:	001002c0 	call	1002c <__clzsi2>
    ffa0:	01410784 	movi	r5,1054
    ffa4:	100d883a 	mov	r6,r2
    ffa8:	288bc83a 	sub	r5,r5,r2
    ffac:	00800284 	movi	r2,10
    ffb0:	11801616 	blt	r2,r6,1000c <__floatunsidf+0x84>
    ffb4:	008002c4 	movi	r2,11
    ffb8:	1185c83a 	sub	r2,r2,r6
    ffbc:	8084d83a 	srl	r2,r16,r2
    ffc0:	00c00434 	movhi	r3,16
    ffc4:	31c00544 	addi	r7,r6,21
    ffc8:	18ffffc4 	addi	r3,r3,-1
    ffcc:	81e0983a 	sll	r16,r16,r7
    ffd0:	10cc703a 	and	r6,r2,r3
    ffd4:	2941ffcc 	andi	r5,r5,2047
    ffd8:	00000206 	br	ffe4 <__floatunsidf+0x5c>
    ffdc:	000b883a 	mov	r5,zero
    ffe0:	000d883a 	mov	r6,zero
    ffe4:	280a953a 	slli	r5,r5,20
    ffe8:	00c00434 	movhi	r3,16
    ffec:	18ffffc4 	addi	r3,r3,-1
    fff0:	30c6703a 	and	r3,r6,r3
    fff4:	8005883a 	mov	r2,r16
    fff8:	1946b03a 	or	r3,r3,r5
    fffc:	dfc00117 	ldw	ra,4(sp)
   10000:	dc000017 	ldw	r16,0(sp)
   10004:	dec00204 	addi	sp,sp,8
   10008:	f800283a 	ret
   1000c:	31bffd44 	addi	r6,r6,-11
   10010:	818c983a 	sll	r6,r16,r6
   10014:	00800434 	movhi	r2,16
   10018:	10bfffc4 	addi	r2,r2,-1
   1001c:	2941ffcc 	andi	r5,r5,2047
   10020:	0021883a 	mov	r16,zero
   10024:	308c703a 	and	r6,r6,r2
   10028:	003fee06 	br	ffe4 <__alt_mem_sram+0xf7e0ffe4>

0001002c <__clzsi2>:
   1002c:	00bfffd4 	movui	r2,65535
   10030:	11000b36 	bltu	r2,r4,10060 <__clzsi2+0x34>
   10034:	00803fc4 	movi	r2,255
   10038:	1100122e 	bgeu	r2,r4,10084 <__clzsi2+0x58>
   1003c:	00c00204 	movi	r3,8
   10040:	01400604 	movi	r5,24
   10044:	20c8d83a 	srl	r4,r4,r3
   10048:	00800074 	movhi	r2,1
   1004c:	108cd404 	addi	r2,r2,13136
   10050:	1109883a 	add	r4,r2,r4
   10054:	20800003 	ldbu	r2,0(r4)
   10058:	2885c83a 	sub	r2,r5,r2
   1005c:	f800283a 	ret
   10060:	00804034 	movhi	r2,256
   10064:	10bfffc4 	addi	r2,r2,-1
   10068:	11000336 	bltu	r2,r4,10078 <__clzsi2+0x4c>
   1006c:	00c00404 	movi	r3,16
   10070:	180b883a 	mov	r5,r3
   10074:	003ff306 	br	10044 <__alt_mem_sram+0xf7e10044>
   10078:	00c00604 	movi	r3,24
   1007c:	01400204 	movi	r5,8
   10080:	003ff006 	br	10044 <__alt_mem_sram+0xf7e10044>
   10084:	0007883a 	mov	r3,zero
   10088:	01400804 	movi	r5,32
   1008c:	003fed06 	br	10044 <__alt_mem_sram+0xf7e10044>

00010090 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10090:	defffe04 	addi	sp,sp,-8
   10094:	dfc00115 	stw	ra,4(sp)
   10098:	df000015 	stw	fp,0(sp)
   1009c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   100a0:	00800074 	movhi	r2,1
   100a4:	1093d504 	addi	r2,r2,20308
   100a8:	10800017 	ldw	r2,0(r2)
   100ac:	10000526 	beq	r2,zero,100c4 <alt_get_errno+0x34>
   100b0:	00800074 	movhi	r2,1
   100b4:	1093d504 	addi	r2,r2,20308
   100b8:	10800017 	ldw	r2,0(r2)
   100bc:	103ee83a 	callr	r2
   100c0:	00000206 	br	100cc <alt_get_errno+0x3c>
   100c4:	00800074 	movhi	r2,1
   100c8:	109a9c04 	addi	r2,r2,27248
}
   100cc:	e037883a 	mov	sp,fp
   100d0:	dfc00117 	ldw	ra,4(sp)
   100d4:	df000017 	ldw	fp,0(sp)
   100d8:	dec00204 	addi	sp,sp,8
   100dc:	f800283a 	ret

000100e0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   100e0:	defffb04 	addi	sp,sp,-20
   100e4:	dfc00415 	stw	ra,16(sp)
   100e8:	df000315 	stw	fp,12(sp)
   100ec:	df000304 	addi	fp,sp,12
   100f0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   100f4:	e0bfff17 	ldw	r2,-4(fp)
   100f8:	10000616 	blt	r2,zero,10114 <close+0x34>
   100fc:	e0bfff17 	ldw	r2,-4(fp)
   10100:	10c00324 	muli	r3,r2,12
   10104:	00800074 	movhi	r2,1
   10108:	108f5204 	addi	r2,r2,15688
   1010c:	1885883a 	add	r2,r3,r2
   10110:	00000106 	br	10118 <close+0x38>
   10114:	0005883a 	mov	r2,zero
   10118:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1011c:	e0bffd17 	ldw	r2,-12(fp)
   10120:	10001926 	beq	r2,zero,10188 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   10124:	e0bffd17 	ldw	r2,-12(fp)
   10128:	10800017 	ldw	r2,0(r2)
   1012c:	10800417 	ldw	r2,16(r2)
   10130:	10000626 	beq	r2,zero,1014c <close+0x6c>
   10134:	e0bffd17 	ldw	r2,-12(fp)
   10138:	10800017 	ldw	r2,0(r2)
   1013c:	10800417 	ldw	r2,16(r2)
   10140:	e13ffd17 	ldw	r4,-12(fp)
   10144:	103ee83a 	callr	r2
   10148:	00000106 	br	10150 <close+0x70>
   1014c:	0005883a 	mov	r2,zero
   10150:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   10154:	e13fff17 	ldw	r4,-4(fp)
   10158:	00107dc0 	call	107dc <alt_release_fd>
    if (rval < 0)
   1015c:	e0bffe17 	ldw	r2,-8(fp)
   10160:	1000070e 	bge	r2,zero,10180 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   10164:	00100900 	call	10090 <alt_get_errno>
   10168:	1007883a 	mov	r3,r2
   1016c:	e0bffe17 	ldw	r2,-8(fp)
   10170:	0085c83a 	sub	r2,zero,r2
   10174:	18800015 	stw	r2,0(r3)
      return -1;
   10178:	00bfffc4 	movi	r2,-1
   1017c:	00000706 	br	1019c <close+0xbc>
    }
    return 0;
   10180:	0005883a 	mov	r2,zero
   10184:	00000506 	br	1019c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10188:	00100900 	call	10090 <alt_get_errno>
   1018c:	1007883a 	mov	r3,r2
   10190:	00801444 	movi	r2,81
   10194:	18800015 	stw	r2,0(r3)
    return -1;
   10198:	00bfffc4 	movi	r2,-1
  }
}
   1019c:	e037883a 	mov	sp,fp
   101a0:	dfc00117 	ldw	ra,4(sp)
   101a4:	df000017 	ldw	fp,0(sp)
   101a8:	dec00204 	addi	sp,sp,8
   101ac:	f800283a 	ret

000101b0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   101b0:	defffc04 	addi	sp,sp,-16
   101b4:	df000315 	stw	fp,12(sp)
   101b8:	df000304 	addi	fp,sp,12
   101bc:	e13ffd15 	stw	r4,-12(fp)
   101c0:	e17ffe15 	stw	r5,-8(fp)
   101c4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   101c8:	e0bfff17 	ldw	r2,-4(fp)
}
   101cc:	e037883a 	mov	sp,fp
   101d0:	df000017 	ldw	fp,0(sp)
   101d4:	dec00104 	addi	sp,sp,4
   101d8:	f800283a 	ret

000101dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   101dc:	defffe04 	addi	sp,sp,-8
   101e0:	dfc00115 	stw	ra,4(sp)
   101e4:	df000015 	stw	fp,0(sp)
   101e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   101ec:	00800074 	movhi	r2,1
   101f0:	1093d504 	addi	r2,r2,20308
   101f4:	10800017 	ldw	r2,0(r2)
   101f8:	10000526 	beq	r2,zero,10210 <alt_get_errno+0x34>
   101fc:	00800074 	movhi	r2,1
   10200:	1093d504 	addi	r2,r2,20308
   10204:	10800017 	ldw	r2,0(r2)
   10208:	103ee83a 	callr	r2
   1020c:	00000206 	br	10218 <alt_get_errno+0x3c>
   10210:	00800074 	movhi	r2,1
   10214:	109a9c04 	addi	r2,r2,27248
}
   10218:	e037883a 	mov	sp,fp
   1021c:	dfc00117 	ldw	ra,4(sp)
   10220:	df000017 	ldw	fp,0(sp)
   10224:	dec00204 	addi	sp,sp,8
   10228:	f800283a 	ret

0001022c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1022c:	defffb04 	addi	sp,sp,-20
   10230:	dfc00415 	stw	ra,16(sp)
   10234:	df000315 	stw	fp,12(sp)
   10238:	df000304 	addi	fp,sp,12
   1023c:	e13ffe15 	stw	r4,-8(fp)
   10240:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10244:	e0bffe17 	ldw	r2,-8(fp)
   10248:	10000616 	blt	r2,zero,10264 <fstat+0x38>
   1024c:	e0bffe17 	ldw	r2,-8(fp)
   10250:	10c00324 	muli	r3,r2,12
   10254:	00800074 	movhi	r2,1
   10258:	108f5204 	addi	r2,r2,15688
   1025c:	1885883a 	add	r2,r3,r2
   10260:	00000106 	br	10268 <fstat+0x3c>
   10264:	0005883a 	mov	r2,zero
   10268:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   1026c:	e0bffd17 	ldw	r2,-12(fp)
   10270:	10001026 	beq	r2,zero,102b4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   10274:	e0bffd17 	ldw	r2,-12(fp)
   10278:	10800017 	ldw	r2,0(r2)
   1027c:	10800817 	ldw	r2,32(r2)
   10280:	10000726 	beq	r2,zero,102a0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   10284:	e0bffd17 	ldw	r2,-12(fp)
   10288:	10800017 	ldw	r2,0(r2)
   1028c:	10800817 	ldw	r2,32(r2)
   10290:	e13ffd17 	ldw	r4,-12(fp)
   10294:	e17fff17 	ldw	r5,-4(fp)
   10298:	103ee83a 	callr	r2
   1029c:	00000a06 	br	102c8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   102a0:	e0bfff17 	ldw	r2,-4(fp)
   102a4:	00c80004 	movi	r3,8192
   102a8:	10c00115 	stw	r3,4(r2)
      return 0;
   102ac:	0005883a 	mov	r2,zero
   102b0:	00000506 	br	102c8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   102b4:	00101dc0 	call	101dc <alt_get_errno>
   102b8:	1007883a 	mov	r3,r2
   102bc:	00801444 	movi	r2,81
   102c0:	18800015 	stw	r2,0(r3)
    return -1;
   102c4:	00bfffc4 	movi	r2,-1
  }
}
   102c8:	e037883a 	mov	sp,fp
   102cc:	dfc00117 	ldw	ra,4(sp)
   102d0:	df000017 	ldw	fp,0(sp)
   102d4:	dec00204 	addi	sp,sp,8
   102d8:	f800283a 	ret

000102dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   102dc:	defffe04 	addi	sp,sp,-8
   102e0:	dfc00115 	stw	ra,4(sp)
   102e4:	df000015 	stw	fp,0(sp)
   102e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   102ec:	00800074 	movhi	r2,1
   102f0:	1093d504 	addi	r2,r2,20308
   102f4:	10800017 	ldw	r2,0(r2)
   102f8:	10000526 	beq	r2,zero,10310 <alt_get_errno+0x34>
   102fc:	00800074 	movhi	r2,1
   10300:	1093d504 	addi	r2,r2,20308
   10304:	10800017 	ldw	r2,0(r2)
   10308:	103ee83a 	callr	r2
   1030c:	00000206 	br	10318 <alt_get_errno+0x3c>
   10310:	00800074 	movhi	r2,1
   10314:	109a9c04 	addi	r2,r2,27248
}
   10318:	e037883a 	mov	sp,fp
   1031c:	dfc00117 	ldw	ra,4(sp)
   10320:	df000017 	ldw	fp,0(sp)
   10324:	dec00204 	addi	sp,sp,8
   10328:	f800283a 	ret

0001032c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1032c:	deffed04 	addi	sp,sp,-76
   10330:	dfc01215 	stw	ra,72(sp)
   10334:	df001115 	stw	fp,68(sp)
   10338:	df001104 	addi	fp,sp,68
   1033c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10340:	e0bfff17 	ldw	r2,-4(fp)
   10344:	10000616 	blt	r2,zero,10360 <isatty+0x34>
   10348:	e0bfff17 	ldw	r2,-4(fp)
   1034c:	10c00324 	muli	r3,r2,12
   10350:	00800074 	movhi	r2,1
   10354:	108f5204 	addi	r2,r2,15688
   10358:	1885883a 	add	r2,r3,r2
   1035c:	00000106 	br	10364 <isatty+0x38>
   10360:	0005883a 	mov	r2,zero
   10364:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   10368:	e0bfef17 	ldw	r2,-68(fp)
   1036c:	10000e26 	beq	r2,zero,103a8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   10370:	e0bfef17 	ldw	r2,-68(fp)
   10374:	10800017 	ldw	r2,0(r2)
   10378:	10800817 	ldw	r2,32(r2)
   1037c:	1000021e 	bne	r2,zero,10388 <isatty+0x5c>
    {
      return 1;
   10380:	00800044 	movi	r2,1
   10384:	00000d06 	br	103bc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   10388:	e0bff004 	addi	r2,fp,-64
   1038c:	e13fff17 	ldw	r4,-4(fp)
   10390:	100b883a 	mov	r5,r2
   10394:	001022c0 	call	1022c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   10398:	e0bff117 	ldw	r2,-60(fp)
   1039c:	10880020 	cmpeqi	r2,r2,8192
   103a0:	10803fcc 	andi	r2,r2,255
   103a4:	00000506 	br	103bc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   103a8:	00102dc0 	call	102dc <alt_get_errno>
   103ac:	1007883a 	mov	r3,r2
   103b0:	00801444 	movi	r2,81
   103b4:	18800015 	stw	r2,0(r3)
    return 0;
   103b8:	0005883a 	mov	r2,zero
  }
}
   103bc:	e037883a 	mov	sp,fp
   103c0:	dfc00117 	ldw	ra,4(sp)
   103c4:	df000017 	ldw	fp,0(sp)
   103c8:	dec00204 	addi	sp,sp,8
   103cc:	f800283a 	ret

000103d0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   103d0:	defffc04 	addi	sp,sp,-16
   103d4:	df000315 	stw	fp,12(sp)
   103d8:	df000304 	addi	fp,sp,12
   103dc:	e13ffd15 	stw	r4,-12(fp)
   103e0:	e17ffe15 	stw	r5,-8(fp)
   103e4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   103e8:	e0fffe17 	ldw	r3,-8(fp)
   103ec:	e0bffd17 	ldw	r2,-12(fp)
   103f0:	18800c26 	beq	r3,r2,10424 <alt_load_section+0x54>
  {
    while( to != end )
   103f4:	00000806 	br	10418 <alt_load_section+0x48>
    {
      *to++ = *from++;
   103f8:	e0bffe17 	ldw	r2,-8(fp)
   103fc:	10c00104 	addi	r3,r2,4
   10400:	e0fffe15 	stw	r3,-8(fp)
   10404:	e0fffd17 	ldw	r3,-12(fp)
   10408:	19000104 	addi	r4,r3,4
   1040c:	e13ffd15 	stw	r4,-12(fp)
   10410:	18c00017 	ldw	r3,0(r3)
   10414:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10418:	e0fffe17 	ldw	r3,-8(fp)
   1041c:	e0bfff17 	ldw	r2,-4(fp)
   10420:	18bff51e 	bne	r3,r2,103f8 <__alt_mem_sram+0xf7e103f8>
    {
      *to++ = *from++;
    }
  }
}
   10424:	e037883a 	mov	sp,fp
   10428:	df000017 	ldw	fp,0(sp)
   1042c:	dec00104 	addi	sp,sp,4
   10430:	f800283a 	ret

00010434 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10434:	defffe04 	addi	sp,sp,-8
   10438:	dfc00115 	stw	ra,4(sp)
   1043c:	df000015 	stw	fp,0(sp)
   10440:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10444:	01000074 	movhi	r4,1
   10448:	2113da04 	addi	r4,r4,20328
   1044c:	01400074 	movhi	r5,1
   10450:	294d1f04 	addi	r5,r5,13436
   10454:	01800074 	movhi	r6,1
   10458:	3193da04 	addi	r6,r6,20328
   1045c:	00103d00 	call	103d0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10460:	01000034 	movhi	r4,0
   10464:	21000804 	addi	r4,r4,32
   10468:	01400034 	movhi	r5,0
   1046c:	29400804 	addi	r5,r5,32
   10470:	01800034 	movhi	r6,0
   10474:	31806f04 	addi	r6,r6,444
   10478:	00103d00 	call	103d0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1047c:	01000074 	movhi	r4,1
   10480:	210a7c04 	addi	r4,r4,10736
   10484:	01400074 	movhi	r5,1
   10488:	294a7c04 	addi	r5,r5,10736
   1048c:	01800074 	movhi	r6,1
   10490:	318d1f04 	addi	r6,r6,13436
   10494:	00103d00 	call	103d0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10498:	00119100 	call	11910 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1049c:	0011b000 	call	11b00 <alt_icache_flush_all>
}
   104a0:	e037883a 	mov	sp,fp
   104a4:	dfc00117 	ldw	ra,4(sp)
   104a8:	df000017 	ldw	fp,0(sp)
   104ac:	dec00204 	addi	sp,sp,8
   104b0:	f800283a 	ret

000104b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   104b4:	defffe04 	addi	sp,sp,-8
   104b8:	dfc00115 	stw	ra,4(sp)
   104bc:	df000015 	stw	fp,0(sp)
   104c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   104c4:	00800074 	movhi	r2,1
   104c8:	1093d504 	addi	r2,r2,20308
   104cc:	10800017 	ldw	r2,0(r2)
   104d0:	10000526 	beq	r2,zero,104e8 <alt_get_errno+0x34>
   104d4:	00800074 	movhi	r2,1
   104d8:	1093d504 	addi	r2,r2,20308
   104dc:	10800017 	ldw	r2,0(r2)
   104e0:	103ee83a 	callr	r2
   104e4:	00000206 	br	104f0 <alt_get_errno+0x3c>
   104e8:	00800074 	movhi	r2,1
   104ec:	109a9c04 	addi	r2,r2,27248
}
   104f0:	e037883a 	mov	sp,fp
   104f4:	dfc00117 	ldw	ra,4(sp)
   104f8:	df000017 	ldw	fp,0(sp)
   104fc:	dec00204 	addi	sp,sp,8
   10500:	f800283a 	ret

00010504 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   10504:	defff904 	addi	sp,sp,-28
   10508:	dfc00615 	stw	ra,24(sp)
   1050c:	df000515 	stw	fp,20(sp)
   10510:	df000504 	addi	fp,sp,20
   10514:	e13ffd15 	stw	r4,-12(fp)
   10518:	e17ffe15 	stw	r5,-8(fp)
   1051c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   10520:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10524:	e0bffd17 	ldw	r2,-12(fp)
   10528:	10000616 	blt	r2,zero,10544 <lseek+0x40>
   1052c:	e0bffd17 	ldw	r2,-12(fp)
   10530:	10c00324 	muli	r3,r2,12
   10534:	00800074 	movhi	r2,1
   10538:	108f5204 	addi	r2,r2,15688
   1053c:	1885883a 	add	r2,r3,r2
   10540:	00000106 	br	10548 <lseek+0x44>
   10544:	0005883a 	mov	r2,zero
   10548:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1054c:	e0bffc17 	ldw	r2,-16(fp)
   10550:	10001026 	beq	r2,zero,10594 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   10554:	e0bffc17 	ldw	r2,-16(fp)
   10558:	10800017 	ldw	r2,0(r2)
   1055c:	10800717 	ldw	r2,28(r2)
   10560:	10000926 	beq	r2,zero,10588 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   10564:	e0bffc17 	ldw	r2,-16(fp)
   10568:	10800017 	ldw	r2,0(r2)
   1056c:	10800717 	ldw	r2,28(r2)
   10570:	e13ffc17 	ldw	r4,-16(fp)
   10574:	e17ffe17 	ldw	r5,-8(fp)
   10578:	e1bfff17 	ldw	r6,-4(fp)
   1057c:	103ee83a 	callr	r2
   10580:	e0bffb15 	stw	r2,-20(fp)
   10584:	00000506 	br	1059c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   10588:	00bfde84 	movi	r2,-134
   1058c:	e0bffb15 	stw	r2,-20(fp)
   10590:	00000206 	br	1059c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   10594:	00bfebc4 	movi	r2,-81
   10598:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1059c:	e0bffb17 	ldw	r2,-20(fp)
   105a0:	1000070e 	bge	r2,zero,105c0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   105a4:	00104b40 	call	104b4 <alt_get_errno>
   105a8:	1007883a 	mov	r3,r2
   105ac:	e0bffb17 	ldw	r2,-20(fp)
   105b0:	0085c83a 	sub	r2,zero,r2
   105b4:	18800015 	stw	r2,0(r3)
    rc = -1;
   105b8:	00bfffc4 	movi	r2,-1
   105bc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   105c0:	e0bffb17 	ldw	r2,-20(fp)
}
   105c4:	e037883a 	mov	sp,fp
   105c8:	dfc00117 	ldw	ra,4(sp)
   105cc:	df000017 	ldw	fp,0(sp)
   105d0:	dec00204 	addi	sp,sp,8
   105d4:	f800283a 	ret

000105d8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   105d8:	defffd04 	addi	sp,sp,-12
   105dc:	dfc00215 	stw	ra,8(sp)
   105e0:	df000115 	stw	fp,4(sp)
   105e4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   105e8:	0009883a 	mov	r4,zero
   105ec:	0010a9c0 	call	10a9c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   105f0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   105f4:	0010ad00 	call	10ad0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   105f8:	01000074 	movhi	r4,1
   105fc:	210d1704 	addi	r4,r4,13404
   10600:	01400074 	movhi	r5,1
   10604:	294d1704 	addi	r5,r5,13404
   10608:	01800074 	movhi	r6,1
   1060c:	318d1704 	addi	r6,r6,13404
   10610:	0011ec00 	call	11ec0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   10614:	0011a480 	call	11a48 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   10618:	01000074 	movhi	r4,1
   1061c:	2106a904 	addi	r4,r4,6820
   10620:	001264c0 	call	1264c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10624:	d126d317 	ldw	r4,-25780(gp)
   10628:	d0e6d417 	ldw	r3,-25776(gp)
   1062c:	d0a6d517 	ldw	r2,-25772(gp)
   10630:	180b883a 	mov	r5,r3
   10634:	100d883a 	mov	r6,r2
   10638:	000025c0 	call	25c <main>
   1063c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   10640:	01000044 	movi	r4,1
   10644:	00100e00 	call	100e0 <close>
  exit (result);
   10648:	e13fff17 	ldw	r4,-4(fp)
   1064c:	00126600 	call	12660 <exit>

00010650 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   10650:	defffe04 	addi	sp,sp,-8
   10654:	df000115 	stw	fp,4(sp)
   10658:	df000104 	addi	fp,sp,4
   1065c:	e13fff15 	stw	r4,-4(fp)
}
   10660:	e037883a 	mov	sp,fp
   10664:	df000017 	ldw	fp,0(sp)
   10668:	dec00104 	addi	sp,sp,4
   1066c:	f800283a 	ret

00010670 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   10670:	defffe04 	addi	sp,sp,-8
   10674:	df000115 	stw	fp,4(sp)
   10678:	df000104 	addi	fp,sp,4
   1067c:	e13fff15 	stw	r4,-4(fp)
}
   10680:	e037883a 	mov	sp,fp
   10684:	df000017 	ldw	fp,0(sp)
   10688:	dec00104 	addi	sp,sp,4
   1068c:	f800283a 	ret

00010690 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10690:	defffe04 	addi	sp,sp,-8
   10694:	dfc00115 	stw	ra,4(sp)
   10698:	df000015 	stw	fp,0(sp)
   1069c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   106a0:	00800074 	movhi	r2,1
   106a4:	1093d504 	addi	r2,r2,20308
   106a8:	10800017 	ldw	r2,0(r2)
   106ac:	10000526 	beq	r2,zero,106c4 <alt_get_errno+0x34>
   106b0:	00800074 	movhi	r2,1
   106b4:	1093d504 	addi	r2,r2,20308
   106b8:	10800017 	ldw	r2,0(r2)
   106bc:	103ee83a 	callr	r2
   106c0:	00000206 	br	106cc <alt_get_errno+0x3c>
   106c4:	00800074 	movhi	r2,1
   106c8:	109a9c04 	addi	r2,r2,27248
}
   106cc:	e037883a 	mov	sp,fp
   106d0:	dfc00117 	ldw	ra,4(sp)
   106d4:	df000017 	ldw	fp,0(sp)
   106d8:	dec00204 	addi	sp,sp,8
   106dc:	f800283a 	ret

000106e0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   106e0:	defff904 	addi	sp,sp,-28
   106e4:	dfc00615 	stw	ra,24(sp)
   106e8:	df000515 	stw	fp,20(sp)
   106ec:	df000504 	addi	fp,sp,20
   106f0:	e13ffd15 	stw	r4,-12(fp)
   106f4:	e17ffe15 	stw	r5,-8(fp)
   106f8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   106fc:	e0bffd17 	ldw	r2,-12(fp)
   10700:	10000616 	blt	r2,zero,1071c <read+0x3c>
   10704:	e0bffd17 	ldw	r2,-12(fp)
   10708:	10c00324 	muli	r3,r2,12
   1070c:	00800074 	movhi	r2,1
   10710:	108f5204 	addi	r2,r2,15688
   10714:	1885883a 	add	r2,r3,r2
   10718:	00000106 	br	10720 <read+0x40>
   1071c:	0005883a 	mov	r2,zero
   10720:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10724:	e0bffb17 	ldw	r2,-20(fp)
   10728:	10002226 	beq	r2,zero,107b4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1072c:	e0bffb17 	ldw	r2,-20(fp)
   10730:	10800217 	ldw	r2,8(r2)
   10734:	108000cc 	andi	r2,r2,3
   10738:	10800060 	cmpeqi	r2,r2,1
   1073c:	1000181e 	bne	r2,zero,107a0 <read+0xc0>
        (fd->dev->read))
   10740:	e0bffb17 	ldw	r2,-20(fp)
   10744:	10800017 	ldw	r2,0(r2)
   10748:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1074c:	10001426 	beq	r2,zero,107a0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   10750:	e0bffb17 	ldw	r2,-20(fp)
   10754:	10800017 	ldw	r2,0(r2)
   10758:	10800517 	ldw	r2,20(r2)
   1075c:	e0ffff17 	ldw	r3,-4(fp)
   10760:	e13ffb17 	ldw	r4,-20(fp)
   10764:	e17ffe17 	ldw	r5,-8(fp)
   10768:	180d883a 	mov	r6,r3
   1076c:	103ee83a 	callr	r2
   10770:	e0bffc15 	stw	r2,-16(fp)
   10774:	e0bffc17 	ldw	r2,-16(fp)
   10778:	1000070e 	bge	r2,zero,10798 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   1077c:	00106900 	call	10690 <alt_get_errno>
   10780:	1007883a 	mov	r3,r2
   10784:	e0bffc17 	ldw	r2,-16(fp)
   10788:	0085c83a 	sub	r2,zero,r2
   1078c:	18800015 	stw	r2,0(r3)
          return -1;
   10790:	00bfffc4 	movi	r2,-1
   10794:	00000c06 	br	107c8 <read+0xe8>
        }
        return rval;
   10798:	e0bffc17 	ldw	r2,-16(fp)
   1079c:	00000a06 	br	107c8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   107a0:	00106900 	call	10690 <alt_get_errno>
   107a4:	1007883a 	mov	r3,r2
   107a8:	00800344 	movi	r2,13
   107ac:	18800015 	stw	r2,0(r3)
   107b0:	00000406 	br	107c4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   107b4:	00106900 	call	10690 <alt_get_errno>
   107b8:	1007883a 	mov	r3,r2
   107bc:	00801444 	movi	r2,81
   107c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   107c4:	00bfffc4 	movi	r2,-1
}
   107c8:	e037883a 	mov	sp,fp
   107cc:	dfc00117 	ldw	ra,4(sp)
   107d0:	df000017 	ldw	fp,0(sp)
   107d4:	dec00204 	addi	sp,sp,8
   107d8:	f800283a 	ret

000107dc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   107dc:	defffe04 	addi	sp,sp,-8
   107e0:	df000115 	stw	fp,4(sp)
   107e4:	df000104 	addi	fp,sp,4
   107e8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   107ec:	e0bfff17 	ldw	r2,-4(fp)
   107f0:	108000d0 	cmplti	r2,r2,3
   107f4:	10000d1e 	bne	r2,zero,1082c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   107f8:	00800074 	movhi	r2,1
   107fc:	108f5204 	addi	r2,r2,15688
   10800:	e0ffff17 	ldw	r3,-4(fp)
   10804:	18c00324 	muli	r3,r3,12
   10808:	10c5883a 	add	r2,r2,r3
   1080c:	10800204 	addi	r2,r2,8
   10810:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   10814:	00800074 	movhi	r2,1
   10818:	108f5204 	addi	r2,r2,15688
   1081c:	e0ffff17 	ldw	r3,-4(fp)
   10820:	18c00324 	muli	r3,r3,12
   10824:	10c5883a 	add	r2,r2,r3
   10828:	10000015 	stw	zero,0(r2)
  }
}
   1082c:	e037883a 	mov	sp,fp
   10830:	df000017 	ldw	fp,0(sp)
   10834:	dec00104 	addi	sp,sp,4
   10838:	f800283a 	ret

0001083c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1083c:	defff904 	addi	sp,sp,-28
   10840:	df000615 	stw	fp,24(sp)
   10844:	df000604 	addi	fp,sp,24
   10848:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1084c:	0005303a 	rdctl	r2,status
   10850:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10854:	e0fffc17 	ldw	r3,-16(fp)
   10858:	00bfff84 	movi	r2,-2
   1085c:	1884703a 	and	r2,r3,r2
   10860:	1001703a 	wrctl	status,r2
  
  return context;
   10864:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   10868:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1086c:	d0a00c17 	ldw	r2,-32720(gp)
   10870:	10c000c4 	addi	r3,r2,3
   10874:	00bfff04 	movi	r2,-4
   10878:	1884703a 	and	r2,r3,r2
   1087c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   10880:	d0e00c17 	ldw	r3,-32720(gp)
   10884:	e0bfff17 	ldw	r2,-4(fp)
   10888:	1887883a 	add	r3,r3,r2
   1088c:	00820034 	movhi	r2,2048
   10890:	10800004 	addi	r2,r2,0
   10894:	10c0062e 	bgeu	r2,r3,108b0 <sbrk+0x74>
   10898:	e0bffa17 	ldw	r2,-24(fp)
   1089c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   108a0:	e0bffd17 	ldw	r2,-12(fp)
   108a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   108a8:	00bfffc4 	movi	r2,-1
   108ac:	00000b06 	br	108dc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   108b0:	d0a00c17 	ldw	r2,-32720(gp)
   108b4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   108b8:	d0e00c17 	ldw	r3,-32720(gp)
   108bc:	e0bfff17 	ldw	r2,-4(fp)
   108c0:	1885883a 	add	r2,r3,r2
   108c4:	d0a00c15 	stw	r2,-32720(gp)
   108c8:	e0bffa17 	ldw	r2,-24(fp)
   108cc:	e0bffe15 	stw	r2,-8(fp)
   108d0:	e0bffe17 	ldw	r2,-8(fp)
   108d4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   108d8:	e0bffb17 	ldw	r2,-20(fp)
} 
   108dc:	e037883a 	mov	sp,fp
   108e0:	df000017 	ldw	fp,0(sp)
   108e4:	dec00104 	addi	sp,sp,4
   108e8:	f800283a 	ret

000108ec <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   108ec:	defffd04 	addi	sp,sp,-12
   108f0:	dfc00215 	stw	ra,8(sp)
   108f4:	df000115 	stw	fp,4(sp)
   108f8:	df000104 	addi	fp,sp,4
   108fc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   10900:	e13fff17 	ldw	r4,-4(fp)
   10904:	00117b80 	call	117b8 <alt_busy_sleep>
}
   10908:	e037883a 	mov	sp,fp
   1090c:	dfc00117 	ldw	ra,4(sp)
   10910:	df000017 	ldw	fp,0(sp)
   10914:	dec00204 	addi	sp,sp,8
   10918:	f800283a 	ret

0001091c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1091c:	defffe04 	addi	sp,sp,-8
   10920:	dfc00115 	stw	ra,4(sp)
   10924:	df000015 	stw	fp,0(sp)
   10928:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1092c:	00800074 	movhi	r2,1
   10930:	1093d504 	addi	r2,r2,20308
   10934:	10800017 	ldw	r2,0(r2)
   10938:	10000526 	beq	r2,zero,10950 <alt_get_errno+0x34>
   1093c:	00800074 	movhi	r2,1
   10940:	1093d504 	addi	r2,r2,20308
   10944:	10800017 	ldw	r2,0(r2)
   10948:	103ee83a 	callr	r2
   1094c:	00000206 	br	10958 <alt_get_errno+0x3c>
   10950:	00800074 	movhi	r2,1
   10954:	109a9c04 	addi	r2,r2,27248
}
   10958:	e037883a 	mov	sp,fp
   1095c:	dfc00117 	ldw	ra,4(sp)
   10960:	df000017 	ldw	fp,0(sp)
   10964:	dec00204 	addi	sp,sp,8
   10968:	f800283a 	ret

0001096c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1096c:	defff904 	addi	sp,sp,-28
   10970:	dfc00615 	stw	ra,24(sp)
   10974:	df000515 	stw	fp,20(sp)
   10978:	df000504 	addi	fp,sp,20
   1097c:	e13ffd15 	stw	r4,-12(fp)
   10980:	e17ffe15 	stw	r5,-8(fp)
   10984:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10988:	e0bffd17 	ldw	r2,-12(fp)
   1098c:	10000616 	blt	r2,zero,109a8 <write+0x3c>
   10990:	e0bffd17 	ldw	r2,-12(fp)
   10994:	10c00324 	muli	r3,r2,12
   10998:	00800074 	movhi	r2,1
   1099c:	108f5204 	addi	r2,r2,15688
   109a0:	1885883a 	add	r2,r3,r2
   109a4:	00000106 	br	109ac <write+0x40>
   109a8:	0005883a 	mov	r2,zero
   109ac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   109b0:	e0bffb17 	ldw	r2,-20(fp)
   109b4:	10002126 	beq	r2,zero,10a3c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   109b8:	e0bffb17 	ldw	r2,-20(fp)
   109bc:	10800217 	ldw	r2,8(r2)
   109c0:	108000cc 	andi	r2,r2,3
   109c4:	10001826 	beq	r2,zero,10a28 <write+0xbc>
   109c8:	e0bffb17 	ldw	r2,-20(fp)
   109cc:	10800017 	ldw	r2,0(r2)
   109d0:	10800617 	ldw	r2,24(r2)
   109d4:	10001426 	beq	r2,zero,10a28 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   109d8:	e0bffb17 	ldw	r2,-20(fp)
   109dc:	10800017 	ldw	r2,0(r2)
   109e0:	10800617 	ldw	r2,24(r2)
   109e4:	e0ffff17 	ldw	r3,-4(fp)
   109e8:	e13ffb17 	ldw	r4,-20(fp)
   109ec:	e17ffe17 	ldw	r5,-8(fp)
   109f0:	180d883a 	mov	r6,r3
   109f4:	103ee83a 	callr	r2
   109f8:	e0bffc15 	stw	r2,-16(fp)
   109fc:	e0bffc17 	ldw	r2,-16(fp)
   10a00:	1000070e 	bge	r2,zero,10a20 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   10a04:	001091c0 	call	1091c <alt_get_errno>
   10a08:	1007883a 	mov	r3,r2
   10a0c:	e0bffc17 	ldw	r2,-16(fp)
   10a10:	0085c83a 	sub	r2,zero,r2
   10a14:	18800015 	stw	r2,0(r3)
        return -1;
   10a18:	00bfffc4 	movi	r2,-1
   10a1c:	00000c06 	br	10a50 <write+0xe4>
      }
      return rval;
   10a20:	e0bffc17 	ldw	r2,-16(fp)
   10a24:	00000a06 	br	10a50 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   10a28:	001091c0 	call	1091c <alt_get_errno>
   10a2c:	1007883a 	mov	r3,r2
   10a30:	00800344 	movi	r2,13
   10a34:	18800015 	stw	r2,0(r3)
   10a38:	00000406 	br	10a4c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   10a3c:	001091c0 	call	1091c <alt_get_errno>
   10a40:	1007883a 	mov	r3,r2
   10a44:	00801444 	movi	r2,81
   10a48:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10a4c:	00bfffc4 	movi	r2,-1
}
   10a50:	e037883a 	mov	sp,fp
   10a54:	dfc00117 	ldw	ra,4(sp)
   10a58:	df000017 	ldw	fp,0(sp)
   10a5c:	dec00204 	addi	sp,sp,8
   10a60:	f800283a 	ret

00010a64 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   10a64:	defffd04 	addi	sp,sp,-12
   10a68:	dfc00215 	stw	ra,8(sp)
   10a6c:	df000115 	stw	fp,4(sp)
   10a70:	df000104 	addi	fp,sp,4
   10a74:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10a78:	e13fff17 	ldw	r4,-4(fp)
   10a7c:	01400074 	movhi	r5,1
   10a80:	2953d204 	addi	r5,r5,20296
   10a84:	00119a40 	call	119a4 <alt_dev_llist_insert>
}
   10a88:	e037883a 	mov	sp,fp
   10a8c:	dfc00117 	ldw	ra,4(sp)
   10a90:	df000017 	ldw	fp,0(sp)
   10a94:	dec00204 	addi	sp,sp,8
   10a98:	f800283a 	ret

00010a9c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10a9c:	defffd04 	addi	sp,sp,-12
   10aa0:	dfc00215 	stw	ra,8(sp)
   10aa4:	df000115 	stw	fp,4(sp)
   10aa8:	df000104 	addi	fp,sp,4
   10aac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   10ab0:	00123480 	call	12348 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10ab4:	00800044 	movi	r2,1
   10ab8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10abc:	e037883a 	mov	sp,fp
   10ac0:	dfc00117 	ldw	ra,4(sp)
   10ac4:	df000017 	ldw	fp,0(sp)
   10ac8:	dec00204 	addi	sp,sp,8
   10acc:	f800283a 	ret

00010ad0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10ad0:	defffe04 	addi	sp,sp,-8
   10ad4:	dfc00115 	stw	ra,4(sp)
   10ad8:	df000015 	stw	fp,0(sp)
   10adc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   10ae0:	01020034 	movhi	r4,2048
   10ae4:	21040004 	addi	r4,r4,4096
   10ae8:	000b883a 	mov	r5,zero
   10aec:	000d883a 	mov	r6,zero
   10af0:	01c0fa04 	movi	r7,1000
   10af4:	00115f00 	call	115f0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_STAMP, timer_stamp);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   10af8:	01000074 	movhi	r4,1
   10afc:	210fbc04 	addi	r4,r4,16112
   10b00:	000b883a 	mov	r5,zero
   10b04:	018000c4 	movi	r6,3
   10b08:	0010c940 	call	10c94 <altera_avalon_jtag_uart_init>
   10b0c:	01000074 	movhi	r4,1
   10b10:	210fb204 	addi	r4,r4,16072
   10b14:	0010a640 	call	10a64 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   10b18:	0001883a 	nop
}
   10b1c:	e037883a 	mov	sp,fp
   10b20:	dfc00117 	ldw	ra,4(sp)
   10b24:	df000017 	ldw	fp,0(sp)
   10b28:	dec00204 	addi	sp,sp,8
   10b2c:	f800283a 	ret

00010b30 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   10b30:	defffa04 	addi	sp,sp,-24
   10b34:	dfc00515 	stw	ra,20(sp)
   10b38:	df000415 	stw	fp,16(sp)
   10b3c:	df000404 	addi	fp,sp,16
   10b40:	e13ffd15 	stw	r4,-12(fp)
   10b44:	e17ffe15 	stw	r5,-8(fp)
   10b48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10b4c:	e0bffd17 	ldw	r2,-12(fp)
   10b50:	10800017 	ldw	r2,0(r2)
   10b54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   10b58:	e0bffc17 	ldw	r2,-16(fp)
   10b5c:	10c00a04 	addi	r3,r2,40
   10b60:	e0bffd17 	ldw	r2,-12(fp)
   10b64:	10800217 	ldw	r2,8(r2)
   10b68:	1809883a 	mov	r4,r3
   10b6c:	e17ffe17 	ldw	r5,-8(fp)
   10b70:	e1bfff17 	ldw	r6,-4(fp)
   10b74:	100f883a 	mov	r7,r2
   10b78:	00111580 	call	11158 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   10b7c:	e037883a 	mov	sp,fp
   10b80:	dfc00117 	ldw	ra,4(sp)
   10b84:	df000017 	ldw	fp,0(sp)
   10b88:	dec00204 	addi	sp,sp,8
   10b8c:	f800283a 	ret

00010b90 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10b90:	defffa04 	addi	sp,sp,-24
   10b94:	dfc00515 	stw	ra,20(sp)
   10b98:	df000415 	stw	fp,16(sp)
   10b9c:	df000404 	addi	fp,sp,16
   10ba0:	e13ffd15 	stw	r4,-12(fp)
   10ba4:	e17ffe15 	stw	r5,-8(fp)
   10ba8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10bac:	e0bffd17 	ldw	r2,-12(fp)
   10bb0:	10800017 	ldw	r2,0(r2)
   10bb4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   10bb8:	e0bffc17 	ldw	r2,-16(fp)
   10bbc:	10c00a04 	addi	r3,r2,40
   10bc0:	e0bffd17 	ldw	r2,-12(fp)
   10bc4:	10800217 	ldw	r2,8(r2)
   10bc8:	1809883a 	mov	r4,r3
   10bcc:	e17ffe17 	ldw	r5,-8(fp)
   10bd0:	e1bfff17 	ldw	r6,-4(fp)
   10bd4:	100f883a 	mov	r7,r2
   10bd8:	00113640 	call	11364 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   10bdc:	e037883a 	mov	sp,fp
   10be0:	dfc00117 	ldw	ra,4(sp)
   10be4:	df000017 	ldw	fp,0(sp)
   10be8:	dec00204 	addi	sp,sp,8
   10bec:	f800283a 	ret

00010bf0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   10bf0:	defffc04 	addi	sp,sp,-16
   10bf4:	dfc00315 	stw	ra,12(sp)
   10bf8:	df000215 	stw	fp,8(sp)
   10bfc:	df000204 	addi	fp,sp,8
   10c00:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10c04:	e0bfff17 	ldw	r2,-4(fp)
   10c08:	10800017 	ldw	r2,0(r2)
   10c0c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   10c10:	e0bffe17 	ldw	r2,-8(fp)
   10c14:	10c00a04 	addi	r3,r2,40
   10c18:	e0bfff17 	ldw	r2,-4(fp)
   10c1c:	10800217 	ldw	r2,8(r2)
   10c20:	1809883a 	mov	r4,r3
   10c24:	100b883a 	mov	r5,r2
   10c28:	00110040 	call	11004 <altera_avalon_jtag_uart_close>
}
   10c2c:	e037883a 	mov	sp,fp
   10c30:	dfc00117 	ldw	ra,4(sp)
   10c34:	df000017 	ldw	fp,0(sp)
   10c38:	dec00204 	addi	sp,sp,8
   10c3c:	f800283a 	ret

00010c40 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   10c40:	defffa04 	addi	sp,sp,-24
   10c44:	dfc00515 	stw	ra,20(sp)
   10c48:	df000415 	stw	fp,16(sp)
   10c4c:	df000404 	addi	fp,sp,16
   10c50:	e13ffd15 	stw	r4,-12(fp)
   10c54:	e17ffe15 	stw	r5,-8(fp)
   10c58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   10c5c:	e0bffd17 	ldw	r2,-12(fp)
   10c60:	10800017 	ldw	r2,0(r2)
   10c64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   10c68:	e0bffc17 	ldw	r2,-16(fp)
   10c6c:	10800a04 	addi	r2,r2,40
   10c70:	1009883a 	mov	r4,r2
   10c74:	e17ffe17 	ldw	r5,-8(fp)
   10c78:	e1bfff17 	ldw	r6,-4(fp)
   10c7c:	001106c0 	call	1106c <altera_avalon_jtag_uart_ioctl>
}
   10c80:	e037883a 	mov	sp,fp
   10c84:	dfc00117 	ldw	ra,4(sp)
   10c88:	df000017 	ldw	fp,0(sp)
   10c8c:	dec00204 	addi	sp,sp,8
   10c90:	f800283a 	ret

00010c94 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   10c94:	defffa04 	addi	sp,sp,-24
   10c98:	dfc00515 	stw	ra,20(sp)
   10c9c:	df000415 	stw	fp,16(sp)
   10ca0:	df000404 	addi	fp,sp,16
   10ca4:	e13ffd15 	stw	r4,-12(fp)
   10ca8:	e17ffe15 	stw	r5,-8(fp)
   10cac:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10cb0:	e0bffd17 	ldw	r2,-12(fp)
   10cb4:	00c00044 	movi	r3,1
   10cb8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   10cbc:	e0bffd17 	ldw	r2,-12(fp)
   10cc0:	10800017 	ldw	r2,0(r2)
   10cc4:	10800104 	addi	r2,r2,4
   10cc8:	1007883a 	mov	r3,r2
   10ccc:	e0bffd17 	ldw	r2,-12(fp)
   10cd0:	10800817 	ldw	r2,32(r2)
   10cd4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   10cd8:	e0fffe17 	ldw	r3,-8(fp)
   10cdc:	e0bfff17 	ldw	r2,-4(fp)
   10ce0:	d8000015 	stw	zero,0(sp)
   10ce4:	1809883a 	mov	r4,r3
   10ce8:	100b883a 	mov	r5,r2
   10cec:	01800074 	movhi	r6,1
   10cf0:	31835604 	addi	r6,r6,3416
   10cf4:	e1fffd17 	ldw	r7,-12(fp)
   10cf8:	0011b300 	call	11b30 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   10cfc:	e0bffd17 	ldw	r2,-12(fp)
   10d00:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   10d04:	e0bffd17 	ldw	r2,-12(fp)
   10d08:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10d0c:	00800074 	movhi	r2,1
   10d10:	109aa104 	addi	r2,r2,27268
   10d14:	10800017 	ldw	r2,0(r2)
   10d18:	1809883a 	mov	r4,r3
   10d1c:	100b883a 	mov	r5,r2
   10d20:	01800074 	movhi	r6,1
   10d24:	3183d704 	addi	r6,r6,3932
   10d28:	e1fffd17 	ldw	r7,-12(fp)
   10d2c:	00116780 	call	11678 <alt_alarm_start>
   10d30:	1000040e 	bge	r2,zero,10d44 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   10d34:	e0fffd17 	ldw	r3,-12(fp)
   10d38:	00a00034 	movhi	r2,32768
   10d3c:	10bfffc4 	addi	r2,r2,-1
   10d40:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   10d44:	e037883a 	mov	sp,fp
   10d48:	dfc00117 	ldw	ra,4(sp)
   10d4c:	df000017 	ldw	fp,0(sp)
   10d50:	dec00204 	addi	sp,sp,8
   10d54:	f800283a 	ret

00010d58 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   10d58:	defff804 	addi	sp,sp,-32
   10d5c:	df000715 	stw	fp,28(sp)
   10d60:	df000704 	addi	fp,sp,28
   10d64:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   10d68:	e0bfff17 	ldw	r2,-4(fp)
   10d6c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   10d70:	e0bffb17 	ldw	r2,-20(fp)
   10d74:	10800017 	ldw	r2,0(r2)
   10d78:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10d7c:	e0bffc17 	ldw	r2,-16(fp)
   10d80:	10800104 	addi	r2,r2,4
   10d84:	10800037 	ldwio	r2,0(r2)
   10d88:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10d8c:	e0bffd17 	ldw	r2,-12(fp)
   10d90:	1080c00c 	andi	r2,r2,768
   10d94:	1000011e 	bne	r2,zero,10d9c <altera_avalon_jtag_uart_irq+0x44>
      break;
   10d98:	00006c06 	br	10f4c <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   10d9c:	e0bffd17 	ldw	r2,-12(fp)
   10da0:	1080400c 	andi	r2,r2,256
   10da4:	10003426 	beq	r2,zero,10e78 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   10da8:	00800074 	movhi	r2,1
   10dac:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10db0:	e0bffb17 	ldw	r2,-20(fp)
   10db4:	10800a17 	ldw	r2,40(r2)
   10db8:	10800044 	addi	r2,r2,1
   10dbc:	1081ffcc 	andi	r2,r2,2047
   10dc0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   10dc4:	e0bffb17 	ldw	r2,-20(fp)
   10dc8:	10c00b17 	ldw	r3,44(r2)
   10dcc:	e0bffe17 	ldw	r2,-8(fp)
   10dd0:	1880011e 	bne	r3,r2,10dd8 <altera_avalon_jtag_uart_irq+0x80>
          break;
   10dd4:	00001606 	br	10e30 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   10dd8:	e0bffc17 	ldw	r2,-16(fp)
   10ddc:	10800037 	ldwio	r2,0(r2)
   10de0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   10de4:	e0bff917 	ldw	r2,-28(fp)
   10de8:	10a0000c 	andi	r2,r2,32768
   10dec:	1000011e 	bne	r2,zero,10df4 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   10df0:	00000f06 	br	10e30 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   10df4:	e0bffb17 	ldw	r2,-20(fp)
   10df8:	10800a17 	ldw	r2,40(r2)
   10dfc:	e0fff917 	ldw	r3,-28(fp)
   10e00:	1809883a 	mov	r4,r3
   10e04:	e0fffb17 	ldw	r3,-20(fp)
   10e08:	1885883a 	add	r2,r3,r2
   10e0c:	10800e04 	addi	r2,r2,56
   10e10:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10e14:	e0bffb17 	ldw	r2,-20(fp)
   10e18:	10800a17 	ldw	r2,40(r2)
   10e1c:	10800044 	addi	r2,r2,1
   10e20:	10c1ffcc 	andi	r3,r2,2047
   10e24:	e0bffb17 	ldw	r2,-20(fp)
   10e28:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   10e2c:	003fe006 	br	10db0 <__alt_mem_sram+0xf7e10db0>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   10e30:	e0bff917 	ldw	r2,-28(fp)
   10e34:	10bfffec 	andhi	r2,r2,65535
   10e38:	10000f26 	beq	r2,zero,10e78 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10e3c:	e0bffb17 	ldw	r2,-20(fp)
   10e40:	10c00817 	ldw	r3,32(r2)
   10e44:	00bfff84 	movi	r2,-2
   10e48:	1886703a 	and	r3,r3,r2
   10e4c:	e0bffb17 	ldw	r2,-20(fp)
   10e50:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   10e54:	e0bffc17 	ldw	r2,-16(fp)
   10e58:	10800104 	addi	r2,r2,4
   10e5c:	1007883a 	mov	r3,r2
   10e60:	e0bffb17 	ldw	r2,-20(fp)
   10e64:	10800817 	ldw	r2,32(r2)
   10e68:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10e6c:	e0bffc17 	ldw	r2,-16(fp)
   10e70:	10800104 	addi	r2,r2,4
   10e74:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   10e78:	e0bffd17 	ldw	r2,-12(fp)
   10e7c:	1080800c 	andi	r2,r2,512
   10e80:	10003126 	beq	r2,zero,10f48 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   10e84:	e0bffd17 	ldw	r2,-12(fp)
   10e88:	1004d43a 	srli	r2,r2,16
   10e8c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   10e90:	00001406 	br	10ee4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   10e94:	e0bffc17 	ldw	r2,-16(fp)
   10e98:	e0fffb17 	ldw	r3,-20(fp)
   10e9c:	18c00d17 	ldw	r3,52(r3)
   10ea0:	e13ffb17 	ldw	r4,-20(fp)
   10ea4:	20c7883a 	add	r3,r4,r3
   10ea8:	18c20e04 	addi	r3,r3,2104
   10eac:	18c00003 	ldbu	r3,0(r3)
   10eb0:	18c03fcc 	andi	r3,r3,255
   10eb4:	18c0201c 	xori	r3,r3,128
   10eb8:	18ffe004 	addi	r3,r3,-128
   10ebc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10ec0:	e0bffb17 	ldw	r2,-20(fp)
   10ec4:	10800d17 	ldw	r2,52(r2)
   10ec8:	10800044 	addi	r2,r2,1
   10ecc:	10c1ffcc 	andi	r3,r2,2047
   10ed0:	e0bffb17 	ldw	r2,-20(fp)
   10ed4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   10ed8:	e0bffa17 	ldw	r2,-24(fp)
   10edc:	10bfffc4 	addi	r2,r2,-1
   10ee0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   10ee4:	e0bffa17 	ldw	r2,-24(fp)
   10ee8:	10000526 	beq	r2,zero,10f00 <altera_avalon_jtag_uart_irq+0x1a8>
   10eec:	e0bffb17 	ldw	r2,-20(fp)
   10ef0:	10c00d17 	ldw	r3,52(r2)
   10ef4:	e0bffb17 	ldw	r2,-20(fp)
   10ef8:	10800c17 	ldw	r2,48(r2)
   10efc:	18bfe51e 	bne	r3,r2,10e94 <__alt_mem_sram+0xf7e10e94>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   10f00:	e0bffa17 	ldw	r2,-24(fp)
   10f04:	10001026 	beq	r2,zero,10f48 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10f08:	e0bffb17 	ldw	r2,-20(fp)
   10f0c:	10c00817 	ldw	r3,32(r2)
   10f10:	00bfff44 	movi	r2,-3
   10f14:	1886703a 	and	r3,r3,r2
   10f18:	e0bffb17 	ldw	r2,-20(fp)
   10f1c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10f20:	e0bffb17 	ldw	r2,-20(fp)
   10f24:	10800017 	ldw	r2,0(r2)
   10f28:	10800104 	addi	r2,r2,4
   10f2c:	1007883a 	mov	r3,r2
   10f30:	e0bffb17 	ldw	r2,-20(fp)
   10f34:	10800817 	ldw	r2,32(r2)
   10f38:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10f3c:	e0bffc17 	ldw	r2,-16(fp)
   10f40:	10800104 	addi	r2,r2,4
   10f44:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   10f48:	003f8c06 	br	10d7c <__alt_mem_sram+0xf7e10d7c>
}
   10f4c:	e037883a 	mov	sp,fp
   10f50:	df000017 	ldw	fp,0(sp)
   10f54:	dec00104 	addi	sp,sp,4
   10f58:	f800283a 	ret

00010f5c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   10f5c:	defff804 	addi	sp,sp,-32
   10f60:	df000715 	stw	fp,28(sp)
   10f64:	df000704 	addi	fp,sp,28
   10f68:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   10f6c:	e0bffb17 	ldw	r2,-20(fp)
   10f70:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   10f74:	e0bff917 	ldw	r2,-28(fp)
   10f78:	10800017 	ldw	r2,0(r2)
   10f7c:	10800104 	addi	r2,r2,4
   10f80:	10800037 	ldwio	r2,0(r2)
   10f84:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   10f88:	e0bffa17 	ldw	r2,-24(fp)
   10f8c:	1081000c 	andi	r2,r2,1024
   10f90:	10000b26 	beq	r2,zero,10fc0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   10f94:	e0bff917 	ldw	r2,-28(fp)
   10f98:	10800017 	ldw	r2,0(r2)
   10f9c:	10800104 	addi	r2,r2,4
   10fa0:	1007883a 	mov	r3,r2
   10fa4:	e0bff917 	ldw	r2,-28(fp)
   10fa8:	10800817 	ldw	r2,32(r2)
   10fac:	10810014 	ori	r2,r2,1024
   10fb0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   10fb4:	e0bff917 	ldw	r2,-28(fp)
   10fb8:	10000915 	stw	zero,36(r2)
   10fbc:	00000a06 	br	10fe8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   10fc0:	e0bff917 	ldw	r2,-28(fp)
   10fc4:	10c00917 	ldw	r3,36(r2)
   10fc8:	00a00034 	movhi	r2,32768
   10fcc:	10bfff04 	addi	r2,r2,-4
   10fd0:	10c00536 	bltu	r2,r3,10fe8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   10fd4:	e0bff917 	ldw	r2,-28(fp)
   10fd8:	10800917 	ldw	r2,36(r2)
   10fdc:	10c00044 	addi	r3,r2,1
   10fe0:	e0bff917 	ldw	r2,-28(fp)
   10fe4:	10c00915 	stw	r3,36(r2)
   10fe8:	00800074 	movhi	r2,1
   10fec:	109aa104 	addi	r2,r2,27268
   10ff0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   10ff4:	e037883a 	mov	sp,fp
   10ff8:	df000017 	ldw	fp,0(sp)
   10ffc:	dec00104 	addi	sp,sp,4
   11000:	f800283a 	ret

00011004 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   11004:	defffd04 	addi	sp,sp,-12
   11008:	df000215 	stw	fp,8(sp)
   1100c:	df000204 	addi	fp,sp,8
   11010:	e13ffe15 	stw	r4,-8(fp)
   11014:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   11018:	00000506 	br	11030 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1101c:	e0bfff17 	ldw	r2,-4(fp)
   11020:	1090000c 	andi	r2,r2,16384
   11024:	10000226 	beq	r2,zero,11030 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   11028:	00bffd44 	movi	r2,-11
   1102c:	00000b06 	br	1105c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   11030:	e0bffe17 	ldw	r2,-8(fp)
   11034:	10c00d17 	ldw	r3,52(r2)
   11038:	e0bffe17 	ldw	r2,-8(fp)
   1103c:	10800c17 	ldw	r2,48(r2)
   11040:	18800526 	beq	r3,r2,11058 <altera_avalon_jtag_uart_close+0x54>
   11044:	e0bffe17 	ldw	r2,-8(fp)
   11048:	10c00917 	ldw	r3,36(r2)
   1104c:	e0bffe17 	ldw	r2,-8(fp)
   11050:	10800117 	ldw	r2,4(r2)
   11054:	18bff136 	bltu	r3,r2,1101c <__alt_mem_sram+0xf7e1101c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   11058:	0005883a 	mov	r2,zero
}
   1105c:	e037883a 	mov	sp,fp
   11060:	df000017 	ldw	fp,0(sp)
   11064:	dec00104 	addi	sp,sp,4
   11068:	f800283a 	ret

0001106c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1106c:	defffa04 	addi	sp,sp,-24
   11070:	df000515 	stw	fp,20(sp)
   11074:	df000504 	addi	fp,sp,20
   11078:	e13ffd15 	stw	r4,-12(fp)
   1107c:	e17ffe15 	stw	r5,-8(fp)
   11080:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   11084:	00bff9c4 	movi	r2,-25
   11088:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1108c:	e0bffe17 	ldw	r2,-8(fp)
   11090:	10da8060 	cmpeqi	r3,r2,27137
   11094:	1800031e 	bne	r3,zero,110a4 <altera_avalon_jtag_uart_ioctl+0x38>
   11098:	109a80a0 	cmpeqi	r2,r2,27138
   1109c:	1000191e 	bne	r2,zero,11104 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   110a0:	00002806 	br	11144 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   110a4:	e0bffd17 	ldw	r2,-12(fp)
   110a8:	10c00117 	ldw	r3,4(r2)
   110ac:	00a00034 	movhi	r2,32768
   110b0:	10bfffc4 	addi	r2,r2,-1
   110b4:	18801226 	beq	r3,r2,11100 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   110b8:	e0bfff17 	ldw	r2,-4(fp)
   110bc:	10800017 	ldw	r2,0(r2)
   110c0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   110c4:	e0bffc17 	ldw	r2,-16(fp)
   110c8:	10800090 	cmplti	r2,r2,2
   110cc:	1000061e 	bne	r2,zero,110e8 <altera_avalon_jtag_uart_ioctl+0x7c>
   110d0:	e0fffc17 	ldw	r3,-16(fp)
   110d4:	00a00034 	movhi	r2,32768
   110d8:	10bfffc4 	addi	r2,r2,-1
   110dc:	18800226 	beq	r3,r2,110e8 <altera_avalon_jtag_uart_ioctl+0x7c>
   110e0:	e0bffc17 	ldw	r2,-16(fp)
   110e4:	00000206 	br	110f0 <altera_avalon_jtag_uart_ioctl+0x84>
   110e8:	00a00034 	movhi	r2,32768
   110ec:	10bfff84 	addi	r2,r2,-2
   110f0:	e0fffd17 	ldw	r3,-12(fp)
   110f4:	18800115 	stw	r2,4(r3)
      rc = 0;
   110f8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   110fc:	00001106 	br	11144 <altera_avalon_jtag_uart_ioctl+0xd8>
   11100:	00001006 	br	11144 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   11104:	e0bffd17 	ldw	r2,-12(fp)
   11108:	10c00117 	ldw	r3,4(r2)
   1110c:	00a00034 	movhi	r2,32768
   11110:	10bfffc4 	addi	r2,r2,-1
   11114:	18800a26 	beq	r3,r2,11140 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   11118:	e0bffd17 	ldw	r2,-12(fp)
   1111c:	10c00917 	ldw	r3,36(r2)
   11120:	e0bffd17 	ldw	r2,-12(fp)
   11124:	10800117 	ldw	r2,4(r2)
   11128:	1885803a 	cmpltu	r2,r3,r2
   1112c:	10c03fcc 	andi	r3,r2,255
   11130:	e0bfff17 	ldw	r2,-4(fp)
   11134:	10c00015 	stw	r3,0(r2)
      rc = 0;
   11138:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1113c:	00000006 	br	11140 <altera_avalon_jtag_uart_ioctl+0xd4>
   11140:	0001883a 	nop

  default:
    break;
  }

  return rc;
   11144:	e0bffb17 	ldw	r2,-20(fp)
}
   11148:	e037883a 	mov	sp,fp
   1114c:	df000017 	ldw	fp,0(sp)
   11150:	dec00104 	addi	sp,sp,4
   11154:	f800283a 	ret

00011158 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   11158:	defff304 	addi	sp,sp,-52
   1115c:	dfc00c15 	stw	ra,48(sp)
   11160:	df000b15 	stw	fp,44(sp)
   11164:	df000b04 	addi	fp,sp,44
   11168:	e13ffc15 	stw	r4,-16(fp)
   1116c:	e17ffd15 	stw	r5,-12(fp)
   11170:	e1bffe15 	stw	r6,-8(fp)
   11174:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   11178:	e0bffd17 	ldw	r2,-12(fp)
   1117c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   11180:	00004906 	br	112a8 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   11184:	e0bffc17 	ldw	r2,-16(fp)
   11188:	10800a17 	ldw	r2,40(r2)
   1118c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   11190:	e0bffc17 	ldw	r2,-16(fp)
   11194:	10800b17 	ldw	r2,44(r2)
   11198:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   1119c:	e0fff717 	ldw	r3,-36(fp)
   111a0:	e0bff817 	ldw	r2,-32(fp)
   111a4:	18800536 	bltu	r3,r2,111bc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   111a8:	e0fff717 	ldw	r3,-36(fp)
   111ac:	e0bff817 	ldw	r2,-32(fp)
   111b0:	1885c83a 	sub	r2,r3,r2
   111b4:	e0bff615 	stw	r2,-40(fp)
   111b8:	00000406 	br	111cc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   111bc:	00c20004 	movi	r3,2048
   111c0:	e0bff817 	ldw	r2,-32(fp)
   111c4:	1885c83a 	sub	r2,r3,r2
   111c8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   111cc:	e0bff617 	ldw	r2,-40(fp)
   111d0:	1000011e 	bne	r2,zero,111d8 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   111d4:	00001d06 	br	1124c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   111d8:	e0fffe17 	ldw	r3,-8(fp)
   111dc:	e0bff617 	ldw	r2,-40(fp)
   111e0:	1880022e 	bgeu	r3,r2,111ec <altera_avalon_jtag_uart_read+0x94>
        n = space;
   111e4:	e0bffe17 	ldw	r2,-8(fp)
   111e8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   111ec:	e0bff817 	ldw	r2,-32(fp)
   111f0:	10800e04 	addi	r2,r2,56
   111f4:	e0fffc17 	ldw	r3,-16(fp)
   111f8:	1885883a 	add	r2,r3,r2
   111fc:	e13ff517 	ldw	r4,-44(fp)
   11200:	100b883a 	mov	r5,r2
   11204:	e1bff617 	ldw	r6,-40(fp)
   11208:	00094bc0 	call	94bc <memcpy>
      ptr   += n;
   1120c:	e0fff517 	ldw	r3,-44(fp)
   11210:	e0bff617 	ldw	r2,-40(fp)
   11214:	1885883a 	add	r2,r3,r2
   11218:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   1121c:	e0fffe17 	ldw	r3,-8(fp)
   11220:	e0bff617 	ldw	r2,-40(fp)
   11224:	1885c83a 	sub	r2,r3,r2
   11228:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1122c:	e0fff817 	ldw	r3,-32(fp)
   11230:	e0bff617 	ldw	r2,-40(fp)
   11234:	1885883a 	add	r2,r3,r2
   11238:	10c1ffcc 	andi	r3,r2,2047
   1123c:	e0bffc17 	ldw	r2,-16(fp)
   11240:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   11244:	e0bffe17 	ldw	r2,-8(fp)
   11248:	00bfce16 	blt	zero,r2,11184 <__alt_mem_sram+0xf7e11184>

    /* If we read any data then return it */
    if (ptr != buffer)
   1124c:	e0fff517 	ldw	r3,-44(fp)
   11250:	e0bffd17 	ldw	r2,-12(fp)
   11254:	18800126 	beq	r3,r2,1125c <altera_avalon_jtag_uart_read+0x104>
      break;
   11258:	00001506 	br	112b0 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1125c:	e0bfff17 	ldw	r2,-4(fp)
   11260:	1090000c 	andi	r2,r2,16384
   11264:	10000126 	beq	r2,zero,1126c <altera_avalon_jtag_uart_read+0x114>
      break;
   11268:	00001106 	br	112b0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1126c:	0001883a 	nop
   11270:	e0bffc17 	ldw	r2,-16(fp)
   11274:	10c00a17 	ldw	r3,40(r2)
   11278:	e0bff717 	ldw	r2,-36(fp)
   1127c:	1880051e 	bne	r3,r2,11294 <altera_avalon_jtag_uart_read+0x13c>
   11280:	e0bffc17 	ldw	r2,-16(fp)
   11284:	10c00917 	ldw	r3,36(r2)
   11288:	e0bffc17 	ldw	r2,-16(fp)
   1128c:	10800117 	ldw	r2,4(r2)
   11290:	18bff736 	bltu	r3,r2,11270 <__alt_mem_sram+0xf7e11270>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   11294:	e0bffc17 	ldw	r2,-16(fp)
   11298:	10c00a17 	ldw	r3,40(r2)
   1129c:	e0bff717 	ldw	r2,-36(fp)
   112a0:	1880011e 	bne	r3,r2,112a8 <altera_avalon_jtag_uart_read+0x150>
      break;
   112a4:	00000206 	br	112b0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   112a8:	e0bffe17 	ldw	r2,-8(fp)
   112ac:	00bfb516 	blt	zero,r2,11184 <__alt_mem_sram+0xf7e11184>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   112b0:	e0fff517 	ldw	r3,-44(fp)
   112b4:	e0bffd17 	ldw	r2,-12(fp)
   112b8:	18801826 	beq	r3,r2,1131c <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   112bc:	0005303a 	rdctl	r2,status
   112c0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   112c4:	e0fffa17 	ldw	r3,-24(fp)
   112c8:	00bfff84 	movi	r2,-2
   112cc:	1884703a 	and	r2,r3,r2
   112d0:	1001703a 	wrctl	status,r2
  
  return context;
   112d4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   112d8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   112dc:	e0bffc17 	ldw	r2,-16(fp)
   112e0:	10800817 	ldw	r2,32(r2)
   112e4:	10c00054 	ori	r3,r2,1
   112e8:	e0bffc17 	ldw	r2,-16(fp)
   112ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   112f0:	e0bffc17 	ldw	r2,-16(fp)
   112f4:	10800017 	ldw	r2,0(r2)
   112f8:	10800104 	addi	r2,r2,4
   112fc:	1007883a 	mov	r3,r2
   11300:	e0bffc17 	ldw	r2,-16(fp)
   11304:	10800817 	ldw	r2,32(r2)
   11308:	18800035 	stwio	r2,0(r3)
   1130c:	e0bff917 	ldw	r2,-28(fp)
   11310:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11314:	e0bffb17 	ldw	r2,-20(fp)
   11318:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1131c:	e0fff517 	ldw	r3,-44(fp)
   11320:	e0bffd17 	ldw	r2,-12(fp)
   11324:	18800426 	beq	r3,r2,11338 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   11328:	e0fff517 	ldw	r3,-44(fp)
   1132c:	e0bffd17 	ldw	r2,-12(fp)
   11330:	1885c83a 	sub	r2,r3,r2
   11334:	00000606 	br	11350 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   11338:	e0bfff17 	ldw	r2,-4(fp)
   1133c:	1090000c 	andi	r2,r2,16384
   11340:	10000226 	beq	r2,zero,1134c <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   11344:	00bffd44 	movi	r2,-11
   11348:	00000106 	br	11350 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   1134c:	00bffec4 	movi	r2,-5
}
   11350:	e037883a 	mov	sp,fp
   11354:	dfc00117 	ldw	ra,4(sp)
   11358:	df000017 	ldw	fp,0(sp)
   1135c:	dec00204 	addi	sp,sp,8
   11360:	f800283a 	ret

00011364 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   11364:	defff304 	addi	sp,sp,-52
   11368:	dfc00c15 	stw	ra,48(sp)
   1136c:	df000b15 	stw	fp,44(sp)
   11370:	df000b04 	addi	fp,sp,44
   11374:	e13ffc15 	stw	r4,-16(fp)
   11378:	e17ffd15 	stw	r5,-12(fp)
   1137c:	e1bffe15 	stw	r6,-8(fp)
   11380:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   11384:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   11388:	e0bffd17 	ldw	r2,-12(fp)
   1138c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   11390:	00003806 	br	11474 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   11394:	e0bffc17 	ldw	r2,-16(fp)
   11398:	10800c17 	ldw	r2,48(r2)
   1139c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   113a0:	e0bffc17 	ldw	r2,-16(fp)
   113a4:	10800d17 	ldw	r2,52(r2)
   113a8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   113ac:	e0fff817 	ldw	r3,-32(fp)
   113b0:	e0bff517 	ldw	r2,-44(fp)
   113b4:	1880062e 	bgeu	r3,r2,113d0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   113b8:	e0fff517 	ldw	r3,-44(fp)
   113bc:	e0bff817 	ldw	r2,-32(fp)
   113c0:	1885c83a 	sub	r2,r3,r2
   113c4:	10bfffc4 	addi	r2,r2,-1
   113c8:	e0bff615 	stw	r2,-40(fp)
   113cc:	00000b06 	br	113fc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   113d0:	e0bff517 	ldw	r2,-44(fp)
   113d4:	10000526 	beq	r2,zero,113ec <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   113d8:	00c20004 	movi	r3,2048
   113dc:	e0bff817 	ldw	r2,-32(fp)
   113e0:	1885c83a 	sub	r2,r3,r2
   113e4:	e0bff615 	stw	r2,-40(fp)
   113e8:	00000406 	br	113fc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   113ec:	00c1ffc4 	movi	r3,2047
   113f0:	e0bff817 	ldw	r2,-32(fp)
   113f4:	1885c83a 	sub	r2,r3,r2
   113f8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   113fc:	e0bff617 	ldw	r2,-40(fp)
   11400:	1000011e 	bne	r2,zero,11408 <altera_avalon_jtag_uart_write+0xa4>
        break;
   11404:	00001d06 	br	1147c <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   11408:	e0fffe17 	ldw	r3,-8(fp)
   1140c:	e0bff617 	ldw	r2,-40(fp)
   11410:	1880022e 	bgeu	r3,r2,1141c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   11414:	e0bffe17 	ldw	r2,-8(fp)
   11418:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1141c:	e0bff817 	ldw	r2,-32(fp)
   11420:	10820e04 	addi	r2,r2,2104
   11424:	e0fffc17 	ldw	r3,-16(fp)
   11428:	1885883a 	add	r2,r3,r2
   1142c:	1009883a 	mov	r4,r2
   11430:	e17ffd17 	ldw	r5,-12(fp)
   11434:	e1bff617 	ldw	r6,-40(fp)
   11438:	00094bc0 	call	94bc <memcpy>
      ptr   += n;
   1143c:	e0fffd17 	ldw	r3,-12(fp)
   11440:	e0bff617 	ldw	r2,-40(fp)
   11444:	1885883a 	add	r2,r3,r2
   11448:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1144c:	e0fffe17 	ldw	r3,-8(fp)
   11450:	e0bff617 	ldw	r2,-40(fp)
   11454:	1885c83a 	sub	r2,r3,r2
   11458:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1145c:	e0fff817 	ldw	r3,-32(fp)
   11460:	e0bff617 	ldw	r2,-40(fp)
   11464:	1885883a 	add	r2,r3,r2
   11468:	10c1ffcc 	andi	r3,r2,2047
   1146c:	e0bffc17 	ldw	r2,-16(fp)
   11470:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   11474:	e0bffe17 	ldw	r2,-8(fp)
   11478:	00bfc616 	blt	zero,r2,11394 <__alt_mem_sram+0xf7e11394>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1147c:	0005303a 	rdctl	r2,status
   11480:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11484:	e0fffa17 	ldw	r3,-24(fp)
   11488:	00bfff84 	movi	r2,-2
   1148c:	1884703a 	and	r2,r3,r2
   11490:	1001703a 	wrctl	status,r2
  
  return context;
   11494:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   11498:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1149c:	e0bffc17 	ldw	r2,-16(fp)
   114a0:	10800817 	ldw	r2,32(r2)
   114a4:	10c00094 	ori	r3,r2,2
   114a8:	e0bffc17 	ldw	r2,-16(fp)
   114ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   114b0:	e0bffc17 	ldw	r2,-16(fp)
   114b4:	10800017 	ldw	r2,0(r2)
   114b8:	10800104 	addi	r2,r2,4
   114bc:	1007883a 	mov	r3,r2
   114c0:	e0bffc17 	ldw	r2,-16(fp)
   114c4:	10800817 	ldw	r2,32(r2)
   114c8:	18800035 	stwio	r2,0(r3)
   114cc:	e0bff917 	ldw	r2,-28(fp)
   114d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   114d4:	e0bffb17 	ldw	r2,-20(fp)
   114d8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   114dc:	e0bffe17 	ldw	r2,-8(fp)
   114e0:	0080120e 	bge	zero,r2,1152c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   114e4:	e0bfff17 	ldw	r2,-4(fp)
   114e8:	1090000c 	andi	r2,r2,16384
   114ec:	10000126 	beq	r2,zero,114f4 <altera_avalon_jtag_uart_write+0x190>
        break;
   114f0:	00001006 	br	11534 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   114f4:	0001883a 	nop
   114f8:	e0bffc17 	ldw	r2,-16(fp)
   114fc:	10c00d17 	ldw	r3,52(r2)
   11500:	e0bff517 	ldw	r2,-44(fp)
   11504:	1880051e 	bne	r3,r2,1151c <altera_avalon_jtag_uart_write+0x1b8>
   11508:	e0bffc17 	ldw	r2,-16(fp)
   1150c:	10c00917 	ldw	r3,36(r2)
   11510:	e0bffc17 	ldw	r2,-16(fp)
   11514:	10800117 	ldw	r2,4(r2)
   11518:	18bff736 	bltu	r3,r2,114f8 <__alt_mem_sram+0xf7e114f8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1151c:	e0bffc17 	ldw	r2,-16(fp)
   11520:	10800917 	ldw	r2,36(r2)
   11524:	10000126 	beq	r2,zero,1152c <altera_avalon_jtag_uart_write+0x1c8>
         break;
   11528:	00000206 	br	11534 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   1152c:	e0bffe17 	ldw	r2,-8(fp)
   11530:	00bf9716 	blt	zero,r2,11390 <__alt_mem_sram+0xf7e11390>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   11534:	e0fffd17 	ldw	r3,-12(fp)
   11538:	e0bff717 	ldw	r2,-36(fp)
   1153c:	18800426 	beq	r3,r2,11550 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   11540:	e0fffd17 	ldw	r3,-12(fp)
   11544:	e0bff717 	ldw	r2,-36(fp)
   11548:	1885c83a 	sub	r2,r3,r2
   1154c:	00000606 	br	11568 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   11550:	e0bfff17 	ldw	r2,-4(fp)
   11554:	1090000c 	andi	r2,r2,16384
   11558:	10000226 	beq	r2,zero,11564 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   1155c:	00bffd44 	movi	r2,-11
   11560:	00000106 	br	11568 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   11564:	00bffec4 	movi	r2,-5
}
   11568:	e037883a 	mov	sp,fp
   1156c:	dfc00117 	ldw	ra,4(sp)
   11570:	df000017 	ldw	fp,0(sp)
   11574:	dec00204 	addi	sp,sp,8
   11578:	f800283a 	ret

0001157c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1157c:	defffa04 	addi	sp,sp,-24
   11580:	dfc00515 	stw	ra,20(sp)
   11584:	df000415 	stw	fp,16(sp)
   11588:	df000404 	addi	fp,sp,16
   1158c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   11590:	0007883a 	mov	r3,zero
   11594:	e0bfff17 	ldw	r2,-4(fp)
   11598:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1159c:	e0bfff17 	ldw	r2,-4(fp)
   115a0:	10800104 	addi	r2,r2,4
   115a4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   115a8:	0005303a 	rdctl	r2,status
   115ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   115b0:	e0fffd17 	ldw	r3,-12(fp)
   115b4:	00bfff84 	movi	r2,-2
   115b8:	1884703a 	and	r2,r3,r2
   115bc:	1001703a 	wrctl	status,r2
  
  return context;
   115c0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   115c4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   115c8:	00122440 	call	12244 <alt_tick>
   115cc:	e0bffc17 	ldw	r2,-16(fp)
   115d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   115d4:	e0bffe17 	ldw	r2,-8(fp)
   115d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   115dc:	e037883a 	mov	sp,fp
   115e0:	dfc00117 	ldw	ra,4(sp)
   115e4:	df000017 	ldw	fp,0(sp)
   115e8:	dec00204 	addi	sp,sp,8
   115ec:	f800283a 	ret

000115f0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   115f0:	defff804 	addi	sp,sp,-32
   115f4:	dfc00715 	stw	ra,28(sp)
   115f8:	df000615 	stw	fp,24(sp)
   115fc:	df000604 	addi	fp,sp,24
   11600:	e13ffc15 	stw	r4,-16(fp)
   11604:	e17ffd15 	stw	r5,-12(fp)
   11608:	e1bffe15 	stw	r6,-8(fp)
   1160c:	e1ffff15 	stw	r7,-4(fp)
   11610:	e0bfff17 	ldw	r2,-4(fp)
   11614:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   11618:	00800074 	movhi	r2,1
   1161c:	109aa104 	addi	r2,r2,27268
   11620:	10800017 	ldw	r2,0(r2)
   11624:	1000041e 	bne	r2,zero,11638 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   11628:	00800074 	movhi	r2,1
   1162c:	109aa104 	addi	r2,r2,27268
   11630:	e0fffb17 	ldw	r3,-20(fp)
   11634:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   11638:	e0bffc17 	ldw	r2,-16(fp)
   1163c:	10800104 	addi	r2,r2,4
   11640:	00c001c4 	movi	r3,7
   11644:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   11648:	d8000015 	stw	zero,0(sp)
   1164c:	e13ffd17 	ldw	r4,-12(fp)
   11650:	e17ffe17 	ldw	r5,-8(fp)
   11654:	01800074 	movhi	r6,1
   11658:	31855f04 	addi	r6,r6,5500
   1165c:	e1fffc17 	ldw	r7,-16(fp)
   11660:	0011b300 	call	11b30 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   11664:	e037883a 	mov	sp,fp
   11668:	dfc00117 	ldw	ra,4(sp)
   1166c:	df000017 	ldw	fp,0(sp)
   11670:	dec00204 	addi	sp,sp,8
   11674:	f800283a 	ret

00011678 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   11678:	defff504 	addi	sp,sp,-44
   1167c:	df000a15 	stw	fp,40(sp)
   11680:	df000a04 	addi	fp,sp,40
   11684:	e13ffc15 	stw	r4,-16(fp)
   11688:	e17ffd15 	stw	r5,-12(fp)
   1168c:	e1bffe15 	stw	r6,-8(fp)
   11690:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   11694:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   11698:	00800074 	movhi	r2,1
   1169c:	109aa104 	addi	r2,r2,27268
   116a0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   116a4:	10003f26 	beq	r2,zero,117a4 <alt_alarm_start+0x12c>
  {
    if (alarm)
   116a8:	e0bffc17 	ldw	r2,-16(fp)
   116ac:	10003b26 	beq	r2,zero,1179c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   116b0:	e0bffc17 	ldw	r2,-16(fp)
   116b4:	e0fffe17 	ldw	r3,-8(fp)
   116b8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   116bc:	e0bffc17 	ldw	r2,-16(fp)
   116c0:	e0ffff17 	ldw	r3,-4(fp)
   116c4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   116c8:	0005303a 	rdctl	r2,status
   116cc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   116d0:	e0fff817 	ldw	r3,-32(fp)
   116d4:	00bfff84 	movi	r2,-2
   116d8:	1884703a 	and	r2,r3,r2
   116dc:	1001703a 	wrctl	status,r2
  
  return context;
   116e0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   116e4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   116e8:	00800074 	movhi	r2,1
   116ec:	109aa204 	addi	r2,r2,27272
   116f0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   116f4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   116f8:	e0fffd17 	ldw	r3,-12(fp)
   116fc:	e0bff617 	ldw	r2,-40(fp)
   11700:	1885883a 	add	r2,r3,r2
   11704:	10c00044 	addi	r3,r2,1
   11708:	e0bffc17 	ldw	r2,-16(fp)
   1170c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   11710:	e0bffc17 	ldw	r2,-16(fp)
   11714:	10c00217 	ldw	r3,8(r2)
   11718:	e0bff617 	ldw	r2,-40(fp)
   1171c:	1880042e 	bgeu	r3,r2,11730 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   11720:	e0bffc17 	ldw	r2,-16(fp)
   11724:	00c00044 	movi	r3,1
   11728:	10c00405 	stb	r3,16(r2)
   1172c:	00000206 	br	11738 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   11730:	e0bffc17 	ldw	r2,-16(fp)
   11734:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   11738:	e0fffc17 	ldw	r3,-16(fp)
   1173c:	00800074 	movhi	r2,1
   11740:	1093d804 	addi	r2,r2,20320
   11744:	e0bff915 	stw	r2,-28(fp)
   11748:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1174c:	e0bffa17 	ldw	r2,-24(fp)
   11750:	e0fff917 	ldw	r3,-28(fp)
   11754:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11758:	e0bff917 	ldw	r2,-28(fp)
   1175c:	10c00017 	ldw	r3,0(r2)
   11760:	e0bffa17 	ldw	r2,-24(fp)
   11764:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11768:	e0bff917 	ldw	r2,-28(fp)
   1176c:	10800017 	ldw	r2,0(r2)
   11770:	e0fffa17 	ldw	r3,-24(fp)
   11774:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11778:	e0bff917 	ldw	r2,-28(fp)
   1177c:	e0fffa17 	ldw	r3,-24(fp)
   11780:	10c00015 	stw	r3,0(r2)
   11784:	e0bff717 	ldw	r2,-36(fp)
   11788:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1178c:	e0bffb17 	ldw	r2,-20(fp)
   11790:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   11794:	0005883a 	mov	r2,zero
   11798:	00000306 	br	117a8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   1179c:	00bffa84 	movi	r2,-22
   117a0:	00000106 	br	117a8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   117a4:	00bfde84 	movi	r2,-134
  }
}
   117a8:	e037883a 	mov	sp,fp
   117ac:	df000017 	ldw	fp,0(sp)
   117b0:	dec00104 	addi	sp,sp,4
   117b4:	f800283a 	ret

000117b8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   117b8:	defffa04 	addi	sp,sp,-24
   117bc:	dfc00515 	stw	ra,20(sp)
   117c0:	df000415 	stw	fp,16(sp)
   117c4:	df000404 	addi	fp,sp,16
   117c8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   117cc:	008000c4 	movi	r2,3
   117d0:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   117d4:	e0fffd17 	ldw	r3,-12(fp)
   117d8:	008003f4 	movhi	r2,15
   117dc:	10909004 	addi	r2,r2,16960
   117e0:	1885383a 	mul	r2,r3,r2
   117e4:	01017db4 	movhi	r4,1526
   117e8:	21384004 	addi	r4,r4,-7936
   117ec:	100b883a 	mov	r5,r2
   117f0:	000da800 	call	da80 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   117f4:	01200034 	movhi	r4,32768
   117f8:	213fffc4 	addi	r4,r4,-1
   117fc:	100b883a 	mov	r5,r2
   11800:	000da800 	call	da80 <__udivsi3>
   11804:	e13fff17 	ldw	r4,-4(fp)
   11808:	100b883a 	mov	r5,r2
   1180c:	000da800 	call	da80 <__udivsi3>
   11810:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   11814:	e0bffe17 	ldw	r2,-8(fp)
   11818:	10002a26 	beq	r2,zero,118c4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   1181c:	e03ffc15 	stw	zero,-16(fp)
   11820:	00001706 	br	11880 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11824:	00a00034 	movhi	r2,32768
   11828:	10bfffc4 	addi	r2,r2,-1
   1182c:	10bfffc4 	addi	r2,r2,-1
   11830:	103ffe1e 	bne	r2,zero,1182c <__alt_mem_sram+0xf7e1182c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   11834:	e0fffd17 	ldw	r3,-12(fp)
   11838:	008003f4 	movhi	r2,15
   1183c:	10909004 	addi	r2,r2,16960
   11840:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11844:	01017db4 	movhi	r4,1526
   11848:	21384004 	addi	r4,r4,-7936
   1184c:	100b883a 	mov	r5,r2
   11850:	000da800 	call	da80 <__udivsi3>
   11854:	01200034 	movhi	r4,32768
   11858:	213fffc4 	addi	r4,r4,-1
   1185c:	100b883a 	mov	r5,r2
   11860:	000da800 	call	da80 <__udivsi3>
   11864:	1007883a 	mov	r3,r2
   11868:	e0bfff17 	ldw	r2,-4(fp)
   1186c:	10c5c83a 	sub	r2,r2,r3
   11870:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   11874:	e0bffc17 	ldw	r2,-16(fp)
   11878:	10800044 	addi	r2,r2,1
   1187c:	e0bffc15 	stw	r2,-16(fp)
   11880:	e0fffc17 	ldw	r3,-16(fp)
   11884:	e0bffe17 	ldw	r2,-8(fp)
   11888:	18bfe616 	blt	r3,r2,11824 <__alt_mem_sram+0xf7e11824>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   1188c:	e0fffd17 	ldw	r3,-12(fp)
   11890:	008003f4 	movhi	r2,15
   11894:	10909004 	addi	r2,r2,16960
   11898:	1885383a 	mul	r2,r3,r2
   1189c:	01017db4 	movhi	r4,1526
   118a0:	21384004 	addi	r4,r4,-7936
   118a4:	100b883a 	mov	r5,r2
   118a8:	000da800 	call	da80 <__udivsi3>
   118ac:	1007883a 	mov	r3,r2
   118b0:	e0bfff17 	ldw	r2,-4(fp)
   118b4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   118b8:	10bfffc4 	addi	r2,r2,-1
   118bc:	103ffe1e 	bne	r2,zero,118b8 <__alt_mem_sram+0xf7e118b8>
   118c0:	00000d06 	br	118f8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   118c4:	e0fffd17 	ldw	r3,-12(fp)
   118c8:	008003f4 	movhi	r2,15
   118cc:	10909004 	addi	r2,r2,16960
   118d0:	1885383a 	mul	r2,r3,r2
   118d4:	01017db4 	movhi	r4,1526
   118d8:	21384004 	addi	r4,r4,-7936
   118dc:	100b883a 	mov	r5,r2
   118e0:	000da800 	call	da80 <__udivsi3>
   118e4:	1007883a 	mov	r3,r2
   118e8:	e0bfff17 	ldw	r2,-4(fp)
   118ec:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   118f0:	10bfffc4 	addi	r2,r2,-1
   118f4:	00bffe16 	blt	zero,r2,118f0 <__alt_mem_sram+0xf7e118f0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   118f8:	0005883a 	mov	r2,zero
}
   118fc:	e037883a 	mov	sp,fp
   11900:	dfc00117 	ldw	ra,4(sp)
   11904:	df000017 	ldw	fp,0(sp)
   11908:	dec00204 	addi	sp,sp,8
   1190c:	f800283a 	ret

00011910 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11910:	defffe04 	addi	sp,sp,-8
   11914:	df000115 	stw	fp,4(sp)
   11918:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1191c:	e03fff15 	stw	zero,-4(fp)
   11920:	00000506 	br	11938 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   11924:	e0bfff17 	ldw	r2,-4(fp)
   11928:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1192c:	e0bfff17 	ldw	r2,-4(fp)
   11930:	10800804 	addi	r2,r2,32
   11934:	e0bfff15 	stw	r2,-4(fp)
   11938:	e0bfff17 	ldw	r2,-4(fp)
   1193c:	10820030 	cmpltui	r2,r2,2048
   11940:	103ff81e 	bne	r2,zero,11924 <__alt_mem_sram+0xf7e11924>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11944:	e037883a 	mov	sp,fp
   11948:	df000017 	ldw	fp,0(sp)
   1194c:	dec00104 	addi	sp,sp,4
   11950:	f800283a 	ret

00011954 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11954:	defffe04 	addi	sp,sp,-8
   11958:	dfc00115 	stw	ra,4(sp)
   1195c:	df000015 	stw	fp,0(sp)
   11960:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11964:	00800074 	movhi	r2,1
   11968:	1093d504 	addi	r2,r2,20308
   1196c:	10800017 	ldw	r2,0(r2)
   11970:	10000526 	beq	r2,zero,11988 <alt_get_errno+0x34>
   11974:	00800074 	movhi	r2,1
   11978:	1093d504 	addi	r2,r2,20308
   1197c:	10800017 	ldw	r2,0(r2)
   11980:	103ee83a 	callr	r2
   11984:	00000206 	br	11990 <alt_get_errno+0x3c>
   11988:	00800074 	movhi	r2,1
   1198c:	109a9c04 	addi	r2,r2,27248
}
   11990:	e037883a 	mov	sp,fp
   11994:	dfc00117 	ldw	ra,4(sp)
   11998:	df000017 	ldw	fp,0(sp)
   1199c:	dec00204 	addi	sp,sp,8
   119a0:	f800283a 	ret

000119a4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   119a4:	defffa04 	addi	sp,sp,-24
   119a8:	dfc00515 	stw	ra,20(sp)
   119ac:	df000415 	stw	fp,16(sp)
   119b0:	df000404 	addi	fp,sp,16
   119b4:	e13ffe15 	stw	r4,-8(fp)
   119b8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   119bc:	e0bffe17 	ldw	r2,-8(fp)
   119c0:	10000326 	beq	r2,zero,119d0 <alt_dev_llist_insert+0x2c>
   119c4:	e0bffe17 	ldw	r2,-8(fp)
   119c8:	10800217 	ldw	r2,8(r2)
   119cc:	1000061e 	bne	r2,zero,119e8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   119d0:	00119540 	call	11954 <alt_get_errno>
   119d4:	1007883a 	mov	r3,r2
   119d8:	00800584 	movi	r2,22
   119dc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   119e0:	00bffa84 	movi	r2,-22
   119e4:	00001306 	br	11a34 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   119e8:	e0bffe17 	ldw	r2,-8(fp)
   119ec:	e0ffff17 	ldw	r3,-4(fp)
   119f0:	e0fffc15 	stw	r3,-16(fp)
   119f4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   119f8:	e0bffd17 	ldw	r2,-12(fp)
   119fc:	e0fffc17 	ldw	r3,-16(fp)
   11a00:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11a04:	e0bffc17 	ldw	r2,-16(fp)
   11a08:	10c00017 	ldw	r3,0(r2)
   11a0c:	e0bffd17 	ldw	r2,-12(fp)
   11a10:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11a14:	e0bffc17 	ldw	r2,-16(fp)
   11a18:	10800017 	ldw	r2,0(r2)
   11a1c:	e0fffd17 	ldw	r3,-12(fp)
   11a20:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11a24:	e0bffc17 	ldw	r2,-16(fp)
   11a28:	e0fffd17 	ldw	r3,-12(fp)
   11a2c:	10c00015 	stw	r3,0(r2)

  return 0;  
   11a30:	0005883a 	mov	r2,zero
}
   11a34:	e037883a 	mov	sp,fp
   11a38:	dfc00117 	ldw	ra,4(sp)
   11a3c:	df000017 	ldw	fp,0(sp)
   11a40:	dec00204 	addi	sp,sp,8
   11a44:	f800283a 	ret

00011a48 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   11a48:	defffd04 	addi	sp,sp,-12
   11a4c:	dfc00215 	stw	ra,8(sp)
   11a50:	df000115 	stw	fp,4(sp)
   11a54:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11a58:	00800074 	movhi	r2,1
   11a5c:	108a7b04 	addi	r2,r2,10732
   11a60:	e0bfff15 	stw	r2,-4(fp)
   11a64:	00000606 	br	11a80 <_do_ctors+0x38>
        (*ctor) (); 
   11a68:	e0bfff17 	ldw	r2,-4(fp)
   11a6c:	10800017 	ldw	r2,0(r2)
   11a70:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11a74:	e0bfff17 	ldw	r2,-4(fp)
   11a78:	10bfff04 	addi	r2,r2,-4
   11a7c:	e0bfff15 	stw	r2,-4(fp)
   11a80:	e0ffff17 	ldw	r3,-4(fp)
   11a84:	00800074 	movhi	r2,1
   11a88:	108a7c04 	addi	r2,r2,10736
   11a8c:	18bff62e 	bgeu	r3,r2,11a68 <__alt_mem_sram+0xf7e11a68>
        (*ctor) (); 
}
   11a90:	e037883a 	mov	sp,fp
   11a94:	dfc00117 	ldw	ra,4(sp)
   11a98:	df000017 	ldw	fp,0(sp)
   11a9c:	dec00204 	addi	sp,sp,8
   11aa0:	f800283a 	ret

00011aa4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   11aa4:	defffd04 	addi	sp,sp,-12
   11aa8:	dfc00215 	stw	ra,8(sp)
   11aac:	df000115 	stw	fp,4(sp)
   11ab0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11ab4:	00800074 	movhi	r2,1
   11ab8:	108a7b04 	addi	r2,r2,10732
   11abc:	e0bfff15 	stw	r2,-4(fp)
   11ac0:	00000606 	br	11adc <_do_dtors+0x38>
        (*dtor) (); 
   11ac4:	e0bfff17 	ldw	r2,-4(fp)
   11ac8:	10800017 	ldw	r2,0(r2)
   11acc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11ad0:	e0bfff17 	ldw	r2,-4(fp)
   11ad4:	10bfff04 	addi	r2,r2,-4
   11ad8:	e0bfff15 	stw	r2,-4(fp)
   11adc:	e0ffff17 	ldw	r3,-4(fp)
   11ae0:	00800074 	movhi	r2,1
   11ae4:	108a7c04 	addi	r2,r2,10736
   11ae8:	18bff62e 	bgeu	r3,r2,11ac4 <__alt_mem_sram+0xf7e11ac4>
        (*dtor) (); 
}
   11aec:	e037883a 	mov	sp,fp
   11af0:	dfc00117 	ldw	ra,4(sp)
   11af4:	df000017 	ldw	fp,0(sp)
   11af8:	dec00204 	addi	sp,sp,8
   11afc:	f800283a 	ret

00011b00 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11b00:	defffe04 	addi	sp,sp,-8
   11b04:	dfc00115 	stw	ra,4(sp)
   11b08:	df000015 	stw	fp,0(sp)
   11b0c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   11b10:	0009883a 	mov	r4,zero
   11b14:	01440004 	movi	r5,4096
   11b18:	00125c00 	call	125c0 <alt_icache_flush>
#endif
}
   11b1c:	e037883a 	mov	sp,fp
   11b20:	dfc00117 	ldw	ra,4(sp)
   11b24:	df000017 	ldw	fp,0(sp)
   11b28:	dec00204 	addi	sp,sp,8
   11b2c:	f800283a 	ret

00011b30 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11b30:	defff904 	addi	sp,sp,-28
   11b34:	dfc00615 	stw	ra,24(sp)
   11b38:	df000515 	stw	fp,20(sp)
   11b3c:	df000504 	addi	fp,sp,20
   11b40:	e13ffc15 	stw	r4,-16(fp)
   11b44:	e17ffd15 	stw	r5,-12(fp)
   11b48:	e1bffe15 	stw	r6,-8(fp)
   11b4c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   11b50:	e0800217 	ldw	r2,8(fp)
   11b54:	d8800015 	stw	r2,0(sp)
   11b58:	e13ffc17 	ldw	r4,-16(fp)
   11b5c:	e17ffd17 	ldw	r5,-12(fp)
   11b60:	e1bffe17 	ldw	r6,-8(fp)
   11b64:	e1ffff17 	ldw	r7,-4(fp)
   11b68:	0011d100 	call	11d10 <alt_iic_isr_register>
}  
   11b6c:	e037883a 	mov	sp,fp
   11b70:	dfc00117 	ldw	ra,4(sp)
   11b74:	df000017 	ldw	fp,0(sp)
   11b78:	dec00204 	addi	sp,sp,8
   11b7c:	f800283a 	ret

00011b80 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   11b80:	defff904 	addi	sp,sp,-28
   11b84:	df000615 	stw	fp,24(sp)
   11b88:	df000604 	addi	fp,sp,24
   11b8c:	e13ffe15 	stw	r4,-8(fp)
   11b90:	e17fff15 	stw	r5,-4(fp)
   11b94:	e0bfff17 	ldw	r2,-4(fp)
   11b98:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11b9c:	0005303a 	rdctl	r2,status
   11ba0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11ba4:	e0fffb17 	ldw	r3,-20(fp)
   11ba8:	00bfff84 	movi	r2,-2
   11bac:	1884703a 	and	r2,r3,r2
   11bb0:	1001703a 	wrctl	status,r2
  
  return context;
   11bb4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11bb8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   11bbc:	e0bffa17 	ldw	r2,-24(fp)
   11bc0:	00c00044 	movi	r3,1
   11bc4:	1884983a 	sll	r2,r3,r2
   11bc8:	1007883a 	mov	r3,r2
   11bcc:	00800074 	movhi	r2,1
   11bd0:	109aa004 	addi	r2,r2,27264
   11bd4:	10800017 	ldw	r2,0(r2)
   11bd8:	1886b03a 	or	r3,r3,r2
   11bdc:	00800074 	movhi	r2,1
   11be0:	109aa004 	addi	r2,r2,27264
   11be4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11be8:	00800074 	movhi	r2,1
   11bec:	109aa004 	addi	r2,r2,27264
   11bf0:	10800017 	ldw	r2,0(r2)
   11bf4:	100170fa 	wrctl	ienable,r2
   11bf8:	e0bffc17 	ldw	r2,-16(fp)
   11bfc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11c00:	e0bffd17 	ldw	r2,-12(fp)
   11c04:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11c08:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   11c0c:	0001883a 	nop
}
   11c10:	e037883a 	mov	sp,fp
   11c14:	df000017 	ldw	fp,0(sp)
   11c18:	dec00104 	addi	sp,sp,4
   11c1c:	f800283a 	ret

00011c20 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   11c20:	defff904 	addi	sp,sp,-28
   11c24:	df000615 	stw	fp,24(sp)
   11c28:	df000604 	addi	fp,sp,24
   11c2c:	e13ffe15 	stw	r4,-8(fp)
   11c30:	e17fff15 	stw	r5,-4(fp)
   11c34:	e0bfff17 	ldw	r2,-4(fp)
   11c38:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11c3c:	0005303a 	rdctl	r2,status
   11c40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11c44:	e0fffb17 	ldw	r3,-20(fp)
   11c48:	00bfff84 	movi	r2,-2
   11c4c:	1884703a 	and	r2,r3,r2
   11c50:	1001703a 	wrctl	status,r2
  
  return context;
   11c54:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11c58:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   11c5c:	e0bffa17 	ldw	r2,-24(fp)
   11c60:	00c00044 	movi	r3,1
   11c64:	1884983a 	sll	r2,r3,r2
   11c68:	0084303a 	nor	r2,zero,r2
   11c6c:	1007883a 	mov	r3,r2
   11c70:	00800074 	movhi	r2,1
   11c74:	109aa004 	addi	r2,r2,27264
   11c78:	10800017 	ldw	r2,0(r2)
   11c7c:	1886703a 	and	r3,r3,r2
   11c80:	00800074 	movhi	r2,1
   11c84:	109aa004 	addi	r2,r2,27264
   11c88:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11c8c:	00800074 	movhi	r2,1
   11c90:	109aa004 	addi	r2,r2,27264
   11c94:	10800017 	ldw	r2,0(r2)
   11c98:	100170fa 	wrctl	ienable,r2
   11c9c:	e0bffc17 	ldw	r2,-16(fp)
   11ca0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ca4:	e0bffd17 	ldw	r2,-12(fp)
   11ca8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11cac:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   11cb0:	0001883a 	nop
}
   11cb4:	e037883a 	mov	sp,fp
   11cb8:	df000017 	ldw	fp,0(sp)
   11cbc:	dec00104 	addi	sp,sp,4
   11cc0:	f800283a 	ret

00011cc4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   11cc4:	defffc04 	addi	sp,sp,-16
   11cc8:	df000315 	stw	fp,12(sp)
   11ccc:	df000304 	addi	fp,sp,12
   11cd0:	e13ffe15 	stw	r4,-8(fp)
   11cd4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   11cd8:	000530fa 	rdctl	r2,ienable
   11cdc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   11ce0:	e0bfff17 	ldw	r2,-4(fp)
   11ce4:	00c00044 	movi	r3,1
   11ce8:	1884983a 	sll	r2,r3,r2
   11cec:	1007883a 	mov	r3,r2
   11cf0:	e0bffd17 	ldw	r2,-12(fp)
   11cf4:	1884703a 	and	r2,r3,r2
   11cf8:	1004c03a 	cmpne	r2,r2,zero
   11cfc:	10803fcc 	andi	r2,r2,255
}
   11d00:	e037883a 	mov	sp,fp
   11d04:	df000017 	ldw	fp,0(sp)
   11d08:	dec00104 	addi	sp,sp,4
   11d0c:	f800283a 	ret

00011d10 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11d10:	defff504 	addi	sp,sp,-44
   11d14:	dfc00a15 	stw	ra,40(sp)
   11d18:	df000915 	stw	fp,36(sp)
   11d1c:	df000904 	addi	fp,sp,36
   11d20:	e13ffc15 	stw	r4,-16(fp)
   11d24:	e17ffd15 	stw	r5,-12(fp)
   11d28:	e1bffe15 	stw	r6,-8(fp)
   11d2c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   11d30:	00bffa84 	movi	r2,-22
   11d34:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   11d38:	e0bffd17 	ldw	r2,-12(fp)
   11d3c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11d40:	e0bff817 	ldw	r2,-32(fp)
   11d44:	10800808 	cmpgei	r2,r2,32
   11d48:	1000271e 	bne	r2,zero,11de8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11d4c:	0005303a 	rdctl	r2,status
   11d50:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11d54:	e0fffa17 	ldw	r3,-24(fp)
   11d58:	00bfff84 	movi	r2,-2
   11d5c:	1884703a 	and	r2,r3,r2
   11d60:	1001703a 	wrctl	status,r2
  
  return context;
   11d64:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   11d68:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   11d6c:	00800074 	movhi	r2,1
   11d70:	109aad04 	addi	r2,r2,27316
   11d74:	e0fff817 	ldw	r3,-32(fp)
   11d78:	180690fa 	slli	r3,r3,3
   11d7c:	10c5883a 	add	r2,r2,r3
   11d80:	e0fffe17 	ldw	r3,-8(fp)
   11d84:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   11d88:	00800074 	movhi	r2,1
   11d8c:	109aad04 	addi	r2,r2,27316
   11d90:	e0fff817 	ldw	r3,-32(fp)
   11d94:	180690fa 	slli	r3,r3,3
   11d98:	10c5883a 	add	r2,r2,r3
   11d9c:	10800104 	addi	r2,r2,4
   11da0:	e0ffff17 	ldw	r3,-4(fp)
   11da4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   11da8:	e0bffe17 	ldw	r2,-8(fp)
   11dac:	10000526 	beq	r2,zero,11dc4 <alt_iic_isr_register+0xb4>
   11db0:	e0bff817 	ldw	r2,-32(fp)
   11db4:	e13ffc17 	ldw	r4,-16(fp)
   11db8:	100b883a 	mov	r5,r2
   11dbc:	0011b800 	call	11b80 <alt_ic_irq_enable>
   11dc0:	00000406 	br	11dd4 <alt_iic_isr_register+0xc4>
   11dc4:	e0bff817 	ldw	r2,-32(fp)
   11dc8:	e13ffc17 	ldw	r4,-16(fp)
   11dcc:	100b883a 	mov	r5,r2
   11dd0:	0011c200 	call	11c20 <alt_ic_irq_disable>
   11dd4:	e0bff715 	stw	r2,-36(fp)
   11dd8:	e0bff917 	ldw	r2,-28(fp)
   11ddc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11de0:	e0bffb17 	ldw	r2,-20(fp)
   11de4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   11de8:	e0bff717 	ldw	r2,-36(fp)
}
   11dec:	e037883a 	mov	sp,fp
   11df0:	dfc00117 	ldw	ra,4(sp)
   11df4:	df000017 	ldw	fp,0(sp)
   11df8:	dec00204 	addi	sp,sp,8
   11dfc:	f800283a 	ret

00011e00 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   11e00:	defff904 	addi	sp,sp,-28
   11e04:	dfc00615 	stw	ra,24(sp)
   11e08:	df000515 	stw	fp,20(sp)
   11e0c:	df000504 	addi	fp,sp,20
   11e10:	e13ffc15 	stw	r4,-16(fp)
   11e14:	e17ffd15 	stw	r5,-12(fp)
   11e18:	e1bffe15 	stw	r6,-8(fp)
   11e1c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   11e20:	e13ffd17 	ldw	r4,-12(fp)
   11e24:	e17ffe17 	ldw	r5,-8(fp)
   11e28:	e1bfff17 	ldw	r6,-4(fp)
   11e2c:	00120540 	call	12054 <open>
   11e30:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   11e34:	e0bffb17 	ldw	r2,-20(fp)
   11e38:	10001c16 	blt	r2,zero,11eac <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   11e3c:	00800074 	movhi	r2,1
   11e40:	108f5204 	addi	r2,r2,15688
   11e44:	e0fffb17 	ldw	r3,-20(fp)
   11e48:	18c00324 	muli	r3,r3,12
   11e4c:	10c5883a 	add	r2,r2,r3
   11e50:	10c00017 	ldw	r3,0(r2)
   11e54:	e0bffc17 	ldw	r2,-16(fp)
   11e58:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11e5c:	00800074 	movhi	r2,1
   11e60:	108f5204 	addi	r2,r2,15688
   11e64:	e0fffb17 	ldw	r3,-20(fp)
   11e68:	18c00324 	muli	r3,r3,12
   11e6c:	10c5883a 	add	r2,r2,r3
   11e70:	10800104 	addi	r2,r2,4
   11e74:	10c00017 	ldw	r3,0(r2)
   11e78:	e0bffc17 	ldw	r2,-16(fp)
   11e7c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11e80:	00800074 	movhi	r2,1
   11e84:	108f5204 	addi	r2,r2,15688
   11e88:	e0fffb17 	ldw	r3,-20(fp)
   11e8c:	18c00324 	muli	r3,r3,12
   11e90:	10c5883a 	add	r2,r2,r3
   11e94:	10800204 	addi	r2,r2,8
   11e98:	10c00017 	ldw	r3,0(r2)
   11e9c:	e0bffc17 	ldw	r2,-16(fp)
   11ea0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11ea4:	e13ffb17 	ldw	r4,-20(fp)
   11ea8:	00107dc0 	call	107dc <alt_release_fd>
  }
} 
   11eac:	e037883a 	mov	sp,fp
   11eb0:	dfc00117 	ldw	ra,4(sp)
   11eb4:	df000017 	ldw	fp,0(sp)
   11eb8:	dec00204 	addi	sp,sp,8
   11ebc:	f800283a 	ret

00011ec0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11ec0:	defffb04 	addi	sp,sp,-20
   11ec4:	dfc00415 	stw	ra,16(sp)
   11ec8:	df000315 	stw	fp,12(sp)
   11ecc:	df000304 	addi	fp,sp,12
   11ed0:	e13ffd15 	stw	r4,-12(fp)
   11ed4:	e17ffe15 	stw	r5,-8(fp)
   11ed8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11edc:	01000074 	movhi	r4,1
   11ee0:	210f5504 	addi	r4,r4,15700
   11ee4:	e17ffd17 	ldw	r5,-12(fp)
   11ee8:	01800044 	movi	r6,1
   11eec:	01c07fc4 	movi	r7,511
   11ef0:	0011e000 	call	11e00 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   11ef4:	01000074 	movhi	r4,1
   11ef8:	210f5204 	addi	r4,r4,15688
   11efc:	e17ffe17 	ldw	r5,-8(fp)
   11f00:	000d883a 	mov	r6,zero
   11f04:	01c07fc4 	movi	r7,511
   11f08:	0011e000 	call	11e00 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   11f0c:	01000074 	movhi	r4,1
   11f10:	210f5804 	addi	r4,r4,15712
   11f14:	e17fff17 	ldw	r5,-4(fp)
   11f18:	01800044 	movi	r6,1
   11f1c:	01c07fc4 	movi	r7,511
   11f20:	0011e000 	call	11e00 <alt_open_fd>
}  
   11f24:	e037883a 	mov	sp,fp
   11f28:	dfc00117 	ldw	ra,4(sp)
   11f2c:	df000017 	ldw	fp,0(sp)
   11f30:	dec00204 	addi	sp,sp,8
   11f34:	f800283a 	ret

00011f38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11f38:	defffe04 	addi	sp,sp,-8
   11f3c:	dfc00115 	stw	ra,4(sp)
   11f40:	df000015 	stw	fp,0(sp)
   11f44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11f48:	00800074 	movhi	r2,1
   11f4c:	1093d504 	addi	r2,r2,20308
   11f50:	10800017 	ldw	r2,0(r2)
   11f54:	10000526 	beq	r2,zero,11f6c <alt_get_errno+0x34>
   11f58:	00800074 	movhi	r2,1
   11f5c:	1093d504 	addi	r2,r2,20308
   11f60:	10800017 	ldw	r2,0(r2)
   11f64:	103ee83a 	callr	r2
   11f68:	00000206 	br	11f74 <alt_get_errno+0x3c>
   11f6c:	00800074 	movhi	r2,1
   11f70:	109a9c04 	addi	r2,r2,27248
}
   11f74:	e037883a 	mov	sp,fp
   11f78:	dfc00117 	ldw	ra,4(sp)
   11f7c:	df000017 	ldw	fp,0(sp)
   11f80:	dec00204 	addi	sp,sp,8
   11f84:	f800283a 	ret

00011f88 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   11f88:	defffd04 	addi	sp,sp,-12
   11f8c:	df000215 	stw	fp,8(sp)
   11f90:	df000204 	addi	fp,sp,8
   11f94:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11f98:	e0bfff17 	ldw	r2,-4(fp)
   11f9c:	10800217 	ldw	r2,8(r2)
   11fa0:	10d00034 	orhi	r3,r2,16384
   11fa4:	e0bfff17 	ldw	r2,-4(fp)
   11fa8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11fac:	e03ffe15 	stw	zero,-8(fp)
   11fb0:	00001d06 	br	12028 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11fb4:	00800074 	movhi	r2,1
   11fb8:	108f5204 	addi	r2,r2,15688
   11fbc:	e0fffe17 	ldw	r3,-8(fp)
   11fc0:	18c00324 	muli	r3,r3,12
   11fc4:	10c5883a 	add	r2,r2,r3
   11fc8:	10c00017 	ldw	r3,0(r2)
   11fcc:	e0bfff17 	ldw	r2,-4(fp)
   11fd0:	10800017 	ldw	r2,0(r2)
   11fd4:	1880111e 	bne	r3,r2,1201c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11fd8:	00800074 	movhi	r2,1
   11fdc:	108f5204 	addi	r2,r2,15688
   11fe0:	e0fffe17 	ldw	r3,-8(fp)
   11fe4:	18c00324 	muli	r3,r3,12
   11fe8:	10c5883a 	add	r2,r2,r3
   11fec:	10800204 	addi	r2,r2,8
   11ff0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11ff4:	1000090e 	bge	r2,zero,1201c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   11ff8:	e0bffe17 	ldw	r2,-8(fp)
   11ffc:	10c00324 	muli	r3,r2,12
   12000:	00800074 	movhi	r2,1
   12004:	108f5204 	addi	r2,r2,15688
   12008:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1200c:	e0bfff17 	ldw	r2,-4(fp)
   12010:	18800226 	beq	r3,r2,1201c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   12014:	00bffcc4 	movi	r2,-13
   12018:	00000a06 	br	12044 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1201c:	e0bffe17 	ldw	r2,-8(fp)
   12020:	10800044 	addi	r2,r2,1
   12024:	e0bffe15 	stw	r2,-8(fp)
   12028:	00800074 	movhi	r2,1
   1202c:	1093d404 	addi	r2,r2,20304
   12030:	10800017 	ldw	r2,0(r2)
   12034:	1007883a 	mov	r3,r2
   12038:	e0bffe17 	ldw	r2,-8(fp)
   1203c:	18bfdd2e 	bgeu	r3,r2,11fb4 <__alt_mem_sram+0xf7e11fb4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   12040:	0005883a 	mov	r2,zero
}
   12044:	e037883a 	mov	sp,fp
   12048:	df000017 	ldw	fp,0(sp)
   1204c:	dec00104 	addi	sp,sp,4
   12050:	f800283a 	ret

00012054 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   12054:	defff604 	addi	sp,sp,-40
   12058:	dfc00915 	stw	ra,36(sp)
   1205c:	df000815 	stw	fp,32(sp)
   12060:	df000804 	addi	fp,sp,32
   12064:	e13ffd15 	stw	r4,-12(fp)
   12068:	e17ffe15 	stw	r5,-8(fp)
   1206c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   12070:	00bfffc4 	movi	r2,-1
   12074:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   12078:	00bffb44 	movi	r2,-19
   1207c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   12080:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   12084:	e13ffd17 	ldw	r4,-12(fp)
   12088:	01400074 	movhi	r5,1
   1208c:	2953d204 	addi	r5,r5,20296
   12090:	00123680 	call	12368 <alt_find_dev>
   12094:	e0bff815 	stw	r2,-32(fp)
   12098:	e0bff817 	ldw	r2,-32(fp)
   1209c:	1000051e 	bne	r2,zero,120b4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   120a0:	e13ffd17 	ldw	r4,-12(fp)
   120a4:	00123f80 	call	123f8 <alt_find_file>
   120a8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   120ac:	00800044 	movi	r2,1
   120b0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   120b4:	e0bff817 	ldw	r2,-32(fp)
   120b8:	10002926 	beq	r2,zero,12160 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   120bc:	e13ff817 	ldw	r4,-32(fp)
   120c0:	001250c0 	call	1250c <alt_get_fd>
   120c4:	e0bff915 	stw	r2,-28(fp)
   120c8:	e0bff917 	ldw	r2,-28(fp)
   120cc:	1000030e 	bge	r2,zero,120dc <open+0x88>
    {
      status = index;
   120d0:	e0bff917 	ldw	r2,-28(fp)
   120d4:	e0bffa15 	stw	r2,-24(fp)
   120d8:	00002306 	br	12168 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   120dc:	e0bff917 	ldw	r2,-28(fp)
   120e0:	10c00324 	muli	r3,r2,12
   120e4:	00800074 	movhi	r2,1
   120e8:	108f5204 	addi	r2,r2,15688
   120ec:	1885883a 	add	r2,r3,r2
   120f0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   120f4:	e0fffe17 	ldw	r3,-8(fp)
   120f8:	00900034 	movhi	r2,16384
   120fc:	10bfffc4 	addi	r2,r2,-1
   12100:	1886703a 	and	r3,r3,r2
   12104:	e0bffc17 	ldw	r2,-16(fp)
   12108:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1210c:	e0bffb17 	ldw	r2,-20(fp)
   12110:	1000051e 	bne	r2,zero,12128 <open+0xd4>
   12114:	e13ffc17 	ldw	r4,-16(fp)
   12118:	0011f880 	call	11f88 <alt_file_locked>
   1211c:	e0bffa15 	stw	r2,-24(fp)
   12120:	e0bffa17 	ldw	r2,-24(fp)
   12124:	10001016 	blt	r2,zero,12168 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   12128:	e0bff817 	ldw	r2,-32(fp)
   1212c:	10800317 	ldw	r2,12(r2)
   12130:	10000826 	beq	r2,zero,12154 <open+0x100>
   12134:	e0bff817 	ldw	r2,-32(fp)
   12138:	10800317 	ldw	r2,12(r2)
   1213c:	e13ffc17 	ldw	r4,-16(fp)
   12140:	e17ffd17 	ldw	r5,-12(fp)
   12144:	e1bffe17 	ldw	r6,-8(fp)
   12148:	e1ffff17 	ldw	r7,-4(fp)
   1214c:	103ee83a 	callr	r2
   12150:	00000106 	br	12158 <open+0x104>
   12154:	0005883a 	mov	r2,zero
   12158:	e0bffa15 	stw	r2,-24(fp)
   1215c:	00000206 	br	12168 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   12160:	00bffb44 	movi	r2,-19
   12164:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   12168:	e0bffa17 	ldw	r2,-24(fp)
   1216c:	1000090e 	bge	r2,zero,12194 <open+0x140>
  {
    alt_release_fd (index);  
   12170:	e13ff917 	ldw	r4,-28(fp)
   12174:	00107dc0 	call	107dc <alt_release_fd>
    ALT_ERRNO = -status;
   12178:	0011f380 	call	11f38 <alt_get_errno>
   1217c:	1007883a 	mov	r3,r2
   12180:	e0bffa17 	ldw	r2,-24(fp)
   12184:	0085c83a 	sub	r2,zero,r2
   12188:	18800015 	stw	r2,0(r3)
    return -1;
   1218c:	00bfffc4 	movi	r2,-1
   12190:	00000106 	br	12198 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   12194:	e0bff917 	ldw	r2,-28(fp)
}
   12198:	e037883a 	mov	sp,fp
   1219c:	dfc00117 	ldw	ra,4(sp)
   121a0:	df000017 	ldw	fp,0(sp)
   121a4:	dec00204 	addi	sp,sp,8
   121a8:	f800283a 	ret

000121ac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   121ac:	defffa04 	addi	sp,sp,-24
   121b0:	df000515 	stw	fp,20(sp)
   121b4:	df000504 	addi	fp,sp,20
   121b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   121bc:	0005303a 	rdctl	r2,status
   121c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   121c4:	e0fffc17 	ldw	r3,-16(fp)
   121c8:	00bfff84 	movi	r2,-2
   121cc:	1884703a 	and	r2,r3,r2
   121d0:	1001703a 	wrctl	status,r2
  
  return context;
   121d4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   121d8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   121dc:	e0bfff17 	ldw	r2,-4(fp)
   121e0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   121e4:	e0bffd17 	ldw	r2,-12(fp)
   121e8:	10800017 	ldw	r2,0(r2)
   121ec:	e0fffd17 	ldw	r3,-12(fp)
   121f0:	18c00117 	ldw	r3,4(r3)
   121f4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   121f8:	e0bffd17 	ldw	r2,-12(fp)
   121fc:	10800117 	ldw	r2,4(r2)
   12200:	e0fffd17 	ldw	r3,-12(fp)
   12204:	18c00017 	ldw	r3,0(r3)
   12208:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1220c:	e0bffd17 	ldw	r2,-12(fp)
   12210:	e0fffd17 	ldw	r3,-12(fp)
   12214:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   12218:	e0bffd17 	ldw	r2,-12(fp)
   1221c:	e0fffd17 	ldw	r3,-12(fp)
   12220:	10c00015 	stw	r3,0(r2)
   12224:	e0bffb17 	ldw	r2,-20(fp)
   12228:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1222c:	e0bffe17 	ldw	r2,-8(fp)
   12230:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   12234:	e037883a 	mov	sp,fp
   12238:	df000017 	ldw	fp,0(sp)
   1223c:	dec00104 	addi	sp,sp,4
   12240:	f800283a 	ret

00012244 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   12244:	defffb04 	addi	sp,sp,-20
   12248:	dfc00415 	stw	ra,16(sp)
   1224c:	df000315 	stw	fp,12(sp)
   12250:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   12254:	d0a00e17 	ldw	r2,-32712(gp)
   12258:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1225c:	d0a6d817 	ldw	r2,-25760(gp)
   12260:	10800044 	addi	r2,r2,1
   12264:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12268:	00002e06 	br	12324 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1226c:	e0bffd17 	ldw	r2,-12(fp)
   12270:	10800017 	ldw	r2,0(r2)
   12274:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   12278:	e0bffd17 	ldw	r2,-12(fp)
   1227c:	10800403 	ldbu	r2,16(r2)
   12280:	10803fcc 	andi	r2,r2,255
   12284:	10000426 	beq	r2,zero,12298 <alt_tick+0x54>
   12288:	d0a6d817 	ldw	r2,-25760(gp)
   1228c:	1000021e 	bne	r2,zero,12298 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   12290:	e0bffd17 	ldw	r2,-12(fp)
   12294:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   12298:	e0bffd17 	ldw	r2,-12(fp)
   1229c:	10800217 	ldw	r2,8(r2)
   122a0:	d0e6d817 	ldw	r3,-25760(gp)
   122a4:	18801d36 	bltu	r3,r2,1231c <alt_tick+0xd8>
   122a8:	e0bffd17 	ldw	r2,-12(fp)
   122ac:	10800403 	ldbu	r2,16(r2)
   122b0:	10803fcc 	andi	r2,r2,255
   122b4:	1000191e 	bne	r2,zero,1231c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   122b8:	e0bffd17 	ldw	r2,-12(fp)
   122bc:	10800317 	ldw	r2,12(r2)
   122c0:	e0fffd17 	ldw	r3,-12(fp)
   122c4:	18c00517 	ldw	r3,20(r3)
   122c8:	1809883a 	mov	r4,r3
   122cc:	103ee83a 	callr	r2
   122d0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   122d4:	e0bfff17 	ldw	r2,-4(fp)
   122d8:	1000031e 	bne	r2,zero,122e8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   122dc:	e13ffd17 	ldw	r4,-12(fp)
   122e0:	00121ac0 	call	121ac <alt_alarm_stop>
   122e4:	00000d06 	br	1231c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   122e8:	e0bffd17 	ldw	r2,-12(fp)
   122ec:	10c00217 	ldw	r3,8(r2)
   122f0:	e0bfff17 	ldw	r2,-4(fp)
   122f4:	1887883a 	add	r3,r3,r2
   122f8:	e0bffd17 	ldw	r2,-12(fp)
   122fc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   12300:	e0bffd17 	ldw	r2,-12(fp)
   12304:	10c00217 	ldw	r3,8(r2)
   12308:	d0a6d817 	ldw	r2,-25760(gp)
   1230c:	1880032e 	bgeu	r3,r2,1231c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   12310:	e0bffd17 	ldw	r2,-12(fp)
   12314:	00c00044 	movi	r3,1
   12318:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1231c:	e0bffe17 	ldw	r2,-8(fp)
   12320:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12324:	e0fffd17 	ldw	r3,-12(fp)
   12328:	d0a00e04 	addi	r2,gp,-32712
   1232c:	18bfcf1e 	bne	r3,r2,1226c <__alt_mem_sram+0xf7e1226c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   12330:	0001883a 	nop
}
   12334:	e037883a 	mov	sp,fp
   12338:	dfc00117 	ldw	ra,4(sp)
   1233c:	df000017 	ldw	fp,0(sp)
   12340:	dec00204 	addi	sp,sp,8
   12344:	f800283a 	ret

00012348 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   12348:	deffff04 	addi	sp,sp,-4
   1234c:	df000015 	stw	fp,0(sp)
   12350:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   12354:	000170fa 	wrctl	ienable,zero
}
   12358:	e037883a 	mov	sp,fp
   1235c:	df000017 	ldw	fp,0(sp)
   12360:	dec00104 	addi	sp,sp,4
   12364:	f800283a 	ret

00012368 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   12368:	defffa04 	addi	sp,sp,-24
   1236c:	dfc00515 	stw	ra,20(sp)
   12370:	df000415 	stw	fp,16(sp)
   12374:	df000404 	addi	fp,sp,16
   12378:	e13ffe15 	stw	r4,-8(fp)
   1237c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   12380:	e0bfff17 	ldw	r2,-4(fp)
   12384:	10800017 	ldw	r2,0(r2)
   12388:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1238c:	e13ffe17 	ldw	r4,-8(fp)
   12390:	0003e640 	call	3e64 <strlen>
   12394:	10800044 	addi	r2,r2,1
   12398:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1239c:	00000d06 	br	123d4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   123a0:	e0bffc17 	ldw	r2,-16(fp)
   123a4:	10c00217 	ldw	r3,8(r2)
   123a8:	e0bffd17 	ldw	r2,-12(fp)
   123ac:	1809883a 	mov	r4,r3
   123b0:	e17ffe17 	ldw	r5,-8(fp)
   123b4:	100d883a 	mov	r6,r2
   123b8:	00126980 	call	12698 <memcmp>
   123bc:	1000021e 	bne	r2,zero,123c8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   123c0:	e0bffc17 	ldw	r2,-16(fp)
   123c4:	00000706 	br	123e4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   123c8:	e0bffc17 	ldw	r2,-16(fp)
   123cc:	10800017 	ldw	r2,0(r2)
   123d0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   123d4:	e0fffc17 	ldw	r3,-16(fp)
   123d8:	e0bfff17 	ldw	r2,-4(fp)
   123dc:	18bff01e 	bne	r3,r2,123a0 <__alt_mem_sram+0xf7e123a0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   123e0:	0005883a 	mov	r2,zero
}
   123e4:	e037883a 	mov	sp,fp
   123e8:	dfc00117 	ldw	ra,4(sp)
   123ec:	df000017 	ldw	fp,0(sp)
   123f0:	dec00204 	addi	sp,sp,8
   123f4:	f800283a 	ret

000123f8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   123f8:	defffb04 	addi	sp,sp,-20
   123fc:	dfc00415 	stw	ra,16(sp)
   12400:	df000315 	stw	fp,12(sp)
   12404:	df000304 	addi	fp,sp,12
   12408:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1240c:	00800074 	movhi	r2,1
   12410:	1093d004 	addi	r2,r2,20288
   12414:	10800017 	ldw	r2,0(r2)
   12418:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1241c:	00003106 	br	124e4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   12420:	e0bffd17 	ldw	r2,-12(fp)
   12424:	10800217 	ldw	r2,8(r2)
   12428:	1009883a 	mov	r4,r2
   1242c:	0003e640 	call	3e64 <strlen>
   12430:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   12434:	e0bffd17 	ldw	r2,-12(fp)
   12438:	10c00217 	ldw	r3,8(r2)
   1243c:	e0bffe17 	ldw	r2,-8(fp)
   12440:	10bfffc4 	addi	r2,r2,-1
   12444:	1885883a 	add	r2,r3,r2
   12448:	10800003 	ldbu	r2,0(r2)
   1244c:	10803fcc 	andi	r2,r2,255
   12450:	1080201c 	xori	r2,r2,128
   12454:	10bfe004 	addi	r2,r2,-128
   12458:	10800bd8 	cmpnei	r2,r2,47
   1245c:	1000031e 	bne	r2,zero,1246c <alt_find_file+0x74>
    {
      len -= 1;
   12460:	e0bffe17 	ldw	r2,-8(fp)
   12464:	10bfffc4 	addi	r2,r2,-1
   12468:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1246c:	e0bffe17 	ldw	r2,-8(fp)
   12470:	e0ffff17 	ldw	r3,-4(fp)
   12474:	1885883a 	add	r2,r3,r2
   12478:	10800003 	ldbu	r2,0(r2)
   1247c:	10803fcc 	andi	r2,r2,255
   12480:	1080201c 	xori	r2,r2,128
   12484:	10bfe004 	addi	r2,r2,-128
   12488:	10800be0 	cmpeqi	r2,r2,47
   1248c:	1000081e 	bne	r2,zero,124b0 <alt_find_file+0xb8>
   12490:	e0bffe17 	ldw	r2,-8(fp)
   12494:	e0ffff17 	ldw	r3,-4(fp)
   12498:	1885883a 	add	r2,r3,r2
   1249c:	10800003 	ldbu	r2,0(r2)
   124a0:	10803fcc 	andi	r2,r2,255
   124a4:	1080201c 	xori	r2,r2,128
   124a8:	10bfe004 	addi	r2,r2,-128
   124ac:	10000a1e 	bne	r2,zero,124d8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   124b0:	e0bffd17 	ldw	r2,-12(fp)
   124b4:	10c00217 	ldw	r3,8(r2)
   124b8:	e0bffe17 	ldw	r2,-8(fp)
   124bc:	1809883a 	mov	r4,r3
   124c0:	e17fff17 	ldw	r5,-4(fp)
   124c4:	100d883a 	mov	r6,r2
   124c8:	00126980 	call	12698 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   124cc:	1000021e 	bne	r2,zero,124d8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   124d0:	e0bffd17 	ldw	r2,-12(fp)
   124d4:	00000806 	br	124f8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   124d8:	e0bffd17 	ldw	r2,-12(fp)
   124dc:	10800017 	ldw	r2,0(r2)
   124e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   124e4:	e0fffd17 	ldw	r3,-12(fp)
   124e8:	00800074 	movhi	r2,1
   124ec:	1093d004 	addi	r2,r2,20288
   124f0:	18bfcb1e 	bne	r3,r2,12420 <__alt_mem_sram+0xf7e12420>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   124f4:	0005883a 	mov	r2,zero
}
   124f8:	e037883a 	mov	sp,fp
   124fc:	dfc00117 	ldw	ra,4(sp)
   12500:	df000017 	ldw	fp,0(sp)
   12504:	dec00204 	addi	sp,sp,8
   12508:	f800283a 	ret

0001250c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1250c:	defffc04 	addi	sp,sp,-16
   12510:	df000315 	stw	fp,12(sp)
   12514:	df000304 	addi	fp,sp,12
   12518:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1251c:	00bffa04 	movi	r2,-24
   12520:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12524:	e03ffd15 	stw	zero,-12(fp)
   12528:	00001d06 	br	125a0 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   1252c:	00800074 	movhi	r2,1
   12530:	108f5204 	addi	r2,r2,15688
   12534:	e0fffd17 	ldw	r3,-12(fp)
   12538:	18c00324 	muli	r3,r3,12
   1253c:	10c5883a 	add	r2,r2,r3
   12540:	10800017 	ldw	r2,0(r2)
   12544:	1000131e 	bne	r2,zero,12594 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   12548:	00800074 	movhi	r2,1
   1254c:	108f5204 	addi	r2,r2,15688
   12550:	e0fffd17 	ldw	r3,-12(fp)
   12554:	18c00324 	muli	r3,r3,12
   12558:	10c5883a 	add	r2,r2,r3
   1255c:	e0ffff17 	ldw	r3,-4(fp)
   12560:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   12564:	00800074 	movhi	r2,1
   12568:	1093d404 	addi	r2,r2,20304
   1256c:	10c00017 	ldw	r3,0(r2)
   12570:	e0bffd17 	ldw	r2,-12(fp)
   12574:	1880040e 	bge	r3,r2,12588 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   12578:	00800074 	movhi	r2,1
   1257c:	1093d404 	addi	r2,r2,20304
   12580:	e0fffd17 	ldw	r3,-12(fp)
   12584:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   12588:	e0bffd17 	ldw	r2,-12(fp)
   1258c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   12590:	00000606 	br	125ac <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12594:	e0bffd17 	ldw	r2,-12(fp)
   12598:	10800044 	addi	r2,r2,1
   1259c:	e0bffd15 	stw	r2,-12(fp)
   125a0:	e0bffd17 	ldw	r2,-12(fp)
   125a4:	10800810 	cmplti	r2,r2,32
   125a8:	103fe01e 	bne	r2,zero,1252c <__alt_mem_sram+0xf7e1252c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   125ac:	e0bffe17 	ldw	r2,-8(fp)
}
   125b0:	e037883a 	mov	sp,fp
   125b4:	df000017 	ldw	fp,0(sp)
   125b8:	dec00104 	addi	sp,sp,4
   125bc:	f800283a 	ret

000125c0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   125c0:	defffb04 	addi	sp,sp,-20
   125c4:	df000415 	stw	fp,16(sp)
   125c8:	df000404 	addi	fp,sp,16
   125cc:	e13ffe15 	stw	r4,-8(fp)
   125d0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   125d4:	e0bfff17 	ldw	r2,-4(fp)
   125d8:	10840070 	cmpltui	r2,r2,4097
   125dc:	1000021e 	bne	r2,zero,125e8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   125e0:	00840004 	movi	r2,4096
   125e4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   125e8:	e0fffe17 	ldw	r3,-8(fp)
   125ec:	e0bfff17 	ldw	r2,-4(fp)
   125f0:	1885883a 	add	r2,r3,r2
   125f4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   125f8:	e0bffe17 	ldw	r2,-8(fp)
   125fc:	e0bffc15 	stw	r2,-16(fp)
   12600:	00000506 	br	12618 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   12604:	e0bffc17 	ldw	r2,-16(fp)
   12608:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1260c:	e0bffc17 	ldw	r2,-16(fp)
   12610:	10800804 	addi	r2,r2,32
   12614:	e0bffc15 	stw	r2,-16(fp)
   12618:	e0fffc17 	ldw	r3,-16(fp)
   1261c:	e0bffd17 	ldw	r2,-12(fp)
   12620:	18bff836 	bltu	r3,r2,12604 <__alt_mem_sram+0xf7e12604>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   12624:	e0bffe17 	ldw	r2,-8(fp)
   12628:	108007cc 	andi	r2,r2,31
   1262c:	10000226 	beq	r2,zero,12638 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   12630:	e0bffc17 	ldw	r2,-16(fp)
   12634:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   12638:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1263c:	e037883a 	mov	sp,fp
   12640:	df000017 	ldw	fp,0(sp)
   12644:	dec00104 	addi	sp,sp,4
   12648:	f800283a 	ret

0001264c <atexit>:
   1264c:	200b883a 	mov	r5,r4
   12650:	000d883a 	mov	r6,zero
   12654:	0009883a 	mov	r4,zero
   12658:	000f883a 	mov	r7,zero
   1265c:	00127141 	jmpi	12714 <__register_exitproc>

00012660 <exit>:
   12660:	defffe04 	addi	sp,sp,-8
   12664:	000b883a 	mov	r5,zero
   12668:	dc000015 	stw	r16,0(sp)
   1266c:	dfc00115 	stw	ra,4(sp)
   12670:	2021883a 	mov	r16,r4
   12674:	00128280 	call	12828 <__call_exitprocs>
   12678:	00800074 	movhi	r2,1
   1267c:	1093ca04 	addi	r2,r2,20264
   12680:	11000017 	ldw	r4,0(r2)
   12684:	20800f17 	ldw	r2,60(r4)
   12688:	10000126 	beq	r2,zero,12690 <exit+0x30>
   1268c:	103ee83a 	callr	r2
   12690:	8009883a 	mov	r4,r16
   12694:	00129bc0 	call	129bc <_exit>

00012698 <memcmp>:
   12698:	01c000c4 	movi	r7,3
   1269c:	3980192e 	bgeu	r7,r6,12704 <memcmp+0x6c>
   126a0:	2144b03a 	or	r2,r4,r5
   126a4:	11c4703a 	and	r2,r2,r7
   126a8:	10000f26 	beq	r2,zero,126e8 <memcmp+0x50>
   126ac:	20800003 	ldbu	r2,0(r4)
   126b0:	28c00003 	ldbu	r3,0(r5)
   126b4:	10c0151e 	bne	r2,r3,1270c <memcmp+0x74>
   126b8:	31bfff84 	addi	r6,r6,-2
   126bc:	01ffffc4 	movi	r7,-1
   126c0:	00000406 	br	126d4 <memcmp+0x3c>
   126c4:	20800003 	ldbu	r2,0(r4)
   126c8:	28c00003 	ldbu	r3,0(r5)
   126cc:	31bfffc4 	addi	r6,r6,-1
   126d0:	10c00e1e 	bne	r2,r3,1270c <memcmp+0x74>
   126d4:	21000044 	addi	r4,r4,1
   126d8:	29400044 	addi	r5,r5,1
   126dc:	31fff91e 	bne	r6,r7,126c4 <__alt_mem_sram+0xf7e126c4>
   126e0:	0005883a 	mov	r2,zero
   126e4:	f800283a 	ret
   126e8:	20c00017 	ldw	r3,0(r4)
   126ec:	28800017 	ldw	r2,0(r5)
   126f0:	1880041e 	bne	r3,r2,12704 <memcmp+0x6c>
   126f4:	31bfff04 	addi	r6,r6,-4
   126f8:	21000104 	addi	r4,r4,4
   126fc:	29400104 	addi	r5,r5,4
   12700:	39bff936 	bltu	r7,r6,126e8 <__alt_mem_sram+0xf7e126e8>
   12704:	303fe91e 	bne	r6,zero,126ac <__alt_mem_sram+0xf7e126ac>
   12708:	003ff506 	br	126e0 <__alt_mem_sram+0xf7e126e0>
   1270c:	10c5c83a 	sub	r2,r2,r3
   12710:	f800283a 	ret

00012714 <__register_exitproc>:
   12714:	00800074 	movhi	r2,1
   12718:	defffa04 	addi	sp,sp,-24
   1271c:	1093ca04 	addi	r2,r2,20264
   12720:	dc000315 	stw	r16,12(sp)
   12724:	14000017 	ldw	r16,0(r2)
   12728:	dc400415 	stw	r17,16(sp)
   1272c:	dfc00515 	stw	ra,20(sp)
   12730:	80805217 	ldw	r2,328(r16)
   12734:	2023883a 	mov	r17,r4
   12738:	10003626 	beq	r2,zero,12814 <__register_exitproc+0x100>
   1273c:	10c00117 	ldw	r3,4(r2)
   12740:	010007c4 	movi	r4,31
   12744:	20c00e16 	blt	r4,r3,12780 <__register_exitproc+0x6c>
   12748:	1a400044 	addi	r9,r3,1
   1274c:	8800211e 	bne	r17,zero,127d4 <__register_exitproc+0xc0>
   12750:	18c00084 	addi	r3,r3,2
   12754:	18c7883a 	add	r3,r3,r3
   12758:	18c7883a 	add	r3,r3,r3
   1275c:	12400115 	stw	r9,4(r2)
   12760:	10c7883a 	add	r3,r2,r3
   12764:	19400015 	stw	r5,0(r3)
   12768:	0005883a 	mov	r2,zero
   1276c:	dfc00517 	ldw	ra,20(sp)
   12770:	dc400417 	ldw	r17,16(sp)
   12774:	dc000317 	ldw	r16,12(sp)
   12778:	dec00604 	addi	sp,sp,24
   1277c:	f800283a 	ret
   12780:	00800034 	movhi	r2,0
   12784:	10800004 	addi	r2,r2,0
   12788:	10002526 	beq	r2,zero,12820 <__register_exitproc+0x10c>
   1278c:	01006404 	movi	r4,400
   12790:	d9400015 	stw	r5,0(sp)
   12794:	d9800115 	stw	r6,4(sp)
   12798:	d9c00215 	stw	r7,8(sp)
   1279c:	00000000 	call	0 <__reset>
   127a0:	d9400017 	ldw	r5,0(sp)
   127a4:	d9800117 	ldw	r6,4(sp)
   127a8:	d9c00217 	ldw	r7,8(sp)
   127ac:	10001c26 	beq	r2,zero,12820 <__register_exitproc+0x10c>
   127b0:	80c05217 	ldw	r3,328(r16)
   127b4:	10000115 	stw	zero,4(r2)
   127b8:	02400044 	movi	r9,1
   127bc:	10c00015 	stw	r3,0(r2)
   127c0:	80805215 	stw	r2,328(r16)
   127c4:	10006215 	stw	zero,392(r2)
   127c8:	10006315 	stw	zero,396(r2)
   127cc:	0007883a 	mov	r3,zero
   127d0:	883fdf26 	beq	r17,zero,12750 <__alt_mem_sram+0xf7e12750>
   127d4:	18d1883a 	add	r8,r3,r3
   127d8:	4211883a 	add	r8,r8,r8
   127dc:	1211883a 	add	r8,r2,r8
   127e0:	41802215 	stw	r6,136(r8)
   127e4:	01000044 	movi	r4,1
   127e8:	11806217 	ldw	r6,392(r2)
   127ec:	20c8983a 	sll	r4,r4,r3
   127f0:	310cb03a 	or	r6,r6,r4
   127f4:	11806215 	stw	r6,392(r2)
   127f8:	41c04215 	stw	r7,264(r8)
   127fc:	01800084 	movi	r6,2
   12800:	89bfd31e 	bne	r17,r6,12750 <__alt_mem_sram+0xf7e12750>
   12804:	11806317 	ldw	r6,396(r2)
   12808:	3108b03a 	or	r4,r6,r4
   1280c:	11006315 	stw	r4,396(r2)
   12810:	003fcf06 	br	12750 <__alt_mem_sram+0xf7e12750>
   12814:	80805304 	addi	r2,r16,332
   12818:	80805215 	stw	r2,328(r16)
   1281c:	003fc706 	br	1273c <__alt_mem_sram+0xf7e1273c>
   12820:	00bfffc4 	movi	r2,-1
   12824:	003fd106 	br	1276c <__alt_mem_sram+0xf7e1276c>

00012828 <__call_exitprocs>:
   12828:	00800074 	movhi	r2,1
   1282c:	1093ca04 	addi	r2,r2,20264
   12830:	10800017 	ldw	r2,0(r2)
   12834:	defff404 	addi	sp,sp,-48
   12838:	dd800815 	stw	r22,32(sp)
   1283c:	d8800015 	stw	r2,0(sp)
   12840:	10805204 	addi	r2,r2,328
   12844:	dd000615 	stw	r20,24(sp)
   12848:	dc800415 	stw	r18,16(sp)
   1284c:	dfc00b15 	stw	ra,44(sp)
   12850:	df000a15 	stw	fp,40(sp)
   12854:	ddc00915 	stw	r23,36(sp)
   12858:	dd400715 	stw	r21,28(sp)
   1285c:	dcc00515 	stw	r19,20(sp)
   12860:	dc400315 	stw	r17,12(sp)
   12864:	dc000215 	stw	r16,8(sp)
   12868:	2025883a 	mov	r18,r4
   1286c:	2829883a 	mov	r20,r5
   12870:	d8800115 	stw	r2,4(sp)
   12874:	05bfffc4 	movi	r22,-1
   12878:	d8800017 	ldw	r2,0(sp)
   1287c:	14c05217 	ldw	r19,328(r2)
   12880:	98001d26 	beq	r19,zero,128f8 <__call_exitprocs+0xd0>
   12884:	dd400117 	ldw	r21,4(sp)
   12888:	98800117 	ldw	r2,4(r19)
   1288c:	173fffc4 	addi	fp,r2,-1
   12890:	e0000d16 	blt	fp,zero,128c8 <__call_exitprocs+0xa0>
   12894:	14000044 	addi	r16,r2,1
   12898:	8421883a 	add	r16,r16,r16
   1289c:	8421883a 	add	r16,r16,r16
   128a0:	84402004 	addi	r17,r16,128
   128a4:	9c63883a 	add	r17,r19,r17
   128a8:	9c21883a 	add	r16,r19,r16
   128ac:	a0001e26 	beq	r20,zero,12928 <__call_exitprocs+0x100>
   128b0:	80804017 	ldw	r2,256(r16)
   128b4:	15001c26 	beq	r2,r20,12928 <__call_exitprocs+0x100>
   128b8:	e73fffc4 	addi	fp,fp,-1
   128bc:	843fff04 	addi	r16,r16,-4
   128c0:	8c7fff04 	addi	r17,r17,-4
   128c4:	e5bff91e 	bne	fp,r22,128ac <__alt_mem_sram+0xf7e128ac>
   128c8:	00800034 	movhi	r2,0
   128cc:	10800004 	addi	r2,r2,0
   128d0:	10000926 	beq	r2,zero,128f8 <__call_exitprocs+0xd0>
   128d4:	98800117 	ldw	r2,4(r19)
   128d8:	1000311e 	bne	r2,zero,129a0 <__call_exitprocs+0x178>
   128dc:	98800017 	ldw	r2,0(r19)
   128e0:	10003426 	beq	r2,zero,129b4 <__call_exitprocs+0x18c>
   128e4:	9809883a 	mov	r4,r19
   128e8:	a8800015 	stw	r2,0(r21)
   128ec:	00000000 	call	0 <__reset>
   128f0:	acc00017 	ldw	r19,0(r21)
   128f4:	983fe41e 	bne	r19,zero,12888 <__alt_mem_sram+0xf7e12888>
   128f8:	dfc00b17 	ldw	ra,44(sp)
   128fc:	df000a17 	ldw	fp,40(sp)
   12900:	ddc00917 	ldw	r23,36(sp)
   12904:	dd800817 	ldw	r22,32(sp)
   12908:	dd400717 	ldw	r21,28(sp)
   1290c:	dd000617 	ldw	r20,24(sp)
   12910:	dcc00517 	ldw	r19,20(sp)
   12914:	dc800417 	ldw	r18,16(sp)
   12918:	dc400317 	ldw	r17,12(sp)
   1291c:	dc000217 	ldw	r16,8(sp)
   12920:	dec00c04 	addi	sp,sp,48
   12924:	f800283a 	ret
   12928:	98800117 	ldw	r2,4(r19)
   1292c:	80c00017 	ldw	r3,0(r16)
   12930:	10bfffc4 	addi	r2,r2,-1
   12934:	17001526 	beq	r2,fp,1298c <__call_exitprocs+0x164>
   12938:	80000015 	stw	zero,0(r16)
   1293c:	183fde26 	beq	r3,zero,128b8 <__alt_mem_sram+0xf7e128b8>
   12940:	00800044 	movi	r2,1
   12944:	1708983a 	sll	r4,r2,fp
   12948:	98806217 	ldw	r2,392(r19)
   1294c:	9dc00117 	ldw	r23,4(r19)
   12950:	2084703a 	and	r2,r4,r2
   12954:	1000061e 	bne	r2,zero,12970 <__call_exitprocs+0x148>
   12958:	183ee83a 	callr	r3
   1295c:	98800117 	ldw	r2,4(r19)
   12960:	15ffc51e 	bne	r2,r23,12878 <__alt_mem_sram+0xf7e12878>
   12964:	a8800017 	ldw	r2,0(r21)
   12968:	14ffd326 	beq	r2,r19,128b8 <__alt_mem_sram+0xf7e128b8>
   1296c:	003fc206 	br	12878 <__alt_mem_sram+0xf7e12878>
   12970:	98806317 	ldw	r2,396(r19)
   12974:	2084703a 	and	r2,r4,r2
   12978:	1000061e 	bne	r2,zero,12994 <__call_exitprocs+0x16c>
   1297c:	89400017 	ldw	r5,0(r17)
   12980:	9009883a 	mov	r4,r18
   12984:	183ee83a 	callr	r3
   12988:	003ff406 	br	1295c <__alt_mem_sram+0xf7e1295c>
   1298c:	9f000115 	stw	fp,4(r19)
   12990:	003fea06 	br	1293c <__alt_mem_sram+0xf7e1293c>
   12994:	89000017 	ldw	r4,0(r17)
   12998:	183ee83a 	callr	r3
   1299c:	003fef06 	br	1295c <__alt_mem_sram+0xf7e1295c>
   129a0:	98800017 	ldw	r2,0(r19)
   129a4:	982b883a 	mov	r21,r19
   129a8:	1027883a 	mov	r19,r2
   129ac:	983fb61e 	bne	r19,zero,12888 <__alt_mem_sram+0xf7e12888>
   129b0:	003fd106 	br	128f8 <__alt_mem_sram+0xf7e128f8>
   129b4:	0005883a 	mov	r2,zero
   129b8:	003ffa06 	br	129a4 <__alt_mem_sram+0xf7e129a4>

000129bc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   129bc:	defffd04 	addi	sp,sp,-12
   129c0:	df000215 	stw	fp,8(sp)
   129c4:	df000204 	addi	fp,sp,8
   129c8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   129cc:	0001883a 	nop
   129d0:	e0bfff17 	ldw	r2,-4(fp)
   129d4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   129d8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   129dc:	10000226 	beq	r2,zero,129e8 <_exit+0x2c>
    ALT_SIM_FAIL();
   129e0:	002af070 	cmpltui	zero,zero,43969
   129e4:	00000106 	br	129ec <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   129e8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   129ec:	003fff06 	br	129ec <__alt_mem_sram+0xf7e129ec>
